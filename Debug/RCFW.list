
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009644  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a2c  08009828  08009828  00019828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a254  0800a254  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800a254  0800a254  0001a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a25c  0800a25c  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a25c  0800a25c  0001a25c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800a264  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000274  0800a4d8  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  0800a4d8  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014be7  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316a  00000000  00000000  00034e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00037ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00039020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c862  00000000  00000000  00039ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013878  00000000  00000000  0005675a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a14fa  00000000  00000000  00069fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010b4cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005740  00000000  00000000  0010b520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00110c60  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  00110c84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000274 	.word	0x20000274
 8000200:	00000000 	.word	0x00000000
 8000204:	08009810 	.word	0x08009810

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000278 	.word	0x20000278
 8000220:	08009810 	.word	0x08009810

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <strcmp>:
 8000234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800023c:	2a01      	cmp	r2, #1
 800023e:	bf28      	it	cs
 8000240:	429a      	cmpcs	r2, r3
 8000242:	d0f7      	beq.n	8000234 <strcmp>
 8000244:	1ad0      	subs	r0, r2, r3
 8000246:	4770      	bx	lr

08000248 <__aeabi_fmul>:
 8000248:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800024c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000250:	bf1e      	ittt	ne
 8000252:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000256:	ea92 0f0c 	teqne	r2, ip
 800025a:	ea93 0f0c 	teqne	r3, ip
 800025e:	d06f      	beq.n	8000340 <__aeabi_fmul+0xf8>
 8000260:	441a      	add	r2, r3
 8000262:	ea80 0c01 	eor.w	ip, r0, r1
 8000266:	0240      	lsls	r0, r0, #9
 8000268:	bf18      	it	ne
 800026a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800026e:	d01e      	beq.n	80002ae <__aeabi_fmul+0x66>
 8000270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000274:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000278:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800027c:	fba0 3101 	umull	r3, r1, r0, r1
 8000280:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000284:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000288:	bf3e      	ittt	cc
 800028a:	0049      	lslcc	r1, r1, #1
 800028c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000290:	005b      	lslcc	r3, r3, #1
 8000292:	ea40 0001 	orr.w	r0, r0, r1
 8000296:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800029a:	2afd      	cmp	r2, #253	; 0xfd
 800029c:	d81d      	bhi.n	80002da <__aeabi_fmul+0x92>
 800029e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80002a2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002a6:	bf08      	it	eq
 80002a8:	f020 0001 	biceq.w	r0, r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	f090 0f00 	teq	r0, #0
 80002b2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80002b6:	bf08      	it	eq
 80002b8:	0249      	lsleq	r1, r1, #9
 80002ba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80002be:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002c2:	3a7f      	subs	r2, #127	; 0x7f
 80002c4:	bfc2      	ittt	gt
 80002c6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002ca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ce:	4770      	bxgt	lr
 80002d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d4:	f04f 0300 	mov.w	r3, #0
 80002d8:	3a01      	subs	r2, #1
 80002da:	dc5d      	bgt.n	8000398 <__aeabi_fmul+0x150>
 80002dc:	f112 0f19 	cmn.w	r2, #25
 80002e0:	bfdc      	itt	le
 80002e2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002e6:	4770      	bxle	lr
 80002e8:	f1c2 0200 	rsb	r2, r2, #0
 80002ec:	0041      	lsls	r1, r0, #1
 80002ee:	fa21 f102 	lsr.w	r1, r1, r2
 80002f2:	f1c2 0220 	rsb	r2, r2, #32
 80002f6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002fa:	ea5f 0031 	movs.w	r0, r1, rrx
 80002fe:	f140 0000 	adc.w	r0, r0, #0
 8000302:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000306:	bf08      	it	eq
 8000308:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800030c:	4770      	bx	lr
 800030e:	f092 0f00 	teq	r2, #0
 8000312:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000316:	bf02      	ittt	eq
 8000318:	0040      	lsleq	r0, r0, #1
 800031a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800031e:	3a01      	subeq	r2, #1
 8000320:	d0f9      	beq.n	8000316 <__aeabi_fmul+0xce>
 8000322:	ea40 000c 	orr.w	r0, r0, ip
 8000326:	f093 0f00 	teq	r3, #0
 800032a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800032e:	bf02      	ittt	eq
 8000330:	0049      	lsleq	r1, r1, #1
 8000332:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000336:	3b01      	subeq	r3, #1
 8000338:	d0f9      	beq.n	800032e <__aeabi_fmul+0xe6>
 800033a:	ea41 010c 	orr.w	r1, r1, ip
 800033e:	e78f      	b.n	8000260 <__aeabi_fmul+0x18>
 8000340:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000344:	ea92 0f0c 	teq	r2, ip
 8000348:	bf18      	it	ne
 800034a:	ea93 0f0c 	teqne	r3, ip
 800034e:	d00a      	beq.n	8000366 <__aeabi_fmul+0x11e>
 8000350:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000354:	bf18      	it	ne
 8000356:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800035a:	d1d8      	bne.n	800030e <__aeabi_fmul+0xc6>
 800035c:	ea80 0001 	eor.w	r0, r0, r1
 8000360:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f090 0f00 	teq	r0, #0
 800036a:	bf17      	itett	ne
 800036c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000370:	4608      	moveq	r0, r1
 8000372:	f091 0f00 	teqne	r1, #0
 8000376:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800037a:	d014      	beq.n	80003a6 <__aeabi_fmul+0x15e>
 800037c:	ea92 0f0c 	teq	r2, ip
 8000380:	d101      	bne.n	8000386 <__aeabi_fmul+0x13e>
 8000382:	0242      	lsls	r2, r0, #9
 8000384:	d10f      	bne.n	80003a6 <__aeabi_fmul+0x15e>
 8000386:	ea93 0f0c 	teq	r3, ip
 800038a:	d103      	bne.n	8000394 <__aeabi_fmul+0x14c>
 800038c:	024b      	lsls	r3, r1, #9
 800038e:	bf18      	it	ne
 8000390:	4608      	movne	r0, r1
 8000392:	d108      	bne.n	80003a6 <__aeabi_fmul+0x15e>
 8000394:	ea80 0001 	eor.w	r0, r0, r1
 8000398:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800039c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003a4:	4770      	bx	lr
 80003a6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80003aa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_frsub>:
 80003b0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80003b4:	e002      	b.n	80003bc <__addsf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_fsub>:
 80003b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080003bc <__addsf3>:
 80003bc:	0042      	lsls	r2, r0, #1
 80003be:	bf1f      	itttt	ne
 80003c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80003c4:	ea92 0f03 	teqne	r2, r3
 80003c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80003cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003d0:	d06a      	beq.n	80004a8 <__addsf3+0xec>
 80003d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80003d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80003da:	bfc1      	itttt	gt
 80003dc:	18d2      	addgt	r2, r2, r3
 80003de:	4041      	eorgt	r1, r0
 80003e0:	4048      	eorgt	r0, r1
 80003e2:	4041      	eorgt	r1, r0
 80003e4:	bfb8      	it	lt
 80003e6:	425b      	neglt	r3, r3
 80003e8:	2b19      	cmp	r3, #25
 80003ea:	bf88      	it	hi
 80003ec:	4770      	bxhi	lr
 80003ee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80003f2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80003fa:	bf18      	it	ne
 80003fc:	4240      	negne	r0, r0
 80003fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000402:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000406:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800040a:	bf18      	it	ne
 800040c:	4249      	negne	r1, r1
 800040e:	ea92 0f03 	teq	r2, r3
 8000412:	d03f      	beq.n	8000494 <__addsf3+0xd8>
 8000414:	f1a2 0201 	sub.w	r2, r2, #1
 8000418:	fa41 fc03 	asr.w	ip, r1, r3
 800041c:	eb10 000c 	adds.w	r0, r0, ip
 8000420:	f1c3 0320 	rsb	r3, r3, #32
 8000424:	fa01 f103 	lsl.w	r1, r1, r3
 8000428:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800042c:	d502      	bpl.n	8000434 <__addsf3+0x78>
 800042e:	4249      	negs	r1, r1
 8000430:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000434:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000438:	d313      	bcc.n	8000462 <__addsf3+0xa6>
 800043a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800043e:	d306      	bcc.n	800044e <__addsf3+0x92>
 8000440:	0840      	lsrs	r0, r0, #1
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	f102 0201 	add.w	r2, r2, #1
 800044a:	2afe      	cmp	r2, #254	; 0xfe
 800044c:	d251      	bcs.n	80004f2 <__addsf3+0x136>
 800044e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000452:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000456:	bf08      	it	eq
 8000458:	f020 0001 	biceq.w	r0, r0, #1
 800045c:	ea40 0003 	orr.w	r0, r0, r3
 8000460:	4770      	bx	lr
 8000462:	0049      	lsls	r1, r1, #1
 8000464:	eb40 0000 	adc.w	r0, r0, r0
 8000468:	3a01      	subs	r2, #1
 800046a:	bf28      	it	cs
 800046c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000470:	d2ed      	bcs.n	800044e <__addsf3+0x92>
 8000472:	fab0 fc80 	clz	ip, r0
 8000476:	f1ac 0c08 	sub.w	ip, ip, #8
 800047a:	ebb2 020c 	subs.w	r2, r2, ip
 800047e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000482:	bfaa      	itet	ge
 8000484:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000488:	4252      	neglt	r2, r2
 800048a:	4318      	orrge	r0, r3
 800048c:	bfbc      	itt	lt
 800048e:	40d0      	lsrlt	r0, r2
 8000490:	4318      	orrlt	r0, r3
 8000492:	4770      	bx	lr
 8000494:	f092 0f00 	teq	r2, #0
 8000498:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800049c:	bf06      	itte	eq
 800049e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80004a2:	3201      	addeq	r2, #1
 80004a4:	3b01      	subne	r3, #1
 80004a6:	e7b5      	b.n	8000414 <__addsf3+0x58>
 80004a8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80004ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80004b0:	bf18      	it	ne
 80004b2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80004b6:	d021      	beq.n	80004fc <__addsf3+0x140>
 80004b8:	ea92 0f03 	teq	r2, r3
 80004bc:	d004      	beq.n	80004c8 <__addsf3+0x10c>
 80004be:	f092 0f00 	teq	r2, #0
 80004c2:	bf08      	it	eq
 80004c4:	4608      	moveq	r0, r1
 80004c6:	4770      	bx	lr
 80004c8:	ea90 0f01 	teq	r0, r1
 80004cc:	bf1c      	itt	ne
 80004ce:	2000      	movne	r0, #0
 80004d0:	4770      	bxne	lr
 80004d2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80004d6:	d104      	bne.n	80004e2 <__addsf3+0x126>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	bf28      	it	cs
 80004dc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	4770      	bx	lr
 80004e2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80004e6:	bf3c      	itt	cc
 80004e8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80004ec:	4770      	bxcc	lr
 80004ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80004f2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80004f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004fa:	4770      	bx	lr
 80004fc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000500:	bf16      	itet	ne
 8000502:	4608      	movne	r0, r1
 8000504:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000508:	4601      	movne	r1, r0
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	bf06      	itte	eq
 800050e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000512:	ea90 0f01 	teqeq	r0, r1
 8000516:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800051a:	4770      	bx	lr

0800051c <__aeabi_ui2f>:
 800051c:	f04f 0300 	mov.w	r3, #0
 8000520:	e004      	b.n	800052c <__aeabi_i2f+0x8>
 8000522:	bf00      	nop

08000524 <__aeabi_i2f>:
 8000524:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000528:	bf48      	it	mi
 800052a:	4240      	negmi	r0, r0
 800052c:	ea5f 0c00 	movs.w	ip, r0
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000538:	4601      	mov	r1, r0
 800053a:	f04f 0000 	mov.w	r0, #0
 800053e:	e01c      	b.n	800057a <__aeabi_l2f+0x2a>

08000540 <__aeabi_ul2f>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	f04f 0300 	mov.w	r3, #0
 800054c:	e00a      	b.n	8000564 <__aeabi_l2f+0x14>
 800054e:	bf00      	nop

08000550 <__aeabi_l2f>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800055c:	d502      	bpl.n	8000564 <__aeabi_l2f+0x14>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	ea5f 0c01 	movs.w	ip, r1
 8000568:	bf02      	ittt	eq
 800056a:	4684      	moveq	ip, r0
 800056c:	4601      	moveq	r1, r0
 800056e:	2000      	moveq	r0, #0
 8000570:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000574:	bf08      	it	eq
 8000576:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800057a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800057e:	fabc f28c 	clz	r2, ip
 8000582:	3a08      	subs	r2, #8
 8000584:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000588:	db10      	blt.n	80005ac <__aeabi_l2f+0x5c>
 800058a:	fa01 fc02 	lsl.w	ip, r1, r2
 800058e:	4463      	add	r3, ip
 8000590:	fa00 fc02 	lsl.w	ip, r0, r2
 8000594:	f1c2 0220 	rsb	r2, r2, #32
 8000598:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800059c:	fa20 f202 	lsr.w	r2, r0, r2
 80005a0:	eb43 0002 	adc.w	r0, r3, r2
 80005a4:	bf08      	it	eq
 80005a6:	f020 0001 	biceq.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	f102 0220 	add.w	r2, r2, #32
 80005b0:	fa01 fc02 	lsl.w	ip, r1, r2
 80005b4:	f1c2 0220 	rsb	r2, r2, #32
 80005b8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80005bc:	fa21 f202 	lsr.w	r2, r1, r2
 80005c0:	eb43 0002 	adc.w	r0, r3, r2
 80005c4:	bf08      	it	eq
 80005c6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80005ca:	4770      	bx	lr

080005cc <__gesf2>:
 80005cc:	f04f 3cff 	mov.w	ip, #4294967295
 80005d0:	e006      	b.n	80005e0 <__cmpsf2+0x4>
 80005d2:	bf00      	nop

080005d4 <__lesf2>:
 80005d4:	f04f 0c01 	mov.w	ip, #1
 80005d8:	e002      	b.n	80005e0 <__cmpsf2+0x4>
 80005da:	bf00      	nop

080005dc <__cmpsf2>:
 80005dc:	f04f 0c01 	mov.w	ip, #1
 80005e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005e4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80005e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80005ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80005f0:	bf18      	it	ne
 80005f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80005f6:	d011      	beq.n	800061c <__cmpsf2+0x40>
 80005f8:	b001      	add	sp, #4
 80005fa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80005fe:	bf18      	it	ne
 8000600:	ea90 0f01 	teqne	r0, r1
 8000604:	bf58      	it	pl
 8000606:	ebb2 0003 	subspl.w	r0, r2, r3
 800060a:	bf88      	it	hi
 800060c:	17c8      	asrhi	r0, r1, #31
 800060e:	bf38      	it	cc
 8000610:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000614:	bf18      	it	ne
 8000616:	f040 0001 	orrne.w	r0, r0, #1
 800061a:	4770      	bx	lr
 800061c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000620:	d102      	bne.n	8000628 <__cmpsf2+0x4c>
 8000622:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000626:	d105      	bne.n	8000634 <__cmpsf2+0x58>
 8000628:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800062c:	d1e4      	bne.n	80005f8 <__cmpsf2+0x1c>
 800062e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000632:	d0e1      	beq.n	80005f8 <__cmpsf2+0x1c>
 8000634:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <__aeabi_cfrcmple>:
 800063c:	4684      	mov	ip, r0
 800063e:	4608      	mov	r0, r1
 8000640:	4661      	mov	r1, ip
 8000642:	e7ff      	b.n	8000644 <__aeabi_cfcmpeq>

08000644 <__aeabi_cfcmpeq>:
 8000644:	b50f      	push	{r0, r1, r2, r3, lr}
 8000646:	f7ff ffc9 	bl	80005dc <__cmpsf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000654 <__aeabi_fcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cfcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_fcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cfcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_fcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cfcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_fcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffd2 	bl	800063c <__aeabi_cfrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc8 	bl	800063c <__aeabi_cfrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_f2iz>:
 80006b8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006c0:	d30f      	bcc.n	80006e2 <__aeabi_f2iz+0x2a>
 80006c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006ca:	d90d      	bls.n	80006e8 <__aeabi_f2iz+0x30>
 80006cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006d4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006d8:	fa23 f002 	lsr.w	r0, r3, r2
 80006dc:	bf18      	it	ne
 80006de:	4240      	negne	r0, r0
 80006e0:	4770      	bx	lr
 80006e2:	f04f 0000 	mov.w	r0, #0
 80006e6:	4770      	bx	lr
 80006e8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80006ec:	d101      	bne.n	80006f2 <__aeabi_f2iz+0x3a>
 80006ee:	0242      	lsls	r2, r0, #9
 80006f0:	d105      	bne.n	80006fe <__aeabi_f2iz+0x46>
 80006f2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80006f6:	bf08      	it	eq
 80006f8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80006fc:	4770      	bx	lr
 80006fe:	f04f 0000 	mov.w	r0, #0
 8000702:	4770      	bx	lr

08000704 <__aeabi_ldivmod>:
 8000704:	b97b      	cbnz	r3, 8000726 <__aeabi_ldivmod+0x22>
 8000706:	b972      	cbnz	r2, 8000726 <__aeabi_ldivmod+0x22>
 8000708:	2900      	cmp	r1, #0
 800070a:	bfbe      	ittt	lt
 800070c:	2000      	movlt	r0, #0
 800070e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000712:	e006      	blt.n	8000722 <__aeabi_ldivmod+0x1e>
 8000714:	bf08      	it	eq
 8000716:	2800      	cmpeq	r0, #0
 8000718:	bf1c      	itt	ne
 800071a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800071e:	f04f 30ff 	movne.w	r0, #4294967295
 8000722:	f000 b9a1 	b.w	8000a68 <__aeabi_idiv0>
 8000726:	f1ad 0c08 	sub.w	ip, sp, #8
 800072a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800072e:	2900      	cmp	r1, #0
 8000730:	db09      	blt.n	8000746 <__aeabi_ldivmod+0x42>
 8000732:	2b00      	cmp	r3, #0
 8000734:	db1a      	blt.n	800076c <__aeabi_ldivmod+0x68>
 8000736:	f000 f835 	bl	80007a4 <__udivmoddi4>
 800073a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800073e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000742:	b004      	add	sp, #16
 8000744:	4770      	bx	lr
 8000746:	4240      	negs	r0, r0
 8000748:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	db1b      	blt.n	8000788 <__aeabi_ldivmod+0x84>
 8000750:	f000 f828 	bl	80007a4 <__udivmoddi4>
 8000754:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800075c:	b004      	add	sp, #16
 800075e:	4240      	negs	r0, r0
 8000760:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000764:	4252      	negs	r2, r2
 8000766:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800076a:	4770      	bx	lr
 800076c:	4252      	negs	r2, r2
 800076e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000772:	f000 f817 	bl	80007a4 <__udivmoddi4>
 8000776:	f8dd e004 	ldr.w	lr, [sp, #4]
 800077a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800077e:	b004      	add	sp, #16
 8000780:	4240      	negs	r0, r0
 8000782:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000786:	4770      	bx	lr
 8000788:	4252      	negs	r2, r2
 800078a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800078e:	f000 f809 	bl	80007a4 <__udivmoddi4>
 8000792:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000796:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800079a:	b004      	add	sp, #16
 800079c:	4252      	negs	r2, r2
 800079e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007a2:	4770      	bx	lr

080007a4 <__udivmoddi4>:
 80007a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007a8:	9e08      	ldr	r6, [sp, #32]
 80007aa:	460d      	mov	r5, r1
 80007ac:	4604      	mov	r4, r0
 80007ae:	468e      	mov	lr, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f040 8083 	bne.w	80008bc <__udivmoddi4+0x118>
 80007b6:	428a      	cmp	r2, r1
 80007b8:	4617      	mov	r7, r2
 80007ba:	d947      	bls.n	800084c <__udivmoddi4+0xa8>
 80007bc:	fab2 f382 	clz	r3, r2
 80007c0:	b14b      	cbz	r3, 80007d6 <__udivmoddi4+0x32>
 80007c2:	f1c3 0120 	rsb	r1, r3, #32
 80007c6:	fa05 fe03 	lsl.w	lr, r5, r3
 80007ca:	fa20 f101 	lsr.w	r1, r0, r1
 80007ce:	409f      	lsls	r7, r3
 80007d0:	ea41 0e0e 	orr.w	lr, r1, lr
 80007d4:	409c      	lsls	r4, r3
 80007d6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80007da:	fbbe fcf8 	udiv	ip, lr, r8
 80007de:	fa1f f987 	uxth.w	r9, r7
 80007e2:	fb08 e21c 	mls	r2, r8, ip, lr
 80007e6:	fb0c f009 	mul.w	r0, ip, r9
 80007ea:	0c21      	lsrs	r1, r4, #16
 80007ec:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80007f0:	4290      	cmp	r0, r2
 80007f2:	d90a      	bls.n	800080a <__udivmoddi4+0x66>
 80007f4:	18ba      	adds	r2, r7, r2
 80007f6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80007fa:	f080 8118 	bcs.w	8000a2e <__udivmoddi4+0x28a>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f240 8115 	bls.w	8000a2e <__udivmoddi4+0x28a>
 8000804:	f1ac 0c02 	sub.w	ip, ip, #2
 8000808:	443a      	add	r2, r7
 800080a:	1a12      	subs	r2, r2, r0
 800080c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000810:	fb08 2210 	mls	r2, r8, r0, r2
 8000814:	fb00 f109 	mul.w	r1, r0, r9
 8000818:	b2a4      	uxth	r4, r4
 800081a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800081e:	42a1      	cmp	r1, r4
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x92>
 8000822:	193c      	adds	r4, r7, r4
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 8103 	bcs.w	8000a32 <__udivmoddi4+0x28e>
 800082c:	42a1      	cmp	r1, r4
 800082e:	f240 8100 	bls.w	8000a32 <__udivmoddi4+0x28e>
 8000832:	3802      	subs	r0, #2
 8000834:	443c      	add	r4, r7
 8000836:	1a64      	subs	r4, r4, r1
 8000838:	2100      	movs	r1, #0
 800083a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800083e:	b11e      	cbz	r6, 8000848 <__udivmoddi4+0xa4>
 8000840:	2200      	movs	r2, #0
 8000842:	40dc      	lsrs	r4, r3
 8000844:	e9c6 4200 	strd	r4, r2, [r6]
 8000848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084c:	b902      	cbnz	r2, 8000850 <__udivmoddi4+0xac>
 800084e:	deff      	udf	#255	; 0xff
 8000850:	fab2 f382 	clz	r3, r2
 8000854:	2b00      	cmp	r3, #0
 8000856:	d14f      	bne.n	80008f8 <__udivmoddi4+0x154>
 8000858:	1a8d      	subs	r5, r1, r2
 800085a:	2101      	movs	r1, #1
 800085c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000860:	fa1f f882 	uxth.w	r8, r2
 8000864:	fbb5 fcfe 	udiv	ip, r5, lr
 8000868:	fb0e 551c 	mls	r5, lr, ip, r5
 800086c:	fb08 f00c 	mul.w	r0, r8, ip
 8000870:	0c22      	lsrs	r2, r4, #16
 8000872:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000876:	42a8      	cmp	r0, r5
 8000878:	d907      	bls.n	800088a <__udivmoddi4+0xe6>
 800087a:	197d      	adds	r5, r7, r5
 800087c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000880:	d202      	bcs.n	8000888 <__udivmoddi4+0xe4>
 8000882:	42a8      	cmp	r0, r5
 8000884:	f200 80e9 	bhi.w	8000a5a <__udivmoddi4+0x2b6>
 8000888:	4694      	mov	ip, r2
 800088a:	1a2d      	subs	r5, r5, r0
 800088c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000890:	fb0e 5510 	mls	r5, lr, r0, r5
 8000894:	fb08 f800 	mul.w	r8, r8, r0
 8000898:	b2a4      	uxth	r4, r4
 800089a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800089e:	45a0      	cmp	r8, r4
 80008a0:	d907      	bls.n	80008b2 <__udivmoddi4+0x10e>
 80008a2:	193c      	adds	r4, r7, r4
 80008a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80008a8:	d202      	bcs.n	80008b0 <__udivmoddi4+0x10c>
 80008aa:	45a0      	cmp	r8, r4
 80008ac:	f200 80d9 	bhi.w	8000a62 <__udivmoddi4+0x2be>
 80008b0:	4610      	mov	r0, r2
 80008b2:	eba4 0408 	sub.w	r4, r4, r8
 80008b6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80008ba:	e7c0      	b.n	800083e <__udivmoddi4+0x9a>
 80008bc:	428b      	cmp	r3, r1
 80008be:	d908      	bls.n	80008d2 <__udivmoddi4+0x12e>
 80008c0:	2e00      	cmp	r6, #0
 80008c2:	f000 80b1 	beq.w	8000a28 <__udivmoddi4+0x284>
 80008c6:	2100      	movs	r1, #0
 80008c8:	e9c6 0500 	strd	r0, r5, [r6]
 80008cc:	4608      	mov	r0, r1
 80008ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008d2:	fab3 f183 	clz	r1, r3
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d14b      	bne.n	8000972 <__udivmoddi4+0x1ce>
 80008da:	42ab      	cmp	r3, r5
 80008dc:	d302      	bcc.n	80008e4 <__udivmoddi4+0x140>
 80008de:	4282      	cmp	r2, r0
 80008e0:	f200 80b9 	bhi.w	8000a56 <__udivmoddi4+0x2b2>
 80008e4:	1a84      	subs	r4, r0, r2
 80008e6:	eb65 0303 	sbc.w	r3, r5, r3
 80008ea:	2001      	movs	r0, #1
 80008ec:	469e      	mov	lr, r3
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d0aa      	beq.n	8000848 <__udivmoddi4+0xa4>
 80008f2:	e9c6 4e00 	strd	r4, lr, [r6]
 80008f6:	e7a7      	b.n	8000848 <__udivmoddi4+0xa4>
 80008f8:	409f      	lsls	r7, r3
 80008fa:	f1c3 0220 	rsb	r2, r3, #32
 80008fe:	40d1      	lsrs	r1, r2
 8000900:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000904:	fbb1 f0fe 	udiv	r0, r1, lr
 8000908:	fa1f f887 	uxth.w	r8, r7
 800090c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000910:	fa24 f202 	lsr.w	r2, r4, r2
 8000914:	409d      	lsls	r5, r3
 8000916:	fb00 fc08 	mul.w	ip, r0, r8
 800091a:	432a      	orrs	r2, r5
 800091c:	0c15      	lsrs	r5, r2, #16
 800091e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000922:	45ac      	cmp	ip, r5
 8000924:	fa04 f403 	lsl.w	r4, r4, r3
 8000928:	d909      	bls.n	800093e <__udivmoddi4+0x19a>
 800092a:	197d      	adds	r5, r7, r5
 800092c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000930:	f080 808f 	bcs.w	8000a52 <__udivmoddi4+0x2ae>
 8000934:	45ac      	cmp	ip, r5
 8000936:	f240 808c 	bls.w	8000a52 <__udivmoddi4+0x2ae>
 800093a:	3802      	subs	r0, #2
 800093c:	443d      	add	r5, r7
 800093e:	eba5 050c 	sub.w	r5, r5, ip
 8000942:	fbb5 f1fe 	udiv	r1, r5, lr
 8000946:	fb0e 5c11 	mls	ip, lr, r1, r5
 800094a:	fb01 f908 	mul.w	r9, r1, r8
 800094e:	b295      	uxth	r5, r2
 8000950:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000954:	45a9      	cmp	r9, r5
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0x1c4>
 8000958:	197d      	adds	r5, r7, r5
 800095a:	f101 32ff 	add.w	r2, r1, #4294967295
 800095e:	d274      	bcs.n	8000a4a <__udivmoddi4+0x2a6>
 8000960:	45a9      	cmp	r9, r5
 8000962:	d972      	bls.n	8000a4a <__udivmoddi4+0x2a6>
 8000964:	3902      	subs	r1, #2
 8000966:	443d      	add	r5, r7
 8000968:	eba5 0509 	sub.w	r5, r5, r9
 800096c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000970:	e778      	b.n	8000864 <__udivmoddi4+0xc0>
 8000972:	f1c1 0720 	rsb	r7, r1, #32
 8000976:	408b      	lsls	r3, r1
 8000978:	fa22 fc07 	lsr.w	ip, r2, r7
 800097c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000980:	fa25 f407 	lsr.w	r4, r5, r7
 8000984:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000988:	fbb4 f9fe 	udiv	r9, r4, lr
 800098c:	fa1f f88c 	uxth.w	r8, ip
 8000990:	fb0e 4419 	mls	r4, lr, r9, r4
 8000994:	fa20 f307 	lsr.w	r3, r0, r7
 8000998:	fb09 fa08 	mul.w	sl, r9, r8
 800099c:	408d      	lsls	r5, r1
 800099e:	431d      	orrs	r5, r3
 80009a0:	0c2b      	lsrs	r3, r5, #16
 80009a2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80009a6:	45a2      	cmp	sl, r4
 80009a8:	fa02 f201 	lsl.w	r2, r2, r1
 80009ac:	fa00 f301 	lsl.w	r3, r0, r1
 80009b0:	d909      	bls.n	80009c6 <__udivmoddi4+0x222>
 80009b2:	eb1c 0404 	adds.w	r4, ip, r4
 80009b6:	f109 30ff 	add.w	r0, r9, #4294967295
 80009ba:	d248      	bcs.n	8000a4e <__udivmoddi4+0x2aa>
 80009bc:	45a2      	cmp	sl, r4
 80009be:	d946      	bls.n	8000a4e <__udivmoddi4+0x2aa>
 80009c0:	f1a9 0902 	sub.w	r9, r9, #2
 80009c4:	4464      	add	r4, ip
 80009c6:	eba4 040a 	sub.w	r4, r4, sl
 80009ca:	fbb4 f0fe 	udiv	r0, r4, lr
 80009ce:	fb0e 4410 	mls	r4, lr, r0, r4
 80009d2:	fb00 fa08 	mul.w	sl, r0, r8
 80009d6:	b2ad      	uxth	r5, r5
 80009d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009dc:	45a2      	cmp	sl, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x24e>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 35ff 	add.w	r5, r0, #4294967295
 80009e8:	d22d      	bcs.n	8000a46 <__udivmoddi4+0x2a2>
 80009ea:	45a2      	cmp	sl, r4
 80009ec:	d92b      	bls.n	8000a46 <__udivmoddi4+0x2a2>
 80009ee:	3802      	subs	r0, #2
 80009f0:	4464      	add	r4, ip
 80009f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80009f6:	fba0 8902 	umull	r8, r9, r0, r2
 80009fa:	eba4 040a 	sub.w	r4, r4, sl
 80009fe:	454c      	cmp	r4, r9
 8000a00:	46c6      	mov	lr, r8
 8000a02:	464d      	mov	r5, r9
 8000a04:	d319      	bcc.n	8000a3a <__udivmoddi4+0x296>
 8000a06:	d016      	beq.n	8000a36 <__udivmoddi4+0x292>
 8000a08:	b15e      	cbz	r6, 8000a22 <__udivmoddi4+0x27e>
 8000a0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000a0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000a12:	fa04 f707 	lsl.w	r7, r4, r7
 8000a16:	fa22 f301 	lsr.w	r3, r2, r1
 8000a1a:	431f      	orrs	r7, r3
 8000a1c:	40cc      	lsrs	r4, r1
 8000a1e:	e9c6 7400 	strd	r7, r4, [r6]
 8000a22:	2100      	movs	r1, #0
 8000a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a28:	4631      	mov	r1, r6
 8000a2a:	4630      	mov	r0, r6
 8000a2c:	e70c      	b.n	8000848 <__udivmoddi4+0xa4>
 8000a2e:	468c      	mov	ip, r1
 8000a30:	e6eb      	b.n	800080a <__udivmoddi4+0x66>
 8000a32:	4610      	mov	r0, r2
 8000a34:	e6ff      	b.n	8000836 <__udivmoddi4+0x92>
 8000a36:	4543      	cmp	r3, r8
 8000a38:	d2e6      	bcs.n	8000a08 <__udivmoddi4+0x264>
 8000a3a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000a3e:	eb69 050c 	sbc.w	r5, r9, ip
 8000a42:	3801      	subs	r0, #1
 8000a44:	e7e0      	b.n	8000a08 <__udivmoddi4+0x264>
 8000a46:	4628      	mov	r0, r5
 8000a48:	e7d3      	b.n	80009f2 <__udivmoddi4+0x24e>
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	e78c      	b.n	8000968 <__udivmoddi4+0x1c4>
 8000a4e:	4681      	mov	r9, r0
 8000a50:	e7b9      	b.n	80009c6 <__udivmoddi4+0x222>
 8000a52:	4608      	mov	r0, r1
 8000a54:	e773      	b.n	800093e <__udivmoddi4+0x19a>
 8000a56:	4608      	mov	r0, r1
 8000a58:	e749      	b.n	80008ee <__udivmoddi4+0x14a>
 8000a5a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a5e:	443d      	add	r5, r7
 8000a60:	e713      	b.n	800088a <__udivmoddi4+0xe6>
 8000a62:	3802      	subs	r0, #2
 8000a64:	443c      	add	r4, r7
 8000a66:	e724      	b.n	80008b2 <__udivmoddi4+0x10e>

08000a68 <__aeabi_idiv0>:
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a72:	f000 fea1 	bl	80017b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a76:	f000 f8a3 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a7a:	f000 fae5 	bl	8001048 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a7e:	f000 f92f 	bl	8000ce0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000a82:	f000 f97d 	bl	8000d80 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a86:	f000 fa8b 	bl	8000fa0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a8a:	f000 fab3 	bl	8000ff4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a8e:	f000 f8e9 	bl	8000c64 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000a92:	f000 f9c1 	bl	8000e18 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* Setup and start using console and logs */
  CONSOLE_uartInit(&huart1);
 8000a96:	483e      	ldr	r0, [pc, #248]	; (8000b90 <main+0x124>)
 8000a98:	f004 fdd2 	bl	8005640 <CONSOLE_uartInit>
  LOG_setLevel    (LOG_LEVEL_DEBUG);
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f005 fb69 	bl	8006174 <LOG_setLevel>
  LOG_info        ("Starting RCFW");
 8000aa2:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <main+0x128>)
 8000aa4:	2287      	movs	r2, #135	; 0x87
 8000aa6:	493c      	ldr	r1, [pc, #240]	; (8000b98 <main+0x12c>)
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f005 fb73 	bl	8006194 <LOG_log>

  /* Initialize Timer 1 and green LED */
  HAL_TIM_Base_Start_IT(&htim1);
 8000aae:	483b      	ldr	r0, [pc, #236]	; (8000b9c <main+0x130>)
 8000ab0:	f002 fda2 	bl	80035f8 <HAL_TIM_Base_Start_IT>
  LED_setMode(LED_MODE_BLINK_SLOW);
 8000ab4:	2002      	movs	r0, #2
 8000ab6:	f005 faf7 	bl	80060a8 <LED_setMode>

  LOG_debug("Started TIMER 1");
 8000aba:	4b39      	ldr	r3, [pc, #228]	; (8000ba0 <main+0x134>)
 8000abc:	228d      	movs	r2, #141	; 0x8d
 8000abe:	4936      	ldr	r1, [pc, #216]	; (8000b98 <main+0x12c>)
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f005 fb67 	bl	8006194 <LOG_log>

  /* Initialize Timer 2 and delay function in utilities */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ac6:	4837      	ldr	r0, [pc, #220]	; (8000ba4 <main+0x138>)
 8000ac8:	f002 fd96 	bl	80035f8 <HAL_TIM_Base_Start_IT>
  UTILS_delayUsInit    (&htim2);
 8000acc:	4835      	ldr	r0, [pc, #212]	; (8000ba4 <main+0x138>)
 8000ace:	f005 fcab 	bl	8006428 <UTILS_delayUsInit>

  LOG_debug("Started TIMER 2");
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <main+0x13c>)
 8000ad4:	2293      	movs	r2, #147	; 0x93
 8000ad6:	4930      	ldr	r1, [pc, #192]	; (8000b98 <main+0x12c>)
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f005 fb5b 	bl	8006194 <LOG_log>

  /* Initialize Timer 8 */
  HAL_TIM_Base_Start(&htim8);
 8000ade:	4833      	ldr	r0, [pc, #204]	; (8000bac <main+0x140>)
 8000ae0:	f002 fd32 	bl	8003548 <HAL_TIM_Base_Start>

  LOG_debug("Started TIMER 8");
 8000ae4:	4b32      	ldr	r3, [pc, #200]	; (8000bb0 <main+0x144>)
 8000ae6:	2298      	movs	r2, #152	; 0x98
 8000ae8:	492b      	ldr	r1, [pc, #172]	; (8000b98 <main+0x12c>)
 8000aea:	2000      	movs	r0, #0
 8000aec:	f005 fb52 	bl	8006194 <LOG_log>

  /* Initialize PWM channels */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000af0:	2100      	movs	r1, #0
 8000af2:	482e      	ldr	r0, [pc, #184]	; (8000bac <main+0x140>)
 8000af4:	f002 fe46 	bl	8003784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000af8:	2104      	movs	r1, #4
 8000afa:	482c      	ldr	r0, [pc, #176]	; (8000bac <main+0x140>)
 8000afc:	f002 fe42 	bl	8003784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b00:	2108      	movs	r1, #8
 8000b02:	482a      	ldr	r0, [pc, #168]	; (8000bac <main+0x140>)
 8000b04:	f002 fe3e 	bl	8003784 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b08:	210c      	movs	r1, #12
 8000b0a:	4828      	ldr	r0, [pc, #160]	; (8000bac <main+0x140>)
 8000b0c:	f002 fe3a 	bl	8003784 <HAL_TIM_PWM_Start>

  LOG_debug("Started PWM channels");
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <main+0x148>)
 8000b12:	22a0      	movs	r2, #160	; 0xa0
 8000b14:	4920      	ldr	r1, [pc, #128]	; (8000b98 <main+0x12c>)
 8000b16:	2000      	movs	r0, #0
 8000b18:	f005 fb3c 	bl	8006194 <LOG_log>

  /* Initialize bluetooth control module */
  BLUETOOTH_CONTROL_init();
 8000b1c:	f004 fcdc 	bl	80054d8 <BLUETOOTH_CONTROL_init>

  /* Initialize driving module */
  DRIVE_init(&htim8);
 8000b20:	4822      	ldr	r0, [pc, #136]	; (8000bac <main+0x140>)
 8000b22:	f004 fdab 	bl	800567c <DRIVE_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_ADC_Start(&hadc1);
 8000b26:	4824      	ldr	r0, [pc, #144]	; (8000bb8 <main+0x14c>)
 8000b28:	f000 ff92 	bl	8001a50 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <main+0x14c>)
 8000b32:	f001 f83b 	bl	8001bac <HAL_ADC_PollForConversion>
    adcRawData = HAL_ADC_GetValue(&hadc1);
 8000b36:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <main+0x14c>)
 8000b38:	f001 f93e 	bl	8001db8 <HAL_ADC_GetValue>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	84fb      	strh	r3, [r7, #38]	; 0x26
    sprintf(msg, "%u\r\n", adcRawData);
 8000b40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	491d      	ldr	r1, [pc, #116]	; (8000bbc <main+0x150>)
 8000b46:	4618      	mov	r0, r3
 8000b48:	f006 f900 	bl	8006d4c <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fb68 	bl	8000224 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	1d39      	adds	r1, r7, #4
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	480c      	ldr	r0, [pc, #48]	; (8000b90 <main+0x124>)
 8000b60:	f003 fe30 	bl	80047c4 <HAL_UART_Transmit>

    CONSOLE_receiveData();
 8000b64:	f004 fd7a 	bl	800565c <CONSOLE_receiveData>
    BLUETOOTH_CONTROL_receiveData(&bluetoothData);
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f004 fd01 	bl	8005574 <BLUETOOTH_CONTROL_receiveData>
    DRIVE_update                 (&bluetoothData);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fe18 	bl	80057ac <DRIVE_update>
    MAIN_updateLedMode           (&bluetoothData);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 faf1 	bl	8001168 <MAIN_updateLedMode>
    UTILS_delayUs(10000);
 8000b86:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b8a:	f005 fc5b 	bl	8006444 <UTILS_delayUs>
    HAL_ADC_Start(&hadc1);
 8000b8e:	e7ca      	b.n	8000b26 <main+0xba>
 8000b90:	20000490 	.word	0x20000490
 8000b94:	08009828 	.word	0x08009828
 8000b98:	08009838 	.word	0x08009838
 8000b9c:	20000504 	.word	0x20000504
 8000ba0:	0800984c 	.word	0x0800984c
 8000ba4:	200005b8 	.word	0x200005b8
 8000ba8:	0800985c 	.word	0x0800985c
 8000bac:	200003ac 	.word	0x200003ac
 8000bb0:	0800986c 	.word	0x0800986c
 8000bb4:	0800987c 	.word	0x0800987c
 8000bb8:	20000460 	.word	0x20000460
 8000bbc:	08009894 	.word	0x08009894

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f005 ff70 	bl	8006ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
 8000bf2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fe8b 	bl	8002924 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c14:	f000 fb04 	bl	8001220 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 f8f6 	bl	8002e24 <HAL_RCC_ClockConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c3e:	f000 faef 	bl	8001220 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c42:	2302      	movs	r3, #2
 8000c44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fa83 	bl	8003158 <HAL_RCCEx_PeriphCLKConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c58:	f000 fae2 	bl	8001220 <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3758      	adds	r7, #88	; 0x58
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c76:	4a19      	ldr	r2, [pc, #100]	; (8000cdc <MX_ADC1_Init+0x78>)
 8000c78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c8e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000ca2:	f000 fdeb 	bl	800187c <HAL_ADC_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000cac:	f000 fab8 	bl	8001220 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_ADC1_Init+0x74>)
 8000cc2:	f001 f885 	bl	8001dd0 <HAL_ADC_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ccc:	f000 faa8 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000460 	.word	0x20000460
 8000cdc:	40012400 	.word	0x40012400

08000ce0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf4:	463b      	mov	r3, r7
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000cfe:	4a1f      	ldr	r2, [pc, #124]	; (8000d7c <MX_TIM1_Init+0x9c>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d04:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000d10:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d12:	22f9      	movs	r2, #249	; 0xf9
 8000d14:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d1c:	4b16      	ldr	r3, [pc, #88]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d24:	2280      	movs	r2, #128	; 0x80
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d28:	4813      	ldr	r0, [pc, #76]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d2a:	f002 fbb1 	bl	8003490 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d34:	f000 fa74 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d46:	f002 ffbd 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d50:	f000 fa66 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_TIM1_Init+0x98>)
 8000d62:	f003 fbfd 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d6c:	f000 fa58 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000504 	.word	0x20000504
 8000d7c:	40012c00 	.word	0x40012c00

08000d80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]
 8000d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	463b      	mov	r3, r7
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9c:	4b1d      	ldr	r3, [pc, #116]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000d9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000da6:	2207      	movs	r2, #7
 8000da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db8:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000dc0:	2280      	movs	r2, #128	; 0x80
 8000dc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000dc6:	f002 fb63 	bl	8003490 <HAL_TIM_Base_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd0:	f000 fa26 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000de2:	f002 ff6f 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dec:	f000 fa18 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	2300      	movs	r3, #0
 8000df2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_TIM2_Init+0x94>)
 8000dfe:	f003 fbaf 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e08:	f000 fa0a 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	200005b8 	.word	0x200005b8

08000e18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b096      	sub	sp, #88	; 0x58
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
 8000e46:	615a      	str	r2, [r3, #20]
 8000e48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2220      	movs	r2, #32
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fe2f 	bl	8006ab4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e56:	4b50      	ldr	r3, [pc, #320]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <MX_TIM8_Init+0x184>)
 8000e5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8000e5c:	4b4e      	ldr	r3, [pc, #312]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e5e:	2207      	movs	r2, #7
 8000e60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e62:	4b4d      	ldr	r3, [pc, #308]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e6a:	2264      	movs	r2, #100	; 0x64
 8000e6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	4b4a      	ldr	r3, [pc, #296]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e74:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e7a:	4b47      	ldr	r3, [pc, #284]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000e80:	4845      	ldr	r0, [pc, #276]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e82:	f002 fb05 	bl	8003490 <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000e8c:	f000 f9c8 	bl	8001220 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	483e      	ldr	r0, [pc, #248]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000e9e:	f002 ff11 	bl	8003cc4 <HAL_TIM_ConfigClockSource>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f9ba 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000eac:	483a      	ldr	r0, [pc, #232]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000eae:	f002 fc03 	bl	80036b8 <HAL_TIM_PWM_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000eb8:	f000 f9b2 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ec4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4833      	ldr	r0, [pc, #204]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000ecc:	f003 fb48 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000ed6:	f000 f9a3 	bl	8001220 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eda:	2360      	movs	r3, #96	; 0x60
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	2200      	movs	r2, #0
 8000efc:	4619      	mov	r1, r3
 8000efe:	4826      	ldr	r0, [pc, #152]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000f00:	f002 fe22 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000f0a:	f000 f989 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2204      	movs	r2, #4
 8000f14:	4619      	mov	r1, r3
 8000f16:	4820      	ldr	r0, [pc, #128]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000f18:	f002 fe16 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8000f22:	f000 f97d 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	481a      	ldr	r0, [pc, #104]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000f30:	f002 fe0a 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8000f3a:	f000 f971 	bl	8001220 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f42:	220c      	movs	r2, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	4814      	ldr	r0, [pc, #80]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000f48:	f002 fdfe 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000f52:	f000 f965 	bl	8001220 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f6e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000f7a:	f003 fb5d 	bl	8004638 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8000f84:	f000 f94c 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM8_Init+0x180>)
 8000f8a:	f000 fa11 	bl	80013b0 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200003ac 	.word	0x200003ac
 8000f9c:	40013400 	.word	0x40013400

08000fa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <MX_USART1_UART_Init+0x50>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000fb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f003 fb9a 	bl	8004710 <HAL_UART_Init>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000fe2:	f000 f91d 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000490 	.word	0x20000490
 8000ff0:	40013800 	.word	0x40013800

08000ff4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART2_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001004:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART2_UART_Init+0x4c>)
 800102c:	f003 fb70 	bl	8004710 <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f8f3 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000066c 	.word	0x2000066c
 8001044:	40004400 	.word	0x40004400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <MX_GPIO_Init+0x110>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a3d      	ldr	r2, [pc, #244]	; (8001158 <MX_GPIO_Init+0x110>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <MX_GPIO_Init+0x110>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b38      	ldr	r3, [pc, #224]	; (8001158 <MX_GPIO_Init+0x110>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a37      	ldr	r2, [pc, #220]	; (8001158 <MX_GPIO_Init+0x110>)
 800107a:	f043 0304 	orr.w	r3, r3, #4
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <MX_GPIO_Init+0x110>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b32      	ldr	r3, [pc, #200]	; (8001158 <MX_GPIO_Init+0x110>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a31      	ldr	r2, [pc, #196]	; (8001158 <MX_GPIO_Init+0x110>)
 8001092:	f043 0308 	orr.w	r3, r3, #8
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b2f      	ldr	r3, [pc, #188]	; (8001158 <MX_GPIO_Init+0x110>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b2c      	ldr	r3, [pc, #176]	; (8001158 <MX_GPIO_Init+0x110>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a2b      	ldr	r2, [pc, #172]	; (8001158 <MX_GPIO_Init+0x110>)
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <MX_GPIO_Init+0x110>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f243 0130 	movw	r1, #12336	; 0x3030
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <MX_GPIO_Init+0x114>)
 80010c4:	f001 fbfc 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2133      	movs	r1, #51	; 0x33
 80010cc:	4824      	ldr	r0, [pc, #144]	; (8001160 <MX_GPIO_Init+0x118>)
 80010ce:	f001 fbf7 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	4823      	ldr	r0, [pc, #140]	; (8001164 <MX_GPIO_Init+0x11c>)
 80010d8:	f001 fbf2 	bl	80028c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e2:	2301      	movs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2302      	movs	r3, #2
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <MX_GPIO_Init+0x114>)
 80010f6:	f001 fa4f 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin;
 80010fa:	f241 0330 	movw	r3, #4144	; 0x1030
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	4812      	ldr	r0, [pc, #72]	; (800115c <MX_GPIO_Init+0x114>)
 8001114:	f001 fa40 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8001118:	2333      	movs	r3, #51	; 0x33
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001124:	2303      	movs	r3, #3
 8001126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	480c      	ldr	r0, [pc, #48]	; (8001160 <MX_GPIO_Init+0x118>)
 8001130:	f001 fa32 	bl	8002598 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8001134:	2304      	movs	r3, #4
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_GPIO_Init+0x11c>)
 800114c:	f001 fa24 	bl	8002598 <HAL_GPIO_Init>

}
 8001150:	bf00      	nop
 8001152:	3720      	adds	r7, #32
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40021000 	.word	0x40021000
 800115c:	40011000 	.word	0x40011000
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40011400 	.word	0x40011400

08001168 <MAIN_updateLedMode>:

/* USER CODE BEGIN 4 */

static void MAIN_updateLedMode(BLUETOOTH_CONTROL_DATA *data)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t ledMode;

  switch (data->button)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	3b05      	subs	r3, #5
 8001176:	2b03      	cmp	r3, #3
 8001178:	d816      	bhi.n	80011a8 <MAIN_updateLedMode+0x40>
 800117a:	a201      	add	r2, pc, #4	; (adr r2, 8001180 <MAIN_updateLedMode+0x18>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	08001191 	.word	0x08001191
 8001184:	080011a3 	.word	0x080011a3
 8001188:	08001197 	.word	0x08001197
 800118c:	0800119d 	.word	0x0800119d
  {
    case BUTTON_PAD_UP:
      ledMode = LED_MODE_FORCED_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
      break;
 8001194:	e009      	b.n	80011aa <MAIN_updateLedMode+0x42>

    case BUTTON_PAD_DOWN:
      ledMode = LED_MODE_FORCED_OFF;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
      break;
 800119a:	e006      	b.n	80011aa <MAIN_updateLedMode+0x42>

    case BUTTON_PAD_LEFT:
      ledMode = LED_MODE_BLINK_SLOW;
 800119c:	2302      	movs	r3, #2
 800119e:	60fb      	str	r3, [r7, #12]
      break;
 80011a0:	e003      	b.n	80011aa <MAIN_updateLedMode+0x42>

    case BUTTON_PAD_RIGHT:
      ledMode = LED_MODE_BLINK_FAST;
 80011a2:	2303      	movs	r3, #3
 80011a4:	60fb      	str	r3, [r7, #12]
      break;
 80011a6:	e000      	b.n	80011aa <MAIN_updateLedMode+0x42>

    default:
      ; /* Nothing to do */
      break;
 80011a8:	bf00      	nop
  }

  if (data->button != BUTTON_NONE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	691b      	ldr	r3, [r3, #16]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <MAIN_updateLedMode+0x56>
  {
    LED_setMode(ledMode);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 ff76 	bl	80060a8 <LED_setMode>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
}
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop

080011c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a04      	ldr	r2, [pc, #16]	; (80011e4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 80011d8:	f004 ff80 	bl	80060dc <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000504 	.word	0x20000504

080011e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a09      	ldr	r2, [pc, #36]	; (8001218 <HAL_UART_RxCpltCallback+0x30>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d103      	bne.n	8001200 <HAL_UART_RxCpltCallback+0x18>
  {
    CONSOLE_receiveData(&huart1);
 80011f8:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_UART_RxCpltCallback+0x30>)
 80011fa:	f004 fa2f 	bl	800565c <CONSOLE_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80011fe:	e006      	b.n	800120e <HAL_UART_RxCpltCallback+0x26>
  else if (huart == &huart2)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a06      	ldr	r2, [pc, #24]	; (800121c <HAL_UART_RxCpltCallback+0x34>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_UART_RxCpltCallback+0x26>
    MASTER_CONTROL_receiveData(&huart2);
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <HAL_UART_RxCpltCallback+0x34>)
 800120a:	f005 f81b 	bl	8006244 <MASTER_CONTROL_receiveData>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000490 	.word	0x20000490
 800121c:	2000066c 	.word	0x2000066c

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	e7fe      	b.n	8001228 <Error_Handler+0x8>
	...

0800122c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_MspInit+0x5c>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_MspInit+0x5c>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_MspInit+0x5c>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_MspInit+0x5c>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <HAL_MspInit+0x5c>)
 8001250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001254:	61d3      	str	r3, [r2, #28]
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <HAL_MspInit+0x5c>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_MspInit+0x60>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_MspInit+0x60>)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	bf00      	nop
 8001280:	3714      	adds	r7, #20
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000

08001290 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_ADC_MspInit+0x6c>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d121      	bne.n	80012f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <HAL_ADC_MspInit+0x70>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a12      	ldr	r2, [pc, #72]	; (8001300 <HAL_ADC_MspInit+0x70>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_ADC_MspInit+0x70>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <HAL_ADC_MspInit+0x70>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a0c      	ldr	r2, [pc, #48]	; (8001300 <HAL_ADC_MspInit+0x70>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_ADC_MspInit+0x70>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 80012e0:	2320      	movs	r3, #32
 80012e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	4619      	mov	r1, r3
 80012ee:	4805      	ldr	r0, [pc, #20]	; (8001304 <HAL_ADC_MspInit+0x74>)
 80012f0:	f001 f952 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40012400 	.word	0x40012400
 8001300:	40021000 	.word	0x40021000
 8001304:	40010800 	.word	0x40010800

08001308 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a23      	ldr	r2, [pc, #140]	; (80013a4 <HAL_TIM_Base_MspInit+0x9c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d114      	bne.n	8001344 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a22      	ldr	r2, [pc, #136]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001324:	6193      	str	r3, [r2, #24]
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2104      	movs	r1, #4
 8001336:	2019      	movs	r0, #25
 8001338:	f000 ffb5 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800133c:	2019      	movs	r0, #25
 800133e:	f000 ffce 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001342:	e02a      	b.n	800139a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d114      	bne.n	8001378 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2101      	movs	r1, #1
 800136a:	201c      	movs	r0, #28
 800136c:	f000 ff9b 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001370:	201c      	movs	r0, #28
 8001372:	f000 ffb4 	bl	80022de <HAL_NVIC_EnableIRQ>
}
 8001376:	e010      	b.n	800139a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_TIM_Base_MspInit+0xa4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10b      	bne.n	800139a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001382:	4b09      	ldr	r3, [pc, #36]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800138c:	6193      	str	r3, [r2, #24]
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40012c00 	.word	0x40012c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40013400 	.word	0x40013400

080013b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <HAL_TIM_MspPostInit+0x5c>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d118      	bne.n	8001402 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_TIM_MspPostInit+0x60>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_TIM_MspPostInit+0x60>)
 80013d6:	f043 0310 	orr.w	r3, r3, #16
 80013da:	6193      	str	r3, [r2, #24]
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_TIM_MspPostInit+0x60>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 80013e8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80013ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0310 	add.w	r3, r7, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_TIM_MspPostInit+0x64>)
 80013fe:	f001 f8cb 	bl	8002598 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40013400 	.word	0x40013400
 8001410:	40021000 	.word	0x40021000
 8001414:	40011000 	.word	0x40011000

08001418 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0318 	add.w	r3, r7, #24
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a3f      	ldr	r2, [pc, #252]	; (8001530 <HAL_UART_MspInit+0x118>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d13a      	bne.n	80014ae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001438:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <HAL_UART_MspInit+0x11c>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a3d      	ldr	r2, [pc, #244]	; (8001534 <HAL_UART_MspInit+0x11c>)
 800143e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <HAL_UART_MspInit+0x11c>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b38      	ldr	r3, [pc, #224]	; (8001534 <HAL_UART_MspInit+0x11c>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a37      	ldr	r2, [pc, #220]	; (8001534 <HAL_UART_MspInit+0x11c>)
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b35      	ldr	r3, [pc, #212]	; (8001534 <HAL_UART_MspInit+0x11c>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0318 	add.w	r3, r7, #24
 800147a:	4619      	mov	r1, r3
 800147c:	482e      	ldr	r0, [pc, #184]	; (8001538 <HAL_UART_MspInit+0x120>)
 800147e:	f001 f88b 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	4619      	mov	r1, r3
 8001496:	4828      	ldr	r0, [pc, #160]	; (8001538 <HAL_UART_MspInit+0x120>)
 8001498:	f001 f87e 	bl	8002598 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	2103      	movs	r1, #3
 80014a0:	2025      	movs	r0, #37	; 0x25
 80014a2:	f000 ff00 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014a6:	2025      	movs	r0, #37	; 0x25
 80014a8:	f000 ff19 	bl	80022de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ac:	e03c      	b.n	8001528 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_UART_MspInit+0x124>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d137      	bne.n	8001528 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b8:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <HAL_UART_MspInit+0x11c>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4a1d      	ldr	r2, [pc, #116]	; (8001534 <HAL_UART_MspInit+0x11c>)
 80014be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c2:	61d3      	str	r3, [r2, #28]
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <HAL_UART_MspInit+0x11c>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	4b18      	ldr	r3, [pc, #96]	; (8001534 <HAL_UART_MspInit+0x11c>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a17      	ldr	r2, [pc, #92]	; (8001534 <HAL_UART_MspInit+0x11c>)
 80014d6:	f043 0304 	orr.w	r3, r3, #4
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b15      	ldr	r3, [pc, #84]	; (8001534 <HAL_UART_MspInit+0x11c>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f4:	f107 0318 	add.w	r3, r7, #24
 80014f8:	4619      	mov	r1, r3
 80014fa:	480f      	ldr	r0, [pc, #60]	; (8001538 <HAL_UART_MspInit+0x120>)
 80014fc:	f001 f84c 	bl	8002598 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001500:	2308      	movs	r3, #8
 8001502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0318 	add.w	r3, r7, #24
 8001510:	4619      	mov	r1, r3
 8001512:	4809      	ldr	r0, [pc, #36]	; (8001538 <HAL_UART_MspInit+0x120>)
 8001514:	f001 f840 	bl	8002598 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001518:	2200      	movs	r2, #0
 800151a:	2102      	movs	r1, #2
 800151c:	2026      	movs	r0, #38	; 0x26
 800151e:	f000 fec2 	bl	80022a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001522:	2026      	movs	r0, #38	; 0x26
 8001524:	f000 fedb 	bl	80022de <HAL_NVIC_EnableIRQ>
}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	; 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40013800 	.word	0x40013800
 8001534:	40021000 	.word	0x40021000
 8001538:	40010800 	.word	0x40010800
 800153c:	40004400 	.word	0x40004400

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr

08001576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001586:	f000 f95d 	bl	8001844 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM1_UP_IRQHandler+0x10>)
 8001596:	f002 f9af 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000504 	.word	0x20000504

080015a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <TIM2_IRQHandler+0x10>)
 80015aa:	f002 f9a5 	bl	80038f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	200005b8 	.word	0x200005b8

080015b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015bc:	4802      	ldr	r0, [pc, #8]	; (80015c8 <USART1_IRQHandler+0x10>)
 80015be:	f003 f9c3 	bl	8004948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000490 	.word	0x20000490

080015cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <USART2_IRQHandler+0x10>)
 80015d2:	f003 f9b9 	bl	8004948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000066c 	.word	0x2000066c

080015e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
	return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bc80      	pop	{r7}
 80015ec:	4770      	bx	lr

080015ee <_kill>:

int _kill(int pid, int sig)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f8:	f004 ff3e 	bl	8006478 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2216      	movs	r2, #22
 8001600:	601a      	str	r2, [r3, #0]
	return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_exit>:

void _exit (int status)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001616:	f04f 31ff 	mov.w	r1, #4294967295
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffe7 	bl	80015ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8001620:	e7fe      	b.n	8001620 <_exit+0x12>

08001622 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e00a      	b.n	800164a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001634:	f3af 8000 	nop.w
 8001638:	4601      	mov	r1, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	b2ca      	uxtb	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf0      	blt.n	8001634 <_read+0x12>
	}

return len;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e009      	b.n	8001682 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	60ba      	str	r2, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbf1      	blt.n	800166e <_write+0x12>
	}
	return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_close>:

int _close(int file)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	605a      	str	r2, [r3, #4]
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <_isatty>:

int _isatty(int file)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	return 1;
 80016d0:	2301      	movs	r3, #1
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
	return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016fc:	4a14      	ldr	r2, [pc, #80]	; (8001750 <_sbrk+0x5c>)
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <_sbrk+0x60>)
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d102      	bne.n	8001716 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_sbrk+0x64>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <_sbrk+0x68>)
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d207      	bcs.n	8001734 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001724:	f004 fea8 	bl	8006478 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	220c      	movs	r2, #12
 800172c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
 8001732:	e009      	b.n	8001748 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_sbrk+0x64>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <_sbrk+0x64>)
 8001744:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001746:	68fb      	ldr	r3, [r7, #12]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	2000c000 	.word	0x2000c000
 8001754:	00000400 	.word	0x00000400
 8001758:	20000294 	.word	0x20000294
 800175c:	200006f8 	.word	0x200006f8

08001760 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480c      	ldr	r0, [pc, #48]	; (80017a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176e:	490d      	ldr	r1, [pc, #52]	; (80017a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001770:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001784:	4c0a      	ldr	r4, [pc, #40]	; (80017b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001792:	f7ff ffe5 	bl	8001760 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001796:	f005 f83f 	bl	8006818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800179a:	f7ff f967 	bl	8000a6c <main>
  bx lr
 800179e:	4770      	bx	lr
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80017a8:	0800a264 	.word	0x0800a264
  ldr r2, =_sbss
 80017ac:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 80017b0:	200006f4 	.word	0x200006f4

080017b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC1_2_IRQHandler>
	...

080017b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_Init+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <HAL_Init+0x28>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 fd61 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f000 f808 	bl	80017e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fd2a 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40022000 	.word	0x40022000

080017e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_InitTick+0x54>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_InitTick+0x58>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fd79 	bl	80022fa <HAL_SYSTICK_Config>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e00e      	b.n	8001830 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2b0f      	cmp	r3, #15
 8001816:	d80a      	bhi.n	800182e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001818:	2200      	movs	r2, #0
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f000 fd41 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001824:	4a06      	ldr	r2, [pc, #24]	; (8001840 <HAL_InitTick+0x5c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000004 	.word	0x20000004
 800183c:	2000000c 	.word	0x2000000c
 8001840:	20000008 	.word	0x20000008

08001844 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_IncTick+0x1c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_IncTick+0x20>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4413      	add	r3, r2
 8001854:	4a03      	ldr	r2, [pc, #12]	; (8001864 <HAL_IncTick+0x20>)
 8001856:	6013      	str	r3, [r2, #0]
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	2000000c 	.word	0x2000000c
 8001864:	200006e0 	.word	0x200006e0

08001868 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return uwTick;
 800186c:	4b02      	ldr	r3, [pc, #8]	; (8001878 <HAL_GetTick+0x10>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	200006e0 	.word	0x200006e0

0800187c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e0ce      	b.n	8001a3c <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d109      	bne.n	80018c0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fce8 	bl	8001290 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 fbd7 	bl	8002074 <ADC_ConversionStop_Disable>
 80018c6:	4603      	mov	r3, r0
 80018c8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 80a9 	bne.w	8001a2a <HAL_ADC_Init+0x1ae>
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80a5 	bne.w	8001a2a <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018e8:	f023 0302 	bic.w	r3, r3, #2
 80018ec:	f043 0202 	orr.w	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4951      	ldr	r1, [pc, #324]	; (8001a44 <HAL_ADC_Init+0x1c8>)
 80018fe:	428b      	cmp	r3, r1
 8001900:	d10a      	bne.n	8001918 <HAL_ADC_Init+0x9c>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800190a:	d002      	beq.n	8001912 <HAL_ADC_Init+0x96>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69db      	ldr	r3, [r3, #28]
 8001910:	e004      	b.n	800191c <HAL_ADC_Init+0xa0>
 8001912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001916:	e001      	b.n	800191c <HAL_ADC_Init+0xa0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800191c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7b1b      	ldrb	r3, [r3, #12]
 8001922:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001924:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	4313      	orrs	r3, r2
 800192a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001934:	d003      	beq.n	800193e <HAL_ADC_Init+0xc2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d102      	bne.n	8001944 <HAL_ADC_Init+0xc8>
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	e000      	b.n	8001946 <HAL_ADC_Init+0xca>
 8001944:	2300      	movs	r3, #0
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7d1b      	ldrb	r3, [r3, #20]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d119      	bne.n	8001988 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7b1b      	ldrb	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d109      	bne.n	8001970 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	3b01      	subs	r3, #1
 8001962:	035a      	lsls	r2, r3, #13
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	e00b      	b.n	8001988 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001974:	f043 0220 	orr.w	r2, r3, #32
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	f043 0201 	orr.w	r2, r3, #1
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_ADC_Init+0x1cc>)
 80019a4:	4013      	ands	r3, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	430b      	orrs	r3, r1
 80019ae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019b8:	d003      	beq.n	80019c2 <HAL_ADC_Init+0x146>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d104      	bne.n	80019cc <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	051b      	lsls	r3, r3, #20
 80019ca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	430a      	orrs	r2, r1
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_ADC_Init+0x1d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d10b      	bne.n	8001a08 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fa:	f023 0303 	bic.w	r3, r3, #3
 80019fe:	f043 0201 	orr.w	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a06:	e018      	b.n	8001a3a <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f023 0312 	bic.w	r3, r3, #18
 8001a10:	f043 0210 	orr.w	r2, r3, #16
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f043 0201 	orr.w	r2, r3, #1
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a28:	e007      	b.n	8001a3a <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	f043 0210 	orr.w	r2, r3, #16
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40013c00 	.word	0x40013c00
 8001a48:	ffe1f7fd 	.word	0xffe1f7fd
 8001a4c:	ff1f0efe 	.word	0xff1f0efe

08001a50 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Start+0x1a>
 8001a66:	2302      	movs	r3, #2
 8001a68:	e098      	b.n	8001b9c <HAL_ADC_Start+0x14c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 faa4 	bl	8001fc0 <ADC_Enable>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 8087 	bne.w	8001b92 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a41      	ldr	r2, [pc, #260]	; (8001ba4 <HAL_ADC_Start+0x154>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d105      	bne.n	8001aae <HAL_ADC_Start+0x5e>
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_ADC_Start+0x158>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d115      	bne.n	8001ada <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d026      	beq.n	8001b16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ad8:	e01d      	b.n	8001b16 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a2f      	ldr	r2, [pc, #188]	; (8001ba8 <HAL_ADC_Start+0x158>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d004      	beq.n	8001afa <HAL_ADC_Start+0xaa>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <HAL_ADC_Start+0x154>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10d      	bne.n	8001b16 <HAL_ADC_Start+0xc6>
 8001afa:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_ADC_Start+0x158>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d007      	beq.n	8001b16 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	f023 0206 	bic.w	r2, r3, #6
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b2e:	e002      	b.n	8001b36 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f06f 0202 	mvn.w	r2, #2
 8001b46:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b52:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b56:	d113      	bne.n	8001b80 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_ADC_Start+0x154>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d105      	bne.n	8001b6e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_ADC_Start+0x158>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d108      	bne.n	8001b80 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	e00c      	b.n	8001b9a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e003      	b.n	8001b9a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40012800 	.word	0x40012800
 8001ba8:	40012400 	.word	0x40012400

08001bac <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bc2:	f7ff fe51 	bl	8001868 <HAL_GetTick>
 8001bc6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bda:	f043 0220 	orr.w	r2, r3, #32
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0d3      	b.n	8001d96 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d131      	bne.n	8001c60 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12a      	bne.n	8001c60 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c0a:	e021      	b.n	8001c50 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d01d      	beq.n	8001c50 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d007      	beq.n	8001c2a <HAL_ADC_PollForConversion+0x7e>
 8001c1a:	f7ff fe25 	bl	8001868 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	683a      	ldr	r2, [r7, #0]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d212      	bcs.n	8001c50 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10b      	bne.n	8001c50 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	f043 0204 	orr.w	r2, r3, #4
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0a2      	b.n	8001d96 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0d6      	beq.n	8001c0c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c5e:	e070      	b.n	8001d42 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_ADC_PollForConversion+0x1f4>)
 8001c62:	681c      	ldr	r4, [r3, #0]
 8001c64:	2002      	movs	r0, #2
 8001c66:	f001 fb2d 	bl	80032c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6919      	ldr	r1, [r3, #16]
 8001c76:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_ADC_PollForConversion+0x1f8>)
 8001c78:	400b      	ands	r3, r1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d118      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0x104>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68d9      	ldr	r1, [r3, #12]
 8001c84:	4b48      	ldr	r3, [pc, #288]	; (8001da8 <HAL_ADC_PollForConversion+0x1fc>)
 8001c86:	400b      	ands	r3, r1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d111      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0x104>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6919      	ldr	r1, [r3, #16]
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <HAL_ADC_PollForConversion+0x200>)
 8001c94:	400b      	ands	r3, r1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d108      	bne.n	8001cac <HAL_ADC_PollForConversion+0x100>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68d9      	ldr	r1, [r3, #12]
 8001ca0:	4b43      	ldr	r3, [pc, #268]	; (8001db0 <HAL_ADC_PollForConversion+0x204>)
 8001ca2:	400b      	ands	r3, r1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_PollForConversion+0x100>
 8001ca8:	2314      	movs	r3, #20
 8001caa:	e020      	b.n	8001cee <HAL_ADC_PollForConversion+0x142>
 8001cac:	2329      	movs	r3, #41	; 0x29
 8001cae:	e01e      	b.n	8001cee <HAL_ADC_PollForConversion+0x142>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6919      	ldr	r1, [r3, #16]
 8001cb6:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <HAL_ADC_PollForConversion+0x200>)
 8001cb8:	400b      	ands	r3, r1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_ADC_PollForConversion+0x120>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	4b3a      	ldr	r3, [pc, #232]	; (8001db0 <HAL_ADC_PollForConversion+0x204>)
 8001cc6:	400b      	ands	r3, r1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_ADC_PollForConversion+0x13c>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6919      	ldr	r1, [r3, #16]
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_ADC_PollForConversion+0x208>)
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d108      	bne.n	8001cec <HAL_ADC_PollForConversion+0x140>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68d9      	ldr	r1, [r3, #12]
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_ADC_PollForConversion+0x208>)
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_PollForConversion+0x140>
 8001ce8:	2354      	movs	r3, #84	; 0x54
 8001cea:	e000      	b.n	8001cee <HAL_ADC_PollForConversion+0x142>
 8001cec:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001cee:	fb02 f303 	mul.w	r3, r2, r3
 8001cf2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cf4:	e021      	b.n	8001d3a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cfc:	d01a      	beq.n	8001d34 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_ADC_PollForConversion+0x168>
 8001d04:	f7ff fdb0 	bl	8001868 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d20f      	bcs.n	8001d34 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d90b      	bls.n	8001d34 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d20:	f043 0204 	orr.w	r2, r3, #4
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e030      	b.n	8001d96 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d8d9      	bhi.n	8001cf6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f06f 0212 	mvn.w	r2, #18
 8001d4a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001d62:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001d66:	d115      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d111      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	371c      	adds	r7, #28
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000004 	.word	0x20000004
 8001da4:	24924924 	.word	0x24924924
 8001da8:	00924924 	.word	0x00924924
 8001dac:	12492492 	.word	0x12492492
 8001db0:	00492492 	.word	0x00492492
 8001db4:	00249249 	.word	0x00249249

08001db8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x20>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0dc      	b.n	8001faa <HAL_ADC_ConfigChannel+0x1da>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d81c      	bhi.n	8001e3a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b05      	subs	r3, #5
 8001e12:	221f      	movs	r2, #31
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4019      	ands	r1, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b05      	subs	r3, #5
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
 8001e38:	e03c      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d81c      	bhi.n	8001e7c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	3b23      	subs	r3, #35	; 0x23
 8001e54:	221f      	movs	r2, #31
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	4019      	ands	r1, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b23      	subs	r3, #35	; 0x23
 8001e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	631a      	str	r2, [r3, #48]	; 0x30
 8001e7a:	e01b      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b41      	subs	r3, #65	; 0x41
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b41      	subs	r3, #65	; 0x41
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b09      	cmp	r3, #9
 8001eba:	d91c      	bls.n	8001ef6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68d9      	ldr	r1, [r3, #12]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b1e      	subs	r3, #30
 8001ece:	2207      	movs	r2, #7
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6898      	ldr	r0, [r3, #8]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b1e      	subs	r3, #30
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	e019      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6919      	ldr	r1, [r3, #16]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	2207      	movs	r2, #7
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4019      	ands	r1, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6898      	ldr	r0, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d003      	beq.n	8001f3a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f36:	2b11      	cmp	r3, #17
 8001f38:	d132      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1d      	ldr	r2, [pc, #116]	; (8001fb4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d125      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d126      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f60:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d11a      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a13      	ldr	r2, [pc, #76]	; (8001fbc <HAL_ADC_ConfigChannel+0x1ec>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9a      	lsrs	r2, r3, #18
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x1b2>
 8001f8e:	e007      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f94:	f043 0220 	orr.w	r2, r3, #32
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40012400 	.word	0x40012400
 8001fb8:	20000004 	.word	0x20000004
 8001fbc:	431bde83 	.word	0x431bde83

08001fc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d040      	beq.n	8002060 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 0201 	orr.w	r2, r2, #1
 8001fec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fee:	4b1f      	ldr	r3, [pc, #124]	; (800206c <ADC_Enable+0xac>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1f      	ldr	r2, [pc, #124]	; (8002070 <ADC_Enable+0xb0>)
 8001ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ff8:	0c9b      	lsrs	r3, r3, #18
 8001ffa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ffc:	e002      	b.n	8002004 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b01      	subs	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f9      	bne.n	8001ffe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800200a:	f7ff fc2d 	bl	8001868 <HAL_GetTick>
 800200e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002010:	e01f      	b.n	8002052 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002012:	f7ff fc29 	bl	8001868 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d918      	bls.n	8002052 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d011      	beq.n	8002052 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002032:	f043 0210 	orr.w	r2, r3, #16
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f043 0201 	orr.w	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e007      	b.n	8002062 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b01      	cmp	r3, #1
 800205e:	d1d8      	bne.n	8002012 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000004 	.word	0x20000004
 8002070:	431bde83 	.word	0x431bde83

08002074 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d12e      	bne.n	80020ec <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
 800209c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800209e:	f7ff fbe3 	bl	8001868 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020a4:	e01b      	b.n	80020de <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020a6:	f7ff fbdf 	bl	8001868 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d914      	bls.n	80020de <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10d      	bne.n	80020de <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e007      	b.n	80020ee <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d0dc      	beq.n	80020a6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	2b00      	cmp	r3, #0
 800216c:	db0b      	blt.n	8002186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	f003 021f 	and.w	r2, r3, #31
 8002174:	4906      	ldr	r1, [pc, #24]	; (8002190 <__NVIC_EnableIRQ+0x34>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2001      	movs	r0, #1
 800217e:	fa00 f202 	lsl.w	r2, r0, r2
 8002182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	bc80      	pop	{r7}
 800224a:	4770      	bx	lr

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff90 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	; (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff2d 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff42 	bl	8002140 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff90 	bl	80021e8 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5f 	bl	8002194 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	4603      	mov	r3, r0
 80022e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff ff35 	bl	800215c <__NVIC_EnableIRQ>
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ffa2 	bl	800224c <SysTick_Config>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002324:	2b02      	cmp	r3, #2
 8002326:	d008      	beq.n	800233a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2204      	movs	r2, #4
 800232c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e020      	b.n	800237c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 020e 	bic.w	r2, r2, #14
 8002348:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f202 	lsl.w	r2, r1, r2
 8002368:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800237a:	7bfb      	ldrb	r3, [r7, #15]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr
	...

08002388 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800239a:	2b02      	cmp	r3, #2
 800239c:	d005      	beq.n	80023aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2204      	movs	r2, #4
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e0d6      	b.n	8002558 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 020e 	bic.w	r2, r2, #14
 80023b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	4b64      	ldr	r3, [pc, #400]	; (8002564 <HAL_DMA_Abort_IT+0x1dc>)
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d958      	bls.n	8002488 <HAL_DMA_Abort_IT+0x100>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a63      	ldr	r2, [pc, #396]	; (8002568 <HAL_DMA_Abort_IT+0x1e0>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d04f      	beq.n	8002480 <HAL_DMA_Abort_IT+0xf8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a61      	ldr	r2, [pc, #388]	; (800256c <HAL_DMA_Abort_IT+0x1e4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d048      	beq.n	800247c <HAL_DMA_Abort_IT+0xf4>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a60      	ldr	r2, [pc, #384]	; (8002570 <HAL_DMA_Abort_IT+0x1e8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d040      	beq.n	8002476 <HAL_DMA_Abort_IT+0xee>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a5e      	ldr	r2, [pc, #376]	; (8002574 <HAL_DMA_Abort_IT+0x1ec>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d038      	beq.n	8002470 <HAL_DMA_Abort_IT+0xe8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a5d      	ldr	r2, [pc, #372]	; (8002578 <HAL_DMA_Abort_IT+0x1f0>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d030      	beq.n	800246a <HAL_DMA_Abort_IT+0xe2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a5b      	ldr	r2, [pc, #364]	; (800257c <HAL_DMA_Abort_IT+0x1f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d028      	beq.n	8002464 <HAL_DMA_Abort_IT+0xdc>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a53      	ldr	r2, [pc, #332]	; (8002564 <HAL_DMA_Abort_IT+0x1dc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d020      	beq.n	800245e <HAL_DMA_Abort_IT+0xd6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a57      	ldr	r2, [pc, #348]	; (8002580 <HAL_DMA_Abort_IT+0x1f8>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d019      	beq.n	800245a <HAL_DMA_Abort_IT+0xd2>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a56      	ldr	r2, [pc, #344]	; (8002584 <HAL_DMA_Abort_IT+0x1fc>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d012      	beq.n	8002456 <HAL_DMA_Abort_IT+0xce>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a54      	ldr	r2, [pc, #336]	; (8002588 <HAL_DMA_Abort_IT+0x200>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d00a      	beq.n	8002450 <HAL_DMA_Abort_IT+0xc8>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a53      	ldr	r2, [pc, #332]	; (800258c <HAL_DMA_Abort_IT+0x204>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d102      	bne.n	800244a <HAL_DMA_Abort_IT+0xc2>
 8002444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002448:	e01b      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 800244a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800244e:	e018      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 8002450:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002454:	e015      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 8002456:	2310      	movs	r3, #16
 8002458:	e013      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 800245a:	2301      	movs	r3, #1
 800245c:	e011      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 800245e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002462:	e00e      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 8002464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002468:	e00b      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 800246a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800246e:	e008      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 8002470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002474:	e005      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 8002476:	f44f 7380 	mov.w	r3, #256	; 0x100
 800247a:	e002      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 800247c:	2310      	movs	r3, #16
 800247e:	e000      	b.n	8002482 <HAL_DMA_Abort_IT+0xfa>
 8002480:	2301      	movs	r3, #1
 8002482:	4a43      	ldr	r2, [pc, #268]	; (8002590 <HAL_DMA_Abort_IT+0x208>)
 8002484:	6053      	str	r3, [r2, #4]
 8002486:	e057      	b.n	8002538 <HAL_DMA_Abort_IT+0x1b0>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a36      	ldr	r2, [pc, #216]	; (8002568 <HAL_DMA_Abort_IT+0x1e0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d04f      	beq.n	8002532 <HAL_DMA_Abort_IT+0x1aa>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a35      	ldr	r2, [pc, #212]	; (800256c <HAL_DMA_Abort_IT+0x1e4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d048      	beq.n	800252e <HAL_DMA_Abort_IT+0x1a6>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a33      	ldr	r2, [pc, #204]	; (8002570 <HAL_DMA_Abort_IT+0x1e8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d040      	beq.n	8002528 <HAL_DMA_Abort_IT+0x1a0>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a32      	ldr	r2, [pc, #200]	; (8002574 <HAL_DMA_Abort_IT+0x1ec>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d038      	beq.n	8002522 <HAL_DMA_Abort_IT+0x19a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a30      	ldr	r2, [pc, #192]	; (8002578 <HAL_DMA_Abort_IT+0x1f0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d030      	beq.n	800251c <HAL_DMA_Abort_IT+0x194>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a2f      	ldr	r2, [pc, #188]	; (800257c <HAL_DMA_Abort_IT+0x1f4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d028      	beq.n	8002516 <HAL_DMA_Abort_IT+0x18e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a26      	ldr	r2, [pc, #152]	; (8002564 <HAL_DMA_Abort_IT+0x1dc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d020      	beq.n	8002510 <HAL_DMA_Abort_IT+0x188>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a2b      	ldr	r2, [pc, #172]	; (8002580 <HAL_DMA_Abort_IT+0x1f8>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d019      	beq.n	800250c <HAL_DMA_Abort_IT+0x184>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a29      	ldr	r2, [pc, #164]	; (8002584 <HAL_DMA_Abort_IT+0x1fc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d012      	beq.n	8002508 <HAL_DMA_Abort_IT+0x180>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a28      	ldr	r2, [pc, #160]	; (8002588 <HAL_DMA_Abort_IT+0x200>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d00a      	beq.n	8002502 <HAL_DMA_Abort_IT+0x17a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a26      	ldr	r2, [pc, #152]	; (800258c <HAL_DMA_Abort_IT+0x204>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d102      	bne.n	80024fc <HAL_DMA_Abort_IT+0x174>
 80024f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fa:	e01b      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 80024fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002500:	e018      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002506:	e015      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002508:	2310      	movs	r3, #16
 800250a:	e013      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 800250c:	2301      	movs	r3, #1
 800250e:	e011      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002514:	e00e      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002516:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800251a:	e00b      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 800251c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002520:	e008      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002526:	e005      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252c:	e002      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 800252e:	2310      	movs	r3, #16
 8002530:	e000      	b.n	8002534 <HAL_DMA_Abort_IT+0x1ac>
 8002532:	2301      	movs	r3, #1
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_DMA_Abort_IT+0x20c>)
 8002536:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	4798      	blx	r3
    } 
  }
  return status;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40020080 	.word	0x40020080
 8002568:	40020008 	.word	0x40020008
 800256c:	4002001c 	.word	0x4002001c
 8002570:	40020030 	.word	0x40020030
 8002574:	40020044 	.word	0x40020044
 8002578:	40020058 	.word	0x40020058
 800257c:	4002006c 	.word	0x4002006c
 8002580:	40020408 	.word	0x40020408
 8002584:	4002041c 	.word	0x4002041c
 8002588:	40020430 	.word	0x40020430
 800258c:	40020444 	.word	0x40020444
 8002590:	40020400 	.word	0x40020400
 8002594:	40020000 	.word	0x40020000

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	; 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e179      	b.n	80028a0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025ac:	2201      	movs	r2, #1
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8168 	bne.w	800289a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4aa0      	ldr	r2, [pc, #640]	; (8002850 <HAL_GPIO_Init+0x2b8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d05e      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025d4:	4a9e      	ldr	r2, [pc, #632]	; (8002850 <HAL_GPIO_Init+0x2b8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d875      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025da:	4a9e      	ldr	r2, [pc, #632]	; (8002854 <HAL_GPIO_Init+0x2bc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d058      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025e0:	4a9c      	ldr	r2, [pc, #624]	; (8002854 <HAL_GPIO_Init+0x2bc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d86f      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025e6:	4a9c      	ldr	r2, [pc, #624]	; (8002858 <HAL_GPIO_Init+0x2c0>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d052      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025ec:	4a9a      	ldr	r2, [pc, #616]	; (8002858 <HAL_GPIO_Init+0x2c0>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d869      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025f2:	4a9a      	ldr	r2, [pc, #616]	; (800285c <HAL_GPIO_Init+0x2c4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04c      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025f8:	4a98      	ldr	r2, [pc, #608]	; (800285c <HAL_GPIO_Init+0x2c4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d863      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025fe:	4a98      	ldr	r2, [pc, #608]	; (8002860 <HAL_GPIO_Init+0x2c8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d046      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 8002604:	4a96      	ldr	r2, [pc, #600]	; (8002860 <HAL_GPIO_Init+0x2c8>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d85d      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 800260a:	2b12      	cmp	r3, #18
 800260c:	d82a      	bhi.n	8002664 <HAL_GPIO_Init+0xcc>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d859      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <HAL_GPIO_Init+0x80>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002693 	.word	0x08002693
 800261c:	0800266d 	.word	0x0800266d
 8002620:	0800267f 	.word	0x0800267f
 8002624:	080026c1 	.word	0x080026c1
 8002628:	080026c7 	.word	0x080026c7
 800262c:	080026c7 	.word	0x080026c7
 8002630:	080026c7 	.word	0x080026c7
 8002634:	080026c7 	.word	0x080026c7
 8002638:	080026c7 	.word	0x080026c7
 800263c:	080026c7 	.word	0x080026c7
 8002640:	080026c7 	.word	0x080026c7
 8002644:	080026c7 	.word	0x080026c7
 8002648:	080026c7 	.word	0x080026c7
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026c7 	.word	0x080026c7
 8002654:	080026c7 	.word	0x080026c7
 8002658:	080026c7 	.word	0x080026c7
 800265c:	08002675 	.word	0x08002675
 8002660:	08002689 	.word	0x08002689
 8002664:	4a7f      	ldr	r2, [pc, #508]	; (8002864 <HAL_GPIO_Init+0x2cc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266a:	e02c      	b.n	80026c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e029      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e024      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	3308      	adds	r3, #8
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e01f      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	330c      	adds	r3, #12
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e01a      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269a:	2304      	movs	r3, #4
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e013      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	611a      	str	r2, [r3, #16]
          break;
 80026b2:	e009      	b.n	80026c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	615a      	str	r2, [r3, #20]
          break;
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          break;
 80026c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d801      	bhi.n	80026d2 <HAL_GPIO_Init+0x13a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_Init+0x13e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	; 0xff
 80026dc:	d802      	bhi.n	80026e4 <HAL_GPIO_Init+0x14c>
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x152>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	3b08      	subs	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80c1 	beq.w	800289a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002718:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_GPIO_Init+0x2d0>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002730:	4a4e      	ldr	r2, [pc, #312]	; (800286c <HAL_GPIO_Init+0x2d4>)
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a46      	ldr	r2, [pc, #280]	; (8002870 <HAL_GPIO_Init+0x2d8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d01f      	beq.n	800279c <HAL_GPIO_Init+0x204>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a45      	ldr	r2, [pc, #276]	; (8002874 <HAL_GPIO_Init+0x2dc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d019      	beq.n	8002798 <HAL_GPIO_Init+0x200>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a44      	ldr	r2, [pc, #272]	; (8002878 <HAL_GPIO_Init+0x2e0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d013      	beq.n	8002794 <HAL_GPIO_Init+0x1fc>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a43      	ldr	r2, [pc, #268]	; (800287c <HAL_GPIO_Init+0x2e4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00d      	beq.n	8002790 <HAL_GPIO_Init+0x1f8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a42      	ldr	r2, [pc, #264]	; (8002880 <HAL_GPIO_Init+0x2e8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0x1f4>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a41      	ldr	r2, [pc, #260]	; (8002884 <HAL_GPIO_Init+0x2ec>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d101      	bne.n	8002788 <HAL_GPIO_Init+0x1f0>
 8002784:	2305      	movs	r3, #5
 8002786:	e00a      	b.n	800279e <HAL_GPIO_Init+0x206>
 8002788:	2306      	movs	r3, #6
 800278a:	e008      	b.n	800279e <HAL_GPIO_Init+0x206>
 800278c:	2304      	movs	r3, #4
 800278e:	e006      	b.n	800279e <HAL_GPIO_Init+0x206>
 8002790:	2303      	movs	r3, #3
 8002792:	e004      	b.n	800279e <HAL_GPIO_Init+0x206>
 8002794:	2302      	movs	r3, #2
 8002796:	e002      	b.n	800279e <HAL_GPIO_Init+0x206>
 8002798:	2301      	movs	r3, #1
 800279a:	e000      	b.n	800279e <HAL_GPIO_Init+0x206>
 800279c:	2300      	movs	r3, #0
 800279e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a0:	f002 0203 	and.w	r2, r2, #3
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	4093      	lsls	r3, r2
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ae:	492f      	ldr	r1, [pc, #188]	; (800286c <HAL_GPIO_Init+0x2d4>)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	3302      	adds	r3, #2
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	492e      	ldr	r1, [pc, #184]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	600b      	str	r3, [r1, #0]
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	43db      	mvns	r3, r3
 80027de:	492a      	ldr	r1, [pc, #168]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	4924      	ldr	r1, [pc, #144]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	43db      	mvns	r3, r3
 8002806:	4920      	ldr	r1, [pc, #128]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002808:	4013      	ands	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	491a      	ldr	r1, [pc, #104]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	608b      	str	r3, [r1, #8]
 8002824:	e006      	b.n	8002834 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002826:	4b18      	ldr	r3, [pc, #96]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	43db      	mvns	r3, r3
 800282e:	4916      	ldr	r1, [pc, #88]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002830:	4013      	ands	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d025      	beq.n	800288c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	4910      	ldr	r1, [pc, #64]	; (8002888 <HAL_GPIO_Init+0x2f0>)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
 800284c:	e025      	b.n	800289a <HAL_GPIO_Init+0x302>
 800284e:	bf00      	nop
 8002850:	10320000 	.word	0x10320000
 8002854:	10310000 	.word	0x10310000
 8002858:	10220000 	.word	0x10220000
 800285c:	10210000 	.word	0x10210000
 8002860:	10120000 	.word	0x10120000
 8002864:	10110000 	.word	0x10110000
 8002868:	40021000 	.word	0x40021000
 800286c:	40010000 	.word	0x40010000
 8002870:	40010800 	.word	0x40010800
 8002874:	40010c00 	.word	0x40010c00
 8002878:	40011000 	.word	0x40011000
 800287c:	40011400 	.word	0x40011400
 8002880:	40011800 	.word	0x40011800
 8002884:	40011c00 	.word	0x40011c00
 8002888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_GPIO_Init+0x324>)
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	43db      	mvns	r3, r3
 8002894:	4909      	ldr	r1, [pc, #36]	; (80028bc <HAL_GPIO_Init+0x324>)
 8002896:	4013      	ands	r3, r2
 8002898:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	3301      	adds	r3, #1
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f47f ae7e 	bne.w	80025ac <HAL_GPIO_Init+0x14>
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	372c      	adds	r7, #44	; 0x2c
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40010400 	.word	0x40010400

080028c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]
 80028cc:	4613      	mov	r3, r2
 80028ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d0:	787b      	ldrb	r3, [r7, #1]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d6:	887a      	ldrh	r2, [r7, #2]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028dc:	e003      	b.n	80028e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	041a      	lsls	r2, r3, #16
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	611a      	str	r2, [r3, #16]
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002902:	887a      	ldrh	r2, [r7, #2]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4013      	ands	r3, r2
 8002908:	041a      	lsls	r2, r3, #16
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43d9      	mvns	r1, r3
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	400b      	ands	r3, r1
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	611a      	str	r2, [r3, #16]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
	...

08002924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e26c      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 8087 	beq.w	8002a52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4b92      	ldr	r3, [pc, #584]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 030c 	and.w	r3, r3, #12
 800294c:	2b04      	cmp	r3, #4
 800294e:	d00c      	beq.n	800296a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002950:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b08      	cmp	r3, #8
 800295a:	d112      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
 800295c:	4b8c      	ldr	r3, [pc, #560]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002964:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002968:	d10b      	bne.n	8002982 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800296a:	4b89      	ldr	r3, [pc, #548]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d06c      	beq.n	8002a50 <HAL_RCC_OscConfig+0x12c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d168      	bne.n	8002a50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e246      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800298a:	d106      	bne.n	800299a <HAL_RCC_OscConfig+0x76>
 800298c:	4b80      	ldr	r3, [pc, #512]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a7f      	ldr	r2, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002992:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002996:	6013      	str	r3, [r2, #0]
 8002998:	e02e      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b7b      	ldr	r3, [pc, #492]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a7a      	ldr	r2, [pc, #488]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b78      	ldr	r3, [pc, #480]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a77      	ldr	r2, [pc, #476]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xbc>
 80029c6:	4b72      	ldr	r3, [pc, #456]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a71      	ldr	r2, [pc, #452]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xd4>
 80029e0:	4b6b      	ldr	r3, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6a      	ldr	r2, [pc, #424]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b68      	ldr	r3, [pc, #416]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe ff32 	bl	8001868 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe ff2e 	bl	8001868 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e1fa      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b5d      	ldr	r3, [pc, #372]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xe4>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe ff1e 	bl	8001868 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe ff1a 	bl	8001868 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1e6      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x10c>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d063      	beq.n	8002b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5e:	4b4c      	ldr	r3, [pc, #304]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a6a:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x18c>
 8002a76:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b43      	ldr	r3, [pc, #268]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1ba      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b3d      	ldr	r3, [pc, #244]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4939      	ldr	r1, [pc, #228]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b36      	ldr	r3, [pc, #216]	; (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abe:	f7fe fed3 	bl	8001868 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fecf 	bl	8001868 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e19b      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4927      	ldr	r1, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b26      	ldr	r3, [pc, #152]	; (8002b94 <HAL_RCC_OscConfig+0x270>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe feb2 	bl	8001868 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe feae 	bl	8001868 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e17a      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b1d      	ldr	r3, [pc, #116]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d03a      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d019      	beq.n	8002b6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b40:	f7fe fe92 	bl	8001868 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fe8e 	bl	8001868 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e15a      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b66:	2001      	movs	r0, #1
 8002b68:	f000 fad8 	bl	800311c <RCC_Delay>
 8002b6c:	e01c      	b.n	8002ba8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <HAL_RCC_OscConfig+0x274>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b74:	f7fe fe78 	bl	8001868 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7a:	e00f      	b.n	8002b9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7c:	f7fe fe74 	bl	8001868 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d908      	bls.n	8002b9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e140      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
 8002b8e:	bf00      	nop
 8002b90:	40021000 	.word	0x40021000
 8002b94:	42420000 	.word	0x42420000
 8002b98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b9c:	4b9e      	ldr	r3, [pc, #632]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1e9      	bne.n	8002b7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80a6 	beq.w	8002d02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bba:	4b97      	ldr	r3, [pc, #604]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10d      	bne.n	8002be2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bc6:	4b94      	ldr	r3, [pc, #592]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4a93      	ldr	r2, [pc, #588]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	61d3      	str	r3, [r2, #28]
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bde:	2301      	movs	r3, #1
 8002be0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be2:	4b8e      	ldr	r3, [pc, #568]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d118      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bee:	4b8b      	ldr	r3, [pc, #556]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a8a      	ldr	r2, [pc, #552]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bfa:	f7fe fe35 	bl	8001868 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c02:	f7fe fe31 	bl	8001868 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b64      	cmp	r3, #100	; 0x64
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0fd      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	4b81      	ldr	r3, [pc, #516]	; (8002e1c <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0f0      	beq.n	8002c02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <HAL_RCC_OscConfig+0x312>
 8002c28:	4b7b      	ldr	r3, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a7a      	ldr	r2, [pc, #488]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	e02d      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCC_OscConfig+0x334>
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6213      	str	r3, [r2, #32]
 8002c4a:	4b73      	ldr	r3, [pc, #460]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	4a72      	ldr	r2, [pc, #456]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6213      	str	r3, [r2, #32]
 8002c56:	e01c      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d10c      	bne.n	8002c7a <HAL_RCC_OscConfig+0x356>
 8002c60:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a6c      	ldr	r2, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	6213      	str	r3, [r2, #32]
 8002c78:	e00b      	b.n	8002c92 <HAL_RCC_OscConfig+0x36e>
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a66      	ldr	r2, [pc, #408]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	6213      	str	r3, [r2, #32]
 8002c86:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002c8c:	f023 0304 	bic.w	r3, r3, #4
 8002c90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d015      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9a:	f7fe fde5 	bl	8001868 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	e00a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f7fe fde1 	bl	8001868 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e0ab      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb8:	4b57      	ldr	r3, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ee      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x37e>
 8002cc4:	e014      	b.n	8002cf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fdcf 	bl	8001868 <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ccc:	e00a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cce:	f7fe fdcb 	bl	8001868 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e095      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ee      	bne.n	8002cce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cf0:	7dfb      	ldrb	r3, [r7, #23]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b48      	ldr	r3, [pc, #288]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4a47      	ldr	r2, [pc, #284]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8081 	beq.w	8002e0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d0c:	4b42      	ldr	r3, [pc, #264]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d061      	beq.n	8002ddc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d146      	bne.n	8002dae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d20:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <HAL_RCC_OscConfig+0x4fc>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d26:	f7fe fd9f 	bl	8001868 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fe fd9b 	bl	8001868 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e067      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d56:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	492d      	ldr	r1, [pc, #180]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a19      	ldr	r1, [r3, #32]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	4927      	ldr	r1, [pc, #156]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <HAL_RCC_OscConfig+0x4fc>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe fd6f 	bl	8001868 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe fd6b 	bl	8001868 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e037      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x46a>
 8002dac:	e02f      	b.n	8002e0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <HAL_RCC_OscConfig+0x4fc>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fd58 	bl	8001868 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fd54 	bl	8001868 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e020      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x498>
 8002dda:	e018      	b.n	8002e0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e013      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x4f4>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	40007000 	.word	0x40007000
 8002e20:	42420060 	.word	0x42420060

08002e24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0d0      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e38:	4b6a      	ldr	r3, [pc, #424]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d910      	bls.n	8002e68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b67      	ldr	r3, [pc, #412]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4965      	ldr	r1, [pc, #404]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b63      	ldr	r3, [pc, #396]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0b8      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d020      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e80:	4b59      	ldr	r3, [pc, #356]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	4a58      	ldr	r2, [pc, #352]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e98:	4b53      	ldr	r3, [pc, #332]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a52      	ldr	r2, [pc, #328]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ea2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea4:	4b50      	ldr	r3, [pc, #320]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	494d      	ldr	r1, [pc, #308]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d040      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d107      	bne.n	8002eda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d115      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e07f      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d107      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee2:	4b41      	ldr	r3, [pc, #260]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d109      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e073      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef2:	4b3d      	ldr	r3, [pc, #244]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06b      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f02:	4b39      	ldr	r3, [pc, #228]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f023 0203 	bic.w	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4936      	ldr	r1, [pc, #216]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f14:	f7fe fca8 	bl	8001868 <HAL_GetTick>
 8002f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f1a:	e00a      	b.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1c:	f7fe fca4 	bl	8001868 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e053      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 020c 	and.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d1eb      	bne.n	8002f1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f44:	4b27      	ldr	r3, [pc, #156]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0307 	and.w	r3, r3, #7
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d210      	bcs.n	8002f74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f023 0207 	bic.w	r2, r3, #7
 8002f5a:	4922      	ldr	r1, [pc, #136]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f62:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d001      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0304 	and.w	r3, r3, #4
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	4916      	ldr	r1, [pc, #88]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f9e:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	00db      	lsls	r3, r3, #3
 8002fac:	490e      	ldr	r1, [pc, #56]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fb2:	f000 f821 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	091b      	lsrs	r3, r3, #4
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	490a      	ldr	r1, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	5ccb      	ldrb	r3, [r1, r3]
 8002fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_RCC_ClockConfig+0x1cc>)
 8002fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <HAL_RCC_ClockConfig+0x1d0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe fc06 	bl	80017e4 <HAL_InitTick>

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	08009cac 	.word	0x08009cac
 8002ff0:	20000004 	.word	0x20000004
 8002ff4:	20000008 	.word	0x20000008

08002ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff8:	b490      	push	{r4, r7}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ffe:	4b2a      	ldr	r3, [pc, #168]	; (80030a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003000:	1d3c      	adds	r4, r7, #4
 8003002:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003004:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003008:	f240 2301 	movw	r3, #513	; 0x201
 800300c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	2300      	movs	r3, #0
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b04      	cmp	r3, #4
 8003030:	d002      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x40>
 8003032:	2b08      	cmp	r3, #8
 8003034:	d003      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x46>
 8003036:	e02d      	b.n	8003094 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003038:	4b1d      	ldr	r3, [pc, #116]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800303a:	623b      	str	r3, [r7, #32]
      break;
 800303c:	e02d      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	0c9b      	lsrs	r3, r3, #18
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800304a:	4413      	add	r3, r2
 800304c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003050:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800305c:	4b13      	ldr	r3, [pc, #76]	; (80030ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0c5b      	lsrs	r3, r3, #17
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800306a:	4413      	add	r3, r2
 800306c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003070:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	4a0e      	ldr	r2, [pc, #56]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003076:	fb02 f203 	mul.w	r2, r2, r3
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	e004      	b.n	800308e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003088:	fb02 f303 	mul.w	r3, r2, r3
 800308c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003090:	623b      	str	r3, [r7, #32]
      break;
 8003092:	e002      	b.n	800309a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003096:	623b      	str	r3, [r7, #32]
      break;
 8003098:	bf00      	nop
    }
  }
  return sysclockfreq;
 800309a:	6a3b      	ldr	r3, [r7, #32]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3728      	adds	r7, #40	; 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc90      	pop	{r4, r7}
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	0800989c 	.word	0x0800989c
 80030ac:	40021000 	.word	0x40021000
 80030b0:	007a1200 	.word	0x007a1200
 80030b4:	003d0900 	.word	0x003d0900

080030b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	20000004 	.word	0x20000004

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030d0:	f7ff fff2 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	; (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08009cbc 	.word	0x08009cbc

080030f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030f8:	f7ff ffde 	bl	80030b8 <HAL_RCC_GetHCLKFreq>
 80030fc:	4602      	mov	r2, r0
 80030fe:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0adb      	lsrs	r3, r3, #11
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	4903      	ldr	r1, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800310a:	5ccb      	ldrb	r3, [r1, r3]
 800310c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003110:	4618      	mov	r0, r3
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40021000 	.word	0x40021000
 8003118:	08009cbc 	.word	0x08009cbc

0800311c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003124:	4b0a      	ldr	r3, [pc, #40]	; (8003150 <RCC_Delay+0x34>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <RCC_Delay+0x38>)
 800312a:	fba2 2303 	umull	r2, r3, r2, r3
 800312e:	0a5b      	lsrs	r3, r3, #9
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	fb02 f303 	mul.w	r3, r2, r3
 8003136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003138:	bf00      	nop
  }
  while (Delay --);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1e5a      	subs	r2, r3, #1
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f9      	bne.n	8003138 <RCC_Delay+0x1c>
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr
 8003150:	20000004 	.word	0x20000004
 8003154:	10624dd3 	.word	0x10624dd3

08003158 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d07d      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003174:	2300      	movs	r3, #0
 8003176:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003178:	4b4f      	ldr	r3, [pc, #316]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10d      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b4c      	ldr	r3, [pc, #304]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	4a4b      	ldr	r2, [pc, #300]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	61d3      	str	r3, [r2, #28]
 8003190:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a0:	4b46      	ldr	r3, [pc, #280]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d118      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ac:	4b43      	ldr	r3, [pc, #268]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a42      	ldr	r2, [pc, #264]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fb56 	bl	8001868 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	e008      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c0:	f7fe fb52 	bl	8001868 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e06d      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d2:	4b3a      	ldr	r3, [pc, #232]	; (80032bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031de:	4b36      	ldr	r3, [pc, #216]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d02e      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d027      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031fc:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003206:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003208:	2201      	movs	r2, #1
 800320a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003212:	4a29      	ldr	r2, [pc, #164]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe fb21 	bl	8001868 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7fe fb1d 	bl	8001868 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e036      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324c:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4917      	ldr	r1, [pc, #92]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800325a:	4313      	orrs	r3, r2
 800325c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800325e:	7dfb      	ldrb	r3, [r7, #23]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b14      	ldr	r3, [pc, #80]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	490b      	ldr	r1, [pc, #44]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d008      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800329a:	4b07      	ldr	r3, [pc, #28]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	4904      	ldr	r1, [pc, #16]	; (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40007000 	.word	0x40007000
 80032c0:	42420440 	.word	0x42420440

080032c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80032c4:	b590      	push	{r4, r7, lr}
 80032c6:	b08d      	sub	sp, #52	; 0x34
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80032ce:	f107 040c 	add.w	r4, r7, #12
 80032d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032d8:	f240 2301 	movw	r3, #513	; 0x201
 80032dc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	2300      	movs	r3, #0
 80032e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e6:	2300      	movs	r3, #0
 80032e8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	2300      	movs	r3, #0
 80032f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3b01      	subs	r3, #1
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	f200 80b6 	bhi.w	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	080033e7 	.word	0x080033e7
 8003308:	0800344d 	.word	0x0800344d
 800330c:	08003469 	.word	0x08003469
 8003310:	080033d7 	.word	0x080033d7
 8003314:	08003469 	.word	0x08003469
 8003318:	08003469 	.word	0x08003469
 800331c:	08003469 	.word	0x08003469
 8003320:	080033df 	.word	0x080033df
 8003324:	08003469 	.word	0x08003469
 8003328:	08003469 	.word	0x08003469
 800332c:	08003469 	.word	0x08003469
 8003330:	08003469 	.word	0x08003469
 8003334:	08003469 	.word	0x08003469
 8003338:	08003469 	.word	0x08003469
 800333c:	08003469 	.word	0x08003469
 8003340:	08003345 	.word	0x08003345
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8003344:	4b4e      	ldr	r3, [pc, #312]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800334a:	4b4d      	ldr	r3, [pc, #308]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 808a 	beq.w	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	0c9b      	lsrs	r3, r3, #18
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003364:	4413      	add	r3, r2
 8003366:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800336a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d018      	beq.n	80033a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003376:	4b42      	ldr	r3, [pc, #264]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	0c5b      	lsrs	r3, r3, #17
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003384:	4413      	add	r3, r2
 8003386:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003396:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	fbb2 f2f3 	udiv	r2, r2, r3
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033a6:	e004      	b.n	80033b2 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	4a37      	ldr	r2, [pc, #220]	; (8003488 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80033ac:	fb02 f303 	mul.w	r3, r2, r3
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80033b2:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033be:	d102      	bne.n	80033c6 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80033c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80033c4:	e052      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4a30      	ldr	r2, [pc, #192]	; (800348c <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80033d4:	e04a      	b.n	800346c <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80033d6:	f7ff fe0f 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 80033da:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80033dc:	e049      	b.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80033de:	f7ff fe0b 	bl	8002ff8 <HAL_RCC_GetSysClockFreq>
 80033e2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80033e4:	e045      	b.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f6:	d108      	bne.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8003402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003406:	62bb      	str	r3, [r7, #40]	; 0x28
 8003408:	e01f      	b.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003414:	d109      	bne.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003416:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8003422:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
 8003428:	e00f      	b.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003434:	d11c      	bne.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8003436:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8003442:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003446:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8003448:	e012      	b.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800344a:	e011      	b.n	8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800344c:	f7ff fe52 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	0b9b      	lsrs	r3, r3, #14
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	3301      	adds	r3, #1
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003466:	e004      	b.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8003468:	bf00      	nop
 800346a:	e002      	b.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 800346c:	bf00      	nop
 800346e:	e000      	b.n	8003472 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8003470:	bf00      	nop
    }
  }
  return (frequency);
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003474:	4618      	mov	r0, r3
 8003476:	3734      	adds	r7, #52	; 0x34
 8003478:	46bd      	mov	sp, r7
 800347a:	bd90      	pop	{r4, r7, pc}
 800347c:	080098ac 	.word	0x080098ac
 8003480:	40021000 	.word	0x40021000
 8003484:	007a1200 	.word	0x007a1200
 8003488:	003d0900 	.word	0x003d0900
 800348c:	aaaaaaab 	.word	0xaaaaaaab

08003490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e04c      	b.n	800353c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d111      	bne.n	80034d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fffa 	bl	80044b0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a1f      	ldr	r2, [pc, #124]	; (8003544 <HAL_TIM_Base_Init+0xb4>)
 80034c8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2202      	movs	r2, #2
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f000 fd03 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	08001309 	.word	0x08001309

08003548 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d001      	beq.n	8003560 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e03c      	b.n	80035da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <HAL_TIM_Base_Start+0x9c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d018      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	; (80035e8 <HAL_TIM_Base_Start+0xa0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d013      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003584:	d00e      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_TIM_Base_Start+0xa4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d009      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a16      	ldr	r2, [pc, #88]	; (80035f0 <HAL_TIM_Base_Start+0xa8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d004      	beq.n	80035a4 <HAL_TIM_Base_Start+0x5c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a15      	ldr	r2, [pc, #84]	; (80035f4 <HAL_TIM_Base_Start+0xac>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d111      	bne.n	80035c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2b06      	cmp	r3, #6
 80035b4:	d010      	beq.n	80035d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0201 	orr.w	r2, r2, #1
 80035c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035c6:	e007      	b.n	80035d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40012c00 	.word	0x40012c00
 80035e8:	40013400 	.word	0x40013400
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00

080035f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d001      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e044      	b.n	800369a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a1d      	ldr	r2, [pc, #116]	; (80036a4 <HAL_TIM_Base_Start_IT+0xac>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d018      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a1c      	ldr	r2, [pc, #112]	; (80036a8 <HAL_TIM_Base_Start_IT+0xb0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d013      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003644:	d00e      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_TIM_Base_Start_IT+0xb4>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a16      	ldr	r2, [pc, #88]	; (80036b0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d004      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0x6c>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d111      	bne.n	8003688 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b06      	cmp	r3, #6
 8003674:	d010      	beq.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e007      	b.n	8003698 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40013400 	.word	0x40013400
 80036ac:	40000400 	.word	0x40000400
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40000c00 	.word	0x40000c00

080036b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e04c      	b.n	8003764 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d111      	bne.n	80036fa <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fee6 	bl	80044b0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_TIM_PWM_Init+0xb4>)
 80036f0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2202      	movs	r2, #2
 80036fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f000 fbef 	bl	8003ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	08003771 	.word	0x08003771

08003770 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
	...

08003784 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d109      	bne.n	80037a8 <HAL_TIM_PWM_Start+0x24>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b01      	cmp	r3, #1
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e022      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d109      	bne.n	80037c2 <HAL_TIM_PWM_Start+0x3e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	e015      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d109      	bne.n	80037dc <HAL_TIM_PWM_Start+0x58>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e008      	b.n	80037ee <HAL_TIM_PWM_Start+0x6a>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	bf14      	ite	ne
 80037e8:	2301      	movne	r3, #1
 80037ea:	2300      	moveq	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e072      	b.n	80038dc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0x82>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003804:	e013      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b04      	cmp	r3, #4
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0x92>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003814:	e00b      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b08      	cmp	r3, #8
 800381a:	d104      	bne.n	8003826 <HAL_TIM_PWM_Start+0xa2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003824:	e003      	b.n	800382e <HAL_TIM_PWM_Start+0xaa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2202      	movs	r2, #2
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2201      	movs	r2, #1
 8003834:	6839      	ldr	r1, [r7, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fe16 	bl	8004468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a28      	ldr	r2, [pc, #160]	; (80038e4 <HAL_TIM_PWM_Start+0x160>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_TIM_PWM_Start+0xcc>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a27      	ldr	r2, [pc, #156]	; (80038e8 <HAL_TIM_PWM_Start+0x164>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_TIM_PWM_Start+0xd0>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_TIM_PWM_Start+0xd2>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003868:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_TIM_PWM_Start+0x160>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x122>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1b      	ldr	r2, [pc, #108]	; (80038e8 <HAL_TIM_PWM_Start+0x164>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x122>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d00e      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x122>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a17      	ldr	r2, [pc, #92]	; (80038ec <HAL_TIM_PWM_Start+0x168>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d009      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x122>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a16      	ldr	r2, [pc, #88]	; (80038f0 <HAL_TIM_PWM_Start+0x16c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_TIM_PWM_Start+0x122>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <HAL_TIM_PWM_Start+0x170>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d111      	bne.n	80038ca <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d010      	beq.n	80038da <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c8:	e007      	b.n	80038da <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40012c00 	.word	0x40012c00
 80038e8:	40013400 	.word	0x40013400
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00

080038f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b02      	cmp	r3, #2
 800390c:	d128      	bne.n	8003960 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d121      	bne.n	8003960 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0202 	mvn.w	r2, #2
 8003924:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0303 	and.w	r3, r3, #3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d005      	beq.n	8003946 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4798      	blx	r3
 8003944:	e009      	b.n	800395a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	2b04      	cmp	r3, #4
 800396c:	d128      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f003 0304 	and.w	r3, r3, #4
 8003978:	2b04      	cmp	r3, #4
 800397a:	d121      	bne.n	80039c0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f06f 0204 	mvn.w	r2, #4
 8003984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2202      	movs	r2, #2
 800398a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
 80039a4:	e009      	b.n	80039ba <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d128      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d121      	bne.n	8003a20 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0208 	mvn.w	r2, #8
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2204      	movs	r2, #4
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
 8003a04:	e009      	b.n	8003a1a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d128      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0310 	and.w	r3, r3, #16
 8003a38:	2b10      	cmp	r3, #16
 8003a3a:	d121      	bne.n	8003a80 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f06f 0210 	mvn.w	r2, #16
 8003a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2208      	movs	r2, #8
 8003a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	69db      	ldr	r3, [r3, #28]
 8003a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
 8003a64:	e009      	b.n	8003a7a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d110      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d109      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f06f 0201 	mvn.w	r2, #1
 8003aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aba:	2b80      	cmp	r3, #128	; 0x80
 8003abc:	d110      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac8:	2b80      	cmp	r3, #128	; 0x80
 8003aca:	d109      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aea:	2b40      	cmp	r3, #64	; 0x40
 8003aec:	d110      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d109      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	f003 0320 	and.w	r3, r3, #32
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d110      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d109      	bne.n	8003b40 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0220 	mvn.w	r2, #32
 8003b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b40:	bf00      	nop
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0ac      	b.n	8003cbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b0c      	cmp	r3, #12
 8003b6e:	f200 809f 	bhi.w	8003cb0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003b72:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003bad 	.word	0x08003bad
 8003b7c:	08003cb1 	.word	0x08003cb1
 8003b80:	08003cb1 	.word	0x08003cb1
 8003b84:	08003cb1 	.word	0x08003cb1
 8003b88:	08003bed 	.word	0x08003bed
 8003b8c:	08003cb1 	.word	0x08003cb1
 8003b90:	08003cb1 	.word	0x08003cb1
 8003b94:	08003cb1 	.word	0x08003cb1
 8003b98:	08003c2f 	.word	0x08003c2f
 8003b9c:	08003cb1 	.word	0x08003cb1
 8003ba0:	08003cb1 	.word	0x08003cb1
 8003ba4:	08003cb1 	.word	0x08003cb1
 8003ba8:	08003c6f 	.word	0x08003c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fa16 	bl	8003fe4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0208 	orr.w	r2, r2, #8
 8003bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0204 	bic.w	r2, r2, #4
 8003bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6999      	ldr	r1, [r3, #24]
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	619a      	str	r2, [r3, #24]
      break;
 8003bea:	e062      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fa66 	bl	80040c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6999      	ldr	r1, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691b      	ldr	r3, [r3, #16]
 8003c22:	021a      	lsls	r2, r3, #8
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	619a      	str	r2, [r3, #24]
      break;
 8003c2c:	e041      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f000 fab9 	bl	80041ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	69da      	ldr	r2, [r3, #28]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0208 	orr.w	r2, r2, #8
 8003c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 0204 	bic.w	r2, r2, #4
 8003c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69d9      	ldr	r1, [r3, #28]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	61da      	str	r2, [r3, #28]
      break;
 8003c6c:	e021      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fb0d 	bl	8004294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	021a      	lsls	r2, r3, #8
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	61da      	str	r2, [r3, #28]
      break;
 8003cae:	e000      	b.n	8003cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_TIM_ConfigClockSource+0x18>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e0b3      	b.n	8003e44 <HAL_TIM_ConfigClockSource+0x180>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d14:	d03e      	beq.n	8003d94 <HAL_TIM_ConfigClockSource+0xd0>
 8003d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d1a:	f200 8087 	bhi.w	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d22:	f000 8085 	beq.w	8003e30 <HAL_TIM_ConfigClockSource+0x16c>
 8003d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2a:	d87f      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d2c:	2b70      	cmp	r3, #112	; 0x70
 8003d2e:	d01a      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0xa2>
 8003d30:	2b70      	cmp	r3, #112	; 0x70
 8003d32:	d87b      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d34:	2b60      	cmp	r3, #96	; 0x60
 8003d36:	d050      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0x116>
 8003d38:	2b60      	cmp	r3, #96	; 0x60
 8003d3a:	d877      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d3c:	2b50      	cmp	r3, #80	; 0x50
 8003d3e:	d03c      	beq.n	8003dba <HAL_TIM_ConfigClockSource+0xf6>
 8003d40:	2b50      	cmp	r3, #80	; 0x50
 8003d42:	d873      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d44:	2b40      	cmp	r3, #64	; 0x40
 8003d46:	d058      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0x136>
 8003d48:	2b40      	cmp	r3, #64	; 0x40
 8003d4a:	d86f      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d4c:	2b30      	cmp	r3, #48	; 0x30
 8003d4e:	d064      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x156>
 8003d50:	2b30      	cmp	r3, #48	; 0x30
 8003d52:	d86b      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d54:	2b20      	cmp	r3, #32
 8003d56:	d060      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x156>
 8003d58:	2b20      	cmp	r3, #32
 8003d5a:	d867      	bhi.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05c      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x156>
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d05a      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d64:	e062      	b.n	8003e2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6818      	ldr	r0, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6899      	ldr	r1, [r3, #8]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f000 fb58 	bl	800442a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	609a      	str	r2, [r3, #8]
      break;
 8003d92:	e04e      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	6899      	ldr	r1, [r3, #8]
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	f000 fb41 	bl	800442a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db6:	609a      	str	r2, [r3, #8]
      break;
 8003db8:	e03b      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6859      	ldr	r1, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f000 fab8 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2150      	movs	r1, #80	; 0x50
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fb0f 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003dd8:	e02b      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6859      	ldr	r1, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	461a      	mov	r2, r3
 8003de8:	f000 fad6 	bl	8004398 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2160      	movs	r1, #96	; 0x60
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 faff 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003df8:	e01b      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6818      	ldr	r0, [r3, #0]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6859      	ldr	r1, [r3, #4]
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f000 fa98 	bl	800433c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2140      	movs	r1, #64	; 0x40
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 faef 	bl	80043f6 <TIM_ITRx_SetConfig>
      break;
 8003e18:	e00b      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f000 fae6 	bl	80043f6 <TIM_ITRx_SetConfig>
        break;
 8003e2a:	e002      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3710      	adds	r7, #16
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr

08003eca <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
	...

08003ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a33      	ldr	r2, [pc, #204]	; (8003fd0 <TIM_Base_SetConfig+0xe0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a32      	ldr	r2, [pc, #200]	; (8003fd4 <TIM_Base_SetConfig+0xe4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f16:	d00b      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a2f      	ldr	r2, [pc, #188]	; (8003fd8 <TIM_Base_SetConfig+0xe8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a2e      	ldr	r2, [pc, #184]	; (8003fdc <TIM_Base_SetConfig+0xec>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_Base_SetConfig+0x40>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a2d      	ldr	r2, [pc, #180]	; (8003fe0 <TIM_Base_SetConfig+0xf0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d108      	bne.n	8003f42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <TIM_Base_SetConfig+0xe0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <TIM_Base_SetConfig+0x82>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <TIM_Base_SetConfig+0xe4>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00f      	beq.n	8003f72 <TIM_Base_SetConfig+0x82>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d00b      	beq.n	8003f72 <TIM_Base_SetConfig+0x82>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a1e      	ldr	r2, [pc, #120]	; (8003fd8 <TIM_Base_SetConfig+0xe8>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_Base_SetConfig+0x82>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <TIM_Base_SetConfig+0xec>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_Base_SetConfig+0x82>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <TIM_Base_SetConfig+0xf0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d108      	bne.n	8003f84 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a09      	ldr	r2, [pc, #36]	; (8003fd0 <TIM_Base_SetConfig+0xe0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0xc8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <TIM_Base_SetConfig+0xe4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00

08003fe4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0201 	bic.w	r2, r3, #1
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f023 0302 	bic.w	r3, r3, #2
 800402c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a20      	ldr	r2, [pc, #128]	; (80040bc <TIM_OC1_SetConfig+0xd8>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d003      	beq.n	8004048 <TIM_OC1_SetConfig+0x64>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <TIM_OC1_SetConfig+0xdc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10c      	bne.n	8004062 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0308 	bic.w	r3, r3, #8
 800404e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a15      	ldr	r2, [pc, #84]	; (80040bc <TIM_OC1_SetConfig+0xd8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_OC1_SetConfig+0x8e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <TIM_OC1_SetConfig+0xdc>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d111      	bne.n	8004096 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	4313      	orrs	r3, r2
 8004094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	621a      	str	r2, [r3, #32]
}
 80040b0:	bf00      	nop
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40013400 	.word	0x40013400

080040c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f023 0210 	bic.w	r2, r3, #16
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	f023 0320 	bic.w	r3, r3, #32
 800410e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a21      	ldr	r2, [pc, #132]	; (80041a4 <TIM_OC2_SetConfig+0xe0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_OC2_SetConfig+0x68>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <TIM_OC2_SetConfig+0xe4>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10d      	bne.n	8004148 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004146:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <TIM_OC2_SetConfig+0xe0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC2_SetConfig+0x94>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a15      	ldr	r2, [pc, #84]	; (80041a8 <TIM_OC2_SetConfig+0xe4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d113      	bne.n	8004180 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800415e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	4313      	orrs	r3, r2
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40013400 	.word	0x40013400

080041ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0303 	bic.w	r3, r3, #3
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	021b      	lsls	r3, r3, #8
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a21      	ldr	r2, [pc, #132]	; (800428c <TIM_OC3_SetConfig+0xe0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d003      	beq.n	8004212 <TIM_OC3_SetConfig+0x66>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <TIM_OC3_SetConfig+0xe4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d10d      	bne.n	800422e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	021b      	lsls	r3, r3, #8
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	4313      	orrs	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800422c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a16      	ldr	r2, [pc, #88]	; (800428c <TIM_OC3_SetConfig+0xe0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d003      	beq.n	800423e <TIM_OC3_SetConfig+0x92>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <TIM_OC3_SetConfig+0xe4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d113      	bne.n	8004266 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	621a      	str	r2, [r3, #32]
}
 8004280:	bf00      	nop
 8004282:	371c      	adds	r7, #28
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40012c00 	.word	0x40012c00
 8004290:	40013400 	.word	0x40013400

08004294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004294:	b480      	push	{r7}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	031b      	lsls	r3, r3, #12
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a11      	ldr	r2, [pc, #68]	; (8004334 <TIM_OC4_SetConfig+0xa0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d003      	beq.n	80042fc <TIM_OC4_SetConfig+0x68>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a10      	ldr	r2, [pc, #64]	; (8004338 <TIM_OC4_SetConfig+0xa4>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d109      	bne.n	8004310 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	019b      	lsls	r3, r3, #6
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	621a      	str	r2, [r3, #32]
}
 800432a:	bf00      	nop
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr
 8004334:	40012c00 	.word	0x40012c00
 8004338:	40013400 	.word	0x40013400

0800433c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0201 	bic.w	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 030a 	bic.w	r3, r3, #10
 8004378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4313      	orrs	r3, r2
 8004380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bc80      	pop	{r7}
 8004396:	4770      	bx	lr

08004398 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f023 0210 	bic.w	r2, r3, #16
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	011b      	lsls	r3, r3, #4
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	4313      	orrs	r3, r2
 80043de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	621a      	str	r2, [r3, #32]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	f043 0307 	orr.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	609a      	str	r2, [r3, #8]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]
 8004436:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004444:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4313      	orrs	r3, r2
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	609a      	str	r2, [r3, #8]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004468:	b480      	push	{r7}
 800446a:	b087      	sub	sp, #28
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	2201      	movs	r2, #1
 800447c:	fa02 f303 	lsl.w	r3, r2, r3
 8004480:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a1a      	ldr	r2, [r3, #32]
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	43db      	mvns	r3, r3
 800448a:	401a      	ands	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a1a      	ldr	r2, [r3, #32]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	fa01 f303 	lsl.w	r3, r1, r3
 80044a0:	431a      	orrs	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	; (800452c <TIM_ResetCallback+0x7c>)
 80044bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a1b      	ldr	r2, [pc, #108]	; (8004530 <TIM_ResetCallback+0x80>)
 80044c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <TIM_ResetCallback+0x84>)
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a19      	ldr	r2, [pc, #100]	; (8004538 <TIM_ResetCallback+0x88>)
 80044d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a18      	ldr	r2, [pc, #96]	; (800453c <TIM_ResetCallback+0x8c>)
 80044dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <TIM_ResetCallback+0x90>)
 80044e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <TIM_ResetCallback+0x94>)
 80044ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <TIM_ResetCallback+0x98>)
 80044f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a14      	ldr	r2, [pc, #80]	; (800454c <TIM_ResetCallback+0x9c>)
 80044fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a13      	ldr	r2, [pc, #76]	; (8004550 <TIM_ResetCallback+0xa0>)
 8004504:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <TIM_ResetCallback+0xa4>)
 800450c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a11      	ldr	r2, [pc, #68]	; (8004558 <TIM_ResetCallback+0xa8>)
 8004514:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <TIM_ResetCallback+0xac>)
 800451c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	080011c9 	.word	0x080011c9
 8004530:	08003e4d 	.word	0x08003e4d
 8004534:	08003eb9 	.word	0x08003eb9
 8004538:	08003ecb 	.word	0x08003ecb
 800453c:	08003e71 	.word	0x08003e71
 8004540:	08003e83 	.word	0x08003e83
 8004544:	08003e5f 	.word	0x08003e5f
 8004548:	08003e95 	.word	0x08003e95
 800454c:	08003ea7 	.word	0x08003ea7
 8004550:	08003edd 	.word	0x08003edd
 8004554:	080046db 	.word	0x080046db
 8004558:	080046ed 	.word	0x080046ed
 800455c:	080046ff 	.word	0x080046ff

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e050      	b.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a1b      	ldr	r2, [pc, #108]	; (8004624 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d018      	beq.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a19      	ldr	r2, [pc, #100]	; (8004628 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d013      	beq.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ce:	d00e      	beq.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a14      	ldr	r2, [pc, #80]	; (8004630 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d004      	beq.n	80045ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a12      	ldr	r2, [pc, #72]	; (8004634 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d10c      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	bc80      	pop	{r7}
 8004622:	4770      	bx	lr
 8004624:	40012c00 	.word	0x40012c00
 8004628:	40013400 	.word	0x40013400
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00

08004638 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004650:	2302      	movs	r3, #2
 8004652:	e03d      	b.n	80046d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	4313      	orrs	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	4313      	orrs	r3, r2
 8004684:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bc80      	pop	{r7}
 80046d8:	4770      	bx	lr

080046da <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bc80      	pop	{r7}
 80046ea:	4770      	bx	lr

080046ec <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e04a      	b.n	80047b8 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d111      	bne.n	8004752 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 fb00 	bl	8004d3c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d102      	bne.n	800474a <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_UART_Init+0xb0>)
 8004748:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2224      	movs	r2, #36	; 0x24
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004768:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fcf4 	bl	8005158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691a      	ldr	r2, [r3, #16]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800477e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800478e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800479e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b6:	2300      	movs	r3, #0
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	08001419 	.word	0x08001419

080047c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08a      	sub	sp, #40	; 0x28
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4613      	mov	r3, r2
 80047d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d17c      	bne.n	80048de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d002      	beq.n	80047f0 <HAL_UART_Transmit+0x2c>
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e075      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_UART_Transmit+0x3e>
 80047fe:	2302      	movs	r3, #2
 8004800:	e06e      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2221      	movs	r2, #33	; 0x21
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004818:	f7fd f826 	bl	8001868 <HAL_GetTick>
 800481c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	88fa      	ldrh	r2, [r7, #6]
 8004828:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004832:	d108      	bne.n	8004846 <HAL_UART_Transmit+0x82>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	61bb      	str	r3, [r7, #24]
 8004844:	e003      	b.n	800484e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004856:	e02a      	b.n	80048ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	2200      	movs	r2, #0
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 faa0 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e036      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10b      	bne.n	8004890 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	461a      	mov	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004886:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	3302      	adds	r3, #2
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e007      	b.n	80048a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	781a      	ldrb	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	3301      	adds	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1cf      	bne.n	8004858 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	9300      	str	r3, [sp, #0]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2200      	movs	r2, #0
 80048c0:	2140      	movs	r1, #64	; 0x40
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fa70 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d11d      	bne.n	800493e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <HAL_UART_Receive_IT+0x26>
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e016      	b.n	8004940 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_UART_Receive_IT+0x38>
 800491c:	2302      	movs	r3, #2
 800491e:	e00f      	b.n	8004940 <HAL_UART_Receive_IT+0x58>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	461a      	mov	r2, r3
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	68f8      	ldr	r0, [r7, #12]
 8004936:	f000 fa81 	bl	8004e3c <UART_Start_Receive_IT>
 800493a:	4603      	mov	r3, r0
 800493c:	e000      	b.n	8004940 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	f003 030f 	and.w	r3, r3, #15
 8004976:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10d      	bne.n	800499a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d008      	beq.n	800499a <HAL_UART_IRQHandler+0x52>
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fb34 	bl	8005000 <UART_Receive_IT>
      return;
 8004998:	e180      	b.n	8004c9c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80b4 	beq.w	8004b0a <HAL_UART_IRQHandler+0x1c2>
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_UART_IRQHandler+0x70>
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 80a9 	beq.w	8004b0a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_UART_IRQHandler+0x90>
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_UART_IRQHandler+0xb0>
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f0:	f043 0202 	orr.w	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00a      	beq.n	8004a18 <HAL_UART_IRQHandler+0xd0>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00f      	beq.n	8004a42 <HAL_UART_IRQHandler+0xfa>
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	f003 0320 	and.w	r3, r3, #32
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <HAL_UART_IRQHandler+0xee>
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d005      	beq.n	8004a42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3a:	f043 0208 	orr.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8123 	beq.w	8004c92 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <HAL_UART_IRQHandler+0x11e>
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f003 0320 	and.w	r3, r3, #32
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 facd 	bl	8005000 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	bf14      	ite	ne
 8004a74:	2301      	movne	r3, #1
 8004a76:	2300      	moveq	r3, #0
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f003 0308 	and.w	r3, r3, #8
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_UART_IRQHandler+0x146>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d033      	beq.n	8004af6 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa0d 	bl	8004eae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d024      	beq.n	8004aec <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695a      	ldr	r2, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ab0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abe:	4a79      	ldr	r2, [pc, #484]	; (8004ca4 <HAL_UART_IRQHandler+0x35c>)
 8004ac0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fd fc5e 	bl	8002388 <HAL_DMA_Abort_IT>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d019      	beq.n	8004b06 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae0:	e011      	b.n	8004b06 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aea:	e00c      	b.n	8004b06 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af4:	e007      	b.n	8004b06 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004b04:	e0c5      	b.n	8004c92 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b06:	bf00      	nop
    return;
 8004b08:	e0c3      	b.n	8004c92 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	f040 80a3 	bne.w	8004c5a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 809d 	beq.w	8004c5a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8097 	beq.w	8004c5a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d04f      	beq.n	8004bf0 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004b5a:	8a3b      	ldrh	r3, [r7, #16]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f000 809a 	beq.w	8004c96 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b66:	8a3a      	ldrh	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	f080 8094 	bcs.w	8004c96 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8a3a      	ldrh	r2, [r7, #16]
 8004b72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d02b      	beq.n	8004bd6 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b8c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	695a      	ldr	r2, [r3, #20]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0201 	bic.w	r2, r2, #1
 8004b9c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	695a      	ldr	r2, [r3, #20]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f022 0210 	bic.w	r2, r2, #16
 8004bca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fd fb9e 	bl	8002312 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8004be2:	b292      	uxth	r2, r2
 8004be4:	1a8a      	subs	r2, r1, r2
 8004be6:	b292      	uxth	r2, r2
 8004be8:	4611      	mov	r1, r2
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8004bee:	e052      	b.n	8004c96 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d048      	beq.n	8004c9a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8004c08:	8a7b      	ldrh	r3, [r7, #18]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d045      	beq.n	8004c9a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68da      	ldr	r2, [r3, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c1c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695a      	ldr	r2, [r3, #20]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f022 0201 	bic.w	r2, r2, #1
 8004c2c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f022 0210 	bic.w	r2, r2, #16
 8004c4a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c50:	8a7a      	ldrh	r2, [r7, #18]
 8004c52:	4611      	mov	r1, r2
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8004c58:	e01f      	b.n	8004c9a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_UART_IRQHandler+0x32e>
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f95e 	bl	8004f30 <UART_Transmit_IT>
    return;
 8004c74:	e012      	b.n	8004c9c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <HAL_UART_IRQHandler+0x354>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f99f 	bl	8004fce <UART_EndTransmit_IT>
    return;
 8004c90:	e004      	b.n	8004c9c <HAL_UART_IRQHandler+0x354>
    return;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_UART_IRQHandler+0x354>
      return;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_UART_IRQHandler+0x354>
      return;
 8004c9a:	bf00      	nop
  }
}
 8004c9c:	3728      	adds	r7, #40	; 0x28
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	08004f07 	.word	0x08004f07

08004ca8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr

08004cba <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr

08004ccc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr

08004cde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bc80      	pop	{r7}
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr

08004d02 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bc80      	pop	{r7}
 8004d24:	4770      	bx	lr

08004d26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	460b      	mov	r3, r1
 8004d30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr

08004d3c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0f      	ldr	r2, [pc, #60]	; (8004d84 <UART_InitCallbacksToDefault+0x48>)
 8004d48:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <UART_InitCallbacksToDefault+0x4c>)
 8004d4e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0e      	ldr	r2, [pc, #56]	; (8004d8c <UART_InitCallbacksToDefault+0x50>)
 8004d54:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <UART_InitCallbacksToDefault+0x54>)
 8004d5a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	; (8004d94 <UART_InitCallbacksToDefault+0x58>)
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a0c      	ldr	r2, [pc, #48]	; (8004d98 <UART_InitCallbacksToDefault+0x5c>)
 8004d66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <UART_InitCallbacksToDefault+0x60>)
 8004d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a0b      	ldr	r2, [pc, #44]	; (8004da0 <UART_InitCallbacksToDefault+0x64>)
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a0b      	ldr	r2, [pc, #44]	; (8004da4 <UART_InitCallbacksToDefault+0x68>)
 8004d78:	669a      	str	r2, [r3, #104]	; 0x68

}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr
 8004d84:	08004cbb 	.word	0x08004cbb
 8004d88:	08004ca9 	.word	0x08004ca9
 8004d8c:	08004ccd 	.word	0x08004ccd
 8004d90:	080011e9 	.word	0x080011e9
 8004d94:	08004cdf 	.word	0x08004cdf
 8004d98:	08004cf1 	.word	0x08004cf1
 8004d9c:	08004d03 	.word	0x08004d03
 8004da0:	08004d15 	.word	0x08004d15
 8004da4:	08004d27 	.word	0x08004d27

08004da8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db8:	e02c      	b.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d028      	beq.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d007      	beq.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dc8:	f7fc fd4e 	bl	8001868 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d21d      	bcs.n	8004e14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004de6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e00f      	b.n	8004e34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	bf0c      	ite	eq
 8004e24:	2301      	moveq	r3, #1
 8004e26:	2300      	movne	r3, #0
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d0c3      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	4613      	mov	r3, r2
 8004e48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	88fa      	ldrh	r2, [r7, #6]
 8004e54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	88fa      	ldrh	r2, [r7, #6]
 8004e5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2222      	movs	r2, #34	; 0x22
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68da      	ldr	r2, [r3, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e80:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0201 	orr.w	r2, r2, #1
 8004e90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0220 	orr.w	r2, r2, #32
 8004ea0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b083      	sub	sp, #12
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ec4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d107      	bne.n	8004eee <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 0210 	bic.w	r2, r2, #16
 8004eec:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b084      	sub	sp, #16
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f28:	bf00      	nop
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b21      	cmp	r3, #33	; 0x21
 8004f42:	d13e      	bne.n	8004fc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d114      	bne.n	8004f78 <UART_Transmit_IT+0x48>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d110      	bne.n	8004f78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	1c9a      	adds	r2, r3, #2
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	621a      	str	r2, [r3, #32]
 8004f76:	e008      	b.n	8004f8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	1c59      	adds	r1, r3, #1
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	6211      	str	r1, [r2, #32]
 8004f82:	781a      	ldrb	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4619      	mov	r1, r3
 8004f98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004fac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e000      	b.n	8004fc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fc2:	2302      	movs	r3, #2
  }
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr

08004fce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68da      	ldr	r2, [r3, #12]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fe4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b22      	cmp	r3, #34	; 0x22
 8005012:	f040 809b 	bne.w	800514c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d117      	bne.n	8005050 <UART_Receive_IT+0x50>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d113      	bne.n	8005050 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	b29b      	uxth	r3, r3
 800503a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800503e:	b29a      	uxth	r2, r3
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	1c9a      	adds	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	629a      	str	r2, [r3, #40]	; 0x28
 800504e:	e026      	b.n	800509e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005054:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005062:	d007      	beq.n	8005074 <UART_Receive_IT+0x74>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10a      	bne.n	8005082 <UART_Receive_IT+0x82>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d106      	bne.n	8005082 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	b2da      	uxtb	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e008      	b.n	8005094 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800508e:	b2da      	uxtb	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	4619      	mov	r1, r3
 80050ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d14a      	bne.n	8005148 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0220 	bic.w	r2, r2, #32
 80050c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	695a      	ldr	r2, [r3, #20]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d124      	bne.n	800513c <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0210 	bic.w	r2, r2, #16
 8005106:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b10      	cmp	r3, #16
 8005114:	d10a      	bne.n	800512c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005116:	2300      	movs	r3, #0
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	60fb      	str	r3, [r7, #12]
 800512a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8005134:	4611      	mov	r1, r2
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	4798      	blx	r3
 800513a:	e003      	b.n	8005144 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e002      	b.n	800514e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800514c:	2302      	movs	r3, #2
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b084      	sub	sp, #16
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	430a      	orrs	r2, r1
 8005174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	431a      	orrs	r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	695b      	ldr	r3, [r3, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005192:	f023 030c 	bic.w	r3, r3, #12
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6812      	ldr	r2, [r2, #0]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	430b      	orrs	r3, r1
 800519e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	; (800526c <UART_SetConfig+0x114>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d103      	bne.n	80051c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051c0:	f7fd ff98 	bl	80030f4 <HAL_RCC_GetPCLK2Freq>
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	e002      	b.n	80051ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051c8:	f7fd ff80 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4613      	mov	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	009a      	lsls	r2, r3, #2
 80051d8:	441a      	add	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <UART_SetConfig+0x118>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	0119      	lsls	r1, r3, #4
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	4613      	mov	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	009a      	lsls	r2, r3, #2
 80051f8:	441a      	add	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	fbb2 f2f3 	udiv	r2, r2, r3
 8005204:	4b1a      	ldr	r3, [pc, #104]	; (8005270 <UART_SetConfig+0x118>)
 8005206:	fba3 0302 	umull	r0, r3, r3, r2
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	2064      	movs	r0, #100	; 0x64
 800520e:	fb00 f303 	mul.w	r3, r0, r3
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	3332      	adds	r3, #50	; 0x32
 8005218:	4a15      	ldr	r2, [pc, #84]	; (8005270 <UART_SetConfig+0x118>)
 800521a:	fba2 2303 	umull	r2, r3, r2, r3
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005224:	4419      	add	r1, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4613      	mov	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	4413      	add	r3, r2
 800522e:	009a      	lsls	r2, r3, #2
 8005230:	441a      	add	r2, r3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	fbb2 f2f3 	udiv	r2, r2, r3
 800523c:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <UART_SetConfig+0x118>)
 800523e:	fba3 0302 	umull	r0, r3, r3, r2
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	2064      	movs	r0, #100	; 0x64
 8005246:	fb00 f303 	mul.w	r3, r0, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	3332      	adds	r3, #50	; 0x32
 8005250:	4a07      	ldr	r2, [pc, #28]	; (8005270 <UART_SetConfig+0x118>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	f003 020f 	and.w	r2, r3, #15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	440a      	add	r2, r1
 8005262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	40013800 	.word	0x40013800
 8005270:	51eb851f 	.word	0x51eb851f

08005274 <BLUETOOTH_CONTROL_sendCommand>:
static uint8_t BLUETOOTH_CONTROL_getButtonData(void);
static void    BLUETOOTH_CONTROL_clearData(void);
static int32_t BLUETOOTH_CONTROL_normalizeData(uint32_t rawData, bool isInversionNeeded);

static void BLUETOOTH_CONTROL_sendCommand(uint8_t command)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ref=0x01;
 800527e:	2301      	movs	r3, #1
 8005280:	81fb      	strh	r3, [r7, #14]
  BLUETOOTH_CONTROL_buffer[1] = 0;
 8005282:	4b20      	ldr	r3, [pc, #128]	; (8005304 <BLUETOOTH_CONTROL_sendCommand+0x90>)
 8005284:	2200      	movs	r2, #0
 8005286:	705a      	strb	r2, [r3, #1]
  for(ref=0x01;ref<0x0100;ref<<=1)
 8005288:	2301      	movs	r3, #1
 800528a:	81fb      	strh	r3, [r7, #14]
 800528c:	e02e      	b.n	80052ec <BLUETOOTH_CONTROL_sendCommand+0x78>
  {
    if(ref&command)
 800528e:	89fb      	ldrh	r3, [r7, #14]
 8005290:	b29b      	uxth	r3, r3
 8005292:	461a      	mov	r2, r3
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	4013      	ands	r3, r2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <BLUETOOTH_CONTROL_sendCommand+0x30>
    {
      DO_H;
 800529c:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <BLUETOOTH_CONTROL_sendCommand+0x94>)
 800529e:	2201      	movs	r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e002      	b.n	80052aa <BLUETOOTH_CONTROL_sendCommand+0x36>
    }
    else DO_L;
 80052a4:	4b18      	ldr	r3, [pc, #96]	; (8005308 <BLUETOOTH_CONTROL_sendCommand+0x94>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

    CLK_H;
 80052aa:	4b18      	ldr	r3, [pc, #96]	; (800530c <BLUETOOTH_CONTROL_sendCommand+0x98>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
    UTILS_delayUs(5);
 80052b0:	2005      	movs	r0, #5
 80052b2:	f001 f8c7 	bl	8006444 <UTILS_delayUs>
    CLK_L;
 80052b6:	4b15      	ldr	r3, [pc, #84]	; (800530c <BLUETOOTH_CONTROL_sendCommand+0x98>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
    UTILS_delayUs(5);
 80052bc:	2005      	movs	r0, #5
 80052be:	f001 f8c1 	bl	8006444 <UTILS_delayUs>
    CLK_H;
 80052c2:	4b12      	ldr	r3, [pc, #72]	; (800530c <BLUETOOTH_CONTROL_sendCommand+0x98>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    if(DI)
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <BLUETOOTH_CONTROL_sendCommand+0x9c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <BLUETOOTH_CONTROL_sendCommand+0x6e>
      BLUETOOTH_CONTROL_buffer[1] = ref|BLUETOOTH_CONTROL_buffer[1];
 80052d0:	89fb      	ldrh	r3, [r7, #14]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <BLUETOOTH_CONTROL_sendCommand+0x90>)
 80052d8:	785b      	ldrb	r3, [r3, #1]
 80052da:	4313      	orrs	r3, r2
 80052dc:	b2da      	uxtb	r2, r3
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <BLUETOOTH_CONTROL_sendCommand+0x90>)
 80052e0:	705a      	strb	r2, [r3, #1]
  for(ref=0x01;ref<0x0100;ref<<=1)
 80052e2:	89fb      	ldrh	r3, [r7, #14]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	81fb      	strh	r3, [r7, #14]
 80052ec:	89fb      	ldrh	r3, [r7, #14]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	2bff      	cmp	r3, #255	; 0xff
 80052f2:	d9cc      	bls.n	800528e <BLUETOOTH_CONTROL_sendCommand+0x1a>
  }
  UTILS_delayUs(16);
 80052f4:	2010      	movs	r0, #16
 80052f6:	f001 f8a5 	bl	8006444 <UTILS_delayUs>

  return;
 80052fa:	bf00      	nop
}
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000298 	.word	0x20000298
 8005308:	42220184 	.word	0x42220184
 800530c:	42210190 	.word	0x42210190
 8005310:	42220108 	.word	0x42220108

08005314 <BLUETOOTH_CONTROL_readData>:

static void BLUETOOTH_CONTROL_readData(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
  volatile uint8_t byte=0;
 800531a:	2300      	movs	r3, #0
 800531c:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ref=0x01;
 800531e:	2301      	movs	r3, #1
 8005320:	80bb      	strh	r3, [r7, #4]
  CS_L;
 8005322:	4b26      	ldr	r3, [pc, #152]	; (80053bc <BLUETOOTH_CONTROL_readData+0xa8>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
  BLUETOOTH_CONTROL_sendCommand(0x01);
 8005328:	2001      	movs	r0, #1
 800532a:	f7ff ffa3 	bl	8005274 <BLUETOOTH_CONTROL_sendCommand>
  BLUETOOTH_CONTROL_sendCommand(0x42);
 800532e:	2042      	movs	r0, #66	; 0x42
 8005330:	f7ff ffa0 	bl	8005274 <BLUETOOTH_CONTROL_sendCommand>
  for(byte=2;byte<9;byte++)
 8005334:	2302      	movs	r3, #2
 8005336:	71fb      	strb	r3, [r7, #7]
 8005338:	e034      	b.n	80053a4 <BLUETOOTH_CONTROL_readData+0x90>
  {
    for(ref=0x01;ref<0x100;ref<<=1)
 800533a:	2301      	movs	r3, #1
 800533c:	80bb      	strh	r3, [r7, #4]
 800533e:	e025      	b.n	800538c <BLUETOOTH_CONTROL_readData+0x78>
    {
      CLK_H;
 8005340:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <BLUETOOTH_CONTROL_readData+0xac>)
 8005342:	2201      	movs	r2, #1
 8005344:	601a      	str	r2, [r3, #0]
      UTILS_delayUs(5);
 8005346:	2005      	movs	r0, #5
 8005348:	f001 f87c 	bl	8006444 <UTILS_delayUs>
      CLK_L;
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <BLUETOOTH_CONTROL_readData+0xac>)
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
      UTILS_delayUs(5);
 8005352:	2005      	movs	r0, #5
 8005354:	f001 f876 	bl	8006444 <UTILS_delayUs>
      CLK_H;
 8005358:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <BLUETOOTH_CONTROL_readData+0xac>)
 800535a:	2201      	movs	r2, #1
 800535c:	601a      	str	r2, [r3, #0]
          if(DI)
 800535e:	4b19      	ldr	r3, [pc, #100]	; (80053c4 <BLUETOOTH_CONTROL_readData+0xb0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <BLUETOOTH_CONTROL_readData+0x6e>
          BLUETOOTH_CONTROL_buffer[byte] = ref|BLUETOOTH_CONTROL_buffer[byte];
 8005366:	88bb      	ldrh	r3, [r7, #4]
 8005368:	b29b      	uxth	r3, r3
 800536a:	b2da      	uxtb	r2, r3
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	b2db      	uxtb	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <BLUETOOTH_CONTROL_readData+0xb4>)
 8005374:	5c5b      	ldrb	r3, [r3, r1]
 8005376:	79f9      	ldrb	r1, [r7, #7]
 8005378:	b2c9      	uxtb	r1, r1
 800537a:	4313      	orrs	r3, r2
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4b12      	ldr	r3, [pc, #72]	; (80053c8 <BLUETOOTH_CONTROL_readData+0xb4>)
 8005380:	545a      	strb	r2, [r3, r1]
    for(ref=0x01;ref<0x100;ref<<=1)
 8005382:	88bb      	ldrh	r3, [r7, #4]
 8005384:	b29b      	uxth	r3, r3
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	b29b      	uxth	r3, r3
 800538a:	80bb      	strh	r3, [r7, #4]
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	b29b      	uxth	r3, r3
 8005390:	2bff      	cmp	r3, #255	; 0xff
 8005392:	d9d5      	bls.n	8005340 <BLUETOOTH_CONTROL_readData+0x2c>
    }
        UTILS_delayUs(16);
 8005394:	2010      	movs	r0, #16
 8005396:	f001 f855 	bl	8006444 <UTILS_delayUs>
  for(byte=2;byte<9;byte++)
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	3301      	adds	r3, #1
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	71fb      	strb	r3, [r7, #7]
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b08      	cmp	r3, #8
 80053aa:	d9c6      	bls.n	800533a <BLUETOOTH_CONTROL_readData+0x26>
  }
  CS_H;
 80053ac:	4b03      	ldr	r3, [pc, #12]	; (80053bc <BLUETOOTH_CONTROL_readData+0xa8>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

  return;
 80053b2:	bf00      	nop
}
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	4222018c 	.word	0x4222018c
 80053c0:	42210190 	.word	0x42210190
 80053c4:	42220108 	.word	0x42220108
 80053c8:	20000298 	.word	0x20000298

080053cc <BLUETOOTH_CONTROL_getButtonData>:

static uint8_t BLUETOOTH_CONTROL_getButtonData()
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
  uint8_t index;
  uint16_t button;

  BLUETOOTH_CONTROL_clearData();
 80053d2:	f000 f82f 	bl	8005434 <BLUETOOTH_CONTROL_clearData>
  BLUETOOTH_CONTROL_readData();
 80053d6:	f7ff ff9d 	bl	8005314 <BLUETOOTH_CONTROL_readData>
  button=(BLUETOOTH_CONTROL_buffer[4]<<8)|BLUETOOTH_CONTROL_buffer[3];
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <BLUETOOTH_CONTROL_getButtonData+0x60>)
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	021b      	lsls	r3, r3, #8
 80053e0:	b21a      	sxth	r2, r3
 80053e2:	4b12      	ldr	r3, [pc, #72]	; (800542c <BLUETOOTH_CONTROL_getButtonData+0x60>)
 80053e4:	78db      	ldrb	r3, [r3, #3]
 80053e6:	b21b      	sxth	r3, r3
 80053e8:	4313      	orrs	r3, r2
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	80bb      	strh	r3, [r7, #4]
  for(index=0;index<16;index++)
 80053ee:	2300      	movs	r3, #0
 80053f0:	71fb      	strb	r3, [r7, #7]
 80053f2:	e012      	b.n	800541a <BLUETOOTH_CONTROL_getButtonData+0x4e>
  {
    if((button&(1<<(BLUETOOTH_CONTROL_mask[index]-1)))==0)
 80053f4:	88ba      	ldrh	r2, [r7, #4]
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	490d      	ldr	r1, [pc, #52]	; (8005430 <BLUETOOTH_CONTROL_getButtonData+0x64>)
 80053fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80053fe:	3b01      	subs	r3, #1
 8005400:	fa42 f303 	asr.w	r3, r2, r3
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	d103      	bne.n	8005414 <BLUETOOTH_CONTROL_getButtonData+0x48>
    return index+1;
 800540c:	79fb      	ldrb	r3, [r7, #7]
 800540e:	3301      	adds	r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e006      	b.n	8005422 <BLUETOOTH_CONTROL_getButtonData+0x56>
  for(index=0;index<16;index++)
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	3301      	adds	r3, #1
 8005418:	71fb      	strb	r3, [r7, #7]
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d9e9      	bls.n	80053f4 <BLUETOOTH_CONTROL_getButtonData+0x28>
  }

  return 0;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000298 	.word	0x20000298
 8005430:	20000010 	.word	0x20000010

08005434 <BLUETOOTH_CONTROL_clearData>:

static void BLUETOOTH_CONTROL_clearData()
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
  uint8_t a;
  for(a=0;a<9;a++)
 800543a:	2300      	movs	r3, #0
 800543c:	71fb      	strb	r3, [r7, #7]
 800543e:	e006      	b.n	800544e <BLUETOOTH_CONTROL_clearData+0x1a>
    BLUETOOTH_CONTROL_buffer[a]=0x00;
 8005440:	79fb      	ldrb	r3, [r7, #7]
 8005442:	4a07      	ldr	r2, [pc, #28]	; (8005460 <BLUETOOTH_CONTROL_clearData+0x2c>)
 8005444:	2100      	movs	r1, #0
 8005446:	54d1      	strb	r1, [r2, r3]
  for(a=0;a<9;a++)
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	3301      	adds	r3, #1
 800544c:	71fb      	strb	r3, [r7, #7]
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d9f5      	bls.n	8005440 <BLUETOOTH_CONTROL_clearData+0xc>

  return;
 8005454:	bf00      	nop
}
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000298 	.word	0x20000298

08005464 <BLUETOOTH_CONTROL_normalizeData>:

static int32_t BLUETOOTH_CONTROL_normalizeData(uint32_t rawData, bool isInversionNeeded)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	460b      	mov	r3, r1
 800546e:	70fb      	strb	r3, [r7, #3]
  float normalizedData;

  normalizedData = rawData - 128.0f;
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fb f853 	bl	800051c <__aeabi_ui2f>
 8005476:	4603      	mov	r3, r0
 8005478:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800547c:	4618      	mov	r0, r3
 800547e:	f7fa ff9b 	bl	80003b8 <__aeabi_fsub>
 8005482:	4603      	mov	r3, r0
 8005484:	60fb      	str	r3, [r7, #12]

  if (normalizedData > 0.0f)
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f7fb f90a 	bl	80006a4 <__aeabi_fcmpgt>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d006      	beq.n	80054a4 <BLUETOOTH_CONTROL_normalizeData+0x40>
  {
    normalizedData *= 100.0f / 127.0f;
 8005496:	490e      	ldr	r1, [pc, #56]	; (80054d0 <BLUETOOTH_CONTROL_normalizeData+0x6c>)
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f7fa fed5 	bl	8000248 <__aeabi_fmul>
 800549e:	4603      	mov	r3, r0
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e005      	b.n	80054b0 <BLUETOOTH_CONTROL_normalizeData+0x4c>
  }
  else
  {
    normalizedData *= 100.0f / 128.0f;
 80054a4:	490b      	ldr	r1, [pc, #44]	; (80054d4 <BLUETOOTH_CONTROL_normalizeData+0x70>)
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f7fa fece 	bl	8000248 <__aeabi_fmul>
 80054ac:	4603      	mov	r3, r0
 80054ae:	60fb      	str	r3, [r7, #12]
  }

  if (isInversionNeeded == true)
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <BLUETOOTH_CONTROL_normalizeData+0x5a>
  {
    normalizedData *= -1.0f;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  return (int32_t)normalizedData;
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7fb f8fa 	bl	80006b8 <__aeabi_f2iz>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	3f499326 	.word	0x3f499326
 80054d4:	3f480000 	.word	0x3f480000

080054d8 <BLUETOOTH_CONTROL_init>:


void BLUETOOTH_CONTROL_init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  LOG_info("Initializing Bluetooth control");
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <BLUETOOTH_CONTROL_init+0x88>)
 80054de:	22a7      	movs	r2, #167	; 0xa7
 80054e0:	4920      	ldr	r1, [pc, #128]	; (8005564 <BLUETOOTH_CONTROL_init+0x8c>)
 80054e2:	2001      	movs	r0, #1
 80054e4:	f000 fe56 	bl	8006194 <LOG_log>

  RCC->APB2ENR|=1<<2;     // PORTA
 80054e8:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <BLUETOOTH_CONTROL_init+0x90>)
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <BLUETOOTH_CONTROL_init+0x90>)
 80054ee:	f043 0304 	orr.w	r3, r3, #4
 80054f2:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR|=1<<4;     // PORTC
 80054f4:	4b1c      	ldr	r3, [pc, #112]	; (8005568 <BLUETOOTH_CONTROL_init+0x90>)
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	4a1b      	ldr	r2, [pc, #108]	; (8005568 <BLUETOOTH_CONTROL_init+0x90>)
 80054fa:	f043 0310 	orr.w	r3, r3, #16
 80054fe:	6193      	str	r3, [r2, #24]
  GPIOC->CRL&=0XFFFFF0FF;
 8005500:	4b1a      	ldr	r3, [pc, #104]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 8005506:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800550a:	6013      	str	r3, [r2, #0]
  GPIOC->CRL|=0X00000800;
 800550c:	4b17      	ldr	r3, [pc, #92]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a16      	ldr	r2, [pc, #88]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 8005512:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005516:	6013      	str	r3, [r2, #0]

  RCC->APB2ENR|=1<<4;    // PORTC
 8005518:	4b13      	ldr	r3, [pc, #76]	; (8005568 <BLUETOOTH_CONTROL_init+0x90>)
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	4a12      	ldr	r2, [pc, #72]	; (8005568 <BLUETOOTH_CONTROL_init+0x90>)
 800551e:	f043 0310 	orr.w	r3, r3, #16
 8005522:	6193      	str	r3, [r2, #24]
  GPIOC->CRL&=0XFFFF0F0F;
 8005524:	4b11      	ldr	r3, [pc, #68]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a10      	ldr	r2, [pc, #64]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 800552a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800552e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005532:	6013      	str	r3, [r2, #0]
  GPIOC->CRL|=0X00003030; // PC1 PC3
 8005534:	4b0d      	ldr	r3, [pc, #52]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0c      	ldr	r2, [pc, #48]	; (800556c <BLUETOOTH_CONTROL_init+0x94>)
 800553a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800553e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005542:	6013      	str	r3, [r2, #0]

  GPIOA->CRL&=0XFFF0FFFF;
 8005544:	4b0a      	ldr	r3, [pc, #40]	; (8005570 <BLUETOOTH_CONTROL_init+0x98>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a09      	ldr	r2, [pc, #36]	; (8005570 <BLUETOOTH_CONTROL_init+0x98>)
 800554a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800554e:	6013      	str	r3, [r2, #0]
  GPIOA->CRL|=0X00030000; // PA4
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <BLUETOOTH_CONTROL_init+0x98>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a06      	ldr	r2, [pc, #24]	; (8005570 <BLUETOOTH_CONTROL_init+0x98>)
 8005556:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800555a:	6013      	str	r3, [r2, #0]

  return;
 800555c:	bf00      	nop
}
 800555e:	bd80      	pop	{r7, pc}
 8005560:	080098bc 	.word	0x080098bc
 8005564:	080098dc 	.word	0x080098dc
 8005568:	40021000 	.word	0x40021000
 800556c:	40011000 	.word	0x40011000
 8005570:	40010800 	.word	0x40010800

08005574 <BLUETOOTH_CONTROL_receiveData>:

void BLUETOOTH_CONTROL_receiveData(BLUETOOTH_CONTROL_DATA *data)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t leftY;
  uint32_t rightX;
  uint32_t rightY;
  uint32_t button;

  LOG_info("Receiving Bluetooth data");
 800557c:	4b2d      	ldr	r3, [pc, #180]	; (8005634 <BLUETOOTH_CONTROL_receiveData+0xc0>)
 800557e:	22c0      	movs	r2, #192	; 0xc0
 8005580:	492d      	ldr	r1, [pc, #180]	; (8005638 <BLUETOOTH_CONTROL_receiveData+0xc4>)
 8005582:	2001      	movs	r0, #1
 8005584:	f000 fe06 	bl	8006194 <LOG_log>

  /* Read raw data */
  leftX  = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_LEFT_X_OFFSET ];
 8005588:	4b2c      	ldr	r3, [pc, #176]	; (800563c <BLUETOOTH_CONTROL_receiveData+0xc8>)
 800558a:	79db      	ldrb	r3, [r3, #7]
 800558c:	61fb      	str	r3, [r7, #28]
  leftY  = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_LEFT_Y_OFFSET ];
 800558e:	4b2b      	ldr	r3, [pc, #172]	; (800563c <BLUETOOTH_CONTROL_receiveData+0xc8>)
 8005590:	7a1b      	ldrb	r3, [r3, #8]
 8005592:	61bb      	str	r3, [r7, #24]
  rightX = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_RIGHT_X_OFFSET];
 8005594:	4b29      	ldr	r3, [pc, #164]	; (800563c <BLUETOOTH_CONTROL_receiveData+0xc8>)
 8005596:	795b      	ldrb	r3, [r3, #5]
 8005598:	617b      	str	r3, [r7, #20]
  rightY = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_RIGHT_Y_OFFSET];
 800559a:	4b28      	ldr	r3, [pc, #160]	; (800563c <BLUETOOTH_CONTROL_receiveData+0xc8>)
 800559c:	799b      	ldrb	r3, [r3, #6]
 800559e:	613b      	str	r3, [r7, #16]
  button = BLUETOOTH_CONTROL_getButtonData();
 80055a0:	f7ff ff14 	bl	80053cc <BLUETOOTH_CONTROL_getButtonData>
 80055a4:	4603      	mov	r3, r0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((leftX == 255 && leftY == 255 && rightX == 255 && rightY ==255)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2bff      	cmp	r3, #255	; 0xff
 80055ac:	d108      	bne.n	80055c0 <BLUETOOTH_CONTROL_receiveData+0x4c>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2bff      	cmp	r3, #255	; 0xff
 80055b2:	d105      	bne.n	80055c0 <BLUETOOTH_CONTROL_receiveData+0x4c>
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2bff      	cmp	r3, #255	; 0xff
 80055b8:	d102      	bne.n	80055c0 <BLUETOOTH_CONTROL_receiveData+0x4c>
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2bff      	cmp	r3, #255	; 0xff
 80055be:	d00b      	beq.n	80055d8 <BLUETOOTH_CONTROL_receiveData+0x64>
    || (leftX ==   0 && leftY ==   0 && rightX ==   0 && rightY ==  0))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d112      	bne.n	80055ec <BLUETOOTH_CONTROL_receiveData+0x78>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10f      	bne.n	80055ec <BLUETOOTH_CONTROL_receiveData+0x78>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <BLUETOOTH_CONTROL_receiveData+0x78>
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <BLUETOOTH_CONTROL_receiveData+0x78>
  {
    leftX  = 128;
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	61fb      	str	r3, [r7, #28]
    leftY  = 128;
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	61bb      	str	r3, [r7, #24]
    rightX = 128;
 80055e0:	2380      	movs	r3, #128	; 0x80
 80055e2:	617b      	str	r3, [r7, #20]
    rightY = 128;
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	613b      	str	r3, [r7, #16]
    button = BUTTON_NONE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	60fb      	str	r3, [r7, #12]
  }

  /* Normalize directions data in range [-100..100] */
  data->leftX  = BLUETOOTH_CONTROL_normalizeData(leftX , false);
 80055ec:	2100      	movs	r1, #0
 80055ee:	69f8      	ldr	r0, [r7, #28]
 80055f0:	f7ff ff38 	bl	8005464 <BLUETOOTH_CONTROL_normalizeData>
 80055f4:	4602      	mov	r2, r0
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	601a      	str	r2, [r3, #0]
  data->leftY  = BLUETOOTH_CONTROL_normalizeData(leftY , true );
 80055fa:	2101      	movs	r1, #1
 80055fc:	69b8      	ldr	r0, [r7, #24]
 80055fe:	f7ff ff31 	bl	8005464 <BLUETOOTH_CONTROL_normalizeData>
 8005602:	4602      	mov	r2, r0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
  data->rightX = BLUETOOTH_CONTROL_normalizeData(rightX, false);
 8005608:	2100      	movs	r1, #0
 800560a:	6978      	ldr	r0, [r7, #20]
 800560c:	f7ff ff2a 	bl	8005464 <BLUETOOTH_CONTROL_normalizeData>
 8005610:	4602      	mov	r2, r0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	609a      	str	r2, [r3, #8]
  data->rightY = BLUETOOTH_CONTROL_normalizeData(rightY, true );
 8005616:	2101      	movs	r1, #1
 8005618:	6938      	ldr	r0, [r7, #16]
 800561a:	f7ff ff23 	bl	8005464 <BLUETOOTH_CONTROL_normalizeData>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60da      	str	r2, [r3, #12]
  data->button = button;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	611a      	str	r2, [r3, #16]

  return;
 800562a:	bf00      	nop
}
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	080098fc 	.word	0x080098fc
 8005638:	080098dc 	.word	0x080098dc
 800563c:	20000298 	.word	0x20000298

08005640 <CONSOLE_uartInit>:

static UART_HandleTypeDef *CONSOLE_uartHandle;
static uint8_t CONSOLE_rxBuffer[12] = {0};

void CONSOLE_uartInit(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  CONSOLE_uartHandle = huart;
 8005648:	4a03      	ldr	r2, [pc, #12]	; (8005658 <CONSOLE_uartInit+0x18>)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6013      	str	r3, [r2, #0]

  return;
 800564e:	bf00      	nop
}
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr
 8005658:	200002a4 	.word	0x200002a4

0800565c <CONSOLE_receiveData>:

void CONSOLE_receiveData()
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(CONSOLE_uartHandle, CONSOLE_rxBuffer, 12);
 8005660:	4b04      	ldr	r3, [pc, #16]	; (8005674 <CONSOLE_receiveData+0x18>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	220c      	movs	r2, #12
 8005666:	4904      	ldr	r1, [pc, #16]	; (8005678 <CONSOLE_receiveData+0x1c>)
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff f93d 	bl	80048e8 <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
//  HAL_UART_Transmit(CONSOLE_uartHandle, CONSOLE_rxBuffer, 12, 100);

  return;
 800566e:	bf00      	nop
}
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	200002a4 	.word	0x200002a4
 8005678:	200002a8 	.word	0x200002a8

0800567c <DRIVE_init>:
static void DRIVE_turnRight        (uint32_t  p_speed);
static void DRIVE_translateLeft    (uint32_t  p_speed);
static void DRIVE_translateRight   (uint32_t  p_speed);

void DRIVE_init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing Drive module");
 8005684:	4b3a      	ldr	r3, [pc, #232]	; (8005770 <DRIVE_init+0xf4>)
 8005686:	222a      	movs	r2, #42	; 0x2a
 8005688:	493a      	ldr	r1, [pc, #232]	; (8005774 <DRIVE_init+0xf8>)
 800568a:	2001      	movs	r0, #1
 800568c:	f000 fd82 	bl	8006194 <LOG_log>

  motorFrontRight.dirPin1Port    = MOTOR_FRONT_RIGHT_IN_1_GPIO_Port;
 8005690:	4b39      	ldr	r3, [pc, #228]	; (8005778 <DRIVE_init+0xfc>)
 8005692:	4a3a      	ldr	r2, [pc, #232]	; (800577c <DRIVE_init+0x100>)
 8005694:	60da      	str	r2, [r3, #12]
  motorFrontRight.dirPin1        = MOTOR_FRONT_RIGHT_IN_1_Pin;
 8005696:	4b38      	ldr	r3, [pc, #224]	; (8005778 <DRIVE_init+0xfc>)
 8005698:	2210      	movs	r2, #16
 800569a:	615a      	str	r2, [r3, #20]
  motorFrontRight.dirPin2Port    = MOTOR_FRONT_RIGHT_IN_2_GPIO_Port;
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <DRIVE_init+0xfc>)
 800569e:	4a37      	ldr	r2, [pc, #220]	; (800577c <DRIVE_init+0x100>)
 80056a0:	611a      	str	r2, [r3, #16]
  motorFrontRight.dirPin2        = MOTOR_FRONT_RIGHT_IN_2_Pin;
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <DRIVE_init+0xfc>)
 80056a4:	2220      	movs	r2, #32
 80056a6:	619a      	str	r2, [r3, #24]
  motorFrontRight.pwmTimerHandle = htim;
 80056a8:	4a33      	ldr	r2, [pc, #204]	; (8005778 <DRIVE_init+0xfc>)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6253      	str	r3, [r2, #36]	; 0x24
  motorFrontRight.pwmChannel     = TIM_CHANNEL_2;
 80056ae:	4b32      	ldr	r3, [pc, #200]	; (8005778 <DRIVE_init+0xfc>)
 80056b0:	2204      	movs	r2, #4
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28

  motorFrontLeft.dirPin1Port    = MOTOR_FRONT_LEFT_IN_1_GPIO_Port;
 80056b4:	4b32      	ldr	r3, [pc, #200]	; (8005780 <DRIVE_init+0x104>)
 80056b6:	4a33      	ldr	r2, [pc, #204]	; (8005784 <DRIVE_init+0x108>)
 80056b8:	60da      	str	r2, [r3, #12]
  motorFrontLeft.dirPin1        = MOTOR_FRONT_LEFT_IN_1_Pin;
 80056ba:	4b31      	ldr	r3, [pc, #196]	; (8005780 <DRIVE_init+0x104>)
 80056bc:	2201      	movs	r2, #1
 80056be:	615a      	str	r2, [r3, #20]
  motorFrontLeft.dirPin2Port    = MOTOR_FRONT_LEFT_IN_2_GPIO_Port;
 80056c0:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <DRIVE_init+0x104>)
 80056c2:	4a30      	ldr	r2, [pc, #192]	; (8005784 <DRIVE_init+0x108>)
 80056c4:	611a      	str	r2, [r3, #16]
  motorFrontLeft.dirPin2        = MOTOR_FRONT_LEFT_IN_2_Pin;
 80056c6:	4b2e      	ldr	r3, [pc, #184]	; (8005780 <DRIVE_init+0x104>)
 80056c8:	2202      	movs	r2, #2
 80056ca:	619a      	str	r2, [r3, #24]
  motorFrontLeft.pwmTimerHandle = htim;
 80056cc:	4a2c      	ldr	r2, [pc, #176]	; (8005780 <DRIVE_init+0x104>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6253      	str	r3, [r2, #36]	; 0x24
  motorFrontLeft.pwmChannel     = TIM_CHANNEL_1;
 80056d2:	4b2b      	ldr	r3, [pc, #172]	; (8005780 <DRIVE_init+0x104>)
 80056d4:	2200      	movs	r2, #0
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28

  motorRearLeft.dirPin1Port    = MOTOR_REAR_LEFT_IN_1_GPIO_Port;
 80056d8:	4b2b      	ldr	r3, [pc, #172]	; (8005788 <DRIVE_init+0x10c>)
 80056da:	4a2c      	ldr	r2, [pc, #176]	; (800578c <DRIVE_init+0x110>)
 80056dc:	60da      	str	r2, [r3, #12]
  motorRearLeft.dirPin1        = MOTOR_REAR_LEFT_IN_1_Pin;
 80056de:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <DRIVE_init+0x10c>)
 80056e0:	2204      	movs	r2, #4
 80056e2:	615a      	str	r2, [r3, #20]
  motorRearLeft.dirPin2Port    = MOTOR_REAR_LEFT_IN_2_GPIO_Port;
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <DRIVE_init+0x10c>)
 80056e6:	4a25      	ldr	r2, [pc, #148]	; (800577c <DRIVE_init+0x100>)
 80056e8:	611a      	str	r2, [r3, #16]
  motorRearLeft.dirPin2        = MOTOR_REAR_LEFT_IN_2_Pin;
 80056ea:	4b27      	ldr	r3, [pc, #156]	; (8005788 <DRIVE_init+0x10c>)
 80056ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80056f0:	619a      	str	r2, [r3, #24]
  motorRearLeft.pwmTimerHandle = htim;
 80056f2:	4a25      	ldr	r2, [pc, #148]	; (8005788 <DRIVE_init+0x10c>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6253      	str	r3, [r2, #36]	; 0x24
  motorRearLeft.pwmChannel     = TIM_CHANNEL_4;
 80056f8:	4b23      	ldr	r3, [pc, #140]	; (8005788 <DRIVE_init+0x10c>)
 80056fa:	220c      	movs	r2, #12
 80056fc:	629a      	str	r2, [r3, #40]	; 0x28

  motorRearRight.dirPin1Port    = MOTOR_REAR_RIGHT_IN_1_GPIO_Port;
 80056fe:	4b24      	ldr	r3, [pc, #144]	; (8005790 <DRIVE_init+0x114>)
 8005700:	4a20      	ldr	r2, [pc, #128]	; (8005784 <DRIVE_init+0x108>)
 8005702:	60da      	str	r2, [r3, #12]
  motorRearRight.dirPin1        = MOTOR_REAR_RIGHT_IN_1_Pin;
 8005704:	4b22      	ldr	r3, [pc, #136]	; (8005790 <DRIVE_init+0x114>)
 8005706:	2220      	movs	r2, #32
 8005708:	615a      	str	r2, [r3, #20]
  motorRearRight.dirPin2Port    = MOTOR_REAR_RIGHT_IN_2_GPIO_Port;
 800570a:	4b21      	ldr	r3, [pc, #132]	; (8005790 <DRIVE_init+0x114>)
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <DRIVE_init+0x108>)
 800570e:	611a      	str	r2, [r3, #16]
  motorRearRight.dirPin2        = MOTOR_REAR_RIGHT_IN_2_Pin;
 8005710:	4b1f      	ldr	r3, [pc, #124]	; (8005790 <DRIVE_init+0x114>)
 8005712:	2210      	movs	r2, #16
 8005714:	619a      	str	r2, [r3, #24]
  motorRearRight.pwmTimerHandle = htim;
 8005716:	4a1e      	ldr	r2, [pc, #120]	; (8005790 <DRIVE_init+0x114>)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6253      	str	r3, [r2, #36]	; 0x24
  motorRearRight.pwmChannel     = TIM_CHANNEL_3;
 800571c:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <DRIVE_init+0x114>)
 800571e:	2208      	movs	r2, #8
 8005720:	629a      	str	r2, [r3, #40]	; 0x28

  MOTOR_init(&motorFrontRight, "FRONT_RIGHT");
 8005722:	491c      	ldr	r1, [pc, #112]	; (8005794 <DRIVE_init+0x118>)
 8005724:	4814      	ldr	r0, [pc, #80]	; (8005778 <DRIVE_init+0xfc>)
 8005726:	f000 fd9d 	bl	8006264 <MOTOR_init>
  MOTOR_init(&motorFrontLeft , "FRONT_LEFT" );
 800572a:	491b      	ldr	r1, [pc, #108]	; (8005798 <DRIVE_init+0x11c>)
 800572c:	4814      	ldr	r0, [pc, #80]	; (8005780 <DRIVE_init+0x104>)
 800572e:	f000 fd99 	bl	8006264 <MOTOR_init>
  MOTOR_init(&motorRearLeft  , "REAR_LEFT"  );
 8005732:	491a      	ldr	r1, [pc, #104]	; (800579c <DRIVE_init+0x120>)
 8005734:	4814      	ldr	r0, [pc, #80]	; (8005788 <DRIVE_init+0x10c>)
 8005736:	f000 fd95 	bl	8006264 <MOTOR_init>
  MOTOR_init(&motorRearRight , "REAR_RIGHT" );
 800573a:	4919      	ldr	r1, [pc, #100]	; (80057a0 <DRIVE_init+0x124>)
 800573c:	4814      	ldr	r0, [pc, #80]	; (8005790 <DRIVE_init+0x114>)
 800573e:	f000 fd91 	bl	8006264 <MOTOR_init>

  /* Start motors (but with a 0 speed at this point) */
  MOTOR_start(&motorFrontRight);
 8005742:	480d      	ldr	r0, [pc, #52]	; (8005778 <DRIVE_init+0xfc>)
 8005744:	f000 fe30 	bl	80063a8 <MOTOR_start>
  MOTOR_start(&motorFrontLeft );
 8005748:	480d      	ldr	r0, [pc, #52]	; (8005780 <DRIVE_init+0x104>)
 800574a:	f000 fe2d 	bl	80063a8 <MOTOR_start>
  MOTOR_start(&motorRearRight );
 800574e:	4810      	ldr	r0, [pc, #64]	; (8005790 <DRIVE_init+0x114>)
 8005750:	f000 fe2a 	bl	80063a8 <MOTOR_start>
  MOTOR_start(&motorRearLeft  );
 8005754:	480c      	ldr	r0, [pc, #48]	; (8005788 <DRIVE_init+0x10c>)
 8005756:	f000 fe27 	bl	80063a8 <MOTOR_start>

  /* De-activate debug mode: motors will make the car move */
  DRIVE_isDebugOn = false;
 800575a:	4b12      	ldr	r3, [pc, #72]	; (80057a4 <DRIVE_init+0x128>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  DRIVE_Mode = MASTER_BOARD_CONTROLLED_SPEED;
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <DRIVE_init+0x12c>)
 8005762:	2203      	movs	r2, #3
 8005764:	701a      	strb	r2, [r3, #0]

  return;
 8005766:	bf00      	nop
}
 8005768:	3708      	adds	r7, #8
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	08009918 	.word	0x08009918
 8005774:	08009934 	.word	0x08009934
 8005778:	200002b8 	.word	0x200002b8
 800577c:	40011000 	.word	0x40011000
 8005780:	200002e4 	.word	0x200002e4
 8005784:	40010c00 	.word	0x40010c00
 8005788:	20000310 	.word	0x20000310
 800578c:	40011400 	.word	0x40011400
 8005790:	2000033c 	.word	0x2000033c
 8005794:	08009948 	.word	0x08009948
 8005798:	08009954 	.word	0x08009954
 800579c:	08009960 	.word	0x08009960
 80057a0:	0800996c 	.word	0x0800996c
 80057a4:	200002b4 	.word	0x200002b4
 80057a8:	200002b5 	.word	0x200002b5

080057ac <DRIVE_update>:

void DRIVE_update(BLUETOOTH_CONTROL_DATA *data)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  LOG_debug("Updating Drive module");
 80057b4:	4b9a      	ldr	r3, [pc, #616]	; (8005a20 <DRIVE_update+0x274>)
 80057b6:	2260      	movs	r2, #96	; 0x60
 80057b8:	499a      	ldr	r1, [pc, #616]	; (8005a24 <DRIVE_update+0x278>)
 80057ba:	2000      	movs	r0, #0
 80057bc:	f000 fcea 	bl	8006194 <LOG_log>

  /* Check possible requested mode change */
  switch (data->button)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	2b0f      	cmp	r3, #15
 80057c8:	d869      	bhi.n	800589e <DRIVE_update+0xf2>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <DRIVE_update+0x24>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	08005861 	.word	0x08005861
 80057d4:	0800589f 	.word	0x0800589f
 80057d8:	0800589f 	.word	0x0800589f
 80057dc:	08005883 	.word	0x08005883
 80057e0:	0800589f 	.word	0x0800589f
 80057e4:	0800589f 	.word	0x0800589f
 80057e8:	0800589f 	.word	0x0800589f
 80057ec:	0800589f 	.word	0x0800589f
 80057f0:	0800589f 	.word	0x0800589f
 80057f4:	0800589f 	.word	0x0800589f
 80057f8:	0800589f 	.word	0x0800589f
 80057fc:	0800589f 	.word	0x0800589f
 8005800:	0800584d 	.word	0x0800584d
 8005804:	08005839 	.word	0x08005839
 8005808:	08005825 	.word	0x08005825
 800580c:	08005811 	.word	0x08005811
  {
    case BUTTON_PINK_SQUARE:
      LOG_info("Drive mode now MANUAL_FIXED_SPEED");
 8005810:	4b85      	ldr	r3, [pc, #532]	; (8005a28 <DRIVE_update+0x27c>)
 8005812:	2266      	movs	r2, #102	; 0x66
 8005814:	4983      	ldr	r1, [pc, #524]	; (8005a24 <DRIVE_update+0x278>)
 8005816:	2001      	movs	r0, #1
 8005818:	f000 fcbc 	bl	8006194 <LOG_log>
      DRIVE_Mode = MANUAL_FIXED_SPEED;
 800581c:	4b83      	ldr	r3, [pc, #524]	; (8005a2c <DRIVE_update+0x280>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
      break;
 8005822:	e041      	b.n	80058a8 <DRIVE_update+0xfc>

    case BUTTON_BLUE_CROSS:
      LOG_info("Drive mode now MANUAL_VARIABLE_SPEED");
 8005824:	4b82      	ldr	r3, [pc, #520]	; (8005a30 <DRIVE_update+0x284>)
 8005826:	226b      	movs	r2, #107	; 0x6b
 8005828:	497e      	ldr	r1, [pc, #504]	; (8005a24 <DRIVE_update+0x278>)
 800582a:	2001      	movs	r0, #1
 800582c:	f000 fcb2 	bl	8006194 <LOG_log>
      DRIVE_Mode = MANUAL_VARIABLE_SPEED;
 8005830:	4b7e      	ldr	r3, [pc, #504]	; (8005a2c <DRIVE_update+0x280>)
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
      break;
 8005836:	e037      	b.n	80058a8 <DRIVE_update+0xfc>

    case BUTTON_RED_CIRCLE:
      LOG_info("Drive mode now MANUAL_CONTROLLED_SPEED");
 8005838:	4b7e      	ldr	r3, [pc, #504]	; (8005a34 <DRIVE_update+0x288>)
 800583a:	2270      	movs	r2, #112	; 0x70
 800583c:	4979      	ldr	r1, [pc, #484]	; (8005a24 <DRIVE_update+0x278>)
 800583e:	2001      	movs	r0, #1
 8005840:	f000 fca8 	bl	8006194 <LOG_log>
      DRIVE_Mode = MANUAL_CONTROLLED_SPEED;
 8005844:	4b79      	ldr	r3, [pc, #484]	; (8005a2c <DRIVE_update+0x280>)
 8005846:	2202      	movs	r2, #2
 8005848:	701a      	strb	r2, [r3, #0]
      break;
 800584a:	e02d      	b.n	80058a8 <DRIVE_update+0xfc>

    case BUTTON_GREEN_TRIANGLE:
      LOG_info("Drive mode now MASTER_BOARD_CONTROLLED_SPEED");
 800584c:	4b7a      	ldr	r3, [pc, #488]	; (8005a38 <DRIVE_update+0x28c>)
 800584e:	2275      	movs	r2, #117	; 0x75
 8005850:	4974      	ldr	r1, [pc, #464]	; (8005a24 <DRIVE_update+0x278>)
 8005852:	2001      	movs	r0, #1
 8005854:	f000 fc9e 	bl	8006194 <LOG_log>
      DRIVE_Mode = MASTER_BOARD_CONTROLLED_SPEED;
 8005858:	4b74      	ldr	r3, [pc, #464]	; (8005a2c <DRIVE_update+0x280>)
 800585a:	2203      	movs	r2, #3
 800585c:	701a      	strb	r2, [r3, #0]
      break;
 800585e:	e023      	b.n	80058a8 <DRIVE_update+0xfc>

    case BUTTON_SELECT:
      if (DRIVE_isDebugOn == false)
 8005860:	4b76      	ldr	r3, [pc, #472]	; (8005a3c <DRIVE_update+0x290>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f083 0301 	eor.w	r3, r3, #1
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d019      	beq.n	80058a2 <DRIVE_update+0xf6>
      {
        LOG_info("Drive debug mode turned ON - Motors now OFF");
 800586e:	4b74      	ldr	r3, [pc, #464]	; (8005a40 <DRIVE_update+0x294>)
 8005870:	227c      	movs	r2, #124	; 0x7c
 8005872:	496c      	ldr	r1, [pc, #432]	; (8005a24 <DRIVE_update+0x278>)
 8005874:	2001      	movs	r0, #1
 8005876:	f000 fc8d 	bl	8006194 <LOG_log>
        DRIVE_isDebugOn = true;
 800587a:	4b70      	ldr	r3, [pc, #448]	; (8005a3c <DRIVE_update+0x290>)
 800587c:	2201      	movs	r2, #1
 800587e:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8005880:	e00f      	b.n	80058a2 <DRIVE_update+0xf6>

    case BUTTON_START:
      if (DRIVE_isDebugOn == true)
 8005882:	4b6e      	ldr	r3, [pc, #440]	; (8005a3c <DRIVE_update+0x290>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00d      	beq.n	80058a6 <DRIVE_update+0xfa>
      {
        LOG_info("Drive debug mode turned OFF - Motors now ON");
 800588a:	4b6e      	ldr	r3, [pc, #440]	; (8005a44 <DRIVE_update+0x298>)
 800588c:	2288      	movs	r2, #136	; 0x88
 800588e:	4965      	ldr	r1, [pc, #404]	; (8005a24 <DRIVE_update+0x278>)
 8005890:	2001      	movs	r0, #1
 8005892:	f000 fc7f 	bl	8006194 <LOG_log>
        DRIVE_isDebugOn = false;
 8005896:	4b69      	ldr	r3, [pc, #420]	; (8005a3c <DRIVE_update+0x290>)
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800589c:	e003      	b.n	80058a6 <DRIVE_update+0xfa>

    default:
      ; /* Nothing to do */
      break;
 800589e:	bf00      	nop
 80058a0:	e002      	b.n	80058a8 <DRIVE_update+0xfc>
      break;
 80058a2:	bf00      	nop
 80058a4:	e000      	b.n	80058a8 <DRIVE_update+0xfc>
      break;
 80058a6:	bf00      	nop
  }

  /* Automated mode, ignoring directions received by bluetooth */
  if (DRIVE_Mode == MASTER_BOARD_CONTROLLED_SPEED)
 80058a8:	4b60      	ldr	r3, [pc, #384]	; (8005a2c <DRIVE_update+0x280>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	f000 80b3 	beq.w	8005a18 <DRIVE_update+0x26c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (data->leftY > DRIVE_JOYSTICKS_THRESHOLD)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	dd0c      	ble.n	80058d4 <DRIVE_update+0x128>
    {
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : data->leftY;
 80058ba:	4b5c      	ldr	r3, [pc, #368]	; (8005a2c <DRIVE_update+0x280>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <DRIVE_update+0x11c>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	e000      	b.n	80058ca <DRIVE_update+0x11e>
 80058c8:	2319      	movs	r3, #25
 80058ca:	60fb      	str	r3, [r7, #12]

      DRIVE_moveForward(l_speed);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f8f3 	bl	8005ab8 <DRIVE_moveForward>
    {
      DRIVE_stop();
    }
  }

  return;
 80058d2:	e0a1      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->rightY > DRIVE_JOYSTICKS_THRESHOLD)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	dd0c      	ble.n	80058f6 <DRIVE_update+0x14a>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : data->rightY;
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <DRIVE_update+0x280>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <DRIVE_update+0x13e>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	e000      	b.n	80058ec <DRIVE_update+0x140>
 80058ea:	2319      	movs	r3, #25
 80058ec:	60fb      	str	r3, [r7, #12]
      DRIVE_moveForward(l_speed);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f8e2 	bl	8005ab8 <DRIVE_moveForward>
  return;
 80058f4:	e090      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->leftY < -DRIVE_JOYSTICKS_THRESHOLD)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f113 0f05 	cmn.w	r3, #5
 80058fe:	da0d      	bge.n	800591c <DRIVE_update+0x170>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -data->leftY;
 8005900:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <DRIVE_update+0x280>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <DRIVE_update+0x164>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	425b      	negs	r3, r3
 800590e:	e000      	b.n	8005912 <DRIVE_update+0x166>
 8005910:	2319      	movs	r3, #25
 8005912:	60fb      	str	r3, [r7, #12]
      DRIVE_moveBackward(l_speed);
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f91f 	bl	8005b58 <DRIVE_moveBackward>
  return;
 800591a:	e07d      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->rightY < -DRIVE_JOYSTICKS_THRESHOLD)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f113 0f05 	cmn.w	r3, #5
 8005924:	da0d      	bge.n	8005942 <DRIVE_update+0x196>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -data->rightY;
 8005926:	4b41      	ldr	r3, [pc, #260]	; (8005a2c <DRIVE_update+0x280>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <DRIVE_update+0x18a>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	425b      	negs	r3, r3
 8005934:	e000      	b.n	8005938 <DRIVE_update+0x18c>
 8005936:	2319      	movs	r3, #25
 8005938:	60fb      	str	r3, [r7, #12]
      DRIVE_moveBackward(l_speed);
 800593a:	68f8      	ldr	r0, [r7, #12]
 800593c:	f000 f90c 	bl	8005b58 <DRIVE_moveBackward>
  return;
 8005940:	e06a      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->leftX < -DRIVE_JOYSTICKS_THRESHOLD)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f113 0f05 	cmn.w	r3, #5
 800594a:	da0d      	bge.n	8005968 <DRIVE_update+0x1bc>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -data->leftX;
 800594c:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <DRIVE_update+0x280>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <DRIVE_update+0x1b0>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	425b      	negs	r3, r3
 800595a:	e000      	b.n	800595e <DRIVE_update+0x1b2>
 800595c:	2319      	movs	r3, #25
 800595e:	60fb      	str	r3, [r7, #12]
      DRIVE_turnLeft(l_speed);
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 fa61 	bl	8005e28 <DRIVE_turnLeft>
  return;
 8005966:	e057      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->leftX > DRIVE_JOYSTICKS_THRESHOLD)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b05      	cmp	r3, #5
 800596e:	dd0c      	ble.n	800598a <DRIVE_update+0x1de>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : data->leftX;
 8005970:	4b2e      	ldr	r3, [pc, #184]	; (8005a2c <DRIVE_update+0x280>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d002      	beq.n	800597e <DRIVE_update+0x1d2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	e000      	b.n	8005980 <DRIVE_update+0x1d4>
 800597e:	2319      	movs	r3, #25
 8005980:	60fb      	str	r3, [r7, #12]
      DRIVE_turnRight(l_speed);
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 faa0 	bl	8005ec8 <DRIVE_turnRight>
  return;
 8005988:	e046      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->rightX < -DRIVE_JOYSTICKS_THRESHOLD)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f113 0f05 	cmn.w	r3, #5
 8005992:	da0d      	bge.n	80059b0 <DRIVE_update+0x204>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : -data->rightX;
 8005994:	4b25      	ldr	r3, [pc, #148]	; (8005a2c <DRIVE_update+0x280>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <DRIVE_update+0x1f8>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	425b      	negs	r3, r3
 80059a2:	e000      	b.n	80059a6 <DRIVE_update+0x1fa>
 80059a4:	2319      	movs	r3, #25
 80059a6:	60fb      	str	r3, [r7, #12]
      DRIVE_translateLeft(l_speed);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fadd 	bl	8005f68 <DRIVE_translateLeft>
  return;
 80059ae:	e033      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->rightX > DRIVE_JOYSTICKS_THRESHOLD)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b05      	cmp	r3, #5
 80059b6:	dd0c      	ble.n	80059d2 <DRIVE_update+0x226>
      l_speed = DRIVE_Mode == MANUAL_FIXED_SPEED ? DRIVE_JOYSTICKS_FIXED_SPEED : data->rightX;
 80059b8:	4b1c      	ldr	r3, [pc, #112]	; (8005a2c <DRIVE_update+0x280>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <DRIVE_update+0x21a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	e000      	b.n	80059c8 <DRIVE_update+0x21c>
 80059c6:	2319      	movs	r3, #25
 80059c8:	60fb      	str	r3, [r7, #12]
      DRIVE_translateRight(l_speed);
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 fb1c 	bl	8006008 <DRIVE_translateRight>
  return;
 80059d0:	e022      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->button == BUTTON_L1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	2b0b      	cmp	r3, #11
 80059d8:	d103      	bne.n	80059e2 <DRIVE_update+0x236>
      DRIVE_moveForwardLeft(DRIVE_BUTTONS_FIXED_SPEED);
 80059da:	2019      	movs	r0, #25
 80059dc:	f000 f952 	bl	8005c84 <DRIVE_moveForwardLeft>
  return;
 80059e0:	e01a      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->button == BUTTON_L2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b09      	cmp	r3, #9
 80059e8:	d103      	bne.n	80059f2 <DRIVE_update+0x246>
      DRIVE_moveBackwardRight(DRIVE_BUTTONS_FIXED_SPEED);
 80059ea:	2019      	movs	r0, #25
 80059ec:	f000 f990 	bl	8005d10 <DRIVE_moveBackwardRight>
  return;
 80059f0:	e012      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->button == BUTTON_R1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	d103      	bne.n	8005a02 <DRIVE_update+0x256>
      DRIVE_moveForwardRight(DRIVE_BUTTONS_FIXED_SPEED);
 80059fa:	2019      	movs	r0, #25
 80059fc:	f000 f8fc 	bl	8005bf8 <DRIVE_moveForwardRight>
  return;
 8005a00:	e00a      	b.n	8005a18 <DRIVE_update+0x26c>
    else if (data->button == BUTTON_R2)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	2b0a      	cmp	r3, #10
 8005a08:	d103      	bne.n	8005a12 <DRIVE_update+0x266>
      DRIVE_moveBackwardLeft(DRIVE_BUTTONS_FIXED_SPEED);
 8005a0a:	2019      	movs	r0, #25
 8005a0c:	f000 f9c6 	bl	8005d9c <DRIVE_moveBackwardLeft>
  return;
 8005a10:	e002      	b.n	8005a18 <DRIVE_update+0x26c>
      DRIVE_stop();
 8005a12:	f000 f819 	bl	8005a48 <DRIVE_stop>
  return;
 8005a16:	bf00      	nop
 8005a18:	bf00      	nop
}
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	08009978 	.word	0x08009978
 8005a24:	08009934 	.word	0x08009934
 8005a28:	08009990 	.word	0x08009990
 8005a2c:	200002b5 	.word	0x200002b5
 8005a30:	080099b4 	.word	0x080099b4
 8005a34:	080099dc 	.word	0x080099dc
 8005a38:	08009a04 	.word	0x08009a04
 8005a3c:	200002b4 	.word	0x200002b4
 8005a40:	08009a34 	.word	0x08009a34
 8005a44:	08009a60 	.word	0x08009a60

08005a48 <DRIVE_stop>:

static void DRIVE_stop(void)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	af00      	add	r7, sp, #0
  LOG_info("Stopping drive");
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <DRIVE_stop+0x34>)
 8005a4e:	22e9      	movs	r2, #233	; 0xe9
 8005a50:	490b      	ldr	r1, [pc, #44]	; (8005a80 <DRIVE_stop+0x38>)
 8005a52:	2001      	movs	r0, #1
 8005a54:	f000 fb9e 	bl	8006194 <LOG_log>

  MOTOR_setSpeed(&motorFrontRight, 0);
 8005a58:	2100      	movs	r1, #0
 8005a5a:	480a      	ldr	r0, [pc, #40]	; (8005a84 <DRIVE_stop+0x3c>)
 8005a5c:	f000 fc66 	bl	800632c <MOTOR_setSpeed>
  MOTOR_setSpeed(&motorFrontLeft , 0);
 8005a60:	2100      	movs	r1, #0
 8005a62:	4809      	ldr	r0, [pc, #36]	; (8005a88 <DRIVE_stop+0x40>)
 8005a64:	f000 fc62 	bl	800632c <MOTOR_setSpeed>
  MOTOR_setSpeed(&motorRearRight , 0);
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4808      	ldr	r0, [pc, #32]	; (8005a8c <DRIVE_stop+0x44>)
 8005a6c:	f000 fc5e 	bl	800632c <MOTOR_setSpeed>
  MOTOR_setSpeed(&motorRearLeft  , 0);
 8005a70:	2100      	movs	r1, #0
 8005a72:	4807      	ldr	r0, [pc, #28]	; (8005a90 <DRIVE_stop+0x48>)
 8005a74:	f000 fc5a 	bl	800632c <MOTOR_setSpeed>
}
 8005a78:	bf00      	nop
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08009a8c 	.word	0x08009a8c
 8005a80:	08009934 	.word	0x08009934
 8005a84:	200002b8 	.word	0x200002b8
 8005a88:	200002e4 	.word	0x200002e4
 8005a8c:	2000033c 	.word	0x2000033c
 8005a90:	20000310 	.word	0x20000310

08005a94 <DRIVE_clampSpeed>:

static void DRIVE_clampSpeed(uint32_t *p_speed)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  if (*p_speed > DRIVE_MAXIMUM_SPEED)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b32      	cmp	r3, #50	; 0x32
 8005aa2:	d903      	bls.n	8005aac <DRIVE_clampSpeed+0x18>
  {
    *p_speed = DRIVE_MAXIMUM_SPEED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2232      	movs	r2, #50	; 0x32
 8005aa8:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8005aaa:	bf00      	nop
 8005aac:	bf00      	nop
}
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
	...

08005ab8 <DRIVE_moveForward>:

static void DRIVE_moveForward(uint32_t p_speed)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving forward @%u", l_speed);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <DRIVE_moveForward+0x84>)
 8005aca:	f240 1203 	movw	r2, #259	; 0x103
 8005ace:	491c      	ldr	r1, [pc, #112]	; (8005b40 <DRIVE_moveForward+0x88>)
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	f000 fb5f 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7ff ffda 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_FORWARD);
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	4818      	ldr	r0, [pc, #96]	; (8005b44 <DRIVE_moveForward+0x8c>)
 8005ae4:	f000 fbe0 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorFrontLeft , MOTOR_DIRECTION_FORWARD);
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4817      	ldr	r0, [pc, #92]	; (8005b48 <DRIVE_moveForward+0x90>)
 8005aec:	f000 fbdc 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight , MOTOR_DIRECTION_FORWARD);
 8005af0:	2100      	movs	r1, #0
 8005af2:	4816      	ldr	r0, [pc, #88]	; (8005b4c <DRIVE_moveForward+0x94>)
 8005af4:	f000 fbd8 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_FORWARD);
 8005af8:	2100      	movs	r1, #0
 8005afa:	4815      	ldr	r0, [pc, #84]	; (8005b50 <DRIVE_moveForward+0x98>)
 8005afc:	f000 fbd4 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005b00:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <DRIVE_moveForward+0x9c>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d114      	bne.n	8005b32 <DRIVE_moveForward+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <DRIVE_moveForward+0x8c>)
 8005b0e:	f000 fc0d 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4619      	mov	r1, r3
 8005b16:	480c      	ldr	r0, [pc, #48]	; (8005b48 <DRIVE_moveForward+0x90>)
 8005b18:	f000 fc08 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4619      	mov	r1, r3
 8005b20:	480a      	ldr	r0, [pc, #40]	; (8005b4c <DRIVE_moveForward+0x94>)
 8005b22:	f000 fc03 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4809      	ldr	r0, [pc, #36]	; (8005b50 <DRIVE_moveForward+0x98>)
 8005b2c:	f000 fbfe 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005b30:	bf00      	nop
 8005b32:	bf00      	nop
}
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	08009a9c 	.word	0x08009a9c
 8005b40:	08009934 	.word	0x08009934
 8005b44:	200002b8 	.word	0x200002b8
 8005b48:	200002e4 	.word	0x200002e4
 8005b4c:	2000033c 	.word	0x2000033c
 8005b50:	20000310 	.word	0x20000310
 8005b54:	200002b4 	.word	0x200002b4

08005b58 <DRIVE_moveBackward>:

static void DRIVE_moveBackward(uint32_t p_speed)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b086      	sub	sp, #24
 8005b5c:	af02      	add	r7, sp, #8
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving backward @%u", l_speed);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	4b1c      	ldr	r3, [pc, #112]	; (8005bdc <DRIVE_moveBackward+0x84>)
 8005b6a:	f240 121f 	movw	r2, #287	; 0x11f
 8005b6e:	491c      	ldr	r1, [pc, #112]	; (8005be0 <DRIVE_moveBackward+0x88>)
 8005b70:	2001      	movs	r0, #1
 8005b72:	f000 fb0f 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005b76:	f107 030c 	add.w	r3, r7, #12
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff ff8a 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 8005b80:	2101      	movs	r1, #1
 8005b82:	4818      	ldr	r0, [pc, #96]	; (8005be4 <DRIVE_moveBackward+0x8c>)
 8005b84:	f000 fb90 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorFrontLeft , MOTOR_DIRECTION_BACKWARD);
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4817      	ldr	r0, [pc, #92]	; (8005be8 <DRIVE_moveBackward+0x90>)
 8005b8c:	f000 fb8c 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight , MOTOR_DIRECTION_BACKWARD);
 8005b90:	2101      	movs	r1, #1
 8005b92:	4816      	ldr	r0, [pc, #88]	; (8005bec <DRIVE_moveBackward+0x94>)
 8005b94:	f000 fb88 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8005b98:	2101      	movs	r1, #1
 8005b9a:	4815      	ldr	r0, [pc, #84]	; (8005bf0 <DRIVE_moveBackward+0x98>)
 8005b9c:	f000 fb84 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <DRIVE_moveBackward+0x9c>)
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d114      	bne.n	8005bd2 <DRIVE_moveBackward+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4619      	mov	r1, r3
 8005bac:	480d      	ldr	r0, [pc, #52]	; (8005be4 <DRIVE_moveBackward+0x8c>)
 8005bae:	f000 fbbd 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	480c      	ldr	r0, [pc, #48]	; (8005be8 <DRIVE_moveBackward+0x90>)
 8005bb8:	f000 fbb8 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	480a      	ldr	r0, [pc, #40]	; (8005bec <DRIVE_moveBackward+0x94>)
 8005bc2:	f000 fbb3 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4809      	ldr	r0, [pc, #36]	; (8005bf0 <DRIVE_moveBackward+0x98>)
 8005bcc:	f000 fbae 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
}
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	08009ab0 	.word	0x08009ab0
 8005be0:	08009934 	.word	0x08009934
 8005be4:	200002b8 	.word	0x200002b8
 8005be8:	200002e4 	.word	0x200002e4
 8005bec:	2000033c 	.word	0x2000033c
 8005bf0:	20000310 	.word	0x20000310
 8005bf4:	200002b4 	.word	0x200002b4

08005bf8 <DRIVE_moveForwardRight>:

static void DRIVE_moveForwardRight (uint32_t p_speed)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving forward-right @%u", l_speed);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	4b17      	ldr	r3, [pc, #92]	; (8005c68 <DRIVE_moveForwardRight+0x70>)
 8005c0a:	f240 123b 	movw	r2, #315	; 0x13b
 8005c0e:	4917      	ldr	r1, [pc, #92]	; (8005c6c <DRIVE_moveForwardRight+0x74>)
 8005c10:	2001      	movs	r0, #1
 8005c12:	f000 fabf 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005c16:	f107 030c 	add.w	r3, r7, #12
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f7ff ff3a 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontLeft, MOTOR_DIRECTION_FORWARD);
 8005c20:	2100      	movs	r1, #0
 8005c22:	4813      	ldr	r0, [pc, #76]	; (8005c70 <DRIVE_moveForwardRight+0x78>)
 8005c24:	f000 fb40 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight, MOTOR_DIRECTION_FORWARD);
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4812      	ldr	r0, [pc, #72]	; (8005c74 <DRIVE_moveForwardRight+0x7c>)
 8005c2c:	f000 fb3c 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005c30:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <DRIVE_moveForwardRight+0x80>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d112      	bne.n	8005c5e <DRIVE_moveForwardRight+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight,       0);
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4810      	ldr	r0, [pc, #64]	; (8005c7c <DRIVE_moveForwardRight+0x84>)
 8005c3c:	f000 fb76 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4619      	mov	r1, r3
 8005c44:	480a      	ldr	r0, [pc, #40]	; (8005c70 <DRIVE_moveForwardRight+0x78>)
 8005c46:	f000 fb71 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4809      	ldr	r0, [pc, #36]	; (8005c74 <DRIVE_moveForwardRight+0x7c>)
 8005c50:	f000 fb6c 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  ,       0);
 8005c54:	2100      	movs	r1, #0
 8005c56:	480a      	ldr	r0, [pc, #40]	; (8005c80 <DRIVE_moveForwardRight+0x88>)
 8005c58:	f000 fb68 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
}
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	08009ac4 	.word	0x08009ac4
 8005c6c:	08009934 	.word	0x08009934
 8005c70:	200002e4 	.word	0x200002e4
 8005c74:	2000033c 	.word	0x2000033c
 8005c78:	200002b4 	.word	0x200002b4
 8005c7c:	200002b8 	.word	0x200002b8
 8005c80:	20000310 	.word	0x20000310

08005c84 <DRIVE_moveForwardLeft>:

static void DRIVE_moveForwardLeft  (uint32_t p_speed)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af02      	add	r7, sp, #8
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving forward-left @%u", l_speed);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	4b17      	ldr	r3, [pc, #92]	; (8005cf4 <DRIVE_moveForwardLeft+0x70>)
 8005c96:	f240 1255 	movw	r2, #341	; 0x155
 8005c9a:	4917      	ldr	r1, [pc, #92]	; (8005cf8 <DRIVE_moveForwardLeft+0x74>)
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f000 fa79 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005ca2:	f107 030c 	add.w	r3, r7, #12
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff fef4 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_FORWARD);
 8005cac:	2100      	movs	r1, #0
 8005cae:	4813      	ldr	r0, [pc, #76]	; (8005cfc <DRIVE_moveForwardLeft+0x78>)
 8005cb0:	f000 fafa 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_FORWARD);
 8005cb4:	2100      	movs	r1, #0
 8005cb6:	4812      	ldr	r0, [pc, #72]	; (8005d00 <DRIVE_moveForwardLeft+0x7c>)
 8005cb8:	f000 faf6 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <DRIVE_moveForwardLeft+0x80>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d112      	bne.n	8005cea <DRIVE_moveForwardLeft+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	480c      	ldr	r0, [pc, #48]	; (8005cfc <DRIVE_moveForwardLeft+0x78>)
 8005cca:	f000 fb2f 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft ,       0);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	480d      	ldr	r0, [pc, #52]	; (8005d08 <DRIVE_moveForwardLeft+0x84>)
 8005cd2:	f000 fb2b 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight ,       0);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	480c      	ldr	r0, [pc, #48]	; (8005d0c <DRIVE_moveForwardLeft+0x88>)
 8005cda:	f000 fb27 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	4807      	ldr	r0, [pc, #28]	; (8005d00 <DRIVE_moveForwardLeft+0x7c>)
 8005ce4:	f000 fb22 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005ce8:	bf00      	nop
 8005cea:	bf00      	nop
}
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	08009ae0 	.word	0x08009ae0
 8005cf8:	08009934 	.word	0x08009934
 8005cfc:	200002b8 	.word	0x200002b8
 8005d00:	20000310 	.word	0x20000310
 8005d04:	200002b4 	.word	0x200002b4
 8005d08:	200002e4 	.word	0x200002e4
 8005d0c:	2000033c 	.word	0x2000033c

08005d10 <DRIVE_moveBackwardRight>:

static void DRIVE_moveBackwardRight(uint32_t p_speed)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving backward-right @%u", l_speed);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <DRIVE_moveBackwardRight+0x70>)
 8005d22:	f240 126f 	movw	r2, #367	; 0x16f
 8005d26:	4917      	ldr	r1, [pc, #92]	; (8005d84 <DRIVE_moveBackwardRight+0x74>)
 8005d28:	2001      	movs	r0, #1
 8005d2a:	f000 fa33 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005d2e:	f107 030c 	add.w	r3, r7, #12
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff feae 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 8005d38:	2101      	movs	r1, #1
 8005d3a:	4813      	ldr	r0, [pc, #76]	; (8005d88 <DRIVE_moveBackwardRight+0x78>)
 8005d3c:	f000 fab4 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8005d40:	2101      	movs	r1, #1
 8005d42:	4812      	ldr	r0, [pc, #72]	; (8005d8c <DRIVE_moveBackwardRight+0x7c>)
 8005d44:	f000 fab0 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005d48:	4b11      	ldr	r3, [pc, #68]	; (8005d90 <DRIVE_moveBackwardRight+0x80>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d112      	bne.n	8005d76 <DRIVE_moveBackwardRight+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4619      	mov	r1, r3
 8005d54:	480c      	ldr	r0, [pc, #48]	; (8005d88 <DRIVE_moveBackwardRight+0x78>)
 8005d56:	f000 fae9 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft ,       0);
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <DRIVE_moveBackwardRight+0x84>)
 8005d5e:	f000 fae5 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight ,       0);
 8005d62:	2100      	movs	r1, #0
 8005d64:	480c      	ldr	r0, [pc, #48]	; (8005d98 <DRIVE_moveBackwardRight+0x88>)
 8005d66:	f000 fae1 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4807      	ldr	r0, [pc, #28]	; (8005d8c <DRIVE_moveBackwardRight+0x7c>)
 8005d70:	f000 fadc 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
}
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	08009af8 	.word	0x08009af8
 8005d84:	08009934 	.word	0x08009934
 8005d88:	200002b8 	.word	0x200002b8
 8005d8c:	20000310 	.word	0x20000310
 8005d90:	200002b4 	.word	0x200002b4
 8005d94:	200002e4 	.word	0x200002e4
 8005d98:	2000033c 	.word	0x2000033c

08005d9c <DRIVE_moveBackwardLeft>:

static void DRIVE_moveBackwardLeft (uint32_t p_speed)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60fb      	str	r3, [r7, #12]

  LOG_info("Moving backward-left @%u", l_speed);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	4b17      	ldr	r3, [pc, #92]	; (8005e0c <DRIVE_moveBackwardLeft+0x70>)
 8005dae:	f240 1289 	movw	r2, #393	; 0x189
 8005db2:	4917      	ldr	r1, [pc, #92]	; (8005e10 <DRIVE_moveBackwardLeft+0x74>)
 8005db4:	2001      	movs	r0, #1
 8005db6:	f000 f9ed 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005dba:	f107 030c 	add.w	r3, r7, #12
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff fe68 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontLeft, MOTOR_DIRECTION_BACKWARD);
 8005dc4:	2101      	movs	r1, #1
 8005dc6:	4813      	ldr	r0, [pc, #76]	; (8005e14 <DRIVE_moveBackwardLeft+0x78>)
 8005dc8:	f000 fa6e 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight, MOTOR_DIRECTION_BACKWARD);
 8005dcc:	2101      	movs	r1, #1
 8005dce:	4812      	ldr	r0, [pc, #72]	; (8005e18 <DRIVE_moveBackwardLeft+0x7c>)
 8005dd0:	f000 fa6a 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005dd4:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <DRIVE_moveBackwardLeft+0x80>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d112      	bne.n	8005e02 <DRIVE_moveBackwardLeft+0x66>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight,       0);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4810      	ldr	r0, [pc, #64]	; (8005e20 <DRIVE_moveBackwardLeft+0x84>)
 8005de0:	f000 faa4 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4619      	mov	r1, r3
 8005de8:	480a      	ldr	r0, [pc, #40]	; (8005e14 <DRIVE_moveBackwardLeft+0x78>)
 8005dea:	f000 fa9f 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4619      	mov	r1, r3
 8005df2:	4809      	ldr	r0, [pc, #36]	; (8005e18 <DRIVE_moveBackwardLeft+0x7c>)
 8005df4:	f000 fa9a 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  ,       0);
 8005df8:	2100      	movs	r1, #0
 8005dfa:	480a      	ldr	r0, [pc, #40]	; (8005e24 <DRIVE_moveBackwardLeft+0x88>)
 8005dfc:	f000 fa96 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
}
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08009b14 	.word	0x08009b14
 8005e10:	08009934 	.word	0x08009934
 8005e14:	200002e4 	.word	0x200002e4
 8005e18:	2000033c 	.word	0x2000033c
 8005e1c:	200002b4 	.word	0x200002b4
 8005e20:	200002b8 	.word	0x200002b8
 8005e24:	20000310 	.word	0x20000310

08005e28 <DRIVE_turnLeft>:

static void DRIVE_turnLeft(uint32_t p_speed)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	60fb      	str	r3, [r7, #12]

  LOG_info("Turning left @%u", l_speed);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4b1c      	ldr	r3, [pc, #112]	; (8005eac <DRIVE_turnLeft+0x84>)
 8005e3a:	f240 12a3 	movw	r2, #419	; 0x1a3
 8005e3e:	491c      	ldr	r1, [pc, #112]	; (8005eb0 <DRIVE_turnLeft+0x88>)
 8005e40:	2001      	movs	r0, #1
 8005e42:	f000 f9a7 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fe22 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_FORWARD );
 8005e50:	2100      	movs	r1, #0
 8005e52:	4818      	ldr	r0, [pc, #96]	; (8005eb4 <DRIVE_turnLeft+0x8c>)
 8005e54:	f000 fa28 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorFrontLeft , MOTOR_DIRECTION_BACKWARD);
 8005e58:	2101      	movs	r1, #1
 8005e5a:	4817      	ldr	r0, [pc, #92]	; (8005eb8 <DRIVE_turnLeft+0x90>)
 8005e5c:	f000 fa24 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight , MOTOR_DIRECTION_FORWARD );
 8005e60:	2100      	movs	r1, #0
 8005e62:	4816      	ldr	r0, [pc, #88]	; (8005ebc <DRIVE_turnLeft+0x94>)
 8005e64:	f000 fa20 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8005e68:	2101      	movs	r1, #1
 8005e6a:	4815      	ldr	r0, [pc, #84]	; (8005ec0 <DRIVE_turnLeft+0x98>)
 8005e6c:	f000 fa1c 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005e70:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <DRIVE_turnLeft+0x9c>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d114      	bne.n	8005ea2 <DRIVE_turnLeft+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <DRIVE_turnLeft+0x8c>)
 8005e7e:	f000 fa55 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4619      	mov	r1, r3
 8005e86:	480c      	ldr	r0, [pc, #48]	; (8005eb8 <DRIVE_turnLeft+0x90>)
 8005e88:	f000 fa50 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	480a      	ldr	r0, [pc, #40]	; (8005ebc <DRIVE_turnLeft+0x94>)
 8005e92:	f000 fa4b 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4809      	ldr	r0, [pc, #36]	; (8005ec0 <DRIVE_turnLeft+0x98>)
 8005e9c:	f000 fa46 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
}
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08009b30 	.word	0x08009b30
 8005eb0:	08009934 	.word	0x08009934
 8005eb4:	200002b8 	.word	0x200002b8
 8005eb8:	200002e4 	.word	0x200002e4
 8005ebc:	2000033c 	.word	0x2000033c
 8005ec0:	20000310 	.word	0x20000310
 8005ec4:	200002b4 	.word	0x200002b4

08005ec8 <DRIVE_turnRight>:

static void DRIVE_turnRight(uint32_t p_speed)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]

  LOG_info("Turning right @%u", l_speed);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	4b1c      	ldr	r3, [pc, #112]	; (8005f4c <DRIVE_turnRight+0x84>)
 8005eda:	f240 12bf 	movw	r2, #447	; 0x1bf
 8005ede:	491c      	ldr	r1, [pc, #112]	; (8005f50 <DRIVE_turnRight+0x88>)
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f000 f957 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005ee6:	f107 030c 	add.w	r3, r7, #12
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fdd2 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	4818      	ldr	r0, [pc, #96]	; (8005f54 <DRIVE_turnRight+0x8c>)
 8005ef4:	f000 f9d8 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorFrontLeft , MOTOR_DIRECTION_FORWARD );
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4817      	ldr	r0, [pc, #92]	; (8005f58 <DRIVE_turnRight+0x90>)
 8005efc:	f000 f9d4 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight , MOTOR_DIRECTION_BACKWARD);
 8005f00:	2101      	movs	r1, #1
 8005f02:	4816      	ldr	r0, [pc, #88]	; (8005f5c <DRIVE_turnRight+0x94>)
 8005f04:	f000 f9d0 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_FORWARD );
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4815      	ldr	r0, [pc, #84]	; (8005f60 <DRIVE_turnRight+0x98>)
 8005f0c:	f000 f9cc 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005f10:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <DRIVE_turnRight+0x9c>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d114      	bne.n	8005f42 <DRIVE_turnRight+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	480d      	ldr	r0, [pc, #52]	; (8005f54 <DRIVE_turnRight+0x8c>)
 8005f1e:	f000 fa05 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4619      	mov	r1, r3
 8005f26:	480c      	ldr	r0, [pc, #48]	; (8005f58 <DRIVE_turnRight+0x90>)
 8005f28:	f000 fa00 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	480a      	ldr	r0, [pc, #40]	; (8005f5c <DRIVE_turnRight+0x94>)
 8005f32:	f000 f9fb 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4809      	ldr	r0, [pc, #36]	; (8005f60 <DRIVE_turnRight+0x98>)
 8005f3c:	f000 f9f6 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005f40:	bf00      	nop
 8005f42:	bf00      	nop
}
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08009b44 	.word	0x08009b44
 8005f50:	08009934 	.word	0x08009934
 8005f54:	200002b8 	.word	0x200002b8
 8005f58:	200002e4 	.word	0x200002e4
 8005f5c:	2000033c 	.word	0x2000033c
 8005f60:	20000310 	.word	0x20000310
 8005f64:	200002b4 	.word	0x200002b4

08005f68 <DRIVE_translateLeft>:

static void DRIVE_translateLeft(uint32_t p_speed)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	60fb      	str	r3, [r7, #12]

  LOG_info("Translating left @%u", l_speed);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	9300      	str	r3, [sp, #0]
 8005f78:	4b1c      	ldr	r3, [pc, #112]	; (8005fec <DRIVE_translateLeft+0x84>)
 8005f7a:	f240 12db 	movw	r2, #475	; 0x1db
 8005f7e:	491c      	ldr	r1, [pc, #112]	; (8005ff0 <DRIVE_translateLeft+0x88>)
 8005f80:	2001      	movs	r0, #1
 8005f82:	f000 f907 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8005f86:	f107 030c 	add.w	r3, r7, #12
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fd82 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_FORWARD );
 8005f90:	2100      	movs	r1, #0
 8005f92:	4818      	ldr	r0, [pc, #96]	; (8005ff4 <DRIVE_translateLeft+0x8c>)
 8005f94:	f000 f988 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorFrontLeft , MOTOR_DIRECTION_BACKWARD);
 8005f98:	2101      	movs	r1, #1
 8005f9a:	4817      	ldr	r0, [pc, #92]	; (8005ff8 <DRIVE_translateLeft+0x90>)
 8005f9c:	f000 f984 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight , MOTOR_DIRECTION_BACKWARD);
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4816      	ldr	r0, [pc, #88]	; (8005ffc <DRIVE_translateLeft+0x94>)
 8005fa4:	f000 f980 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_FORWARD );
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4815      	ldr	r0, [pc, #84]	; (8006000 <DRIVE_translateLeft+0x98>)
 8005fac:	f000 f97c 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8005fb0:	4b14      	ldr	r3, [pc, #80]	; (8006004 <DRIVE_translateLeft+0x9c>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d114      	bne.n	8005fe2 <DRIVE_translateLeft+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	480d      	ldr	r0, [pc, #52]	; (8005ff4 <DRIVE_translateLeft+0x8c>)
 8005fbe:	f000 f9b5 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	480c      	ldr	r0, [pc, #48]	; (8005ff8 <DRIVE_translateLeft+0x90>)
 8005fc8:	f000 f9b0 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	480a      	ldr	r0, [pc, #40]	; (8005ffc <DRIVE_translateLeft+0x94>)
 8005fd2:	f000 f9ab 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4809      	ldr	r0, [pc, #36]	; (8006000 <DRIVE_translateLeft+0x98>)
 8005fdc:	f000 f9a6 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
}
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	08009b58 	.word	0x08009b58
 8005ff0:	08009934 	.word	0x08009934
 8005ff4:	200002b8 	.word	0x200002b8
 8005ff8:	200002e4 	.word	0x200002e4
 8005ffc:	2000033c 	.word	0x2000033c
 8006000:	20000310 	.word	0x20000310
 8006004:	200002b4 	.word	0x200002b4

08006008 <DRIVE_translateRight>:

static void DRIVE_translateRight(uint32_t p_speed)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af02      	add	r7, sp, #8
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	60fb      	str	r3, [r7, #12]

  LOG_info("Translating right @%u", l_speed);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	4b1c      	ldr	r3, [pc, #112]	; (800608c <DRIVE_translateRight+0x84>)
 800601a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800601e:	491c      	ldr	r1, [pc, #112]	; (8006090 <DRIVE_translateRight+0x88>)
 8006020:	2001      	movs	r0, #1
 8006022:	f000 f8b7 	bl	8006194 <LOG_log>

  DRIVE_clampSpeed(&l_speed);
 8006026:	f107 030c 	add.w	r3, r7, #12
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fd32 	bl	8005a94 <DRIVE_clampSpeed>

  MOTOR_setDirection(&motorFrontRight, MOTOR_DIRECTION_BACKWARD);
 8006030:	2101      	movs	r1, #1
 8006032:	4818      	ldr	r0, [pc, #96]	; (8006094 <DRIVE_translateRight+0x8c>)
 8006034:	f000 f938 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorFrontLeft , MOTOR_DIRECTION_FORWARD );
 8006038:	2100      	movs	r1, #0
 800603a:	4817      	ldr	r0, [pc, #92]	; (8006098 <DRIVE_translateRight+0x90>)
 800603c:	f000 f934 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearRight , MOTOR_DIRECTION_FORWARD );
 8006040:	2100      	movs	r1, #0
 8006042:	4816      	ldr	r0, [pc, #88]	; (800609c <DRIVE_translateRight+0x94>)
 8006044:	f000 f930 	bl	80062a8 <MOTOR_setDirection>
  MOTOR_setDirection(&motorRearLeft  , MOTOR_DIRECTION_BACKWARD);
 8006048:	2101      	movs	r1, #1
 800604a:	4815      	ldr	r0, [pc, #84]	; (80060a0 <DRIVE_translateRight+0x98>)
 800604c:	f000 f92c 	bl	80062a8 <MOTOR_setDirection>

  if (DRIVE_isDebugOn == true)
 8006050:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <DRIVE_translateRight+0x9c>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d114      	bne.n	8006082 <DRIVE_translateRight+0x7a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MOTOR_setSpeed(&motorFrontRight, l_speed);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4619      	mov	r1, r3
 800605c:	480d      	ldr	r0, [pc, #52]	; (8006094 <DRIVE_translateRight+0x8c>)
 800605e:	f000 f965 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorFrontLeft , l_speed);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4619      	mov	r1, r3
 8006066:	480c      	ldr	r0, [pc, #48]	; (8006098 <DRIVE_translateRight+0x90>)
 8006068:	f000 f960 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearRight , l_speed);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4619      	mov	r1, r3
 8006070:	480a      	ldr	r0, [pc, #40]	; (800609c <DRIVE_translateRight+0x94>)
 8006072:	f000 f95b 	bl	800632c <MOTOR_setSpeed>
    MOTOR_setSpeed(&motorRearLeft  , l_speed);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4619      	mov	r1, r3
 800607a:	4809      	ldr	r0, [pc, #36]	; (80060a0 <DRIVE_translateRight+0x98>)
 800607c:	f000 f956 	bl	800632c <MOTOR_setSpeed>
  }

  return;
 8006080:	bf00      	nop
 8006082:	bf00      	nop
}
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	08009b70 	.word	0x08009b70
 8006090:	08009934 	.word	0x08009934
 8006094:	200002b8 	.word	0x200002b8
 8006098:	200002e4 	.word	0x200002e4
 800609c:	2000033c 	.word	0x2000033c
 80060a0:	20000310 	.word	0x20000310
 80060a4:	200002b4 	.word	0x200002b4

080060a8 <LED_setMode>:
#include "log.h"

static LED_MODE LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(LED_MODE mode)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
  LOG_info("Setting LED mode to %u", mode);
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <LED_setMode+0x28>)
 80060b8:	220b      	movs	r2, #11
 80060ba:	4906      	ldr	r1, [pc, #24]	; (80060d4 <LED_setMode+0x2c>)
 80060bc:	2001      	movs	r0, #1
 80060be:	f000 f869 	bl	8006194 <LOG_log>

  LED_mode = mode;
 80060c2:	4a05      	ldr	r2, [pc, #20]	; (80060d8 <LED_setMode+0x30>)
 80060c4:	79fb      	ldrb	r3, [r7, #7]
 80060c6:	7013      	strb	r3, [r2, #0]

  return;
 80060c8:	bf00      	nop
}
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	08009b88 	.word	0x08009b88
 80060d4:	08009ba0 	.word	0x08009ba0
 80060d8:	20000030 	.word	0x20000030

080060dc <LED_update>:

void LED_update(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  static uint32_t slowBlinkCounter = 0;

  LOG_debug("Updating LED");
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <LED_update+0x84>)
 80060e2:	2216      	movs	r2, #22
 80060e4:	491f      	ldr	r1, [pc, #124]	; (8006164 <LED_update+0x88>)
 80060e6:	2000      	movs	r0, #0
 80060e8:	f000 f854 	bl	8006194 <LOG_log>

  switch (LED_mode)
 80060ec:	4b1e      	ldr	r3, [pc, #120]	; (8006168 <LED_update+0x8c>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d830      	bhi.n	8006156 <LED_update+0x7a>
 80060f4:	a201      	add	r2, pc, #4	; (adr r2, 80060fc <LED_update+0x20>)
 80060f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060fa:	bf00      	nop
 80060fc:	0800610d 	.word	0x0800610d
 8006100:	0800611b 	.word	0x0800611b
 8006104:	08006129 	.word	0x08006129
 8006108:	0800614b 	.word	0x0800614b
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800610c:	2201      	movs	r2, #1
 800610e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006112:	4816      	ldr	r0, [pc, #88]	; (800616c <LED_update+0x90>)
 8006114:	f7fc fbd4 	bl	80028c0 <HAL_GPIO_WritePin>
      break;
 8006118:	e020      	b.n	800615c <LED_update+0x80>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006120:	4812      	ldr	r0, [pc, #72]	; (800616c <LED_update+0x90>)
 8006122:	f7fc fbcd 	bl	80028c0 <HAL_GPIO_WritePin>
      break;
 8006126:	e019      	b.n	800615c <LED_update+0x80>

    case LED_MODE_BLINK_SLOW:
      slowBlinkCounter++;
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <LED_update+0x94>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3301      	adds	r3, #1
 800612e:	4a10      	ldr	r2, [pc, #64]	; (8006170 <LED_update+0x94>)
 8006130:	6013      	str	r3, [r2, #0]
      if (slowBlinkCounter % 4 == 0)
 8006132:	4b0f      	ldr	r3, [pc, #60]	; (8006170 <LED_update+0x94>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <LED_update+0x7e>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800613e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006142:	480a      	ldr	r0, [pc, #40]	; (800616c <LED_update+0x90>)
 8006144:	f7fc fbd4 	bl	80028f0 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8006148:	e007      	b.n	800615a <LED_update+0x7e>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800614a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800614e:	4807      	ldr	r0, [pc, #28]	; (800616c <LED_update+0x90>)
 8006150:	f7fc fbce 	bl	80028f0 <HAL_GPIO_TogglePin>
      break;
 8006154:	e002      	b.n	800615c <LED_update+0x80>

    default:
      ; /* Nothing to do */
      break;
 8006156:	bf00      	nop
 8006158:	e000      	b.n	800615c <LED_update+0x80>
      break;
 800615a:	bf00      	nop
  }

  return;
 800615c:	bf00      	nop
}
 800615e:	bd80      	pop	{r7, pc}
 8006160:	08009bb4 	.word	0x08009bb4
 8006164:	08009ba0 	.word	0x08009ba0
 8006168:	20000030 	.word	0x20000030
 800616c:	40011000 	.word	0x40011000
 8006170:	20000368 	.word	0x20000368

08006174 <LOG_setLevel>:
{
  "DEBUG", "INFO", "WARN", "ERROR"
};

void LOG_setLevel(LOG_LEVEL level)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  LOG_level = level;
 800617e:	79fb      	ldrb	r3, [r7, #7]
 8006180:	4a03      	ldr	r2, [pc, #12]	; (8006190 <LOG_setLevel+0x1c>)
 8006182:	6013      	str	r3, [r2, #0]

  return;
 8006184:	bf00      	nop
}
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	2000036c 	.word	0x2000036c

08006194 <LOG_log>:

void LOG_log(LOG_LEVEL level, const char *file, int line, const char *format, ...)
{
 8006194:	b408      	push	{r3}
 8006196:	b580      	push	{r7, lr}
 8006198:	b08f      	sub	sp, #60	; 0x3c
 800619a:	af02      	add	r7, sp, #8
 800619c:	4603      	mov	r3, r0
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	73fb      	strb	r3, [r7, #15]
  va_list argumentsList;
  char buffer[16];

  time_t currentTime = time(NULL);
 80061a4:	2000      	movs	r0, #0
 80061a6:	f001 fc35 	bl	8007a14 <time>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
  struct tm *localTime = localtime(&currentTime);
 80061b2:	f107 0310 	add.w	r3, r7, #16
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fb52 	bl	8006860 <localtime>
 80061bc:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (level >= LOG_level)
 80061be:	7bfa      	ldrb	r2, [r7, #15]
 80061c0:	4b1a      	ldr	r3, [pc, #104]	; (800622c <LOG_log+0x98>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d32a      	bcc.n	800621e <LOG_log+0x8a>
  {
    va_start(argumentsList, format);
 80061c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28

    buffer[strftime(buffer, sizeof(buffer), "%H:%M:%S", localTime)] = '\0';
 80061ce:	f107 0018 	add.w	r0, r7, #24
 80061d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d4:	4a16      	ldr	r2, [pc, #88]	; (8006230 <LOG_log+0x9c>)
 80061d6:	2110      	movs	r1, #16
 80061d8:	f001 fb76 	bl	80078c8 <strftime>
 80061dc:	4603      	mov	r3, r0
 80061de:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80061e2:	4413      	add	r3, r2
 80061e4:	2200      	movs	r2, #0
 80061e6:	f803 2c18 	strb.w	r2, [r3, #-24]
    printf("%s %-5s %s:%d: ", buffer, LOG_levelStrings[level], file, line);
 80061ea:	7bfb      	ldrb	r3, [r7, #15]
 80061ec:	4a11      	ldr	r2, [pc, #68]	; (8006234 <LOG_log+0xa0>)
 80061ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80061f2:	f107 0118 	add.w	r1, r7, #24
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	480e      	ldr	r0, [pc, #56]	; (8006238 <LOG_log+0xa4>)
 80061fe:	f000 fd07 	bl	8006c10 <iprintf>
    vprintf(format, argumentsList);
 8006202:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006204:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006206:	f001 fe59 	bl	8007ebc <viprintf>
    printf("\r\n");
 800620a:	480c      	ldr	r0, [pc, #48]	; (800623c <LOG_log+0xa8>)
 800620c:	f000 fd86 	bl	8006d1c <puts>
    fflush(stdout);
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <LOG_log+0xac>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f9f6 	bl	8006608 <fflush>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800621c:	bf00      	nop
 800621e:	bf00      	nop
}
 8006220:	3734      	adds	r7, #52	; 0x34
 8006222:	46bd      	mov	sp, r7
 8006224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006228:	b001      	add	sp, #4
 800622a:	4770      	bx	lr
 800622c:	2000036c 	.word	0x2000036c
 8006230:	08009be4 	.word	0x08009be4
 8006234:	20000034 	.word	0x20000034
 8006238:	08009bf0 	.word	0x08009bf0
 800623c:	08009c00 	.word	0x08009c00
 8006240:	20000044 	.word	0x20000044

08006244 <MASTER_CONTROL_receiveData>:
#include "stm32f1xx_hal.h"

static uint8_t MASTER_CONTROL_rxBuffer[12] = {0};

void MASTER_CONTROL_receiveData(UART_HandleTypeDef *huart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, MASTER_CONTROL_rxBuffer, 1);
 800624c:	2201      	movs	r2, #1
 800624e:	4904      	ldr	r1, [pc, #16]	; (8006260 <MASTER_CONTROL_receiveData+0x1c>)
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7fe fb49 	bl	80048e8 <HAL_UART_Receive_IT>

  return;
 8006256:	bf00      	nop
}
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000370 	.word	0x20000370

08006264 <MOTOR_init>:

#include "stm32f1xx_hal.h"
#include "log.h"

void MOTOR_init(MOTOR_Handle *handle, char *name)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af02      	add	r7, sp, #8
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  LOG_info("Initializing Motor module for %s", name);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <MOTOR_init+0x3c>)
 8006274:	220a      	movs	r2, #10
 8006276:	490b      	ldr	r1, [pc, #44]	; (80062a4 <MOTOR_init+0x40>)
 8006278:	2001      	movs	r0, #1
 800627a:	f7ff ff8b 	bl	8006194 <LOG_log>

  (void)strncpy((char *)handle->name, name, MOTOR_NAME_MAX_LENGTH);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	220c      	movs	r2, #12
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f001 fb29 	bl	80078dc <strncpy>

  MOTOR_setSpeed(handle, 0);
 800628a:	2100      	movs	r1, #0
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f84d 	bl	800632c <MOTOR_setSpeed>
  MOTOR_stop    (handle   );
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 f8a2 	bl	80063dc <MOTOR_stop>

  return;
 8006298:	bf00      	nop
}
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	08009c04 	.word	0x08009c04
 80062a4:	08009c28 	.word	0x08009c28

080062a8 <MOTOR_setDirection>:

void MOTOR_setDirection(MOTOR_Handle *handle, uint32_t direction)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  LOG_debug("Setting %s motor direction to %u", handle->name, direction);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4b1a      	ldr	r3, [pc, #104]	; (8006324 <MOTOR_setDirection+0x7c>)
 80062bc:	2216      	movs	r2, #22
 80062be:	491a      	ldr	r1, [pc, #104]	; (8006328 <MOTOR_setDirection+0x80>)
 80062c0:	2000      	movs	r0, #0
 80062c2:	f7ff ff67 	bl	8006194 <LOG_log>

  if (direction == MOTOR_DIRECTION_FORWARD)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d112      	bne.n	80062f2 <MOTOR_setDirection+0x4a>
  {
    HAL_GPIO_WritePin(handle->dirPin1Port, handle->dirPin1, GPIO_PIN_RESET);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68d8      	ldr	r0, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	2200      	movs	r2, #0
 80062d8:	4619      	mov	r1, r3
 80062da:	f7fc faf1 	bl	80028c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(handle->dirPin2Port, handle->dirPin2, GPIO_PIN_SET  );
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6918      	ldr	r0, [r3, #16]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2201      	movs	r2, #1
 80062ea:	4619      	mov	r1, r3
 80062ec:	f7fc fae8 	bl	80028c0 <HAL_GPIO_WritePin>
 80062f0:	e011      	b.n	8006316 <MOTOR_setDirection+0x6e>
  }
  else
  {
    HAL_GPIO_WritePin(handle->dirPin1Port, handle->dirPin1, GPIO_PIN_SET  );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	68d8      	ldr	r0, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2201      	movs	r2, #1
 80062fe:	4619      	mov	r1, r3
 8006300:	f7fc fade 	bl	80028c0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(handle->dirPin2Port, handle->dirPin2, GPIO_PIN_RESET);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6918      	ldr	r0, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	699b      	ldr	r3, [r3, #24]
 800630c:	b29b      	uxth	r3, r3
 800630e:	2200      	movs	r2, #0
 8006310:	4619      	mov	r1, r3
 8006312:	f7fc fad5 	bl	80028c0 <HAL_GPIO_WritePin>
  }

  handle->direction = direction;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	61da      	str	r2, [r3, #28]

  return;
 800631c:	bf00      	nop
}
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	08009c3c 	.word	0x08009c3c
 8006328:	08009c28 	.word	0x08009c28

0800632c <MOTOR_setSpeed>:

void MOTOR_setSpeed(MOTOR_Handle *handle, uint32_t speed)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af02      	add	r7, sp, #8
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  LOG_debug("Setting %s motor speed to %u", handle->name, speed);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <MOTOR_setSpeed+0x74>)
 8006340:	222a      	movs	r2, #42	; 0x2a
 8006342:	4918      	ldr	r1, [pc, #96]	; (80063a4 <MOTOR_setSpeed+0x78>)
 8006344:	2000      	movs	r0, #0
 8006346:	f7ff ff25 	bl	8006194 <LOG_log>

  __HAL_TIM_SET_COMPARE(handle->pwmTimerHandle, handle->pwmChannel, speed);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	2b00      	cmp	r3, #0
 8006350:	d105      	bne.n	800635e <MOTOR_setSpeed+0x32>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	635a      	str	r2, [r3, #52]	; 0x34
 800635c:	e018      	b.n	8006390 <MOTOR_setSpeed+0x64>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	2b04      	cmp	r3, #4
 8006364:	d105      	bne.n	8006372 <MOTOR_setSpeed+0x46>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	6393      	str	r3, [r2, #56]	; 0x38
 8006370:	e00e      	b.n	8006390 <MOTOR_setSpeed+0x64>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006376:	2b08      	cmp	r3, #8
 8006378:	d105      	bne.n	8006386 <MOTOR_setSpeed+0x5a>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	63d3      	str	r3, [r2, #60]	; 0x3c
 8006384:	e004      	b.n	8006390 <MOTOR_setSpeed+0x64>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	6413      	str	r3, [r2, #64]	; 0x40

  handle->speed = speed;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	683a      	ldr	r2, [r7, #0]
 8006394:	621a      	str	r2, [r3, #32]

  return;
 8006396:	bf00      	nop
}
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	08009c60 	.word	0x08009c60
 80063a4:	08009c28 	.word	0x08009c28

080063a8 <MOTOR_start>:

void MOTOR_start(MOTOR_Handle *handle)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af02      	add	r7, sp, #8
 80063ae:	6078      	str	r0, [r7, #4]
  LOG_info("Starting %s motor", handle->name);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <MOTOR_start+0x2c>)
 80063b6:	2235      	movs	r2, #53	; 0x35
 80063b8:	4907      	ldr	r1, [pc, #28]	; (80063d8 <MOTOR_start+0x30>)
 80063ba:	2001      	movs	r0, #1
 80063bc:	f7ff feea 	bl	8006194 <LOG_log>

  MOTOR_setDirection(handle, handle->direction);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	69db      	ldr	r3, [r3, #28]
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff ff6e 	bl	80062a8 <MOTOR_setDirection>

  return;
 80063cc:	bf00      	nop
}
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	08009c80 	.word	0x08009c80
 80063d8:	08009c28 	.word	0x08009c28

080063dc <MOTOR_stop>:

void MOTOR_stop(MOTOR_Handle *handle)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af02      	add	r7, sp, #8
 80063e2:	6078      	str	r0, [r7, #4]
  LOG_info("Stopping %s", handle->name);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	4b0d      	ldr	r3, [pc, #52]	; (8006420 <MOTOR_stop+0x44>)
 80063ea:	223e      	movs	r2, #62	; 0x3e
 80063ec:	490d      	ldr	r1, [pc, #52]	; (8006424 <MOTOR_stop+0x48>)
 80063ee:	2001      	movs	r0, #1
 80063f0:	f7ff fed0 	bl	8006194 <LOG_log>

  HAL_GPIO_WritePin(handle->dirPin1Port, handle->dirPin1, GPIO_PIN_RESET);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68d8      	ldr	r0, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	2200      	movs	r2, #0
 8006400:	4619      	mov	r1, r3
 8006402:	f7fc fa5d 	bl	80028c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(handle->dirPin2Port, handle->dirPin2, GPIO_PIN_RESET);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6918      	ldr	r0, [r3, #16]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	b29b      	uxth	r3, r3
 8006410:	2200      	movs	r2, #0
 8006412:	4619      	mov	r1, r3
 8006414:	f7fc fa54 	bl	80028c0 <HAL_GPIO_WritePin>

  return;
 8006418:	bf00      	nop
}
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	08009c94 	.word	0x08009c94
 8006424:	08009c28 	.word	0x08009c28

08006428 <UTILS_delayUsInit>:
#include "stm32f1xx_hal.h"

static TIM_HandleTypeDef *UTILS_delayTimerHandle;

void UTILS_delayUsInit(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UTILS_delayTimerHandle = htim;
 8006430:	4a03      	ldr	r2, [pc, #12]	; (8006440 <UTILS_delayUsInit+0x18>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6013      	str	r3, [r2, #0]

  return;
 8006436:	bf00      	nop
}
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	bc80      	pop	{r7}
 800643e:	4770      	bx	lr
 8006440:	2000037c 	.word	0x2000037c

08006444 <UTILS_delayUs>:

void UTILS_delayUs(uint16_t delay)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(UTILS_delayTimerHandle,0);
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <UTILS_delayUs+0x30>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(UTILS_delayTimerHandle) < delay)
 8006458:	bf00      	nop
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <UTILS_delayUs+0x30>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006462:	88fb      	ldrh	r3, [r7, #6]
 8006464:	429a      	cmp	r2, r3
 8006466:	d3f8      	bcc.n	800645a <UTILS_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8006468:	bf00      	nop
}
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	2000037c 	.word	0x2000037c

08006478 <__errno>:
 8006478:	4b01      	ldr	r3, [pc, #4]	; (8006480 <__errno+0x8>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000044 	.word	0x20000044

08006484 <__sflush_r>:
 8006484:	898a      	ldrh	r2, [r1, #12]
 8006486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800648a:	4605      	mov	r5, r0
 800648c:	0710      	lsls	r0, r2, #28
 800648e:	460c      	mov	r4, r1
 8006490:	d458      	bmi.n	8006544 <__sflush_r+0xc0>
 8006492:	684b      	ldr	r3, [r1, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	dc05      	bgt.n	80064a4 <__sflush_r+0x20>
 8006498:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800649a:	2b00      	cmp	r3, #0
 800649c:	dc02      	bgt.n	80064a4 <__sflush_r+0x20>
 800649e:	2000      	movs	r0, #0
 80064a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	d0f9      	beq.n	800649e <__sflush_r+0x1a>
 80064aa:	2300      	movs	r3, #0
 80064ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064b0:	682f      	ldr	r7, [r5, #0]
 80064b2:	602b      	str	r3, [r5, #0]
 80064b4:	d032      	beq.n	800651c <__sflush_r+0x98>
 80064b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80064b8:	89a3      	ldrh	r3, [r4, #12]
 80064ba:	075a      	lsls	r2, r3, #29
 80064bc:	d505      	bpl.n	80064ca <__sflush_r+0x46>
 80064be:	6863      	ldr	r3, [r4, #4]
 80064c0:	1ac0      	subs	r0, r0, r3
 80064c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80064c4:	b10b      	cbz	r3, 80064ca <__sflush_r+0x46>
 80064c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064c8:	1ac0      	subs	r0, r0, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	4602      	mov	r2, r0
 80064ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064d0:	4628      	mov	r0, r5
 80064d2:	6a21      	ldr	r1, [r4, #32]
 80064d4:	47b0      	blx	r6
 80064d6:	1c43      	adds	r3, r0, #1
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	d106      	bne.n	80064ea <__sflush_r+0x66>
 80064dc:	6829      	ldr	r1, [r5, #0]
 80064de:	291d      	cmp	r1, #29
 80064e0:	d82c      	bhi.n	800653c <__sflush_r+0xb8>
 80064e2:	4a2a      	ldr	r2, [pc, #168]	; (800658c <__sflush_r+0x108>)
 80064e4:	40ca      	lsrs	r2, r1
 80064e6:	07d6      	lsls	r6, r2, #31
 80064e8:	d528      	bpl.n	800653c <__sflush_r+0xb8>
 80064ea:	2200      	movs	r2, #0
 80064ec:	6062      	str	r2, [r4, #4]
 80064ee:	6922      	ldr	r2, [r4, #16]
 80064f0:	04d9      	lsls	r1, r3, #19
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	d504      	bpl.n	8006500 <__sflush_r+0x7c>
 80064f6:	1c42      	adds	r2, r0, #1
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0x7a>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b903      	cbnz	r3, 8006500 <__sflush_r+0x7c>
 80064fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006500:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006502:	602f      	str	r7, [r5, #0]
 8006504:	2900      	cmp	r1, #0
 8006506:	d0ca      	beq.n	800649e <__sflush_r+0x1a>
 8006508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800650c:	4299      	cmp	r1, r3
 800650e:	d002      	beq.n	8006516 <__sflush_r+0x92>
 8006510:	4628      	mov	r0, r5
 8006512:	f000 fad7 	bl	8006ac4 <_free_r>
 8006516:	2000      	movs	r0, #0
 8006518:	6360      	str	r0, [r4, #52]	; 0x34
 800651a:	e7c1      	b.n	80064a0 <__sflush_r+0x1c>
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	2301      	movs	r3, #1
 8006520:	4628      	mov	r0, r5
 8006522:	47b0      	blx	r6
 8006524:	1c41      	adds	r1, r0, #1
 8006526:	d1c7      	bne.n	80064b8 <__sflush_r+0x34>
 8006528:	682b      	ldr	r3, [r5, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0c4      	beq.n	80064b8 <__sflush_r+0x34>
 800652e:	2b1d      	cmp	r3, #29
 8006530:	d001      	beq.n	8006536 <__sflush_r+0xb2>
 8006532:	2b16      	cmp	r3, #22
 8006534:	d101      	bne.n	800653a <__sflush_r+0xb6>
 8006536:	602f      	str	r7, [r5, #0]
 8006538:	e7b1      	b.n	800649e <__sflush_r+0x1a>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	e7ad      	b.n	80064a0 <__sflush_r+0x1c>
 8006544:	690f      	ldr	r7, [r1, #16]
 8006546:	2f00      	cmp	r7, #0
 8006548:	d0a9      	beq.n	800649e <__sflush_r+0x1a>
 800654a:	0793      	lsls	r3, r2, #30
 800654c:	bf18      	it	ne
 800654e:	2300      	movne	r3, #0
 8006550:	680e      	ldr	r6, [r1, #0]
 8006552:	bf08      	it	eq
 8006554:	694b      	ldreq	r3, [r1, #20]
 8006556:	eba6 0807 	sub.w	r8, r6, r7
 800655a:	600f      	str	r7, [r1, #0]
 800655c:	608b      	str	r3, [r1, #8]
 800655e:	f1b8 0f00 	cmp.w	r8, #0
 8006562:	dd9c      	ble.n	800649e <__sflush_r+0x1a>
 8006564:	4643      	mov	r3, r8
 8006566:	463a      	mov	r2, r7
 8006568:	4628      	mov	r0, r5
 800656a:	6a21      	ldr	r1, [r4, #32]
 800656c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800656e:	47b0      	blx	r6
 8006570:	2800      	cmp	r0, #0
 8006572:	dc06      	bgt.n	8006582 <__sflush_r+0xfe>
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f04f 30ff 	mov.w	r0, #4294967295
 800657a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	e78e      	b.n	80064a0 <__sflush_r+0x1c>
 8006582:	4407      	add	r7, r0
 8006584:	eba8 0800 	sub.w	r8, r8, r0
 8006588:	e7e9      	b.n	800655e <__sflush_r+0xda>
 800658a:	bf00      	nop
 800658c:	20400001 	.word	0x20400001

08006590 <_fflush_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	690b      	ldr	r3, [r1, #16]
 8006594:	4605      	mov	r5, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b913      	cbnz	r3, 80065a0 <_fflush_r+0x10>
 800659a:	2500      	movs	r5, #0
 800659c:	4628      	mov	r0, r5
 800659e:	bd38      	pop	{r3, r4, r5, pc}
 80065a0:	b118      	cbz	r0, 80065aa <_fflush_r+0x1a>
 80065a2:	6983      	ldr	r3, [r0, #24]
 80065a4:	b90b      	cbnz	r3, 80065aa <_fflush_r+0x1a>
 80065a6:	f000 f899 	bl	80066dc <__sinit>
 80065aa:	4b14      	ldr	r3, [pc, #80]	; (80065fc <_fflush_r+0x6c>)
 80065ac:	429c      	cmp	r4, r3
 80065ae:	d11b      	bne.n	80065e8 <_fflush_r+0x58>
 80065b0:	686c      	ldr	r4, [r5, #4]
 80065b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d0ef      	beq.n	800659a <_fflush_r+0xa>
 80065ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80065bc:	07d0      	lsls	r0, r2, #31
 80065be:	d404      	bmi.n	80065ca <_fflush_r+0x3a>
 80065c0:	0599      	lsls	r1, r3, #22
 80065c2:	d402      	bmi.n	80065ca <_fflush_r+0x3a>
 80065c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065c6:	f000 fa61 	bl	8006a8c <__retarget_lock_acquire_recursive>
 80065ca:	4628      	mov	r0, r5
 80065cc:	4621      	mov	r1, r4
 80065ce:	f7ff ff59 	bl	8006484 <__sflush_r>
 80065d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065d4:	4605      	mov	r5, r0
 80065d6:	07da      	lsls	r2, r3, #31
 80065d8:	d4e0      	bmi.n	800659c <_fflush_r+0xc>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	059b      	lsls	r3, r3, #22
 80065de:	d4dd      	bmi.n	800659c <_fflush_r+0xc>
 80065e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065e2:	f000 fa55 	bl	8006a90 <__retarget_lock_release_recursive>
 80065e6:	e7d9      	b.n	800659c <_fflush_r+0xc>
 80065e8:	4b05      	ldr	r3, [pc, #20]	; (8006600 <_fflush_r+0x70>)
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d101      	bne.n	80065f2 <_fflush_r+0x62>
 80065ee:	68ac      	ldr	r4, [r5, #8]
 80065f0:	e7df      	b.n	80065b2 <_fflush_r+0x22>
 80065f2:	4b04      	ldr	r3, [pc, #16]	; (8006604 <_fflush_r+0x74>)
 80065f4:	429c      	cmp	r4, r3
 80065f6:	bf08      	it	eq
 80065f8:	68ec      	ldreq	r4, [r5, #12]
 80065fa:	e7da      	b.n	80065b2 <_fflush_r+0x22>
 80065fc:	08009ce4 	.word	0x08009ce4
 8006600:	08009d04 	.word	0x08009d04
 8006604:	08009cc4 	.word	0x08009cc4

08006608 <fflush>:
 8006608:	4601      	mov	r1, r0
 800660a:	b920      	cbnz	r0, 8006616 <fflush+0xe>
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <fflush+0x18>)
 800660e:	4905      	ldr	r1, [pc, #20]	; (8006624 <fflush+0x1c>)
 8006610:	6818      	ldr	r0, [r3, #0]
 8006612:	f000 b8e1 	b.w	80067d8 <_fwalk_reent>
 8006616:	4b04      	ldr	r3, [pc, #16]	; (8006628 <fflush+0x20>)
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	f7ff bfb9 	b.w	8006590 <_fflush_r>
 800661e:	bf00      	nop
 8006620:	08009d24 	.word	0x08009d24
 8006624:	08006591 	.word	0x08006591
 8006628:	20000044 	.word	0x20000044

0800662c <std>:
 800662c:	2300      	movs	r3, #0
 800662e:	b510      	push	{r4, lr}
 8006630:	4604      	mov	r4, r0
 8006632:	e9c0 3300 	strd	r3, r3, [r0]
 8006636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800663a:	6083      	str	r3, [r0, #8]
 800663c:	8181      	strh	r1, [r0, #12]
 800663e:	6643      	str	r3, [r0, #100]	; 0x64
 8006640:	81c2      	strh	r2, [r0, #14]
 8006642:	6183      	str	r3, [r0, #24]
 8006644:	4619      	mov	r1, r3
 8006646:	2208      	movs	r2, #8
 8006648:	305c      	adds	r0, #92	; 0x5c
 800664a:	f000 fa33 	bl	8006ab4 <memset>
 800664e:	4b05      	ldr	r3, [pc, #20]	; (8006664 <std+0x38>)
 8006650:	6224      	str	r4, [r4, #32]
 8006652:	6263      	str	r3, [r4, #36]	; 0x24
 8006654:	4b04      	ldr	r3, [pc, #16]	; (8006668 <std+0x3c>)
 8006656:	62a3      	str	r3, [r4, #40]	; 0x28
 8006658:	4b04      	ldr	r3, [pc, #16]	; (800666c <std+0x40>)
 800665a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <std+0x44>)
 800665e:	6323      	str	r3, [r4, #48]	; 0x30
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	08006d8d 	.word	0x08006d8d
 8006668:	08006db3 	.word	0x08006db3
 800666c:	08006deb 	.word	0x08006deb
 8006670:	08006e0f 	.word	0x08006e0f

08006674 <_cleanup_r>:
 8006674:	4901      	ldr	r1, [pc, #4]	; (800667c <_cleanup_r+0x8>)
 8006676:	f000 b8af 	b.w	80067d8 <_fwalk_reent>
 800667a:	bf00      	nop
 800667c:	08006591 	.word	0x08006591

08006680 <__sfmoreglue>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	2568      	movs	r5, #104	; 0x68
 8006684:	1e4a      	subs	r2, r1, #1
 8006686:	4355      	muls	r5, r2
 8006688:	460e      	mov	r6, r1
 800668a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800668e:	f000 fa65 	bl	8006b5c <_malloc_r>
 8006692:	4604      	mov	r4, r0
 8006694:	b140      	cbz	r0, 80066a8 <__sfmoreglue+0x28>
 8006696:	2100      	movs	r1, #0
 8006698:	e9c0 1600 	strd	r1, r6, [r0]
 800669c:	300c      	adds	r0, #12
 800669e:	60a0      	str	r0, [r4, #8]
 80066a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066a4:	f000 fa06 	bl	8006ab4 <memset>
 80066a8:	4620      	mov	r0, r4
 80066aa:	bd70      	pop	{r4, r5, r6, pc}

080066ac <__sfp_lock_acquire>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sfp_lock_acquire+0x8>)
 80066ae:	f000 b9ed 	b.w	8006a8c <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	200006ec 	.word	0x200006ec

080066b8 <__sfp_lock_release>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sfp_lock_release+0x8>)
 80066ba:	f000 b9e9 	b.w	8006a90 <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	200006ec 	.word	0x200006ec

080066c4 <__sinit_lock_acquire>:
 80066c4:	4801      	ldr	r0, [pc, #4]	; (80066cc <__sinit_lock_acquire+0x8>)
 80066c6:	f000 b9e1 	b.w	8006a8c <__retarget_lock_acquire_recursive>
 80066ca:	bf00      	nop
 80066cc:	200006e7 	.word	0x200006e7

080066d0 <__sinit_lock_release>:
 80066d0:	4801      	ldr	r0, [pc, #4]	; (80066d8 <__sinit_lock_release+0x8>)
 80066d2:	f000 b9dd 	b.w	8006a90 <__retarget_lock_release_recursive>
 80066d6:	bf00      	nop
 80066d8:	200006e7 	.word	0x200006e7

080066dc <__sinit>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4604      	mov	r4, r0
 80066e0:	f7ff fff0 	bl	80066c4 <__sinit_lock_acquire>
 80066e4:	69a3      	ldr	r3, [r4, #24]
 80066e6:	b11b      	cbz	r3, 80066f0 <__sinit+0x14>
 80066e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ec:	f7ff bff0 	b.w	80066d0 <__sinit_lock_release>
 80066f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80066f4:	6523      	str	r3, [r4, #80]	; 0x50
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <__sinit+0x68>)
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <__sinit+0x6c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80066fe:	42a3      	cmp	r3, r4
 8006700:	bf08      	it	eq
 8006702:	2301      	moveq	r3, #1
 8006704:	4620      	mov	r0, r4
 8006706:	bf08      	it	eq
 8006708:	61a3      	streq	r3, [r4, #24]
 800670a:	f000 f81f 	bl	800674c <__sfp>
 800670e:	6060      	str	r0, [r4, #4]
 8006710:	4620      	mov	r0, r4
 8006712:	f000 f81b 	bl	800674c <__sfp>
 8006716:	60a0      	str	r0, [r4, #8]
 8006718:	4620      	mov	r0, r4
 800671a:	f000 f817 	bl	800674c <__sfp>
 800671e:	2200      	movs	r2, #0
 8006720:	2104      	movs	r1, #4
 8006722:	60e0      	str	r0, [r4, #12]
 8006724:	6860      	ldr	r0, [r4, #4]
 8006726:	f7ff ff81 	bl	800662c <std>
 800672a:	2201      	movs	r2, #1
 800672c:	2109      	movs	r1, #9
 800672e:	68a0      	ldr	r0, [r4, #8]
 8006730:	f7ff ff7c 	bl	800662c <std>
 8006734:	2202      	movs	r2, #2
 8006736:	2112      	movs	r1, #18
 8006738:	68e0      	ldr	r0, [r4, #12]
 800673a:	f7ff ff77 	bl	800662c <std>
 800673e:	2301      	movs	r3, #1
 8006740:	61a3      	str	r3, [r4, #24]
 8006742:	e7d1      	b.n	80066e8 <__sinit+0xc>
 8006744:	08009d24 	.word	0x08009d24
 8006748:	08006675 	.word	0x08006675

0800674c <__sfp>:
 800674c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674e:	4607      	mov	r7, r0
 8006750:	f7ff ffac 	bl	80066ac <__sfp_lock_acquire>
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <__sfp+0x84>)
 8006756:	681e      	ldr	r6, [r3, #0]
 8006758:	69b3      	ldr	r3, [r6, #24]
 800675a:	b913      	cbnz	r3, 8006762 <__sfp+0x16>
 800675c:	4630      	mov	r0, r6
 800675e:	f7ff ffbd 	bl	80066dc <__sinit>
 8006762:	3648      	adds	r6, #72	; 0x48
 8006764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006768:	3b01      	subs	r3, #1
 800676a:	d503      	bpl.n	8006774 <__sfp+0x28>
 800676c:	6833      	ldr	r3, [r6, #0]
 800676e:	b30b      	cbz	r3, 80067b4 <__sfp+0x68>
 8006770:	6836      	ldr	r6, [r6, #0]
 8006772:	e7f7      	b.n	8006764 <__sfp+0x18>
 8006774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006778:	b9d5      	cbnz	r5, 80067b0 <__sfp+0x64>
 800677a:	4b16      	ldr	r3, [pc, #88]	; (80067d4 <__sfp+0x88>)
 800677c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006780:	60e3      	str	r3, [r4, #12]
 8006782:	6665      	str	r5, [r4, #100]	; 0x64
 8006784:	f000 f980 	bl	8006a88 <__retarget_lock_init_recursive>
 8006788:	f7ff ff96 	bl	80066b8 <__sfp_lock_release>
 800678c:	2208      	movs	r2, #8
 800678e:	4629      	mov	r1, r5
 8006790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006798:	6025      	str	r5, [r4, #0]
 800679a:	61a5      	str	r5, [r4, #24]
 800679c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067a0:	f000 f988 	bl	8006ab4 <memset>
 80067a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067ac:	4620      	mov	r0, r4
 80067ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b0:	3468      	adds	r4, #104	; 0x68
 80067b2:	e7d9      	b.n	8006768 <__sfp+0x1c>
 80067b4:	2104      	movs	r1, #4
 80067b6:	4638      	mov	r0, r7
 80067b8:	f7ff ff62 	bl	8006680 <__sfmoreglue>
 80067bc:	4604      	mov	r4, r0
 80067be:	6030      	str	r0, [r6, #0]
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d1d5      	bne.n	8006770 <__sfp+0x24>
 80067c4:	f7ff ff78 	bl	80066b8 <__sfp_lock_release>
 80067c8:	230c      	movs	r3, #12
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	e7ee      	b.n	80067ac <__sfp+0x60>
 80067ce:	bf00      	nop
 80067d0:	08009d24 	.word	0x08009d24
 80067d4:	ffff0001 	.word	0xffff0001

080067d8 <_fwalk_reent>:
 80067d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067dc:	4606      	mov	r6, r0
 80067de:	4688      	mov	r8, r1
 80067e0:	2700      	movs	r7, #0
 80067e2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80067e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067ea:	f1b9 0901 	subs.w	r9, r9, #1
 80067ee:	d505      	bpl.n	80067fc <_fwalk_reent+0x24>
 80067f0:	6824      	ldr	r4, [r4, #0]
 80067f2:	2c00      	cmp	r4, #0
 80067f4:	d1f7      	bne.n	80067e6 <_fwalk_reent+0xe>
 80067f6:	4638      	mov	r0, r7
 80067f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fc:	89ab      	ldrh	r3, [r5, #12]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d907      	bls.n	8006812 <_fwalk_reent+0x3a>
 8006802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006806:	3301      	adds	r3, #1
 8006808:	d003      	beq.n	8006812 <_fwalk_reent+0x3a>
 800680a:	4629      	mov	r1, r5
 800680c:	4630      	mov	r0, r6
 800680e:	47c0      	blx	r8
 8006810:	4307      	orrs	r7, r0
 8006812:	3568      	adds	r5, #104	; 0x68
 8006814:	e7e9      	b.n	80067ea <_fwalk_reent+0x12>
	...

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	2600      	movs	r6, #0
 800681c:	4d0c      	ldr	r5, [pc, #48]	; (8006850 <__libc_init_array+0x38>)
 800681e:	4c0d      	ldr	r4, [pc, #52]	; (8006854 <__libc_init_array+0x3c>)
 8006820:	1b64      	subs	r4, r4, r5
 8006822:	10a4      	asrs	r4, r4, #2
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	f002 fff2 	bl	8009810 <_init>
 800682c:	2600      	movs	r6, #0
 800682e:	4d0a      	ldr	r5, [pc, #40]	; (8006858 <__libc_init_array+0x40>)
 8006830:	4c0a      	ldr	r4, [pc, #40]	; (800685c <__libc_init_array+0x44>)
 8006832:	1b64      	subs	r4, r4, r5
 8006834:	10a4      	asrs	r4, r4, #2
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	f855 3b04 	ldr.w	r3, [r5], #4
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	0800a25c 	.word	0x0800a25c
 8006854:	0800a25c 	.word	0x0800a25c
 8006858:	0800a25c 	.word	0x0800a25c
 800685c:	0800a260 	.word	0x0800a260

08006860 <localtime>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4b0b      	ldr	r3, [pc, #44]	; (8006890 <localtime+0x30>)
 8006864:	4604      	mov	r4, r0
 8006866:	681d      	ldr	r5, [r3, #0]
 8006868:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800686a:	b953      	cbnz	r3, 8006882 <localtime+0x22>
 800686c:	2024      	movs	r0, #36	; 0x24
 800686e:	f000 f911 	bl	8006a94 <malloc>
 8006872:	4602      	mov	r2, r0
 8006874:	63e8      	str	r0, [r5, #60]	; 0x3c
 8006876:	b920      	cbnz	r0, 8006882 <localtime+0x22>
 8006878:	2132      	movs	r1, #50	; 0x32
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <localtime+0x34>)
 800687c:	4806      	ldr	r0, [pc, #24]	; (8006898 <localtime+0x38>)
 800687e:	f001 fc09 	bl	8008094 <__assert_func>
 8006882:	4620      	mov	r0, r4
 8006884:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8006886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800688a:	f000 b807 	b.w	800689c <localtime_r>
 800688e:	bf00      	nop
 8006890:	20000044 	.word	0x20000044
 8006894:	08009d28 	.word	0x08009d28
 8006898:	08009d3f 	.word	0x08009d3f

0800689c <localtime_r>:
 800689c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068a0:	460c      	mov	r4, r1
 80068a2:	4607      	mov	r7, r0
 80068a4:	f001 fc8a 	bl	80081bc <__gettzinfo>
 80068a8:	4621      	mov	r1, r4
 80068aa:	4680      	mov	r8, r0
 80068ac:	4638      	mov	r0, r7
 80068ae:	f001 fc89 	bl	80081c4 <gmtime_r>
 80068b2:	6943      	ldr	r3, [r0, #20]
 80068b4:	4604      	mov	r4, r0
 80068b6:	079a      	lsls	r2, r3, #30
 80068b8:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80068bc:	d105      	bne.n	80068ca <localtime_r+0x2e>
 80068be:	2264      	movs	r2, #100	; 0x64
 80068c0:	fb96 f3f2 	sdiv	r3, r6, r2
 80068c4:	fb02 6313 	mls	r3, r2, r3, r6
 80068c8:	bb7b      	cbnz	r3, 800692a <localtime_r+0x8e>
 80068ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80068ce:	fb96 f5f3 	sdiv	r5, r6, r3
 80068d2:	fb03 6515 	mls	r5, r3, r5, r6
 80068d6:	fab5 f585 	clz	r5, r5
 80068da:	096d      	lsrs	r5, r5, #5
 80068dc:	2230      	movs	r2, #48	; 0x30
 80068de:	4b68      	ldr	r3, [pc, #416]	; (8006a80 <localtime_r+0x1e4>)
 80068e0:	fb02 3505 	mla	r5, r2, r5, r3
 80068e4:	f001 f958 	bl	8007b98 <__tz_lock>
 80068e8:	f001 f962 	bl	8007bb0 <_tzset_unlocked>
 80068ec:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <localtime_r+0x1e8>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b353      	cbz	r3, 8006948 <localtime_r+0xac>
 80068f2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80068f6:	42b3      	cmp	r3, r6
 80068f8:	d119      	bne.n	800692e <localtime_r+0x92>
 80068fa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80068fe:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8006902:	f8d8 1000 	ldr.w	r1, [r8]
 8006906:	b9d1      	cbnz	r1, 800693e <localtime_r+0xa2>
 8006908:	4296      	cmp	r6, r2
 800690a:	eb77 0303 	sbcs.w	r3, r7, r3
 800690e:	da23      	bge.n	8006958 <localtime_r+0xbc>
 8006910:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8006914:	4296      	cmp	r6, r2
 8006916:	eb77 0303 	sbcs.w	r3, r7, r3
 800691a:	bfb4      	ite	lt
 800691c:	2301      	movlt	r3, #1
 800691e:	2300      	movge	r3, #0
 8006920:	6223      	str	r3, [r4, #32]
 8006922:	db1b      	blt.n	800695c <localtime_r+0xc0>
 8006924:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8006928:	e01a      	b.n	8006960 <localtime_r+0xc4>
 800692a:	2501      	movs	r5, #1
 800692c:	e7d6      	b.n	80068dc <localtime_r+0x40>
 800692e:	4630      	mov	r0, r6
 8006930:	f001 f88a 	bl	8007a48 <__tzcalc_limits>
 8006934:	2800      	cmp	r0, #0
 8006936:	d1e0      	bne.n	80068fa <localtime_r+0x5e>
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	e004      	b.n	8006948 <localtime_r+0xac>
 800693e:	4296      	cmp	r6, r2
 8006940:	eb77 0303 	sbcs.w	r3, r7, r3
 8006944:	da02      	bge.n	800694c <localtime_r+0xb0>
 8006946:	2300      	movs	r3, #0
 8006948:	6223      	str	r3, [r4, #32]
 800694a:	e7eb      	b.n	8006924 <localtime_r+0x88>
 800694c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8006950:	4296      	cmp	r6, r2
 8006952:	eb77 0303 	sbcs.w	r3, r7, r3
 8006956:	daf6      	bge.n	8006946 <localtime_r+0xaa>
 8006958:	2301      	movs	r3, #1
 800695a:	6223      	str	r3, [r4, #32]
 800695c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 8006960:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006964:	fb91 f6f3 	sdiv	r6, r1, r3
 8006968:	203c      	movs	r0, #60	; 0x3c
 800696a:	fb03 1316 	mls	r3, r3, r6, r1
 800696e:	fb93 f2f0 	sdiv	r2, r3, r0
 8006972:	fb00 3012 	mls	r0, r0, r2, r3
 8006976:	6861      	ldr	r1, [r4, #4]
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	1a89      	subs	r1, r1, r2
 800697c:	68a2      	ldr	r2, [r4, #8]
 800697e:	1a1b      	subs	r3, r3, r0
 8006980:	1b92      	subs	r2, r2, r6
 8006982:	2b3b      	cmp	r3, #59	; 0x3b
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	6061      	str	r1, [r4, #4]
 8006988:	60a2      	str	r2, [r4, #8]
 800698a:	dd34      	ble.n	80069f6 <localtime_r+0x15a>
 800698c:	3101      	adds	r1, #1
 800698e:	6061      	str	r1, [r4, #4]
 8006990:	3b3c      	subs	r3, #60	; 0x3c
 8006992:	6023      	str	r3, [r4, #0]
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	2b3b      	cmp	r3, #59	; 0x3b
 8006998:	dd33      	ble.n	8006a02 <localtime_r+0x166>
 800699a:	3201      	adds	r2, #1
 800699c:	60a2      	str	r2, [r4, #8]
 800699e:	3b3c      	subs	r3, #60	; 0x3c
 80069a0:	6063      	str	r3, [r4, #4]
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	2b17      	cmp	r3, #23
 80069a6:	dd32      	ble.n	8006a0e <localtime_r+0x172>
 80069a8:	69e2      	ldr	r2, [r4, #28]
 80069aa:	3b18      	subs	r3, #24
 80069ac:	3201      	adds	r2, #1
 80069ae:	61e2      	str	r2, [r4, #28]
 80069b0:	69a2      	ldr	r2, [r4, #24]
 80069b2:	60a3      	str	r3, [r4, #8]
 80069b4:	3201      	adds	r2, #1
 80069b6:	2a06      	cmp	r2, #6
 80069b8:	bfc8      	it	gt
 80069ba:	2200      	movgt	r2, #0
 80069bc:	61a2      	str	r2, [r4, #24]
 80069be:	68e2      	ldr	r2, [r4, #12]
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	3201      	adds	r2, #1
 80069c4:	60e2      	str	r2, [r4, #12]
 80069c6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80069ca:	428a      	cmp	r2, r1
 80069cc:	dd0e      	ble.n	80069ec <localtime_r+0x150>
 80069ce:	2b0b      	cmp	r3, #11
 80069d0:	eba2 0201 	sub.w	r2, r2, r1
 80069d4:	60e2      	str	r2, [r4, #12]
 80069d6:	f103 0201 	add.w	r2, r3, #1
 80069da:	bf05      	ittet	eq
 80069dc:	2200      	moveq	r2, #0
 80069de:	6963      	ldreq	r3, [r4, #20]
 80069e0:	6122      	strne	r2, [r4, #16]
 80069e2:	3301      	addeq	r3, #1
 80069e4:	bf02      	ittt	eq
 80069e6:	6122      	streq	r2, [r4, #16]
 80069e8:	6163      	streq	r3, [r4, #20]
 80069ea:	61e2      	streq	r2, [r4, #28]
 80069ec:	f001 f8da 	bl	8007ba4 <__tz_unlock>
 80069f0:	4620      	mov	r0, r4
 80069f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	dacc      	bge.n	8006994 <localtime_r+0xf8>
 80069fa:	3901      	subs	r1, #1
 80069fc:	6061      	str	r1, [r4, #4]
 80069fe:	333c      	adds	r3, #60	; 0x3c
 8006a00:	e7c7      	b.n	8006992 <localtime_r+0xf6>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	dacd      	bge.n	80069a2 <localtime_r+0x106>
 8006a06:	3a01      	subs	r2, #1
 8006a08:	60a2      	str	r2, [r4, #8]
 8006a0a:	333c      	adds	r3, #60	; 0x3c
 8006a0c:	e7c8      	b.n	80069a0 <localtime_r+0x104>
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	daec      	bge.n	80069ec <localtime_r+0x150>
 8006a12:	69e2      	ldr	r2, [r4, #28]
 8006a14:	3318      	adds	r3, #24
 8006a16:	3a01      	subs	r2, #1
 8006a18:	61e2      	str	r2, [r4, #28]
 8006a1a:	69a2      	ldr	r2, [r4, #24]
 8006a1c:	60a3      	str	r3, [r4, #8]
 8006a1e:	3a01      	subs	r2, #1
 8006a20:	bf48      	it	mi
 8006a22:	2206      	movmi	r2, #6
 8006a24:	61a2      	str	r2, [r4, #24]
 8006a26:	68e2      	ldr	r2, [r4, #12]
 8006a28:	3a01      	subs	r2, #1
 8006a2a:	60e2      	str	r2, [r4, #12]
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d1dd      	bne.n	80069ec <localtime_r+0x150>
 8006a30:	6923      	ldr	r3, [r4, #16]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	d405      	bmi.n	8006a42 <localtime_r+0x1a6>
 8006a36:	6123      	str	r3, [r4, #16]
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8006a3e:	60e3      	str	r3, [r4, #12]
 8006a40:	e7d4      	b.n	80069ec <localtime_r+0x150>
 8006a42:	230b      	movs	r3, #11
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	6963      	ldr	r3, [r4, #20]
 8006a48:	1e5a      	subs	r2, r3, #1
 8006a4a:	6162      	str	r2, [r4, #20]
 8006a4c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 8006a50:	0793      	lsls	r3, r2, #30
 8006a52:	d105      	bne.n	8006a60 <localtime_r+0x1c4>
 8006a54:	2164      	movs	r1, #100	; 0x64
 8006a56:	fb92 f3f1 	sdiv	r3, r2, r1
 8006a5a:	fb01 2313 	mls	r3, r1, r3, r2
 8006a5e:	b963      	cbnz	r3, 8006a7a <localtime_r+0x1de>
 8006a60:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006a64:	fb92 f3f1 	sdiv	r3, r2, r1
 8006a68:	fb01 2313 	mls	r3, r1, r3, r2
 8006a6c:	fab3 f383 	clz	r3, r3
 8006a70:	095b      	lsrs	r3, r3, #5
 8006a72:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006a76:	61e3      	str	r3, [r4, #28]
 8006a78:	e7de      	b.n	8006a38 <localtime_r+0x19c>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e7f9      	b.n	8006a72 <localtime_r+0x1d6>
 8006a7e:	bf00      	nop
 8006a80:	08009da0 	.word	0x08009da0
 8006a84:	200003a4 	.word	0x200003a4

08006a88 <__retarget_lock_init_recursive>:
 8006a88:	4770      	bx	lr

08006a8a <__retarget_lock_acquire>:
 8006a8a:	4770      	bx	lr

08006a8c <__retarget_lock_acquire_recursive>:
 8006a8c:	4770      	bx	lr

08006a8e <__retarget_lock_release>:
 8006a8e:	4770      	bx	lr

08006a90 <__retarget_lock_release_recursive>:
 8006a90:	4770      	bx	lr
	...

08006a94 <malloc>:
 8006a94:	4b02      	ldr	r3, [pc, #8]	; (8006aa0 <malloc+0xc>)
 8006a96:	4601      	mov	r1, r0
 8006a98:	6818      	ldr	r0, [r3, #0]
 8006a9a:	f000 b85f 	b.w	8006b5c <_malloc_r>
 8006a9e:	bf00      	nop
 8006aa0:	20000044 	.word	0x20000044

08006aa4 <free>:
 8006aa4:	4b02      	ldr	r3, [pc, #8]	; (8006ab0 <free+0xc>)
 8006aa6:	4601      	mov	r1, r0
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	f000 b80b 	b.w	8006ac4 <_free_r>
 8006aae:	bf00      	nop
 8006ab0:	20000044 	.word	0x20000044

08006ab4 <memset>:
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4402      	add	r2, r0
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d100      	bne.n	8006abe <memset+0xa>
 8006abc:	4770      	bx	lr
 8006abe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac2:	e7f9      	b.n	8006ab8 <memset+0x4>

08006ac4 <_free_r>:
 8006ac4:	b538      	push	{r3, r4, r5, lr}
 8006ac6:	4605      	mov	r5, r0
 8006ac8:	2900      	cmp	r1, #0
 8006aca:	d043      	beq.n	8006b54 <_free_r+0x90>
 8006acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ad0:	1f0c      	subs	r4, r1, #4
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	bfb8      	it	lt
 8006ad6:	18e4      	addlt	r4, r4, r3
 8006ad8:	f001 fcb0 	bl	800843c <__malloc_lock>
 8006adc:	4a1e      	ldr	r2, [pc, #120]	; (8006b58 <_free_r+0x94>)
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	b933      	cbnz	r3, 8006af2 <_free_r+0x2e>
 8006ae4:	6063      	str	r3, [r4, #4]
 8006ae6:	6014      	str	r4, [r2, #0]
 8006ae8:	4628      	mov	r0, r5
 8006aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006aee:	f001 bcab 	b.w	8008448 <__malloc_unlock>
 8006af2:	42a3      	cmp	r3, r4
 8006af4:	d90a      	bls.n	8006b0c <_free_r+0x48>
 8006af6:	6821      	ldr	r1, [r4, #0]
 8006af8:	1862      	adds	r2, r4, r1
 8006afa:	4293      	cmp	r3, r2
 8006afc:	bf01      	itttt	eq
 8006afe:	681a      	ldreq	r2, [r3, #0]
 8006b00:	685b      	ldreq	r3, [r3, #4]
 8006b02:	1852      	addeq	r2, r2, r1
 8006b04:	6022      	streq	r2, [r4, #0]
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	6004      	str	r4, [r0, #0]
 8006b0a:	e7ed      	b.n	8006ae8 <_free_r+0x24>
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	b10b      	cbz	r3, 8006b16 <_free_r+0x52>
 8006b12:	42a3      	cmp	r3, r4
 8006b14:	d9fa      	bls.n	8006b0c <_free_r+0x48>
 8006b16:	6811      	ldr	r1, [r2, #0]
 8006b18:	1850      	adds	r0, r2, r1
 8006b1a:	42a0      	cmp	r0, r4
 8006b1c:	d10b      	bne.n	8006b36 <_free_r+0x72>
 8006b1e:	6820      	ldr	r0, [r4, #0]
 8006b20:	4401      	add	r1, r0
 8006b22:	1850      	adds	r0, r2, r1
 8006b24:	4283      	cmp	r3, r0
 8006b26:	6011      	str	r1, [r2, #0]
 8006b28:	d1de      	bne.n	8006ae8 <_free_r+0x24>
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	4401      	add	r1, r0
 8006b30:	6011      	str	r1, [r2, #0]
 8006b32:	6053      	str	r3, [r2, #4]
 8006b34:	e7d8      	b.n	8006ae8 <_free_r+0x24>
 8006b36:	d902      	bls.n	8006b3e <_free_r+0x7a>
 8006b38:	230c      	movs	r3, #12
 8006b3a:	602b      	str	r3, [r5, #0]
 8006b3c:	e7d4      	b.n	8006ae8 <_free_r+0x24>
 8006b3e:	6820      	ldr	r0, [r4, #0]
 8006b40:	1821      	adds	r1, r4, r0
 8006b42:	428b      	cmp	r3, r1
 8006b44:	bf01      	itttt	eq
 8006b46:	6819      	ldreq	r1, [r3, #0]
 8006b48:	685b      	ldreq	r3, [r3, #4]
 8006b4a:	1809      	addeq	r1, r1, r0
 8006b4c:	6021      	streq	r1, [r4, #0]
 8006b4e:	6063      	str	r3, [r4, #4]
 8006b50:	6054      	str	r4, [r2, #4]
 8006b52:	e7c9      	b.n	8006ae8 <_free_r+0x24>
 8006b54:	bd38      	pop	{r3, r4, r5, pc}
 8006b56:	bf00      	nop
 8006b58:	20000380 	.word	0x20000380

08006b5c <_malloc_r>:
 8006b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b5e:	1ccd      	adds	r5, r1, #3
 8006b60:	f025 0503 	bic.w	r5, r5, #3
 8006b64:	3508      	adds	r5, #8
 8006b66:	2d0c      	cmp	r5, #12
 8006b68:	bf38      	it	cc
 8006b6a:	250c      	movcc	r5, #12
 8006b6c:	2d00      	cmp	r5, #0
 8006b6e:	4606      	mov	r6, r0
 8006b70:	db01      	blt.n	8006b76 <_malloc_r+0x1a>
 8006b72:	42a9      	cmp	r1, r5
 8006b74:	d903      	bls.n	8006b7e <_malloc_r+0x22>
 8006b76:	230c      	movs	r3, #12
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b7e:	f001 fc5d 	bl	800843c <__malloc_lock>
 8006b82:	4921      	ldr	r1, [pc, #132]	; (8006c08 <_malloc_r+0xac>)
 8006b84:	680a      	ldr	r2, [r1, #0]
 8006b86:	4614      	mov	r4, r2
 8006b88:	b99c      	cbnz	r4, 8006bb2 <_malloc_r+0x56>
 8006b8a:	4f20      	ldr	r7, [pc, #128]	; (8006c0c <_malloc_r+0xb0>)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	b923      	cbnz	r3, 8006b9a <_malloc_r+0x3e>
 8006b90:	4621      	mov	r1, r4
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f8ca 	bl	8006d2c <_sbrk_r>
 8006b98:	6038      	str	r0, [r7, #0]
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	f000 f8c5 	bl	8006d2c <_sbrk_r>
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d123      	bne.n	8006bee <_malloc_r+0x92>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	4630      	mov	r0, r6
 8006baa:	6033      	str	r3, [r6, #0]
 8006bac:	f001 fc4c 	bl	8008448 <__malloc_unlock>
 8006bb0:	e7e3      	b.n	8006b7a <_malloc_r+0x1e>
 8006bb2:	6823      	ldr	r3, [r4, #0]
 8006bb4:	1b5b      	subs	r3, r3, r5
 8006bb6:	d417      	bmi.n	8006be8 <_malloc_r+0x8c>
 8006bb8:	2b0b      	cmp	r3, #11
 8006bba:	d903      	bls.n	8006bc4 <_malloc_r+0x68>
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	441c      	add	r4, r3
 8006bc0:	6025      	str	r5, [r4, #0]
 8006bc2:	e004      	b.n	8006bce <_malloc_r+0x72>
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	42a2      	cmp	r2, r4
 8006bc8:	bf0c      	ite	eq
 8006bca:	600b      	streq	r3, [r1, #0]
 8006bcc:	6053      	strne	r3, [r2, #4]
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f001 fc3a 	bl	8008448 <__malloc_unlock>
 8006bd4:	f104 000b 	add.w	r0, r4, #11
 8006bd8:	1d23      	adds	r3, r4, #4
 8006bda:	f020 0007 	bic.w	r0, r0, #7
 8006bde:	1ac2      	subs	r2, r0, r3
 8006be0:	d0cc      	beq.n	8006b7c <_malloc_r+0x20>
 8006be2:	1a1b      	subs	r3, r3, r0
 8006be4:	50a3      	str	r3, [r4, r2]
 8006be6:	e7c9      	b.n	8006b7c <_malloc_r+0x20>
 8006be8:	4622      	mov	r2, r4
 8006bea:	6864      	ldr	r4, [r4, #4]
 8006bec:	e7cc      	b.n	8006b88 <_malloc_r+0x2c>
 8006bee:	1cc4      	adds	r4, r0, #3
 8006bf0:	f024 0403 	bic.w	r4, r4, #3
 8006bf4:	42a0      	cmp	r0, r4
 8006bf6:	d0e3      	beq.n	8006bc0 <_malloc_r+0x64>
 8006bf8:	1a21      	subs	r1, r4, r0
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f000 f896 	bl	8006d2c <_sbrk_r>
 8006c00:	3001      	adds	r0, #1
 8006c02:	d1dd      	bne.n	8006bc0 <_malloc_r+0x64>
 8006c04:	e7cf      	b.n	8006ba6 <_malloc_r+0x4a>
 8006c06:	bf00      	nop
 8006c08:	20000380 	.word	0x20000380
 8006c0c:	20000384 	.word	0x20000384

08006c10 <iprintf>:
 8006c10:	b40f      	push	{r0, r1, r2, r3}
 8006c12:	4b0a      	ldr	r3, [pc, #40]	; (8006c3c <iprintf+0x2c>)
 8006c14:	b513      	push	{r0, r1, r4, lr}
 8006c16:	681c      	ldr	r4, [r3, #0]
 8006c18:	b124      	cbz	r4, 8006c24 <iprintf+0x14>
 8006c1a:	69a3      	ldr	r3, [r4, #24]
 8006c1c:	b913      	cbnz	r3, 8006c24 <iprintf+0x14>
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f7ff fd5c 	bl	80066dc <__sinit>
 8006c24:	ab05      	add	r3, sp, #20
 8006c26:	4620      	mov	r0, r4
 8006c28:	9a04      	ldr	r2, [sp, #16]
 8006c2a:	68a1      	ldr	r1, [r4, #8]
 8006c2c:	9301      	str	r3, [sp, #4]
 8006c2e:	f001 fd95 	bl	800875c <_vfiprintf_r>
 8006c32:	b002      	add	sp, #8
 8006c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c38:	b004      	add	sp, #16
 8006c3a:	4770      	bx	lr
 8006c3c:	20000044 	.word	0x20000044

08006c40 <_puts_r>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	460e      	mov	r6, r1
 8006c44:	4605      	mov	r5, r0
 8006c46:	b118      	cbz	r0, 8006c50 <_puts_r+0x10>
 8006c48:	6983      	ldr	r3, [r0, #24]
 8006c4a:	b90b      	cbnz	r3, 8006c50 <_puts_r+0x10>
 8006c4c:	f7ff fd46 	bl	80066dc <__sinit>
 8006c50:	69ab      	ldr	r3, [r5, #24]
 8006c52:	68ac      	ldr	r4, [r5, #8]
 8006c54:	b913      	cbnz	r3, 8006c5c <_puts_r+0x1c>
 8006c56:	4628      	mov	r0, r5
 8006c58:	f7ff fd40 	bl	80066dc <__sinit>
 8006c5c:	4b2c      	ldr	r3, [pc, #176]	; (8006d10 <_puts_r+0xd0>)
 8006c5e:	429c      	cmp	r4, r3
 8006c60:	d120      	bne.n	8006ca4 <_puts_r+0x64>
 8006c62:	686c      	ldr	r4, [r5, #4]
 8006c64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c66:	07db      	lsls	r3, r3, #31
 8006c68:	d405      	bmi.n	8006c76 <_puts_r+0x36>
 8006c6a:	89a3      	ldrh	r3, [r4, #12]
 8006c6c:	0598      	lsls	r0, r3, #22
 8006c6e:	d402      	bmi.n	8006c76 <_puts_r+0x36>
 8006c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c72:	f7ff ff0b 	bl	8006a8c <__retarget_lock_acquire_recursive>
 8006c76:	89a3      	ldrh	r3, [r4, #12]
 8006c78:	0719      	lsls	r1, r3, #28
 8006c7a:	d51d      	bpl.n	8006cb8 <_puts_r+0x78>
 8006c7c:	6923      	ldr	r3, [r4, #16]
 8006c7e:	b1db      	cbz	r3, 8006cb8 <_puts_r+0x78>
 8006c80:	3e01      	subs	r6, #1
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	bb39      	cbnz	r1, 8006cde <_puts_r+0x9e>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da38      	bge.n	8006d04 <_puts_r+0xc4>
 8006c92:	4622      	mov	r2, r4
 8006c94:	210a      	movs	r1, #10
 8006c96:	4628      	mov	r0, r5
 8006c98:	f001 f926 	bl	8007ee8 <__swbuf_r>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d011      	beq.n	8006cc4 <_puts_r+0x84>
 8006ca0:	250a      	movs	r5, #10
 8006ca2:	e011      	b.n	8006cc8 <_puts_r+0x88>
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <_puts_r+0xd4>)
 8006ca6:	429c      	cmp	r4, r3
 8006ca8:	d101      	bne.n	8006cae <_puts_r+0x6e>
 8006caa:	68ac      	ldr	r4, [r5, #8]
 8006cac:	e7da      	b.n	8006c64 <_puts_r+0x24>
 8006cae:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <_puts_r+0xd8>)
 8006cb0:	429c      	cmp	r4, r3
 8006cb2:	bf08      	it	eq
 8006cb4:	68ec      	ldreq	r4, [r5, #12]
 8006cb6:	e7d5      	b.n	8006c64 <_puts_r+0x24>
 8006cb8:	4621      	mov	r1, r4
 8006cba:	4628      	mov	r0, r5
 8006cbc:	f001 f978 	bl	8007fb0 <__swsetup_r>
 8006cc0:	2800      	cmp	r0, #0
 8006cc2:	d0dd      	beq.n	8006c80 <_puts_r+0x40>
 8006cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8006cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cca:	07da      	lsls	r2, r3, #31
 8006ccc:	d405      	bmi.n	8006cda <_puts_r+0x9a>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	059b      	lsls	r3, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_puts_r+0x9a>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd6:	f7ff fedb 	bl	8006a90 <__retarget_lock_release_recursive>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	da04      	bge.n	8006cec <_puts_r+0xac>
 8006ce2:	69a2      	ldr	r2, [r4, #24]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	dc06      	bgt.n	8006cf6 <_puts_r+0xb6>
 8006ce8:	290a      	cmp	r1, #10
 8006cea:	d004      	beq.n	8006cf6 <_puts_r+0xb6>
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	7019      	strb	r1, [r3, #0]
 8006cf4:	e7c5      	b.n	8006c82 <_puts_r+0x42>
 8006cf6:	4622      	mov	r2, r4
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	f001 f8f5 	bl	8007ee8 <__swbuf_r>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d1bf      	bne.n	8006c82 <_puts_r+0x42>
 8006d02:	e7df      	b.n	8006cc4 <_puts_r+0x84>
 8006d04:	250a      	movs	r5, #10
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	6022      	str	r2, [r4, #0]
 8006d0c:	701d      	strb	r5, [r3, #0]
 8006d0e:	e7db      	b.n	8006cc8 <_puts_r+0x88>
 8006d10:	08009ce4 	.word	0x08009ce4
 8006d14:	08009d04 	.word	0x08009d04
 8006d18:	08009cc4 	.word	0x08009cc4

08006d1c <puts>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <puts+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f7ff bf8d 	b.w	8006c40 <_puts_r>
 8006d26:	bf00      	nop
 8006d28:	20000044 	.word	0x20000044

08006d2c <_sbrk_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4d05      	ldr	r5, [pc, #20]	; (8006d48 <_sbrk_r+0x1c>)
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	602b      	str	r3, [r5, #0]
 8006d38:	f7fa fcdc 	bl	80016f4 <_sbrk>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_sbrk_r+0x1a>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_sbrk_r+0x1a>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	200006f0 	.word	0x200006f0

08006d4c <siprintf>:
 8006d4c:	b40e      	push	{r1, r2, r3}
 8006d4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006d52:	b500      	push	{lr}
 8006d54:	b09c      	sub	sp, #112	; 0x70
 8006d56:	ab1d      	add	r3, sp, #116	; 0x74
 8006d58:	9002      	str	r0, [sp, #8]
 8006d5a:	9006      	str	r0, [sp, #24]
 8006d5c:	9107      	str	r1, [sp, #28]
 8006d5e:	9104      	str	r1, [sp, #16]
 8006d60:	4808      	ldr	r0, [pc, #32]	; (8006d84 <siprintf+0x38>)
 8006d62:	4909      	ldr	r1, [pc, #36]	; (8006d88 <siprintf+0x3c>)
 8006d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d68:	9105      	str	r1, [sp, #20]
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	a902      	add	r1, sp, #8
 8006d6e:	9301      	str	r3, [sp, #4]
 8006d70:	f001 fbcc 	bl	800850c <_svfiprintf_r>
 8006d74:	2200      	movs	r2, #0
 8006d76:	9b02      	ldr	r3, [sp, #8]
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	b01c      	add	sp, #112	; 0x70
 8006d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d80:	b003      	add	sp, #12
 8006d82:	4770      	bx	lr
 8006d84:	20000044 	.word	0x20000044
 8006d88:	ffff0208 	.word	0xffff0208

08006d8c <__sread>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	460c      	mov	r4, r1
 8006d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d94:	f001 ffa8 	bl	8008ce8 <_read_r>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	bfab      	itete	ge
 8006d9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d9e:	89a3      	ldrhlt	r3, [r4, #12]
 8006da0:	181b      	addge	r3, r3, r0
 8006da2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006da6:	bfac      	ite	ge
 8006da8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006daa:	81a3      	strhlt	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__seofread>:
 8006dae:	2000      	movs	r0, #0
 8006db0:	4770      	bx	lr

08006db2 <__swrite>:
 8006db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006db6:	461f      	mov	r7, r3
 8006db8:	898b      	ldrh	r3, [r1, #12]
 8006dba:	4605      	mov	r5, r0
 8006dbc:	05db      	lsls	r3, r3, #23
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	4616      	mov	r6, r2
 8006dc2:	d505      	bpl.n	8006dd0 <__swrite+0x1e>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dcc:	f001 faae 	bl	800832c <_lseek_r>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	4628      	mov	r0, r5
 8006ddc:	463b      	mov	r3, r7
 8006dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006de6:	f001 b8d1 	b.w	8007f8c <_write_r>

08006dea <__sseek>:
 8006dea:	b510      	push	{r4, lr}
 8006dec:	460c      	mov	r4, r1
 8006dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df2:	f001 fa9b 	bl	800832c <_lseek_r>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	89a3      	ldrh	r3, [r4, #12]
 8006dfa:	bf15      	itete	ne
 8006dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006e06:	81a3      	strheq	r3, [r4, #12]
 8006e08:	bf18      	it	ne
 8006e0a:	81a3      	strhne	r3, [r4, #12]
 8006e0c:	bd10      	pop	{r4, pc}

08006e0e <__sclose>:
 8006e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e12:	f001 b95d 	b.w	80080d0 <_close_r>
	...

08006e18 <iso_year_adjust>:
 8006e18:	6941      	ldr	r1, [r0, #20]
 8006e1a:	f240 736c 	movw	r3, #1900	; 0x76c
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	bfa8      	it	ge
 8006e22:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8006e26:	18ca      	adds	r2, r1, r3
 8006e28:	078b      	lsls	r3, r1, #30
 8006e2a:	d105      	bne.n	8006e38 <iso_year_adjust+0x20>
 8006e2c:	2164      	movs	r1, #100	; 0x64
 8006e2e:	fb92 f3f1 	sdiv	r3, r2, r1
 8006e32:	fb01 2313 	mls	r3, r1, r3, r2
 8006e36:	b9db      	cbnz	r3, 8006e70 <iso_year_adjust+0x58>
 8006e38:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006e3c:	fb92 f3f1 	sdiv	r3, r2, r1
 8006e40:	fb01 2313 	mls	r3, r1, r3, r2
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8006e4e:	0040      	lsls	r0, r0, #1
 8006e50:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8006e54:	4418      	add	r0, r3
 8006e56:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8006e5a:	4298      	cmp	r0, r3
 8006e5c:	d03a      	beq.n	8006ed4 <iso_year_adjust+0xbc>
 8006e5e:	dc21      	bgt.n	8006ea4 <iso_year_adjust+0x8c>
 8006e60:	2801      	cmp	r0, #1
 8006e62:	dc1a      	bgt.n	8006e9a <iso_year_adjust+0x82>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	bfb4      	ite	lt
 8006e68:	2000      	movlt	r0, #0
 8006e6a:	f04f 30ff 	movge.w	r0, #4294967295
 8006e6e:	4770      	bx	lr
 8006e70:	2301      	movs	r3, #1
 8006e72:	e7ea      	b.n	8006e4a <iso_year_adjust+0x32>
 8006e74:	2817      	cmp	r0, #23
 8006e76:	d813      	bhi.n	8006ea0 <iso_year_adjust+0x88>
 8006e78:	e8df f000 	tbb	[pc, r0]
 8006e7c:	0c0c0c0c 	.word	0x0c0c0c0c
 8006e80:	0c0c1212 	.word	0x0c0c1212
 8006e84:	12121212 	.word	0x12121212
 8006e88:	12121212 	.word	0x12121212
 8006e8c:	0c0c1212 	.word	0x0c0c1212
 8006e90:	0c0c1212 	.word	0x0c0c1212
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	4770      	bx	lr
 8006e9a:	380a      	subs	r0, #10
 8006e9c:	2817      	cmp	r0, #23
 8006e9e:	d9e9      	bls.n	8006e74 <iso_year_adjust+0x5c>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	4770      	bx	lr
 8006ea4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8006ea8:	4298      	cmp	r0, r3
 8006eaa:	dc06      	bgt.n	8006eba <iso_year_adjust+0xa2>
 8006eac:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	bfd4      	ite	le
 8006eb4:	2000      	movle	r0, #0
 8006eb6:	2001      	movgt	r0, #1
 8006eb8:	4770      	bx	lr
 8006eba:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8006ebe:	3802      	subs	r0, #2
 8006ec0:	2815      	cmp	r0, #21
 8006ec2:	d8ed      	bhi.n	8006ea0 <iso_year_adjust+0x88>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	4083      	lsls	r3, r0
 8006ec8:	4803      	ldr	r0, [pc, #12]	; (8006ed8 <iso_year_adjust+0xc0>)
 8006eca:	4018      	ands	r0, r3
 8006ecc:	3800      	subs	r0, #0
 8006ece:	bf18      	it	ne
 8006ed0:	2001      	movne	r0, #1
 8006ed2:	4770      	bx	lr
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	4770      	bx	lr
 8006ed8:	002a001f 	.word	0x002a001f

08006edc <__strftime>:
 8006edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee0:	461e      	mov	r6, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	461c      	mov	r4, r3
 8006eea:	b091      	sub	sp, #68	; 0x44
 8006eec:	9304      	str	r3, [sp, #16]
 8006eee:	7813      	ldrb	r3, [r2, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 84da 	beq.w	80078aa <__strftime+0x9ce>
 8006ef6:	2b25      	cmp	r3, #37	; 0x25
 8006ef8:	d11f      	bne.n	8006f3a <__strftime+0x5e>
 8006efa:	f892 9001 	ldrb.w	r9, [r2, #1]
 8006efe:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8006f02:	d024      	beq.n	8006f4e <__strftime+0x72>
 8006f04:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8006f08:	d021      	beq.n	8006f4e <__strftime+0x72>
 8006f0a:	f04f 0900 	mov.w	r9, #0
 8006f0e:	f102 0a01 	add.w	sl, r2, #1
 8006f12:	f89a 3000 	ldrb.w	r3, [sl]
 8006f16:	3b31      	subs	r3, #49	; 0x31
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d81b      	bhi.n	8006f54 <__strftime+0x78>
 8006f1c:	4650      	mov	r0, sl
 8006f1e:	220a      	movs	r2, #10
 8006f20:	a908      	add	r1, sp, #32
 8006f22:	f000 fd6d 	bl	8007a00 <strtoul>
 8006f26:	4680      	mov	r8, r0
 8006f28:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f30:	2b45      	cmp	r3, #69	; 0x45
 8006f32:	d112      	bne.n	8006f5a <__strftime+0x7e>
 8006f34:	f10a 0a01 	add.w	sl, sl, #1
 8006f38:	e011      	b.n	8006f5e <__strftime+0x82>
 8006f3a:	1e69      	subs	r1, r5, #1
 8006f3c:	42a1      	cmp	r1, r4
 8006f3e:	d802      	bhi.n	8006f46 <__strftime+0x6a>
 8006f40:	2400      	movs	r4, #0
 8006f42:	f000 bcb5 	b.w	80078b0 <__strftime+0x9d4>
 8006f46:	553b      	strb	r3, [r7, r4]
 8006f48:	3201      	adds	r2, #1
 8006f4a:	3401      	adds	r4, #1
 8006f4c:	e7cf      	b.n	8006eee <__strftime+0x12>
 8006f4e:	f102 0a02 	add.w	sl, r2, #2
 8006f52:	e7de      	b.n	8006f12 <__strftime+0x36>
 8006f54:	f04f 0800 	mov.w	r8, #0
 8006f58:	e7e8      	b.n	8006f2c <__strftime+0x50>
 8006f5a:	2b4f      	cmp	r3, #79	; 0x4f
 8006f5c:	d0ea      	beq.n	8006f34 <__strftime+0x58>
 8006f5e:	f89a 0000 	ldrb.w	r0, [sl]
 8006f62:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8006f66:	2b55      	cmp	r3, #85	; 0x55
 8006f68:	d8ea      	bhi.n	8006f40 <__strftime+0x64>
 8006f6a:	a201      	add	r2, pc, #4	; (adr r2, 8006f70 <__strftime+0x94>)
 8006f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f70:	0800789f 	.word	0x0800789f
 8006f74:	08006f41 	.word	0x08006f41
 8006f78:	08006f41 	.word	0x08006f41
 8006f7c:	08006f41 	.word	0x08006f41
 8006f80:	08006f41 	.word	0x08006f41
 8006f84:	08006f41 	.word	0x08006f41
 8006f88:	08006f41 	.word	0x08006f41
 8006f8c:	08006f41 	.word	0x08006f41
 8006f90:	08006f41 	.word	0x08006f41
 8006f94:	08006f41 	.word	0x08006f41
 8006f98:	08006f41 	.word	0x08006f41
 8006f9c:	08006f41 	.word	0x08006f41
 8006fa0:	08006f41 	.word	0x08006f41
 8006fa4:	08006f41 	.word	0x08006f41
 8006fa8:	08006f41 	.word	0x08006f41
 8006fac:	08006f41 	.word	0x08006f41
 8006fb0:	08006f41 	.word	0x08006f41
 8006fb4:	08006f41 	.word	0x08006f41
 8006fb8:	08006f41 	.word	0x08006f41
 8006fbc:	08006f41 	.word	0x08006f41
 8006fc0:	08006f41 	.word	0x08006f41
 8006fc4:	08006f41 	.word	0x08006f41
 8006fc8:	08006f41 	.word	0x08006f41
 8006fcc:	08006f41 	.word	0x08006f41
 8006fd0:	08006f41 	.word	0x08006f41
 8006fd4:	08006f41 	.word	0x08006f41
 8006fd8:	08006f41 	.word	0x08006f41
 8006fdc:	08006f41 	.word	0x08006f41
 8006fe0:	08007105 	.word	0x08007105
 8006fe4:	0800715d 	.word	0x0800715d
 8006fe8:	080071cf 	.word	0x080071cf
 8006fec:	08007267 	.word	0x08007267
 8006ff0:	08006f41 	.word	0x08006f41
 8006ff4:	080072b1 	.word	0x080072b1
 8006ff8:	080073a5 	.word	0x080073a5
 8006ffc:	080074af 	.word	0x080074af
 8007000:	080074bd 	.word	0x080074bd
 8007004:	08006f41 	.word	0x08006f41
 8007008:	08006f41 	.word	0x08006f41
 800700c:	08006f41 	.word	0x08006f41
 8007010:	080074ed 	.word	0x080074ed
 8007014:	08006f41 	.word	0x08006f41
 8007018:	08006f41 	.word	0x08006f41
 800701c:	08007501 	.word	0x08007501
 8007020:	08006f41 	.word	0x08006f41
 8007024:	08007551 	.word	0x08007551
 8007028:	08007667 	.word	0x08007667
 800702c:	08007677 	.word	0x08007677
 8007030:	080076cb 	.word	0x080076cb
 8007034:	080076db 	.word	0x080076db
 8007038:	0800774d 	.word	0x0800774d
 800703c:	080071c7 	.word	0x080071c7
 8007040:	08007781 	.word	0x08007781
 8007044:	0800784d 	.word	0x0800784d
 8007048:	08006f41 	.word	0x08006f41
 800704c:	08006f41 	.word	0x08006f41
 8007050:	08006f41 	.word	0x08006f41
 8007054:	08006f41 	.word	0x08006f41
 8007058:	08006f41 	.word	0x08006f41
 800705c:	08006f41 	.word	0x08006f41
 8007060:	080070c9 	.word	0x080070c9
 8007064:	08007133 	.word	0x08007133
 8007068:	08007189 	.word	0x08007189
 800706c:	08007243 	.word	0x08007243
 8007070:	08007243 	.word	0x08007243
 8007074:	08006f41 	.word	0x08006f41
 8007078:	08007307 	.word	0x08007307
 800707c:	08007133 	.word	0x08007133
 8007080:	08006f41 	.word	0x08006f41
 8007084:	080074df 	.word	0x080074df
 8007088:	080074af 	.word	0x080074af
 800708c:	080074bd 	.word	0x080074bd
 8007090:	080074e7 	.word	0x080074e7
 8007094:	080074f1 	.word	0x080074f1
 8007098:	08006f41 	.word	0x08006f41
 800709c:	08007501 	.word	0x08007501
 80070a0:	08006f41 	.word	0x08006f41
 80070a4:	080071b7 	.word	0x080071b7
 80070a8:	08007563 	.word	0x08007563
 80070ac:	0800766b 	.word	0x0800766b
 80070b0:	080076b1 	.word	0x080076b1
 80070b4:	08006f41 	.word	0x08006f41
 80070b8:	0800773f 	.word	0x0800773f
 80070bc:	080071bf 	.word	0x080071bf
 80070c0:	08007765 	.word	0x08007765
 80070c4:	080077dd 	.word	0x080077dd
 80070c8:	69b3      	ldr	r3, [r6, #24]
 80070ca:	4aa9      	ldr	r2, [pc, #676]	; (8007370 <__strftime+0x494>)
 80070cc:	3318      	adds	r3, #24
 80070ce:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80070d2:	4640      	mov	r0, r8
 80070d4:	f7f9 f8a6 	bl	8000224 <strlen>
 80070d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80070dc:	4420      	add	r0, r4
 80070de:	1e6b      	subs	r3, r5, #1
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d107      	bne.n	80070f4 <__strftime+0x218>
 80070e4:	f89a 3000 	ldrb.w	r3, [sl]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f000 83de 	beq.w	80078aa <__strftime+0x9ce>
 80070ee:	f10a 0201 	add.w	r2, sl, #1
 80070f2:	e6fc      	b.n	8006eee <__strftime+0x12>
 80070f4:	42a3      	cmp	r3, r4
 80070f6:	f67f af23 	bls.w	8006f40 <__strftime+0x64>
 80070fa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80070fe:	553a      	strb	r2, [r7, r4]
 8007100:	3401      	adds	r4, #1
 8007102:	e7ed      	b.n	80070e0 <__strftime+0x204>
 8007104:	69b2      	ldr	r2, [r6, #24]
 8007106:	4b9a      	ldr	r3, [pc, #616]	; (8007370 <__strftime+0x494>)
 8007108:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800710c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8007110:	4640      	mov	r0, r8
 8007112:	f7f9 f887 	bl	8000224 <strlen>
 8007116:	f108 38ff 	add.w	r8, r8, #4294967295
 800711a:	4420      	add	r0, r4
 800711c:	1e6b      	subs	r3, r5, #1
 800711e:	42a0      	cmp	r0, r4
 8007120:	d0e0      	beq.n	80070e4 <__strftime+0x208>
 8007122:	42a3      	cmp	r3, r4
 8007124:	f67f af0c 	bls.w	8006f40 <__strftime+0x64>
 8007128:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800712c:	553a      	strb	r2, [r7, r4]
 800712e:	3401      	adds	r4, #1
 8007130:	e7f5      	b.n	800711e <__strftime+0x242>
 8007132:	4b8f      	ldr	r3, [pc, #572]	; (8007370 <__strftime+0x494>)
 8007134:	6932      	ldr	r2, [r6, #16]
 8007136:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800713a:	4640      	mov	r0, r8
 800713c:	f7f9 f872 	bl	8000224 <strlen>
 8007140:	f108 38ff 	add.w	r8, r8, #4294967295
 8007144:	4420      	add	r0, r4
 8007146:	1e6b      	subs	r3, r5, #1
 8007148:	42a0      	cmp	r0, r4
 800714a:	d0cb      	beq.n	80070e4 <__strftime+0x208>
 800714c:	42a3      	cmp	r3, r4
 800714e:	f67f aef7 	bls.w	8006f40 <__strftime+0x64>
 8007152:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8007156:	553a      	strb	r2, [r7, r4]
 8007158:	3401      	adds	r4, #1
 800715a:	e7f5      	b.n	8007148 <__strftime+0x26c>
 800715c:	6933      	ldr	r3, [r6, #16]
 800715e:	4a84      	ldr	r2, [pc, #528]	; (8007370 <__strftime+0x494>)
 8007160:	330c      	adds	r3, #12
 8007162:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8007166:	4640      	mov	r0, r8
 8007168:	f7f9 f85c 	bl	8000224 <strlen>
 800716c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007170:	4420      	add	r0, r4
 8007172:	1e6b      	subs	r3, r5, #1
 8007174:	42a0      	cmp	r0, r4
 8007176:	d0b5      	beq.n	80070e4 <__strftime+0x208>
 8007178:	42a3      	cmp	r3, r4
 800717a:	f67f aee1 	bls.w	8006f40 <__strftime+0x64>
 800717e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8007182:	553a      	strb	r2, [r7, r4]
 8007184:	3401      	adds	r4, #1
 8007186:	e7f5      	b.n	8007174 <__strftime+0x298>
 8007188:	4b79      	ldr	r3, [pc, #484]	; (8007370 <__strftime+0x494>)
 800718a:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 800718e:	4640      	mov	r0, r8
 8007190:	f7f9 f848 	bl	8000224 <strlen>
 8007194:	f898 3000 	ldrb.w	r3, [r8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0a3      	beq.n	80070e4 <__strftime+0x208>
 800719c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800719e:	4642      	mov	r2, r8
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	4633      	mov	r3, r6
 80071a4:	1b29      	subs	r1, r5, r4
 80071a6:	1938      	adds	r0, r7, r4
 80071a8:	f7ff fe98 	bl	8006edc <__strftime>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	f77f aec7 	ble.w	8006f40 <__strftime+0x64>
 80071b2:	4404      	add	r4, r0
 80071b4:	e796      	b.n	80070e4 <__strftime+0x208>
 80071b6:	4b6e      	ldr	r3, [pc, #440]	; (8007370 <__strftime+0x494>)
 80071b8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80071bc:	e7e7      	b.n	800718e <__strftime+0x2b2>
 80071be:	4b6c      	ldr	r3, [pc, #432]	; (8007370 <__strftime+0x494>)
 80071c0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80071c4:	e7e3      	b.n	800718e <__strftime+0x2b2>
 80071c6:	4b6a      	ldr	r3, [pc, #424]	; (8007370 <__strftime+0x494>)
 80071c8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80071cc:	e7df      	b.n	800718e <__strftime+0x2b2>
 80071ce:	4969      	ldr	r1, [pc, #420]	; (8007374 <__strftime+0x498>)
 80071d0:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80071d4:	458b      	cmp	fp, r1
 80071d6:	bfac      	ite	ge
 80071d8:	2100      	movge	r1, #0
 80071da:	2101      	movlt	r1, #1
 80071dc:	f1bb 0f00 	cmp.w	fp, #0
 80071e0:	db10      	blt.n	8007204 <__strftime+0x328>
 80071e2:	2064      	movs	r0, #100	; 0x64
 80071e4:	fb9b f0f0 	sdiv	r0, fp, r0
 80071e8:	3013      	adds	r0, #19
 80071ea:	f1b9 0f00 	cmp.w	r9, #0
 80071ee:	d013      	beq.n	8007218 <__strftime+0x33c>
 80071f0:	2863      	cmp	r0, #99	; 0x63
 80071f2:	dd24      	ble.n	800723e <__strftime+0x362>
 80071f4:	4a60      	ldr	r2, [pc, #384]	; (8007378 <__strftime+0x49c>)
 80071f6:	4b61      	ldr	r3, [pc, #388]	; (800737c <__strftime+0x4a0>)
 80071f8:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80071fc:	bf18      	it	ne
 80071fe:	4613      	movne	r3, r2
 8007200:	4a5f      	ldr	r2, [pc, #380]	; (8007380 <__strftime+0x4a4>)
 8007202:	e00b      	b.n	800721c <__strftime+0x340>
 8007204:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 8007208:	9105      	str	r1, [sp, #20]
 800720a:	f000 ff3f 	bl	800808c <abs>
 800720e:	2364      	movs	r3, #100	; 0x64
 8007210:	9905      	ldr	r1, [sp, #20]
 8007212:	fb90 f0f3 	sdiv	r0, r0, r3
 8007216:	e7e8      	b.n	80071ea <__strftime+0x30e>
 8007218:	4b57      	ldr	r3, [pc, #348]	; (8007378 <__strftime+0x49c>)
 800721a:	4a5a      	ldr	r2, [pc, #360]	; (8007384 <__strftime+0x4a8>)
 800721c:	f1b8 0f02 	cmp.w	r8, #2
 8007220:	bf2c      	ite	cs
 8007222:	ebc1 0108 	rsbcs	r1, r1, r8
 8007226:	f1c1 0102 	rsbcc	r1, r1, #2
 800722a:	9001      	str	r0, [sp, #4]
 800722c:	9100      	str	r1, [sp, #0]
 800722e:	4851      	ldr	r0, [pc, #324]	; (8007374 <__strftime+0x498>)
 8007230:	4955      	ldr	r1, [pc, #340]	; (8007388 <__strftime+0x4ac>)
 8007232:	4583      	cmp	fp, r0
 8007234:	bfb8      	it	lt
 8007236:	460b      	movlt	r3, r1
 8007238:	1b29      	subs	r1, r5, r4
 800723a:	1938      	adds	r0, r7, r4
 800723c:	e029      	b.n	8007292 <__strftime+0x3b6>
 800723e:	4b4e      	ldr	r3, [pc, #312]	; (8007378 <__strftime+0x49c>)
 8007240:	e7de      	b.n	8007200 <__strftime+0x324>
 8007242:	4952      	ldr	r1, [pc, #328]	; (800738c <__strftime+0x4b0>)
 8007244:	4a52      	ldr	r2, [pc, #328]	; (8007390 <__strftime+0x4b4>)
 8007246:	68f3      	ldr	r3, [r6, #12]
 8007248:	2864      	cmp	r0, #100	; 0x64
 800724a:	bf08      	it	eq
 800724c:	460a      	moveq	r2, r1
 800724e:	1b29      	subs	r1, r5, r4
 8007250:	1938      	adds	r0, r7, r4
 8007252:	f001 fd5b 	bl	8008d0c <sniprintf>
 8007256:	2800      	cmp	r0, #0
 8007258:	f6ff ae72 	blt.w	8006f40 <__strftime+0x64>
 800725c:	4404      	add	r4, r0
 800725e:	42a5      	cmp	r5, r4
 8007260:	f63f af40 	bhi.w	80070e4 <__strftime+0x208>
 8007264:	e66c      	b.n	8006f40 <__strftime+0x64>
 8007266:	6970      	ldr	r0, [r6, #20]
 8007268:	6933      	ldr	r3, [r6, #16]
 800726a:	2800      	cmp	r0, #0
 800726c:	f103 0b01 	add.w	fp, r3, #1
 8007270:	eb07 0804 	add.w	r8, r7, r4
 8007274:	68f3      	ldr	r3, [r6, #12]
 8007276:	eba5 0904 	sub.w	r9, r5, r4
 800727a:	db0d      	blt.n	8007298 <__strftime+0x3bc>
 800727c:	2164      	movs	r1, #100	; 0x64
 800727e:	fb90 f2f1 	sdiv	r2, r0, r1
 8007282:	fb01 0212 	mls	r2, r1, r2, r0
 8007286:	e9cd 3200 	strd	r3, r2, [sp]
 800728a:	4649      	mov	r1, r9
 800728c:	465b      	mov	r3, fp
 800728e:	4640      	mov	r0, r8
 8007290:	4a40      	ldr	r2, [pc, #256]	; (8007394 <__strftime+0x4b8>)
 8007292:	f001 fd3b 	bl	8008d0c <sniprintf>
 8007296:	e7de      	b.n	8007256 <__strftime+0x37a>
 8007298:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800729c:	9305      	str	r3, [sp, #20]
 800729e:	f000 fef5 	bl	800808c <abs>
 80072a2:	2264      	movs	r2, #100	; 0x64
 80072a4:	fb90 f1f2 	sdiv	r1, r0, r2
 80072a8:	9b05      	ldr	r3, [sp, #20]
 80072aa:	fb01 0212 	mls	r2, r1, r2, r0
 80072ae:	e7ea      	b.n	8007286 <__strftime+0x3aa>
 80072b0:	2325      	movs	r3, #37	; 0x25
 80072b2:	f88d 3020 	strb.w	r3, [sp, #32]
 80072b6:	f1b9 0f00 	cmp.w	r9, #0
 80072ba:	d013      	beq.n	80072e4 <__strftime+0x408>
 80072bc:	f1b8 0f06 	cmp.w	r8, #6
 80072c0:	bf38      	it	cc
 80072c2:	f04f 0806 	movcc.w	r8, #6
 80072c6:	f1b8 0306 	subs.w	r3, r8, #6
 80072ca:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80072ce:	d10e      	bne.n	80072ee <__strftime+0x412>
 80072d0:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80072d4:	4930      	ldr	r1, [pc, #192]	; (8007398 <__strftime+0x4bc>)
 80072d6:	f001 fd77 	bl	8008dc8 <strcpy>
 80072da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80072dc:	aa08      	add	r2, sp, #32
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4633      	mov	r3, r6
 80072e2:	e75f      	b.n	80071a4 <__strftime+0x2c8>
 80072e4:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80072e8:	f04f 080a 	mov.w	r8, #10
 80072ec:	e7eb      	b.n	80072c6 <__strftime+0x3ea>
 80072ee:	211e      	movs	r1, #30
 80072f0:	4a2a      	ldr	r2, [pc, #168]	; (800739c <__strftime+0x4c0>)
 80072f2:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80072f6:	f001 fd09 	bl	8008d0c <sniprintf>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	dde8      	ble.n	80072d0 <__strftime+0x3f4>
 80072fe:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8007302:	4418      	add	r0, r3
 8007304:	e7e6      	b.n	80072d4 <__strftime+0x3f8>
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff fd86 	bl	8006e18 <iso_year_adjust>
 800730c:	4680      	mov	r8, r0
 800730e:	6970      	ldr	r0, [r6, #20]
 8007310:	2800      	cmp	r0, #0
 8007312:	db11      	blt.n	8007338 <__strftime+0x45c>
 8007314:	2264      	movs	r2, #100	; 0x64
 8007316:	fb90 f3f2 	sdiv	r3, r0, r2
 800731a:	fb02 0313 	mls	r3, r2, r3, r0
 800731e:	4498      	add	r8, r3
 8007320:	2364      	movs	r3, #100	; 0x64
 8007322:	fb98 f0f3 	sdiv	r0, r8, r3
 8007326:	fb03 8810 	mls	r8, r3, r0, r8
 800732a:	4498      	add	r8, r3
 800732c:	fbb8 f2f3 	udiv	r2, r8, r3
 8007330:	fb03 8312 	mls	r3, r3, r2, r8
 8007334:	4a15      	ldr	r2, [pc, #84]	; (800738c <__strftime+0x4b0>)
 8007336:	e78a      	b.n	800724e <__strftime+0x372>
 8007338:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800733c:	f000 fea6 	bl	800808c <abs>
 8007340:	2364      	movs	r3, #100	; 0x64
 8007342:	fb90 f2f3 	sdiv	r2, r0, r3
 8007346:	f1b8 0f00 	cmp.w	r8, #0
 800734a:	fb02 0313 	mls	r3, r2, r3, r0
 800734e:	da06      	bge.n	800735e <__strftime+0x482>
 8007350:	6971      	ldr	r1, [r6, #20]
 8007352:	4a13      	ldr	r2, [pc, #76]	; (80073a0 <__strftime+0x4c4>)
 8007354:	4291      	cmp	r1, r2
 8007356:	bfb8      	it	lt
 8007358:	f04f 0801 	movlt.w	r8, #1
 800735c:	e7df      	b.n	800731e <__strftime+0x442>
 800735e:	d0de      	beq.n	800731e <__strftime+0x442>
 8007360:	6971      	ldr	r1, [r6, #20]
 8007362:	4a04      	ldr	r2, [pc, #16]	; (8007374 <__strftime+0x498>)
 8007364:	4291      	cmp	r1, r2
 8007366:	bfb8      	it	lt
 8007368:	f04f 38ff 	movlt.w	r8, #4294967295
 800736c:	e7d7      	b.n	800731e <__strftime+0x442>
 800736e:	bf00      	nop
 8007370:	08009f84 	.word	0x08009f84
 8007374:	fffff894 	.word	0xfffff894
 8007378:	0800a0f7 	.word	0x0800a0f7
 800737c:	08009e0f 	.word	0x08009e0f
 8007380:	08009e07 	.word	0x08009e07
 8007384:	08009e00 	.word	0x08009e00
 8007388:	0800a237 	.word	0x0800a237
 800738c:	08009e1f 	.word	0x08009e1f
 8007390:	08009e11 	.word	0x08009e11
 8007394:	08009e15 	.word	0x08009e15
 8007398:	08009e28 	.word	0x08009e28
 800739c:	08009e24 	.word	0x08009e24
 80073a0:	fffff895 	.word	0xfffff895
 80073a4:	4bb7      	ldr	r3, [pc, #732]	; (8007684 <__strftime+0x7a8>)
 80073a6:	6971      	ldr	r1, [r6, #20]
 80073a8:	4630      	mov	r0, r6
 80073aa:	4299      	cmp	r1, r3
 80073ac:	bfac      	ite	ge
 80073ae:	2300      	movge	r3, #0
 80073b0:	2301      	movlt	r3, #1
 80073b2:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80073b6:	f7ff fd2f 	bl	8006e18 <iso_year_adjust>
 80073ba:	9906      	ldr	r1, [sp, #24]
 80073bc:	4683      	mov	fp, r0
 80073be:	2900      	cmp	r1, #0
 80073c0:	db2a      	blt.n	8007418 <__strftime+0x53c>
 80073c2:	2264      	movs	r2, #100	; 0x64
 80073c4:	fb91 f2f2 	sdiv	r2, r1, r2
 80073c8:	3213      	adds	r2, #19
 80073ca:	6970      	ldr	r0, [r6, #20]
 80073cc:	2800      	cmp	r0, #0
 80073ce:	db2d      	blt.n	800742c <__strftime+0x550>
 80073d0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80073d4:	fb90 fefc 	sdiv	lr, r0, ip
 80073d8:	fb0c 001e 	mls	r0, ip, lr, r0
 80073dc:	f1bb 0f00 	cmp.w	fp, #0
 80073e0:	da33      	bge.n	800744a <__strftime+0x56e>
 80073e2:	6971      	ldr	r1, [r6, #20]
 80073e4:	4ba8      	ldr	r3, [pc, #672]	; (8007688 <__strftime+0x7ac>)
 80073e6:	4299      	cmp	r1, r3
 80073e8:	db39      	blt.n	800745e <__strftime+0x582>
 80073ea:	eb0b 0300 	add.w	r3, fp, r0
 80073ee:	1c59      	adds	r1, r3, #1
 80073f0:	d13a      	bne.n	8007468 <__strftime+0x58c>
 80073f2:	2363      	movs	r3, #99	; 0x63
 80073f4:	3a01      	subs	r2, #1
 80073f6:	2064      	movs	r0, #100	; 0x64
 80073f8:	fb00 3202 	mla	r2, r0, r2, r3
 80073fc:	9b05      	ldr	r3, [sp, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d037      	beq.n	8007472 <__strftime+0x596>
 8007402:	232d      	movs	r3, #45	; 0x2d
 8007404:	f88d 3020 	strb.w	r3, [sp, #32]
 8007408:	f1b8 0f00 	cmp.w	r8, #0
 800740c:	d001      	beq.n	8007412 <__strftime+0x536>
 800740e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007412:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8007416:	e037      	b.n	8007488 <__strftime+0x5ac>
 8007418:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 800741c:	9106      	str	r1, [sp, #24]
 800741e:	f000 fe35 	bl	800808c <abs>
 8007422:	2264      	movs	r2, #100	; 0x64
 8007424:	9906      	ldr	r1, [sp, #24]
 8007426:	fb90 f2f2 	sdiv	r2, r0, r2
 800742a:	e7ce      	b.n	80073ca <__strftime+0x4ee>
 800742c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8007430:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007434:	f000 fe2a 	bl	800808c <abs>
 8007438:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800743c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8007440:	fb90 fefc 	sdiv	lr, r0, ip
 8007444:	fb0e 001c 	mls	r0, lr, ip, r0
 8007448:	e7c8      	b.n	80073dc <__strftime+0x500>
 800744a:	d0ce      	beq.n	80073ea <__strftime+0x50e>
 800744c:	4b8d      	ldr	r3, [pc, #564]	; (8007684 <__strftime+0x7a8>)
 800744e:	4299      	cmp	r1, r3
 8007450:	bfb6      	itet	lt
 8007452:	2301      	movlt	r3, #1
 8007454:	2300      	movge	r3, #0
 8007456:	f04f 3bff 	movlt.w	fp, #4294967295
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	e7c5      	b.n	80073ea <__strftime+0x50e>
 800745e:	f04f 0b01 	mov.w	fp, #1
 8007462:	f8cd b014 	str.w	fp, [sp, #20]
 8007466:	e7c0      	b.n	80073ea <__strftime+0x50e>
 8007468:	2b64      	cmp	r3, #100	; 0x64
 800746a:	bf04      	itt	eq
 800746c:	2300      	moveq	r3, #0
 800746e:	3201      	addeq	r2, #1
 8007470:	e7c1      	b.n	80073f6 <__strftime+0x51a>
 8007472:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8007476:	d106      	bne.n	8007486 <__strftime+0x5aa>
 8007478:	f242 730f 	movw	r3, #9999	; 0x270f
 800747c:	429a      	cmp	r2, r3
 800747e:	d902      	bls.n	8007486 <__strftime+0x5aa>
 8007480:	f88d 9020 	strb.w	r9, [sp, #32]
 8007484:	e7c0      	b.n	8007408 <__strftime+0x52c>
 8007486:	ab08      	add	r3, sp, #32
 8007488:	2125      	movs	r1, #37	; 0x25
 800748a:	7019      	strb	r1, [r3, #0]
 800748c:	f1b9 0f00 	cmp.w	r9, #0
 8007490:	d109      	bne.n	80074a6 <__strftime+0x5ca>
 8007492:	1c58      	adds	r0, r3, #1
 8007494:	497d      	ldr	r1, [pc, #500]	; (800768c <__strftime+0x7b0>)
 8007496:	9205      	str	r2, [sp, #20]
 8007498:	f001 fc96 	bl	8008dc8 <strcpy>
 800749c:	9a05      	ldr	r2, [sp, #20]
 800749e:	9200      	str	r2, [sp, #0]
 80074a0:	4643      	mov	r3, r8
 80074a2:	aa08      	add	r2, sp, #32
 80074a4:	e058      	b.n	8007558 <__strftime+0x67c>
 80074a6:	2130      	movs	r1, #48	; 0x30
 80074a8:	1c98      	adds	r0, r3, #2
 80074aa:	7059      	strb	r1, [r3, #1]
 80074ac:	e7f2      	b.n	8007494 <__strftime+0x5b8>
 80074ae:	4978      	ldr	r1, [pc, #480]	; (8007690 <__strftime+0x7b4>)
 80074b0:	4a78      	ldr	r2, [pc, #480]	; (8007694 <__strftime+0x7b8>)
 80074b2:	68b3      	ldr	r3, [r6, #8]
 80074b4:	286b      	cmp	r0, #107	; 0x6b
 80074b6:	bf08      	it	eq
 80074b8:	460a      	moveq	r2, r1
 80074ba:	e6c8      	b.n	800724e <__strftime+0x372>
 80074bc:	68b3      	ldr	r3, [r6, #8]
 80074be:	b163      	cbz	r3, 80074da <__strftime+0x5fe>
 80074c0:	2b0c      	cmp	r3, #12
 80074c2:	d004      	beq.n	80074ce <__strftime+0x5f2>
 80074c4:	210c      	movs	r1, #12
 80074c6:	fb93 f2f1 	sdiv	r2, r3, r1
 80074ca:	fb01 3312 	mls	r3, r1, r2, r3
 80074ce:	4971      	ldr	r1, [pc, #452]	; (8007694 <__strftime+0x7b8>)
 80074d0:	4a6f      	ldr	r2, [pc, #444]	; (8007690 <__strftime+0x7b4>)
 80074d2:	2849      	cmp	r0, #73	; 0x49
 80074d4:	bf08      	it	eq
 80074d6:	460a      	moveq	r2, r1
 80074d8:	e6b9      	b.n	800724e <__strftime+0x372>
 80074da:	230c      	movs	r3, #12
 80074dc:	e7f7      	b.n	80074ce <__strftime+0x5f2>
 80074de:	69f3      	ldr	r3, [r6, #28]
 80074e0:	4a6d      	ldr	r2, [pc, #436]	; (8007698 <__strftime+0x7bc>)
 80074e2:	3301      	adds	r3, #1
 80074e4:	e6b3      	b.n	800724e <__strftime+0x372>
 80074e6:	6933      	ldr	r3, [r6, #16]
 80074e8:	3301      	adds	r3, #1
 80074ea:	e723      	b.n	8007334 <__strftime+0x458>
 80074ec:	6873      	ldr	r3, [r6, #4]
 80074ee:	e721      	b.n	8007334 <__strftime+0x458>
 80074f0:	1e6b      	subs	r3, r5, #1
 80074f2:	42a3      	cmp	r3, r4
 80074f4:	f67f ad24 	bls.w	8006f40 <__strftime+0x64>
 80074f8:	230a      	movs	r3, #10
 80074fa:	553b      	strb	r3, [r7, r4]
 80074fc:	3401      	adds	r4, #1
 80074fe:	e5f1      	b.n	80070e4 <__strftime+0x208>
 8007500:	68b3      	ldr	r3, [r6, #8]
 8007502:	2b0b      	cmp	r3, #11
 8007504:	bfcc      	ite	gt
 8007506:	22a4      	movgt	r2, #164	; 0xa4
 8007508:	22a0      	movle	r2, #160	; 0xa0
 800750a:	4b64      	ldr	r3, [pc, #400]	; (800769c <__strftime+0x7c0>)
 800750c:	4413      	add	r3, r2
 800750e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8007512:	4640      	mov	r0, r8
 8007514:	f7f8 fe86 	bl	8000224 <strlen>
 8007518:	f108 32ff 	add.w	r2, r8, #4294967295
 800751c:	4420      	add	r0, r4
 800751e:	f105 3cff 	add.w	ip, r5, #4294967295
 8007522:	42a0      	cmp	r0, r4
 8007524:	f43f adde 	beq.w	80070e4 <__strftime+0x208>
 8007528:	45a4      	cmp	ip, r4
 800752a:	f67f ad09 	bls.w	8006f40 <__strftime+0x64>
 800752e:	f89a 1000 	ldrb.w	r1, [sl]
 8007532:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8007536:	2950      	cmp	r1, #80	; 0x50
 8007538:	d107      	bne.n	800754a <__strftime+0x66e>
 800753a:	4959      	ldr	r1, [pc, #356]	; (80076a0 <__strftime+0x7c4>)
 800753c:	5cc9      	ldrb	r1, [r1, r3]
 800753e:	f001 0103 	and.w	r1, r1, #3
 8007542:	2901      	cmp	r1, #1
 8007544:	bf08      	it	eq
 8007546:	3320      	addeq	r3, #32
 8007548:	b2db      	uxtb	r3, r3
 800754a:	553b      	strb	r3, [r7, r4]
 800754c:	3401      	adds	r4, #1
 800754e:	e7e8      	b.n	8007522 <__strftime+0x646>
 8007550:	6873      	ldr	r3, [r6, #4]
 8007552:	4a54      	ldr	r2, [pc, #336]	; (80076a4 <__strftime+0x7c8>)
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	68b3      	ldr	r3, [r6, #8]
 8007558:	1b29      	subs	r1, r5, r4
 800755a:	1938      	adds	r0, r7, r4
 800755c:	f001 fbd6 	bl	8008d0c <sniprintf>
 8007560:	e679      	b.n	8007256 <__strftime+0x37a>
 8007562:	6a33      	ldr	r3, [r6, #32]
 8007564:	2b00      	cmp	r3, #0
 8007566:	db7b      	blt.n	8007660 <__strftime+0x784>
 8007568:	f000 fb16 	bl	8007b98 <__tz_lock>
 800756c:	9b04      	ldr	r3, [sp, #16]
 800756e:	b90b      	cbnz	r3, 8007574 <__strftime+0x698>
 8007570:	f000 fb1e 	bl	8007bb0 <_tzset_unlocked>
 8007574:	f000 fe22 	bl	80081bc <__gettzinfo>
 8007578:	6a33      	ldr	r3, [r6, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	bfcc      	ite	gt
 800757e:	2350      	movgt	r3, #80	; 0x50
 8007580:	2328      	movle	r3, #40	; 0x28
 8007582:	58c3      	ldr	r3, [r0, r3]
 8007584:	f1c3 0900 	rsb	r9, r3, #0
 8007588:	f000 fb0c 	bl	8007ba4 <__tz_unlock>
 800758c:	2301      	movs	r3, #1
 800758e:	9304      	str	r3, [sp, #16]
 8007590:	f8d6 c014 	ldr.w	ip, [r6, #20]
 8007594:	eba5 0e04 	sub.w	lr, r5, r4
 8007598:	4662      	mov	r2, ip
 800759a:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 800759e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80075a2:	9102      	str	r1, [sp, #8]
 80075a4:	f143 31ff 	adc.w	r1, r3, #4294967295
 80075a8:	9103      	str	r1, [sp, #12]
 80075aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f171 0100 	sbcs.w	r1, r1, #0
 80075b4:	eb07 0804 	add.w	r8, r7, r4
 80075b8:	da05      	bge.n	80075c6 <__strftime+0x6ea>
 80075ba:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80075be:	f143 33ff 	adc.w	r3, r3, #4294967295
 80075c2:	9102      	str	r1, [sp, #8]
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	9b02      	ldr	r3, [sp, #8]
 80075c8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80075cc:	0898      	lsrs	r0, r3, #2
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80075d4:	1099      	asrs	r1, r3, #2
 80075d6:	2364      	movs	r3, #100	; 0x64
 80075d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80075dc:	1ac0      	subs	r0, r0, r3
 80075de:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80075e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80075e6:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80075ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80075ee:	18c0      	adds	r0, r0, r3
 80075f0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80075f4:	f240 136d 	movw	r3, #365	; 0x16d
 80075f8:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80075fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8007600:	eb10 000c 	adds.w	r0, r0, ip
 8007604:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 8007608:	f04f 0c18 	mov.w	ip, #24
 800760c:	69f3      	ldr	r3, [r6, #28]
 800760e:	18c0      	adds	r0, r0, r3
 8007610:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8007614:	fba0 230c 	umull	r2, r3, r0, ip
 8007618:	fb0c 3301 	mla	r3, ip, r1, r3
 800761c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8007620:	68b1      	ldr	r1, [r6, #8]
 8007622:	1852      	adds	r2, r2, r1
 8007624:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 8007628:	fba2 010c 	umull	r0, r1, r2, ip
 800762c:	fb0c 1103 	mla	r1, ip, r3, r1
 8007630:	6873      	ldr	r3, [r6, #4]
 8007632:	18c0      	adds	r0, r0, r3
 8007634:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8007638:	fba0 230c 	umull	r2, r3, r0, ip
 800763c:	fb0c 3301 	mla	r3, ip, r1, r3
 8007640:	6831      	ldr	r1, [r6, #0]
 8007642:	4640      	mov	r0, r8
 8007644:	1852      	adds	r2, r2, r1
 8007646:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800764a:	ebb2 0209 	subs.w	r2, r2, r9
 800764e:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 8007652:	e9cd 2300 	strd	r2, r3, [sp]
 8007656:	4671      	mov	r1, lr
 8007658:	4a13      	ldr	r2, [pc, #76]	; (80076a8 <__strftime+0x7cc>)
 800765a:	f001 fb57 	bl	8008d0c <sniprintf>
 800765e:	e5fa      	b.n	8007256 <__strftime+0x37a>
 8007660:	f04f 0900 	mov.w	r9, #0
 8007664:	e794      	b.n	8007590 <__strftime+0x6b4>
 8007666:	6833      	ldr	r3, [r6, #0]
 8007668:	e664      	b.n	8007334 <__strftime+0x458>
 800766a:	1e6b      	subs	r3, r5, #1
 800766c:	42a3      	cmp	r3, r4
 800766e:	f67f ac67 	bls.w	8006f40 <__strftime+0x64>
 8007672:	2309      	movs	r3, #9
 8007674:	e741      	b.n	80074fa <__strftime+0x61e>
 8007676:	6833      	ldr	r3, [r6, #0]
 8007678:	4a0c      	ldr	r2, [pc, #48]	; (80076ac <__strftime+0x7d0>)
 800767a:	9301      	str	r3, [sp, #4]
 800767c:	6873      	ldr	r3, [r6, #4]
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	68b3      	ldr	r3, [r6, #8]
 8007682:	e5d9      	b.n	8007238 <__strftime+0x35c>
 8007684:	fffff894 	.word	0xfffff894
 8007688:	fffff895 	.word	0xfffff895
 800768c:	08009e30 	.word	0x08009e30
 8007690:	08009e11 	.word	0x08009e11
 8007694:	08009e1f 	.word	0x08009e1f
 8007698:	08009e34 	.word	0x08009e34
 800769c:	08009f84 	.word	0x08009f84
 80076a0:	0800a0f9 	.word	0x0800a0f9
 80076a4:	08009e43 	.word	0x08009e43
 80076a8:	08009e39 	.word	0x08009e39
 80076ac:	08009e3e 	.word	0x08009e3e
 80076b0:	1e6b      	subs	r3, r5, #1
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	f67f ac44 	bls.w	8006f40 <__strftime+0x64>
 80076b8:	69b3      	ldr	r3, [r6, #24]
 80076ba:	193a      	adds	r2, r7, r4
 80076bc:	3401      	adds	r4, #1
 80076be:	b913      	cbnz	r3, 80076c6 <__strftime+0x7ea>
 80076c0:	2337      	movs	r3, #55	; 0x37
 80076c2:	7013      	strb	r3, [r2, #0]
 80076c4:	e50e      	b.n	80070e4 <__strftime+0x208>
 80076c6:	3330      	adds	r3, #48	; 0x30
 80076c8:	e7fb      	b.n	80076c2 <__strftime+0x7e6>
 80076ca:	69f3      	ldr	r3, [r6, #28]
 80076cc:	69b2      	ldr	r2, [r6, #24]
 80076ce:	3307      	adds	r3, #7
 80076d0:	1a9b      	subs	r3, r3, r2
 80076d2:	2207      	movs	r2, #7
 80076d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80076d8:	e62c      	b.n	8007334 <__strftime+0x458>
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff fb9c 	bl	8006e18 <iso_year_adjust>
 80076e0:	69b2      	ldr	r2, [r6, #24]
 80076e2:	b132      	cbz	r2, 80076f2 <__strftime+0x816>
 80076e4:	3a01      	subs	r2, #1
 80076e6:	2800      	cmp	r0, #0
 80076e8:	dc27      	bgt.n	800773a <__strftime+0x85e>
 80076ea:	69f3      	ldr	r3, [r6, #28]
 80076ec:	d103      	bne.n	80076f6 <__strftime+0x81a>
 80076ee:	330a      	adds	r3, #10
 80076f0:	e7ee      	b.n	80076d0 <__strftime+0x7f4>
 80076f2:	2206      	movs	r2, #6
 80076f4:	e7f7      	b.n	80076e6 <__strftime+0x80a>
 80076f6:	6970      	ldr	r0, [r6, #20]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f240 726b 	movw	r2, #1899	; 0x76b
 8007700:	bfa8      	it	ge
 8007702:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8007706:	4410      	add	r0, r2
 8007708:	0782      	lsls	r2, r0, #30
 800770a:	d105      	bne.n	8007718 <__strftime+0x83c>
 800770c:	2264      	movs	r2, #100	; 0x64
 800770e:	fb90 f1f2 	sdiv	r1, r0, r2
 8007712:	fb02 0111 	mls	r1, r2, r1, r0
 8007716:	b971      	cbnz	r1, 8007736 <__strftime+0x85a>
 8007718:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800771c:	fb90 f2f1 	sdiv	r2, r0, r1
 8007720:	fb01 0212 	mls	r2, r1, r2, r0
 8007724:	fab2 f282 	clz	r2, r2
 8007728:	0952      	lsrs	r2, r2, #5
 800772a:	1a9a      	subs	r2, r3, r2
 800772c:	2a05      	cmp	r2, #5
 800772e:	bfb4      	ite	lt
 8007730:	2335      	movlt	r3, #53	; 0x35
 8007732:	2334      	movge	r3, #52	; 0x34
 8007734:	e5fe      	b.n	8007334 <__strftime+0x458>
 8007736:	2201      	movs	r2, #1
 8007738:	e7f7      	b.n	800772a <__strftime+0x84e>
 800773a:	2301      	movs	r3, #1
 800773c:	e5fa      	b.n	8007334 <__strftime+0x458>
 800773e:	1e6b      	subs	r3, r5, #1
 8007740:	42a3      	cmp	r3, r4
 8007742:	f67f abfd 	bls.w	8006f40 <__strftime+0x64>
 8007746:	69b3      	ldr	r3, [r6, #24]
 8007748:	3330      	adds	r3, #48	; 0x30
 800774a:	e6d6      	b.n	80074fa <__strftime+0x61e>
 800774c:	69b3      	ldr	r3, [r6, #24]
 800774e:	b13b      	cbz	r3, 8007760 <__strftime+0x884>
 8007750:	3b01      	subs	r3, #1
 8007752:	69f2      	ldr	r2, [r6, #28]
 8007754:	3207      	adds	r2, #7
 8007756:	1ad2      	subs	r2, r2, r3
 8007758:	2307      	movs	r3, #7
 800775a:	fb92 f3f3 	sdiv	r3, r2, r3
 800775e:	e5e9      	b.n	8007334 <__strftime+0x458>
 8007760:	2306      	movs	r3, #6
 8007762:	e7f6      	b.n	8007752 <__strftime+0x876>
 8007764:	6970      	ldr	r0, [r6, #20]
 8007766:	2800      	cmp	r0, #0
 8007768:	db05      	blt.n	8007776 <__strftime+0x89a>
 800776a:	2264      	movs	r2, #100	; 0x64
 800776c:	fb90 f3f2 	sdiv	r3, r0, r2
 8007770:	fb03 0312 	mls	r3, r3, r2, r0
 8007774:	e5de      	b.n	8007334 <__strftime+0x458>
 8007776:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800777a:	f000 fc87 	bl	800808c <abs>
 800777e:	e7f4      	b.n	800776a <__strftime+0x88e>
 8007780:	6973      	ldr	r3, [r6, #20]
 8007782:	4a4d      	ldr	r2, [pc, #308]	; (80078b8 <__strftime+0x9dc>)
 8007784:	4293      	cmp	r3, r2
 8007786:	da0c      	bge.n	80077a2 <__strftime+0x8c6>
 8007788:	212d      	movs	r1, #45	; 0x2d
 800778a:	eba2 0b03 	sub.w	fp, r2, r3
 800778e:	f88d 1020 	strb.w	r1, [sp, #32]
 8007792:	f1b8 0f00 	cmp.w	r8, #0
 8007796:	d001      	beq.n	800779c <__strftime+0x8c0>
 8007798:	f108 38ff 	add.w	r8, r8, #4294967295
 800779c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80077a0:	e00c      	b.n	80077bc <__strftime+0x8e0>
 80077a2:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80077a6:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80077aa:	d106      	bne.n	80077ba <__strftime+0x8de>
 80077ac:	f242 730f 	movw	r3, #9999	; 0x270f
 80077b0:	459b      	cmp	fp, r3
 80077b2:	d902      	bls.n	80077ba <__strftime+0x8de>
 80077b4:	f88d 9020 	strb.w	r9, [sp, #32]
 80077b8:	e7eb      	b.n	8007792 <__strftime+0x8b6>
 80077ba:	ab08      	add	r3, sp, #32
 80077bc:	2225      	movs	r2, #37	; 0x25
 80077be:	701a      	strb	r2, [r3, #0]
 80077c0:	f1b9 0f00 	cmp.w	r9, #0
 80077c4:	d106      	bne.n	80077d4 <__strftime+0x8f8>
 80077c6:	1c58      	adds	r0, r3, #1
 80077c8:	493c      	ldr	r1, [pc, #240]	; (80078bc <__strftime+0x9e0>)
 80077ca:	f001 fafd 	bl	8008dc8 <strcpy>
 80077ce:	f8cd b000 	str.w	fp, [sp]
 80077d2:	e665      	b.n	80074a0 <__strftime+0x5c4>
 80077d4:	2230      	movs	r2, #48	; 0x30
 80077d6:	1c98      	adds	r0, r3, #2
 80077d8:	705a      	strb	r2, [r3, #1]
 80077da:	e7f5      	b.n	80077c8 <__strftime+0x8ec>
 80077dc:	6a33      	ldr	r3, [r6, #32]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f6ff ac80 	blt.w	80070e4 <__strftime+0x208>
 80077e4:	f000 f9d8 	bl	8007b98 <__tz_lock>
 80077e8:	9b04      	ldr	r3, [sp, #16]
 80077ea:	b90b      	cbnz	r3, 80077f0 <__strftime+0x914>
 80077ec:	f000 f9e0 	bl	8007bb0 <_tzset_unlocked>
 80077f0:	f000 fce4 	bl	80081bc <__gettzinfo>
 80077f4:	6a33      	ldr	r3, [r6, #32]
 80077f6:	eb07 0904 	add.w	r9, r7, r4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfcc      	ite	gt
 80077fe:	2350      	movgt	r3, #80	; 0x50
 8007800:	2328      	movle	r3, #40	; 0x28
 8007802:	58c3      	ldr	r3, [r0, r3]
 8007804:	eba5 0b04 	sub.w	fp, r5, r4
 8007808:	f1c3 0800 	rsb	r8, r3, #0
 800780c:	f000 f9ca 	bl	8007ba4 <__tz_unlock>
 8007810:	233c      	movs	r3, #60	; 0x3c
 8007812:	fb98 f0f3 	sdiv	r0, r8, r3
 8007816:	f000 fd85 	bl	8008324 <labs>
 800781a:	233c      	movs	r3, #60	; 0x3c
 800781c:	fb90 f2f3 	sdiv	r2, r0, r3
 8007820:	fb02 0013 	mls	r0, r2, r3, r0
 8007824:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007828:	9000      	str	r0, [sp, #0]
 800782a:	fb98 f3f3 	sdiv	r3, r8, r3
 800782e:	4659      	mov	r1, fp
 8007830:	4648      	mov	r0, r9
 8007832:	4a23      	ldr	r2, [pc, #140]	; (80078c0 <__strftime+0x9e4>)
 8007834:	f001 fa6a 	bl	8008d0c <sniprintf>
 8007838:	2800      	cmp	r0, #0
 800783a:	f6ff ab81 	blt.w	8006f40 <__strftime+0x64>
 800783e:	4404      	add	r4, r0
 8007840:	42a5      	cmp	r5, r4
 8007842:	f67f ab7d 	bls.w	8006f40 <__strftime+0x64>
 8007846:	2301      	movs	r3, #1
 8007848:	9304      	str	r3, [sp, #16]
 800784a:	e44b      	b.n	80070e4 <__strftime+0x208>
 800784c:	6a33      	ldr	r3, [r6, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f6ff ac48 	blt.w	80070e4 <__strftime+0x208>
 8007854:	f000 f9a0 	bl	8007b98 <__tz_lock>
 8007858:	9b04      	ldr	r3, [sp, #16]
 800785a:	b90b      	cbnz	r3, 8007860 <__strftime+0x984>
 800785c:	f000 f9a8 	bl	8007bb0 <_tzset_unlocked>
 8007860:	6a33      	ldr	r3, [r6, #32]
 8007862:	4a18      	ldr	r2, [pc, #96]	; (80078c4 <__strftime+0x9e8>)
 8007864:	2b00      	cmp	r3, #0
 8007866:	bfd4      	ite	le
 8007868:	2300      	movle	r3, #0
 800786a:	2301      	movgt	r3, #1
 800786c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8007870:	4640      	mov	r0, r8
 8007872:	f7f8 fcd7 	bl	8000224 <strlen>
 8007876:	f108 38ff 	add.w	r8, r8, #4294967295
 800787a:	4420      	add	r0, r4
 800787c:	1e6b      	subs	r3, r5, #1
 800787e:	42a0      	cmp	r0, r4
 8007880:	d102      	bne.n	8007888 <__strftime+0x9ac>
 8007882:	f000 f98f 	bl	8007ba4 <__tz_unlock>
 8007886:	e7de      	b.n	8007846 <__strftime+0x96a>
 8007888:	42a3      	cmp	r3, r4
 800788a:	d904      	bls.n	8007896 <__strftime+0x9ba>
 800788c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8007890:	553a      	strb	r2, [r7, r4]
 8007892:	3401      	adds	r4, #1
 8007894:	e7f3      	b.n	800787e <__strftime+0x9a2>
 8007896:	f000 f985 	bl	8007ba4 <__tz_unlock>
 800789a:	f7ff bb51 	b.w	8006f40 <__strftime+0x64>
 800789e:	1e6b      	subs	r3, r5, #1
 80078a0:	42a3      	cmp	r3, r4
 80078a2:	f67f ab4d 	bls.w	8006f40 <__strftime+0x64>
 80078a6:	2325      	movs	r3, #37	; 0x25
 80078a8:	e627      	b.n	80074fa <__strftime+0x61e>
 80078aa:	b10d      	cbz	r5, 80078b0 <__strftime+0x9d4>
 80078ac:	2300      	movs	r3, #0
 80078ae:	553b      	strb	r3, [r7, r4]
 80078b0:	4620      	mov	r0, r4
 80078b2:	b011      	add	sp, #68	; 0x44
 80078b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b8:	fffff894 	.word	0xfffff894
 80078bc:	08009e30 	.word	0x08009e30
 80078c0:	08009e4d 	.word	0x08009e4d
 80078c4:	200000a8 	.word	0x200000a8

080078c8 <strftime>:
 80078c8:	b513      	push	{r0, r1, r4, lr}
 80078ca:	4c03      	ldr	r4, [pc, #12]	; (80078d8 <strftime+0x10>)
 80078cc:	9400      	str	r4, [sp, #0]
 80078ce:	f7ff fb05 	bl	8006edc <__strftime>
 80078d2:	b002      	add	sp, #8
 80078d4:	bd10      	pop	{r4, pc}
 80078d6:	bf00      	nop
 80078d8:	20000108 	.word	0x20000108

080078dc <strncpy>:
 80078dc:	4603      	mov	r3, r0
 80078de:	b510      	push	{r4, lr}
 80078e0:	3901      	subs	r1, #1
 80078e2:	b132      	cbz	r2, 80078f2 <strncpy+0x16>
 80078e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80078e8:	3a01      	subs	r2, #1
 80078ea:	f803 4b01 	strb.w	r4, [r3], #1
 80078ee:	2c00      	cmp	r4, #0
 80078f0:	d1f7      	bne.n	80078e2 <strncpy+0x6>
 80078f2:	2100      	movs	r1, #0
 80078f4:	441a      	add	r2, r3
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d100      	bne.n	80078fc <strncpy+0x20>
 80078fa:	bd10      	pop	{r4, pc}
 80078fc:	f803 1b01 	strb.w	r1, [r3], #1
 8007900:	e7f9      	b.n	80078f6 <strncpy+0x1a>
	...

08007904 <_strtoul_l.isra.0>:
 8007904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007908:	468c      	mov	ip, r1
 800790a:	4686      	mov	lr, r0
 800790c:	4e3a      	ldr	r6, [pc, #232]	; (80079f8 <_strtoul_l.isra.0+0xf4>)
 800790e:	4660      	mov	r0, ip
 8007910:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007914:	5da5      	ldrb	r5, [r4, r6]
 8007916:	f015 0508 	ands.w	r5, r5, #8
 800791a:	d1f8      	bne.n	800790e <_strtoul_l.isra.0+0xa>
 800791c:	2c2d      	cmp	r4, #45	; 0x2d
 800791e:	d134      	bne.n	800798a <_strtoul_l.isra.0+0x86>
 8007920:	f04f 0801 	mov.w	r8, #1
 8007924:	f89c 4000 	ldrb.w	r4, [ip]
 8007928:	f100 0c02 	add.w	ip, r0, #2
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05e      	beq.n	80079ee <_strtoul_l.isra.0+0xea>
 8007930:	2b10      	cmp	r3, #16
 8007932:	d10c      	bne.n	800794e <_strtoul_l.isra.0+0x4a>
 8007934:	2c30      	cmp	r4, #48	; 0x30
 8007936:	d10a      	bne.n	800794e <_strtoul_l.isra.0+0x4a>
 8007938:	f89c 0000 	ldrb.w	r0, [ip]
 800793c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007940:	2858      	cmp	r0, #88	; 0x58
 8007942:	d14f      	bne.n	80079e4 <_strtoul_l.isra.0+0xe0>
 8007944:	2310      	movs	r3, #16
 8007946:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800794a:	f10c 0c02 	add.w	ip, ip, #2
 800794e:	f04f 37ff 	mov.w	r7, #4294967295
 8007952:	fbb7 f7f3 	udiv	r7, r7, r3
 8007956:	2500      	movs	r5, #0
 8007958:	fb03 f907 	mul.w	r9, r3, r7
 800795c:	4628      	mov	r0, r5
 800795e:	ea6f 0909 	mvn.w	r9, r9
 8007962:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007966:	2e09      	cmp	r6, #9
 8007968:	d818      	bhi.n	800799c <_strtoul_l.isra.0+0x98>
 800796a:	4634      	mov	r4, r6
 800796c:	42a3      	cmp	r3, r4
 800796e:	dd24      	ble.n	80079ba <_strtoul_l.isra.0+0xb6>
 8007970:	2d00      	cmp	r5, #0
 8007972:	db1f      	blt.n	80079b4 <_strtoul_l.isra.0+0xb0>
 8007974:	4287      	cmp	r7, r0
 8007976:	d31d      	bcc.n	80079b4 <_strtoul_l.isra.0+0xb0>
 8007978:	d101      	bne.n	800797e <_strtoul_l.isra.0+0x7a>
 800797a:	45a1      	cmp	r9, r4
 800797c:	db1a      	blt.n	80079b4 <_strtoul_l.isra.0+0xb0>
 800797e:	2501      	movs	r5, #1
 8007980:	fb00 4003 	mla	r0, r0, r3, r4
 8007984:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007988:	e7eb      	b.n	8007962 <_strtoul_l.isra.0+0x5e>
 800798a:	2c2b      	cmp	r4, #43	; 0x2b
 800798c:	bf08      	it	eq
 800798e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007992:	46a8      	mov	r8, r5
 8007994:	bf08      	it	eq
 8007996:	f100 0c02 	addeq.w	ip, r0, #2
 800799a:	e7c7      	b.n	800792c <_strtoul_l.isra.0+0x28>
 800799c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80079a0:	2e19      	cmp	r6, #25
 80079a2:	d801      	bhi.n	80079a8 <_strtoul_l.isra.0+0xa4>
 80079a4:	3c37      	subs	r4, #55	; 0x37
 80079a6:	e7e1      	b.n	800796c <_strtoul_l.isra.0+0x68>
 80079a8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80079ac:	2e19      	cmp	r6, #25
 80079ae:	d804      	bhi.n	80079ba <_strtoul_l.isra.0+0xb6>
 80079b0:	3c57      	subs	r4, #87	; 0x57
 80079b2:	e7db      	b.n	800796c <_strtoul_l.isra.0+0x68>
 80079b4:	f04f 35ff 	mov.w	r5, #4294967295
 80079b8:	e7e4      	b.n	8007984 <_strtoul_l.isra.0+0x80>
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	da07      	bge.n	80079ce <_strtoul_l.isra.0+0xca>
 80079be:	2322      	movs	r3, #34	; 0x22
 80079c0:	f04f 30ff 	mov.w	r0, #4294967295
 80079c4:	f8ce 3000 	str.w	r3, [lr]
 80079c8:	b942      	cbnz	r2, 80079dc <_strtoul_l.isra.0+0xd8>
 80079ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079ce:	f1b8 0f00 	cmp.w	r8, #0
 80079d2:	d000      	beq.n	80079d6 <_strtoul_l.isra.0+0xd2>
 80079d4:	4240      	negs	r0, r0
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	d0f7      	beq.n	80079ca <_strtoul_l.isra.0+0xc6>
 80079da:	b10d      	cbz	r5, 80079e0 <_strtoul_l.isra.0+0xdc>
 80079dc:	f10c 31ff 	add.w	r1, ip, #4294967295
 80079e0:	6011      	str	r1, [r2, #0]
 80079e2:	e7f2      	b.n	80079ca <_strtoul_l.isra.0+0xc6>
 80079e4:	2430      	movs	r4, #48	; 0x30
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1b1      	bne.n	800794e <_strtoul_l.isra.0+0x4a>
 80079ea:	2308      	movs	r3, #8
 80079ec:	e7af      	b.n	800794e <_strtoul_l.isra.0+0x4a>
 80079ee:	2c30      	cmp	r4, #48	; 0x30
 80079f0:	d0a2      	beq.n	8007938 <_strtoul_l.isra.0+0x34>
 80079f2:	230a      	movs	r3, #10
 80079f4:	e7ab      	b.n	800794e <_strtoul_l.isra.0+0x4a>
 80079f6:	bf00      	nop
 80079f8:	0800a0f9 	.word	0x0800a0f9

080079fc <_strtoul_r>:
 80079fc:	f7ff bf82 	b.w	8007904 <_strtoul_l.isra.0>

08007a00 <strtoul>:
 8007a00:	4613      	mov	r3, r2
 8007a02:	460a      	mov	r2, r1
 8007a04:	4601      	mov	r1, r0
 8007a06:	4802      	ldr	r0, [pc, #8]	; (8007a10 <strtoul+0x10>)
 8007a08:	6800      	ldr	r0, [r0, #0]
 8007a0a:	f7ff bf7b 	b.w	8007904 <_strtoul_l.isra.0>
 8007a0e:	bf00      	nop
 8007a10:	20000044 	.word	0x20000044

08007a14 <time>:
 8007a14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <time+0x30>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4669      	mov	r1, sp
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	f000 fbba 	bl	8008198 <_gettimeofday_r>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	da05      	bge.n	8007a34 <time+0x20>
 8007a28:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a30:	e9cd 2300 	strd	r2, r3, [sp]
 8007a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a38:	b10c      	cbz	r4, 8007a3e <time+0x2a>
 8007a3a:	e9c4 0100 	strd	r0, r1, [r4]
 8007a3e:	b004      	add	sp, #16
 8007a40:	bd10      	pop	{r4, pc}
 8007a42:	bf00      	nop
 8007a44:	20000044 	.word	0x20000044

08007a48 <__tzcalc_limits>:
 8007a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	f000 fbb5 	bl	80081bc <__gettzinfo>
 8007a52:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8007a56:	4598      	cmp	r8, r3
 8007a58:	f340 8097 	ble.w	8007b8a <__tzcalc_limits+0x142>
 8007a5c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8007a60:	f240 126d 	movw	r2, #365	; 0x16d
 8007a64:	4443      	add	r3, r8
 8007a66:	109b      	asrs	r3, r3, #2
 8007a68:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8007a6c:	fb02 3505 	mla	r5, r2, r5, r3
 8007a70:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8007a74:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8007a78:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a7c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8007a80:	441d      	add	r5, r3
 8007a82:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007a86:	4442      	add	r2, r8
 8007a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a8c:	fb98 f7f3 	sdiv	r7, r8, r3
 8007a90:	4415      	add	r5, r2
 8007a92:	2264      	movs	r2, #100	; 0x64
 8007a94:	fb03 8717 	mls	r7, r3, r7, r8
 8007a98:	fb98 f6f2 	sdiv	r6, r8, r2
 8007a9c:	fab7 fc87 	clz	ip, r7
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	f04f 0e07 	mov.w	lr, #7
 8007aa6:	fb02 8616 	mls	r6, r2, r6, r8
 8007aaa:	f008 0303 	and.w	r3, r8, #3
 8007aae:	f8c0 8004 	str.w	r8, [r0, #4]
 8007ab2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8007ab6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	7a22      	ldrb	r2, [r4, #8]
 8007abe:	6963      	ldr	r3, [r4, #20]
 8007ac0:	2a4a      	cmp	r2, #74	; 0x4a
 8007ac2:	d128      	bne.n	8007b16 <__tzcalc_limits+0xce>
 8007ac4:	9900      	ldr	r1, [sp, #0]
 8007ac6:	18ea      	adds	r2, r5, r3
 8007ac8:	b901      	cbnz	r1, 8007acc <__tzcalc_limits+0x84>
 8007aca:	b906      	cbnz	r6, 8007ace <__tzcalc_limits+0x86>
 8007acc:	bb0f      	cbnz	r7, 8007b12 <__tzcalc_limits+0xca>
 8007ace:	2b3b      	cmp	r3, #59	; 0x3b
 8007ad0:	bfd4      	ite	le
 8007ad2:	2300      	movle	r3, #0
 8007ad4:	2301      	movgt	r3, #1
 8007ad6:	4413      	add	r3, r2
 8007ad8:	1e5a      	subs	r2, r3, #1
 8007ada:	69a3      	ldr	r3, [r4, #24]
 8007adc:	492c      	ldr	r1, [pc, #176]	; (8007b90 <__tzcalc_limits+0x148>)
 8007ade:	3428      	adds	r4, #40	; 0x28
 8007ae0:	fb01 3202 	mla	r2, r1, r2, r3
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	461a      	mov	r2, r3
 8007aea:	17db      	asrs	r3, r3, #31
 8007aec:	e944 2302 	strd	r2, r3, [r4, #-8]
 8007af0:	45a3      	cmp	fp, r4
 8007af2:	d1e3      	bne.n	8007abc <__tzcalc_limits+0x74>
 8007af4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8007af8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8007afc:	4294      	cmp	r4, r2
 8007afe:	eb75 0303 	sbcs.w	r3, r5, r3
 8007b02:	bfb4      	ite	lt
 8007b04:	2301      	movlt	r3, #1
 8007b06:	2300      	movge	r3, #0
 8007b08:	6003      	str	r3, [r0, #0]
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	b003      	add	sp, #12
 8007b0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b12:	2300      	movs	r3, #0
 8007b14:	e7df      	b.n	8007ad6 <__tzcalc_limits+0x8e>
 8007b16:	2a44      	cmp	r2, #68	; 0x44
 8007b18:	d101      	bne.n	8007b1e <__tzcalc_limits+0xd6>
 8007b1a:	18ea      	adds	r2, r5, r3
 8007b1c:	e7dd      	b.n	8007ada <__tzcalc_limits+0x92>
 8007b1e:	9a00      	ldr	r2, [sp, #0]
 8007b20:	bb6a      	cbnz	r2, 8007b7e <__tzcalc_limits+0x136>
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	bf0c      	ite	eq
 8007b26:	46e0      	moveq	r8, ip
 8007b28:	f04f 0801 	movne.w	r8, #1
 8007b2c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8007b30:	68e2      	ldr	r2, [r4, #12]
 8007b32:	f04f 0900 	mov.w	r9, #0
 8007b36:	9201      	str	r2, [sp, #4]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4916      	ldr	r1, [pc, #88]	; (8007b94 <__tzcalc_limits+0x14c>)
 8007b3c:	fb0a 1808 	mla	r8, sl, r8, r1
 8007b40:	f1a8 0804 	sub.w	r8, r8, #4
 8007b44:	9901      	ldr	r1, [sp, #4]
 8007b46:	f109 0901 	add.w	r9, r9, #1
 8007b4a:	4549      	cmp	r1, r9
 8007b4c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8007b50:	dc17      	bgt.n	8007b82 <__tzcalc_limits+0x13a>
 8007b52:	f102 0804 	add.w	r8, r2, #4
 8007b56:	fb98 f9fe 	sdiv	r9, r8, lr
 8007b5a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8007b5e:	eba8 0909 	sub.w	r9, r8, r9
 8007b62:	ebb3 0909 	subs.w	r9, r3, r9
 8007b66:	6923      	ldr	r3, [r4, #16]
 8007b68:	bf48      	it	mi
 8007b6a:	f109 0907 	addmi.w	r9, r9, #7
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8007b74:	444b      	add	r3, r9
 8007b76:	4553      	cmp	r3, sl
 8007b78:	da05      	bge.n	8007b86 <__tzcalc_limits+0x13e>
 8007b7a:	441a      	add	r2, r3
 8007b7c:	e7ad      	b.n	8007ada <__tzcalc_limits+0x92>
 8007b7e:	46e0      	mov	r8, ip
 8007b80:	e7d4      	b.n	8007b2c <__tzcalc_limits+0xe4>
 8007b82:	4452      	add	r2, sl
 8007b84:	e7de      	b.n	8007b44 <__tzcalc_limits+0xfc>
 8007b86:	3b07      	subs	r3, #7
 8007b88:	e7f5      	b.n	8007b76 <__tzcalc_limits+0x12e>
 8007b8a:	2000      	movs	r0, #0
 8007b8c:	e7be      	b.n	8007b0c <__tzcalc_limits+0xc4>
 8007b8e:	bf00      	nop
 8007b90:	00015180 	.word	0x00015180
 8007b94:	08009da0 	.word	0x08009da0

08007b98 <__tz_lock>:
 8007b98:	4801      	ldr	r0, [pc, #4]	; (8007ba0 <__tz_lock+0x8>)
 8007b9a:	f7fe bf76 	b.w	8006a8a <__retarget_lock_acquire>
 8007b9e:	bf00      	nop
 8007ba0:	200006eb 	.word	0x200006eb

08007ba4 <__tz_unlock>:
 8007ba4:	4801      	ldr	r0, [pc, #4]	; (8007bac <__tz_unlock+0x8>)
 8007ba6:	f7fe bf72 	b.w	8006a8e <__retarget_lock_release>
 8007baa:	bf00      	nop
 8007bac:	200006eb 	.word	0x200006eb

08007bb0 <_tzset_unlocked>:
 8007bb0:	4b01      	ldr	r3, [pc, #4]	; (8007bb8 <_tzset_unlocked+0x8>)
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	f000 b802 	b.w	8007bbc <_tzset_unlocked_r>
 8007bb8:	20000044 	.word	0x20000044

08007bbc <_tzset_unlocked_r>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	b08d      	sub	sp, #52	; 0x34
 8007bc2:	4607      	mov	r7, r0
 8007bc4:	f000 fafa 	bl	80081bc <__gettzinfo>
 8007bc8:	49b0      	ldr	r1, [pc, #704]	; (8007e8c <_tzset_unlocked_r+0x2d0>)
 8007bca:	4605      	mov	r5, r0
 8007bcc:	4638      	mov	r0, r7
 8007bce:	f000 fadb 	bl	8008188 <_getenv_r>
 8007bd2:	4eaf      	ldr	r6, [pc, #700]	; (8007e90 <_tzset_unlocked_r+0x2d4>)
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	b970      	cbnz	r0, 8007bf6 <_tzset_unlocked_r+0x3a>
 8007bd8:	4bae      	ldr	r3, [pc, #696]	; (8007e94 <_tzset_unlocked_r+0x2d8>)
 8007bda:	4aaf      	ldr	r2, [pc, #700]	; (8007e98 <_tzset_unlocked_r+0x2dc>)
 8007bdc:	6018      	str	r0, [r3, #0]
 8007bde:	4baf      	ldr	r3, [pc, #700]	; (8007e9c <_tzset_unlocked_r+0x2e0>)
 8007be0:	6018      	str	r0, [r3, #0]
 8007be2:	4baf      	ldr	r3, [pc, #700]	; (8007ea0 <_tzset_unlocked_r+0x2e4>)
 8007be4:	6830      	ldr	r0, [r6, #0]
 8007be6:	e9c3 2200 	strd	r2, r2, [r3]
 8007bea:	f7fe ff5b 	bl	8006aa4 <free>
 8007bee:	6034      	str	r4, [r6, #0]
 8007bf0:	b00d      	add	sp, #52	; 0x34
 8007bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf6:	6831      	ldr	r1, [r6, #0]
 8007bf8:	2900      	cmp	r1, #0
 8007bfa:	d15f      	bne.n	8007cbc <_tzset_unlocked_r+0x100>
 8007bfc:	6830      	ldr	r0, [r6, #0]
 8007bfe:	f7fe ff51 	bl	8006aa4 <free>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f7f8 fb0e 	bl	8000224 <strlen>
 8007c08:	1c41      	adds	r1, r0, #1
 8007c0a:	4638      	mov	r0, r7
 8007c0c:	f7fe ffa6 	bl	8006b5c <_malloc_r>
 8007c10:	6030      	str	r0, [r6, #0]
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d157      	bne.n	8007cc6 <_tzset_unlocked_r+0x10a>
 8007c16:	7823      	ldrb	r3, [r4, #0]
 8007c18:	ae0a      	add	r6, sp, #40	; 0x28
 8007c1a:	2b3a      	cmp	r3, #58	; 0x3a
 8007c1c:	bf08      	it	eq
 8007c1e:	3401      	addeq	r4, #1
 8007c20:	4633      	mov	r3, r6
 8007c22:	4620      	mov	r0, r4
 8007c24:	4a9f      	ldr	r2, [pc, #636]	; (8007ea4 <_tzset_unlocked_r+0x2e8>)
 8007c26:	49a0      	ldr	r1, [pc, #640]	; (8007ea8 <_tzset_unlocked_r+0x2ec>)
 8007c28:	f001 f8a4 	bl	8008d74 <siscanf>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	dddf      	ble.n	8007bf0 <_tzset_unlocked_r+0x34>
 8007c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c32:	18e7      	adds	r7, r4, r3
 8007c34:	5ce3      	ldrb	r3, [r4, r3]
 8007c36:	2b2d      	cmp	r3, #45	; 0x2d
 8007c38:	d149      	bne.n	8007cce <_tzset_unlocked_r+0x112>
 8007c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007c3e:	3701      	adds	r7, #1
 8007c40:	f04f 0800 	mov.w	r8, #0
 8007c44:	f10d 0a20 	add.w	sl, sp, #32
 8007c48:	f10d 0b1e 	add.w	fp, sp, #30
 8007c4c:	4633      	mov	r3, r6
 8007c4e:	4638      	mov	r0, r7
 8007c50:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8007c54:	4995      	ldr	r1, [pc, #596]	; (8007eac <_tzset_unlocked_r+0x2f0>)
 8007c56:	9603      	str	r6, [sp, #12]
 8007c58:	f8cd b000 	str.w	fp, [sp]
 8007c5c:	aa07      	add	r2, sp, #28
 8007c5e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8007c62:	f8ad 8020 	strh.w	r8, [sp, #32]
 8007c66:	f001 f885 	bl	8008d74 <siscanf>
 8007c6a:	4540      	cmp	r0, r8
 8007c6c:	ddc0      	ble.n	8007bf0 <_tzset_unlocked_r+0x34>
 8007c6e:	213c      	movs	r1, #60	; 0x3c
 8007c70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007c74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007c78:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8007eb8 <_tzset_unlocked_r+0x2fc>
 8007c7c:	fb01 2203 	mla	r2, r1, r3, r2
 8007c80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007c84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007c88:	fb01 2303 	mla	r3, r1, r3, r2
 8007c8c:	435c      	muls	r4, r3
 8007c8e:	4b85      	ldr	r3, [pc, #532]	; (8007ea4 <_tzset_unlocked_r+0x2e8>)
 8007c90:	62ac      	str	r4, [r5, #40]	; 0x28
 8007c92:	4c83      	ldr	r4, [pc, #524]	; (8007ea0 <_tzset_unlocked_r+0x2e4>)
 8007c94:	464a      	mov	r2, r9
 8007c96:	6023      	str	r3, [r4, #0]
 8007c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c9a:	4983      	ldr	r1, [pc, #524]	; (8007ea8 <_tzset_unlocked_r+0x2ec>)
 8007c9c:	441f      	add	r7, r3
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	4633      	mov	r3, r6
 8007ca2:	f001 f867 	bl	8008d74 <siscanf>
 8007ca6:	4540      	cmp	r0, r8
 8007ca8:	dc17      	bgt.n	8007cda <_tzset_unlocked_r+0x11e>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	4b78      	ldr	r3, [pc, #480]	; (8007e94 <_tzset_unlocked_r+0x2d8>)
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	4b79      	ldr	r3, [pc, #484]	; (8007e9c <_tzset_unlocked_r+0x2e0>)
 8007cb6:	f8c3 8000 	str.w	r8, [r3]
 8007cba:	e799      	b.n	8007bf0 <_tzset_unlocked_r+0x34>
 8007cbc:	f7f8 faba 	bl	8000234 <strcmp>
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	d19b      	bne.n	8007bfc <_tzset_unlocked_r+0x40>
 8007cc4:	e794      	b.n	8007bf0 <_tzset_unlocked_r+0x34>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	f001 f87e 	bl	8008dc8 <strcpy>
 8007ccc:	e7a3      	b.n	8007c16 <_tzset_unlocked_r+0x5a>
 8007cce:	2b2b      	cmp	r3, #43	; 0x2b
 8007cd0:	f04f 0401 	mov.w	r4, #1
 8007cd4:	bf08      	it	eq
 8007cd6:	3701      	addeq	r7, #1
 8007cd8:	e7b2      	b.n	8007c40 <_tzset_unlocked_r+0x84>
 8007cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cdc:	f8c4 9004 	str.w	r9, [r4, #4]
 8007ce0:	18fc      	adds	r4, r7, r3
 8007ce2:	5cfb      	ldrb	r3, [r7, r3]
 8007ce4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ce6:	f040 808c 	bne.w	8007e02 <_tzset_unlocked_r+0x246>
 8007cea:	f04f 37ff 	mov.w	r7, #4294967295
 8007cee:	3401      	adds	r4, #1
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007cf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007cfc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007d00:	930a      	str	r3, [sp, #40]	; 0x28
 8007d02:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007d06:	4633      	mov	r3, r6
 8007d08:	e9cd b600 	strd	fp, r6, [sp]
 8007d0c:	4967      	ldr	r1, [pc, #412]	; (8007eac <_tzset_unlocked_r+0x2f0>)
 8007d0e:	aa07      	add	r2, sp, #28
 8007d10:	f001 f830 	bl	8008d74 <siscanf>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	dc7a      	bgt.n	8007e0e <_tzset_unlocked_r+0x252>
 8007d18:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8007d1a:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8007d1e:	652f      	str	r7, [r5, #80]	; 0x50
 8007d20:	f04f 0900 	mov.w	r9, #0
 8007d24:	462f      	mov	r7, r5
 8007d26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d28:	441c      	add	r4, r3
 8007d2a:	7823      	ldrb	r3, [r4, #0]
 8007d2c:	2b2c      	cmp	r3, #44	; 0x2c
 8007d2e:	bf08      	it	eq
 8007d30:	3401      	addeq	r4, #1
 8007d32:	f894 8000 	ldrb.w	r8, [r4]
 8007d36:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8007d3a:	d17a      	bne.n	8007e32 <_tzset_unlocked_r+0x276>
 8007d3c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8007d40:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8007d44:	ab09      	add	r3, sp, #36	; 0x24
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4633      	mov	r3, r6
 8007d4c:	4958      	ldr	r1, [pc, #352]	; (8007eb0 <_tzset_unlocked_r+0x2f4>)
 8007d4e:	9603      	str	r6, [sp, #12]
 8007d50:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8007d54:	f001 f80e 	bl	8008d74 <siscanf>
 8007d58:	2803      	cmp	r0, #3
 8007d5a:	f47f af49 	bne.w	8007bf0 <_tzset_unlocked_r+0x34>
 8007d5e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8007d62:	1e4b      	subs	r3, r1, #1
 8007d64:	2b0b      	cmp	r3, #11
 8007d66:	f63f af43 	bhi.w	8007bf0 <_tzset_unlocked_r+0x34>
 8007d6a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8007d6e:	1e53      	subs	r3, r2, #1
 8007d70:	2b04      	cmp	r3, #4
 8007d72:	f63f af3d 	bhi.w	8007bf0 <_tzset_unlocked_r+0x34>
 8007d76:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8007d7a:	2b06      	cmp	r3, #6
 8007d7c:	f63f af38 	bhi.w	8007bf0 <_tzset_unlocked_r+0x34>
 8007d80:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8007d84:	f887 8008 	strb.w	r8, [r7, #8]
 8007d88:	617b      	str	r3, [r7, #20]
 8007d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8c:	eb04 0803 	add.w	r8, r4, r3
 8007d90:	2302      	movs	r3, #2
 8007d92:	f8ad 301c 	strh.w	r3, [sp, #28]
 8007d96:	2300      	movs	r3, #0
 8007d98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007d9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8007da0:	930a      	str	r3, [sp, #40]	; 0x28
 8007da2:	f898 3000 	ldrb.w	r3, [r8]
 8007da6:	2b2f      	cmp	r3, #47	; 0x2f
 8007da8:	d109      	bne.n	8007dbe <_tzset_unlocked_r+0x202>
 8007daa:	4633      	mov	r3, r6
 8007dac:	4640      	mov	r0, r8
 8007dae:	e9cd a602 	strd	sl, r6, [sp, #8]
 8007db2:	e9cd b600 	strd	fp, r6, [sp]
 8007db6:	493f      	ldr	r1, [pc, #252]	; (8007eb4 <_tzset_unlocked_r+0x2f8>)
 8007db8:	aa07      	add	r2, sp, #28
 8007dba:	f000 ffdb 	bl	8008d74 <siscanf>
 8007dbe:	213c      	movs	r1, #60	; 0x3c
 8007dc0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007dc4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007dc8:	3728      	adds	r7, #40	; 0x28
 8007dca:	fb01 2203 	mla	r2, r1, r3, r2
 8007dce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007dd2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007dd6:	fb01 2303 	mla	r3, r1, r3, r2
 8007dda:	f847 3c10 	str.w	r3, [r7, #-16]
 8007dde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007de0:	4444      	add	r4, r8
 8007de2:	f1b9 0f00 	cmp.w	r9, #0
 8007de6:	d021      	beq.n	8007e2c <_tzset_unlocked_r+0x270>
 8007de8:	6868      	ldr	r0, [r5, #4]
 8007dea:	f7ff fe2d 	bl	8007a48 <__tzcalc_limits>
 8007dee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007df0:	4b28      	ldr	r3, [pc, #160]	; (8007e94 <_tzset_unlocked_r+0x2d8>)
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007df6:	1a9b      	subs	r3, r3, r2
 8007df8:	bf18      	it	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	4a27      	ldr	r2, [pc, #156]	; (8007e9c <_tzset_unlocked_r+0x2e0>)
 8007dfe:	6013      	str	r3, [r2, #0]
 8007e00:	e6f6      	b.n	8007bf0 <_tzset_unlocked_r+0x34>
 8007e02:	2b2b      	cmp	r3, #43	; 0x2b
 8007e04:	f04f 0701 	mov.w	r7, #1
 8007e08:	bf08      	it	eq
 8007e0a:	3401      	addeq	r4, #1
 8007e0c:	e770      	b.n	8007cf0 <_tzset_unlocked_r+0x134>
 8007e0e:	213c      	movs	r1, #60	; 0x3c
 8007e10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8007e14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8007e18:	fb01 2203 	mla	r2, r1, r3, r2
 8007e1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007e20:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8007e24:	fb01 2303 	mla	r3, r1, r3, r2
 8007e28:	435f      	muls	r7, r3
 8007e2a:	e778      	b.n	8007d1e <_tzset_unlocked_r+0x162>
 8007e2c:	f04f 0901 	mov.w	r9, #1
 8007e30:	e77b      	b.n	8007d2a <_tzset_unlocked_r+0x16e>
 8007e32:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8007e36:	bf0a      	itet	eq
 8007e38:	4643      	moveq	r3, r8
 8007e3a:	2344      	movne	r3, #68	; 0x44
 8007e3c:	3401      	addeq	r4, #1
 8007e3e:	220a      	movs	r2, #10
 8007e40:	4620      	mov	r0, r4
 8007e42:	a90b      	add	r1, sp, #44	; 0x2c
 8007e44:	9305      	str	r3, [sp, #20]
 8007e46:	f7ff fddb 	bl	8007a00 <strtoul>
 8007e4a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8007e4e:	9b05      	ldr	r3, [sp, #20]
 8007e50:	45a0      	cmp	r8, r4
 8007e52:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8007e56:	d114      	bne.n	8007e82 <_tzset_unlocked_r+0x2c6>
 8007e58:	234d      	movs	r3, #77	; 0x4d
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	d107      	bne.n	8007e70 <_tzset_unlocked_r+0x2b4>
 8007e60:	2103      	movs	r1, #3
 8007e62:	722b      	strb	r3, [r5, #8]
 8007e64:	2302      	movs	r3, #2
 8007e66:	f8c5 9014 	str.w	r9, [r5, #20]
 8007e6a:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8007e6e:	e78f      	b.n	8007d90 <_tzset_unlocked_r+0x1d4>
 8007e70:	220b      	movs	r2, #11
 8007e72:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8007e76:	2301      	movs	r3, #1
 8007e78:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	63eb      	str	r3, [r5, #60]	; 0x3c
 8007e80:	e786      	b.n	8007d90 <_tzset_unlocked_r+0x1d4>
 8007e82:	b280      	uxth	r0, r0
 8007e84:	723b      	strb	r3, [r7, #8]
 8007e86:	6178      	str	r0, [r7, #20]
 8007e88:	e782      	b.n	8007d90 <_tzset_unlocked_r+0x1d4>
 8007e8a:	bf00      	nop
 8007e8c:	0800a080 	.word	0x0800a080
 8007e90:	200003a0 	.word	0x200003a0
 8007e94:	200003a8 	.word	0x200003a8
 8007e98:	0800a083 	.word	0x0800a083
 8007e9c:	200003a4 	.word	0x200003a4
 8007ea0:	200000a8 	.word	0x200000a8
 8007ea4:	20000393 	.word	0x20000393
 8007ea8:	0800a087 	.word	0x0800a087
 8007eac:	0800a0aa 	.word	0x0800a0aa
 8007eb0:	0800a096 	.word	0x0800a096
 8007eb4:	0800a0a9 	.word	0x0800a0a9
 8007eb8:	20000388 	.word	0x20000388

08007ebc <viprintf>:
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <viprintf+0x28>)
 8007ebe:	b570      	push	{r4, r5, r6, lr}
 8007ec0:	681c      	ldr	r4, [r3, #0]
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	460e      	mov	r6, r1
 8007ec6:	b124      	cbz	r4, 8007ed2 <viprintf+0x16>
 8007ec8:	69a3      	ldr	r3, [r4, #24]
 8007eca:	b913      	cbnz	r3, 8007ed2 <viprintf+0x16>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f7fe fc05 	bl	80066dc <__sinit>
 8007ed2:	4633      	mov	r3, r6
 8007ed4:	462a      	mov	r2, r5
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	68a1      	ldr	r1, [r4, #8]
 8007eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ede:	f000 bc3d 	b.w	800875c <_vfiprintf_r>
 8007ee2:	bf00      	nop
 8007ee4:	20000044 	.word	0x20000044

08007ee8 <__swbuf_r>:
 8007ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eea:	460e      	mov	r6, r1
 8007eec:	4614      	mov	r4, r2
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b118      	cbz	r0, 8007efa <__swbuf_r+0x12>
 8007ef2:	6983      	ldr	r3, [r0, #24]
 8007ef4:	b90b      	cbnz	r3, 8007efa <__swbuf_r+0x12>
 8007ef6:	f7fe fbf1 	bl	80066dc <__sinit>
 8007efa:	4b21      	ldr	r3, [pc, #132]	; (8007f80 <__swbuf_r+0x98>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	d12b      	bne.n	8007f58 <__swbuf_r+0x70>
 8007f00:	686c      	ldr	r4, [r5, #4]
 8007f02:	69a3      	ldr	r3, [r4, #24]
 8007f04:	60a3      	str	r3, [r4, #8]
 8007f06:	89a3      	ldrh	r3, [r4, #12]
 8007f08:	071a      	lsls	r2, r3, #28
 8007f0a:	d52f      	bpl.n	8007f6c <__swbuf_r+0x84>
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	b36b      	cbz	r3, 8007f6c <__swbuf_r+0x84>
 8007f10:	6923      	ldr	r3, [r4, #16]
 8007f12:	6820      	ldr	r0, [r4, #0]
 8007f14:	b2f6      	uxtb	r6, r6
 8007f16:	1ac0      	subs	r0, r0, r3
 8007f18:	6963      	ldr	r3, [r4, #20]
 8007f1a:	4637      	mov	r7, r6
 8007f1c:	4283      	cmp	r3, r0
 8007f1e:	dc04      	bgt.n	8007f2a <__swbuf_r+0x42>
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f7fe fb34 	bl	8006590 <_fflush_r>
 8007f28:	bb30      	cbnz	r0, 8007f78 <__swbuf_r+0x90>
 8007f2a:	68a3      	ldr	r3, [r4, #8]
 8007f2c:	3001      	adds	r0, #1
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	60a3      	str	r3, [r4, #8]
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	6022      	str	r2, [r4, #0]
 8007f38:	701e      	strb	r6, [r3, #0]
 8007f3a:	6963      	ldr	r3, [r4, #20]
 8007f3c:	4283      	cmp	r3, r0
 8007f3e:	d004      	beq.n	8007f4a <__swbuf_r+0x62>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	07db      	lsls	r3, r3, #31
 8007f44:	d506      	bpl.n	8007f54 <__swbuf_r+0x6c>
 8007f46:	2e0a      	cmp	r6, #10
 8007f48:	d104      	bne.n	8007f54 <__swbuf_r+0x6c>
 8007f4a:	4621      	mov	r1, r4
 8007f4c:	4628      	mov	r0, r5
 8007f4e:	f7fe fb1f 	bl	8006590 <_fflush_r>
 8007f52:	b988      	cbnz	r0, 8007f78 <__swbuf_r+0x90>
 8007f54:	4638      	mov	r0, r7
 8007f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f58:	4b0a      	ldr	r3, [pc, #40]	; (8007f84 <__swbuf_r+0x9c>)
 8007f5a:	429c      	cmp	r4, r3
 8007f5c:	d101      	bne.n	8007f62 <__swbuf_r+0x7a>
 8007f5e:	68ac      	ldr	r4, [r5, #8]
 8007f60:	e7cf      	b.n	8007f02 <__swbuf_r+0x1a>
 8007f62:	4b09      	ldr	r3, [pc, #36]	; (8007f88 <__swbuf_r+0xa0>)
 8007f64:	429c      	cmp	r4, r3
 8007f66:	bf08      	it	eq
 8007f68:	68ec      	ldreq	r4, [r5, #12]
 8007f6a:	e7ca      	b.n	8007f02 <__swbuf_r+0x1a>
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f000 f81e 	bl	8007fb0 <__swsetup_r>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d0cb      	beq.n	8007f10 <__swbuf_r+0x28>
 8007f78:	f04f 37ff 	mov.w	r7, #4294967295
 8007f7c:	e7ea      	b.n	8007f54 <__swbuf_r+0x6c>
 8007f7e:	bf00      	nop
 8007f80:	08009ce4 	.word	0x08009ce4
 8007f84:	08009d04 	.word	0x08009d04
 8007f88:	08009cc4 	.word	0x08009cc4

08007f8c <_write_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4604      	mov	r4, r0
 8007f90:	4608      	mov	r0, r1
 8007f92:	4611      	mov	r1, r2
 8007f94:	2200      	movs	r2, #0
 8007f96:	4d05      	ldr	r5, [pc, #20]	; (8007fac <_write_r+0x20>)
 8007f98:	602a      	str	r2, [r5, #0]
 8007f9a:	461a      	mov	r2, r3
 8007f9c:	f7f9 fb5e 	bl	800165c <_write>
 8007fa0:	1c43      	adds	r3, r0, #1
 8007fa2:	d102      	bne.n	8007faa <_write_r+0x1e>
 8007fa4:	682b      	ldr	r3, [r5, #0]
 8007fa6:	b103      	cbz	r3, 8007faa <_write_r+0x1e>
 8007fa8:	6023      	str	r3, [r4, #0]
 8007faa:	bd38      	pop	{r3, r4, r5, pc}
 8007fac:	200006f0 	.word	0x200006f0

08007fb0 <__swsetup_r>:
 8007fb0:	4b32      	ldr	r3, [pc, #200]	; (800807c <__swsetup_r+0xcc>)
 8007fb2:	b570      	push	{r4, r5, r6, lr}
 8007fb4:	681d      	ldr	r5, [r3, #0]
 8007fb6:	4606      	mov	r6, r0
 8007fb8:	460c      	mov	r4, r1
 8007fba:	b125      	cbz	r5, 8007fc6 <__swsetup_r+0x16>
 8007fbc:	69ab      	ldr	r3, [r5, #24]
 8007fbe:	b913      	cbnz	r3, 8007fc6 <__swsetup_r+0x16>
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	f7fe fb8b 	bl	80066dc <__sinit>
 8007fc6:	4b2e      	ldr	r3, [pc, #184]	; (8008080 <__swsetup_r+0xd0>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d10f      	bne.n	8007fec <__swsetup_r+0x3c>
 8007fcc:	686c      	ldr	r4, [r5, #4]
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fd4:	0719      	lsls	r1, r3, #28
 8007fd6:	d42c      	bmi.n	8008032 <__swsetup_r+0x82>
 8007fd8:	06dd      	lsls	r5, r3, #27
 8007fda:	d411      	bmi.n	8008000 <__swsetup_r+0x50>
 8007fdc:	2309      	movs	r3, #9
 8007fde:	6033      	str	r3, [r6, #0]
 8007fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	81a3      	strh	r3, [r4, #12]
 8007fea:	e03e      	b.n	800806a <__swsetup_r+0xba>
 8007fec:	4b25      	ldr	r3, [pc, #148]	; (8008084 <__swsetup_r+0xd4>)
 8007fee:	429c      	cmp	r4, r3
 8007ff0:	d101      	bne.n	8007ff6 <__swsetup_r+0x46>
 8007ff2:	68ac      	ldr	r4, [r5, #8]
 8007ff4:	e7eb      	b.n	8007fce <__swsetup_r+0x1e>
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <__swsetup_r+0xd8>)
 8007ff8:	429c      	cmp	r4, r3
 8007ffa:	bf08      	it	eq
 8007ffc:	68ec      	ldreq	r4, [r5, #12]
 8007ffe:	e7e6      	b.n	8007fce <__swsetup_r+0x1e>
 8008000:	0758      	lsls	r0, r3, #29
 8008002:	d512      	bpl.n	800802a <__swsetup_r+0x7a>
 8008004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008006:	b141      	cbz	r1, 800801a <__swsetup_r+0x6a>
 8008008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800800c:	4299      	cmp	r1, r3
 800800e:	d002      	beq.n	8008016 <__swsetup_r+0x66>
 8008010:	4630      	mov	r0, r6
 8008012:	f7fe fd57 	bl	8006ac4 <_free_r>
 8008016:	2300      	movs	r3, #0
 8008018:	6363      	str	r3, [r4, #52]	; 0x34
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008020:	81a3      	strh	r3, [r4, #12]
 8008022:	2300      	movs	r3, #0
 8008024:	6063      	str	r3, [r4, #4]
 8008026:	6923      	ldr	r3, [r4, #16]
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	f043 0308 	orr.w	r3, r3, #8
 8008030:	81a3      	strh	r3, [r4, #12]
 8008032:	6923      	ldr	r3, [r4, #16]
 8008034:	b94b      	cbnz	r3, 800804a <__swsetup_r+0x9a>
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800803c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008040:	d003      	beq.n	800804a <__swsetup_r+0x9a>
 8008042:	4621      	mov	r1, r4
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f9a7 	bl	8008398 <__smakebuf_r>
 800804a:	89a0      	ldrh	r0, [r4, #12]
 800804c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008050:	f010 0301 	ands.w	r3, r0, #1
 8008054:	d00a      	beq.n	800806c <__swsetup_r+0xbc>
 8008056:	2300      	movs	r3, #0
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	6963      	ldr	r3, [r4, #20]
 800805c:	425b      	negs	r3, r3
 800805e:	61a3      	str	r3, [r4, #24]
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	b943      	cbnz	r3, 8008076 <__swsetup_r+0xc6>
 8008064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008068:	d1ba      	bne.n	8007fe0 <__swsetup_r+0x30>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	0781      	lsls	r1, r0, #30
 800806e:	bf58      	it	pl
 8008070:	6963      	ldrpl	r3, [r4, #20]
 8008072:	60a3      	str	r3, [r4, #8]
 8008074:	e7f4      	b.n	8008060 <__swsetup_r+0xb0>
 8008076:	2000      	movs	r0, #0
 8008078:	e7f7      	b.n	800806a <__swsetup_r+0xba>
 800807a:	bf00      	nop
 800807c:	20000044 	.word	0x20000044
 8008080:	08009ce4 	.word	0x08009ce4
 8008084:	08009d04 	.word	0x08009d04
 8008088:	08009cc4 	.word	0x08009cc4

0800808c <abs>:
 800808c:	2800      	cmp	r0, #0
 800808e:	bfb8      	it	lt
 8008090:	4240      	neglt	r0, r0
 8008092:	4770      	bx	lr

08008094 <__assert_func>:
 8008094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008096:	4614      	mov	r4, r2
 8008098:	461a      	mov	r2, r3
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <__assert_func+0x2c>)
 800809c:	4605      	mov	r5, r0
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68d8      	ldr	r0, [r3, #12]
 80080a2:	b14c      	cbz	r4, 80080b8 <__assert_func+0x24>
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <__assert_func+0x30>)
 80080a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080aa:	9100      	str	r1, [sp, #0]
 80080ac:	462b      	mov	r3, r5
 80080ae:	4906      	ldr	r1, [pc, #24]	; (80080c8 <__assert_func+0x34>)
 80080b0:	f000 f81e 	bl	80080f0 <fiprintf>
 80080b4:	f000 feaf 	bl	8008e16 <abort>
 80080b8:	4b04      	ldr	r3, [pc, #16]	; (80080cc <__assert_func+0x38>)
 80080ba:	461c      	mov	r4, r3
 80080bc:	e7f3      	b.n	80080a6 <__assert_func+0x12>
 80080be:	bf00      	nop
 80080c0:	20000044 	.word	0x20000044
 80080c4:	0800a0bc 	.word	0x0800a0bc
 80080c8:	0800a0c9 	.word	0x0800a0c9
 80080cc:	0800a0f7 	.word	0x0800a0f7

080080d0 <_close_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	2300      	movs	r3, #0
 80080d4:	4d05      	ldr	r5, [pc, #20]	; (80080ec <_close_r+0x1c>)
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f9 fada 	bl	8001694 <_close>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_close_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_close_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	200006f0 	.word	0x200006f0

080080f0 <fiprintf>:
 80080f0:	b40e      	push	{r1, r2, r3}
 80080f2:	b503      	push	{r0, r1, lr}
 80080f4:	4601      	mov	r1, r0
 80080f6:	ab03      	add	r3, sp, #12
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <fiprintf+0x20>)
 80080fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fe:	6800      	ldr	r0, [r0, #0]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	f000 fb2b 	bl	800875c <_vfiprintf_r>
 8008106:	b002      	add	sp, #8
 8008108:	f85d eb04 	ldr.w	lr, [sp], #4
 800810c:	b003      	add	sp, #12
 800810e:	4770      	bx	lr
 8008110:	20000044 	.word	0x20000044

08008114 <_findenv_r>:
 8008114:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008118:	4607      	mov	r7, r0
 800811a:	4689      	mov	r9, r1
 800811c:	4616      	mov	r6, r2
 800811e:	f000 fe81 	bl	8008e24 <__env_lock>
 8008122:	4b18      	ldr	r3, [pc, #96]	; (8008184 <_findenv_r+0x70>)
 8008124:	681c      	ldr	r4, [r3, #0]
 8008126:	469a      	mov	sl, r3
 8008128:	b134      	cbz	r4, 8008138 <_findenv_r+0x24>
 800812a:	464b      	mov	r3, r9
 800812c:	4698      	mov	r8, r3
 800812e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008132:	b139      	cbz	r1, 8008144 <_findenv_r+0x30>
 8008134:	293d      	cmp	r1, #61	; 0x3d
 8008136:	d1f9      	bne.n	800812c <_findenv_r+0x18>
 8008138:	4638      	mov	r0, r7
 800813a:	f000 fe79 	bl	8008e30 <__env_unlock>
 800813e:	2000      	movs	r0, #0
 8008140:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008144:	eba8 0809 	sub.w	r8, r8, r9
 8008148:	46a3      	mov	fp, r4
 800814a:	f854 0b04 	ldr.w	r0, [r4], #4
 800814e:	2800      	cmp	r0, #0
 8008150:	d0f2      	beq.n	8008138 <_findenv_r+0x24>
 8008152:	4642      	mov	r2, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f000 fe3f 	bl	8008dd8 <strncmp>
 800815a:	2800      	cmp	r0, #0
 800815c:	d1f4      	bne.n	8008148 <_findenv_r+0x34>
 800815e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8008162:	eb03 0508 	add.w	r5, r3, r8
 8008166:	f813 3008 	ldrb.w	r3, [r3, r8]
 800816a:	2b3d      	cmp	r3, #61	; 0x3d
 800816c:	d1ec      	bne.n	8008148 <_findenv_r+0x34>
 800816e:	f8da 3000 	ldr.w	r3, [sl]
 8008172:	4638      	mov	r0, r7
 8008174:	ebab 0303 	sub.w	r3, fp, r3
 8008178:	109b      	asrs	r3, r3, #2
 800817a:	6033      	str	r3, [r6, #0]
 800817c:	f000 fe58 	bl	8008e30 <__env_unlock>
 8008180:	1c68      	adds	r0, r5, #1
 8008182:	e7dd      	b.n	8008140 <_findenv_r+0x2c>
 8008184:	20000000 	.word	0x20000000

08008188 <_getenv_r>:
 8008188:	b507      	push	{r0, r1, r2, lr}
 800818a:	aa01      	add	r2, sp, #4
 800818c:	f7ff ffc2 	bl	8008114 <_findenv_r>
 8008190:	b003      	add	sp, #12
 8008192:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08008198 <_gettimeofday_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	2300      	movs	r3, #0
 800819c:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_gettimeofday_r+0x20>)
 800819e:	4604      	mov	r4, r0
 80081a0:	4608      	mov	r0, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	f001 fb2b 	bl	8009800 <_gettimeofday>
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	d102      	bne.n	80081b4 <_gettimeofday_r+0x1c>
 80081ae:	682b      	ldr	r3, [r5, #0]
 80081b0:	b103      	cbz	r3, 80081b4 <_gettimeofday_r+0x1c>
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	bd38      	pop	{r3, r4, r5, pc}
 80081b6:	bf00      	nop
 80081b8:	200006f0 	.word	0x200006f0

080081bc <__gettzinfo>:
 80081bc:	4800      	ldr	r0, [pc, #0]	; (80081c0 <__gettzinfo+0x4>)
 80081be:	4770      	bx	lr
 80081c0:	200000b0 	.word	0x200000b0

080081c4 <gmtime_r>:
 80081c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c8:	e9d0 6700 	ldrd	r6, r7, [r0]
 80081cc:	460c      	mov	r4, r1
 80081ce:	2300      	movs	r3, #0
 80081d0:	4630      	mov	r0, r6
 80081d2:	4639      	mov	r1, r7
 80081d4:	4a4f      	ldr	r2, [pc, #316]	; (8008314 <gmtime_r+0x150>)
 80081d6:	f7f8 fa95 	bl	8000704 <__aeabi_ldivmod>
 80081da:	4639      	mov	r1, r7
 80081dc:	4605      	mov	r5, r0
 80081de:	2300      	movs	r3, #0
 80081e0:	4630      	mov	r0, r6
 80081e2:	4a4c      	ldr	r2, [pc, #304]	; (8008314 <gmtime_r+0x150>)
 80081e4:	f7f8 fa8e 	bl	8000704 <__aeabi_ldivmod>
 80081e8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80081ec:	2a00      	cmp	r2, #0
 80081ee:	bfbc      	itt	lt
 80081f0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80081f4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80081f8:	fbb2 f3f1 	udiv	r3, r2, r1
 80081fc:	fb01 2213 	mls	r2, r1, r3, r2
 8008200:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	fbb2 f3f1 	udiv	r3, r2, r1
 800820a:	fb01 2213 	mls	r2, r1, r3, r2
 800820e:	6022      	str	r2, [r4, #0]
 8008210:	f04f 0207 	mov.w	r2, #7
 8008214:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8008218:	bfac      	ite	ge
 800821a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800821e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8008222:	6063      	str	r3, [r4, #4]
 8008224:	1cc3      	adds	r3, r0, #3
 8008226:	fb93 f2f2 	sdiv	r2, r3, r2
 800822a:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800822e:	1a9b      	subs	r3, r3, r2
 8008230:	bf48      	it	mi
 8008232:	3307      	addmi	r3, #7
 8008234:	2800      	cmp	r0, #0
 8008236:	4938      	ldr	r1, [pc, #224]	; (8008318 <gmtime_r+0x154>)
 8008238:	61a3      	str	r3, [r4, #24]
 800823a:	bfbd      	ittte	lt
 800823c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8008240:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8008244:	fb93 f1f1 	sdivlt	r1, r3, r1
 8008248:	fb90 f1f1 	sdivge	r1, r0, r1
 800824c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8008250:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8008254:	4b31      	ldr	r3, [pc, #196]	; (800831c <gmtime_r+0x158>)
 8008256:	f240 176d 	movw	r7, #365	; 0x16d
 800825a:	fb03 0001 	mla	r0, r3, r1, r0
 800825e:	fbb0 f2f2 	udiv	r2, r0, r2
 8008262:	fbb0 f3fc 	udiv	r3, r0, ip
 8008266:	4402      	add	r2, r0
 8008268:	1ad2      	subs	r2, r2, r3
 800826a:	4b2d      	ldr	r3, [pc, #180]	; (8008320 <gmtime_r+0x15c>)
 800826c:	2664      	movs	r6, #100	; 0x64
 800826e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	fbb3 f5f7 	udiv	r5, r3, r7
 8008278:	fbb3 f3fc 	udiv	r3, r3, ip
 800827c:	fbb5 f2f6 	udiv	r2, r5, r6
 8008280:	1ad3      	subs	r3, r2, r3
 8008282:	4403      	add	r3, r0
 8008284:	2099      	movs	r0, #153	; 0x99
 8008286:	fb07 3315 	mls	r3, r7, r5, r3
 800828a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800828e:	f10c 0c02 	add.w	ip, ip, #2
 8008292:	fbbc f7f0 	udiv	r7, ip, r0
 8008296:	f04f 0805 	mov.w	r8, #5
 800829a:	4378      	muls	r0, r7
 800829c:	3002      	adds	r0, #2
 800829e:	fbb0 f0f8 	udiv	r0, r0, r8
 80082a2:	f103 0e01 	add.w	lr, r3, #1
 80082a6:	ebae 0000 	sub.w	r0, lr, r0
 80082aa:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80082ae:	45f4      	cmp	ip, lr
 80082b0:	bf94      	ite	ls
 80082b2:	f04f 0c02 	movls.w	ip, #2
 80082b6:	f06f 0c09 	mvnhi.w	ip, #9
 80082ba:	4467      	add	r7, ip
 80082bc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80082c0:	fb0c 5101 	mla	r1, ip, r1, r5
 80082c4:	2f01      	cmp	r7, #1
 80082c6:	bf98      	it	ls
 80082c8:	3101      	addls	r1, #1
 80082ca:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80082ce:	d30c      	bcc.n	80082ea <gmtime_r+0x126>
 80082d0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80082d4:	61e3      	str	r3, [r4, #28]
 80082d6:	2300      	movs	r3, #0
 80082d8:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80082dc:	60e0      	str	r0, [r4, #12]
 80082de:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80082e2:	4620      	mov	r0, r4
 80082e4:	6223      	str	r3, [r4, #32]
 80082e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ea:	f015 0f03 	tst.w	r5, #3
 80082ee:	d102      	bne.n	80082f6 <gmtime_r+0x132>
 80082f0:	fb06 5212 	mls	r2, r6, r2, r5
 80082f4:	b95a      	cbnz	r2, 800830e <gmtime_r+0x14a>
 80082f6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80082fa:	fbb5 f2f6 	udiv	r2, r5, r6
 80082fe:	fb06 5212 	mls	r2, r6, r2, r5
 8008302:	fab2 f282 	clz	r2, r2
 8008306:	0952      	lsrs	r2, r2, #5
 8008308:	333b      	adds	r3, #59	; 0x3b
 800830a:	4413      	add	r3, r2
 800830c:	e7e2      	b.n	80082d4 <gmtime_r+0x110>
 800830e:	2201      	movs	r2, #1
 8008310:	e7fa      	b.n	8008308 <gmtime_r+0x144>
 8008312:	bf00      	nop
 8008314:	00015180 	.word	0x00015180
 8008318:	00023ab1 	.word	0x00023ab1
 800831c:	fffdc54f 	.word	0xfffdc54f
 8008320:	00023ab0 	.word	0x00023ab0

08008324 <labs>:
 8008324:	2800      	cmp	r0, #0
 8008326:	bfb8      	it	lt
 8008328:	4240      	neglt	r0, r0
 800832a:	4770      	bx	lr

0800832c <_lseek_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4604      	mov	r4, r0
 8008330:	4608      	mov	r0, r1
 8008332:	4611      	mov	r1, r2
 8008334:	2200      	movs	r2, #0
 8008336:	4d05      	ldr	r5, [pc, #20]	; (800834c <_lseek_r+0x20>)
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7f9 f9ce 	bl	80016dc <_lseek>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_lseek_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_lseek_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	200006f0 	.word	0x200006f0

08008350 <__swhatbuf_r>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	460e      	mov	r6, r1
 8008354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008358:	4614      	mov	r4, r2
 800835a:	2900      	cmp	r1, #0
 800835c:	461d      	mov	r5, r3
 800835e:	b096      	sub	sp, #88	; 0x58
 8008360:	da07      	bge.n	8008372 <__swhatbuf_r+0x22>
 8008362:	2300      	movs	r3, #0
 8008364:	602b      	str	r3, [r5, #0]
 8008366:	89b3      	ldrh	r3, [r6, #12]
 8008368:	061a      	lsls	r2, r3, #24
 800836a:	d410      	bmi.n	800838e <__swhatbuf_r+0x3e>
 800836c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008370:	e00e      	b.n	8008390 <__swhatbuf_r+0x40>
 8008372:	466a      	mov	r2, sp
 8008374:	f000 fd62 	bl	8008e3c <_fstat_r>
 8008378:	2800      	cmp	r0, #0
 800837a:	dbf2      	blt.n	8008362 <__swhatbuf_r+0x12>
 800837c:	9a01      	ldr	r2, [sp, #4]
 800837e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008386:	425a      	negs	r2, r3
 8008388:	415a      	adcs	r2, r3
 800838a:	602a      	str	r2, [r5, #0]
 800838c:	e7ee      	b.n	800836c <__swhatbuf_r+0x1c>
 800838e:	2340      	movs	r3, #64	; 0x40
 8008390:	2000      	movs	r0, #0
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	b016      	add	sp, #88	; 0x58
 8008396:	bd70      	pop	{r4, r5, r6, pc}

08008398 <__smakebuf_r>:
 8008398:	898b      	ldrh	r3, [r1, #12]
 800839a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800839c:	079d      	lsls	r5, r3, #30
 800839e:	4606      	mov	r6, r0
 80083a0:	460c      	mov	r4, r1
 80083a2:	d507      	bpl.n	80083b4 <__smakebuf_r+0x1c>
 80083a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	6123      	str	r3, [r4, #16]
 80083ac:	2301      	movs	r3, #1
 80083ae:	6163      	str	r3, [r4, #20]
 80083b0:	b002      	add	sp, #8
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	466a      	mov	r2, sp
 80083b6:	ab01      	add	r3, sp, #4
 80083b8:	f7ff ffca 	bl	8008350 <__swhatbuf_r>
 80083bc:	9900      	ldr	r1, [sp, #0]
 80083be:	4605      	mov	r5, r0
 80083c0:	4630      	mov	r0, r6
 80083c2:	f7fe fbcb 	bl	8006b5c <_malloc_r>
 80083c6:	b948      	cbnz	r0, 80083dc <__smakebuf_r+0x44>
 80083c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083cc:	059a      	lsls	r2, r3, #22
 80083ce:	d4ef      	bmi.n	80083b0 <__smakebuf_r+0x18>
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	f043 0302 	orr.w	r3, r3, #2
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	e7e3      	b.n	80083a4 <__smakebuf_r+0xc>
 80083dc:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <__smakebuf_r+0x7c>)
 80083de:	62b3      	str	r3, [r6, #40]	; 0x28
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	6020      	str	r0, [r4, #0]
 80083e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e8:	81a3      	strh	r3, [r4, #12]
 80083ea:	9b00      	ldr	r3, [sp, #0]
 80083ec:	6120      	str	r0, [r4, #16]
 80083ee:	6163      	str	r3, [r4, #20]
 80083f0:	9b01      	ldr	r3, [sp, #4]
 80083f2:	b15b      	cbz	r3, 800840c <__smakebuf_r+0x74>
 80083f4:	4630      	mov	r0, r6
 80083f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083fa:	f000 fd31 	bl	8008e60 <_isatty_r>
 80083fe:	b128      	cbz	r0, 800840c <__smakebuf_r+0x74>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	f023 0303 	bic.w	r3, r3, #3
 8008406:	f043 0301 	orr.w	r3, r3, #1
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	89a0      	ldrh	r0, [r4, #12]
 800840e:	4305      	orrs	r5, r0
 8008410:	81a5      	strh	r5, [r4, #12]
 8008412:	e7cd      	b.n	80083b0 <__smakebuf_r+0x18>
 8008414:	08006675 	.word	0x08006675

08008418 <__ascii_mbtowc>:
 8008418:	b082      	sub	sp, #8
 800841a:	b901      	cbnz	r1, 800841e <__ascii_mbtowc+0x6>
 800841c:	a901      	add	r1, sp, #4
 800841e:	b142      	cbz	r2, 8008432 <__ascii_mbtowc+0x1a>
 8008420:	b14b      	cbz	r3, 8008436 <__ascii_mbtowc+0x1e>
 8008422:	7813      	ldrb	r3, [r2, #0]
 8008424:	600b      	str	r3, [r1, #0]
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	1e10      	subs	r0, r2, #0
 800842a:	bf18      	it	ne
 800842c:	2001      	movne	r0, #1
 800842e:	b002      	add	sp, #8
 8008430:	4770      	bx	lr
 8008432:	4610      	mov	r0, r2
 8008434:	e7fb      	b.n	800842e <__ascii_mbtowc+0x16>
 8008436:	f06f 0001 	mvn.w	r0, #1
 800843a:	e7f8      	b.n	800842e <__ascii_mbtowc+0x16>

0800843c <__malloc_lock>:
 800843c:	4801      	ldr	r0, [pc, #4]	; (8008444 <__malloc_lock+0x8>)
 800843e:	f7fe bb25 	b.w	8006a8c <__retarget_lock_acquire_recursive>
 8008442:	bf00      	nop
 8008444:	200006e8 	.word	0x200006e8

08008448 <__malloc_unlock>:
 8008448:	4801      	ldr	r0, [pc, #4]	; (8008450 <__malloc_unlock+0x8>)
 800844a:	f7fe bb21 	b.w	8006a90 <__retarget_lock_release_recursive>
 800844e:	bf00      	nop
 8008450:	200006e8 	.word	0x200006e8

08008454 <__ssputs_r>:
 8008454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008458:	688e      	ldr	r6, [r1, #8]
 800845a:	4682      	mov	sl, r0
 800845c:	429e      	cmp	r6, r3
 800845e:	460c      	mov	r4, r1
 8008460:	4690      	mov	r8, r2
 8008462:	461f      	mov	r7, r3
 8008464:	d838      	bhi.n	80084d8 <__ssputs_r+0x84>
 8008466:	898a      	ldrh	r2, [r1, #12]
 8008468:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800846c:	d032      	beq.n	80084d4 <__ssputs_r+0x80>
 800846e:	6825      	ldr	r5, [r4, #0]
 8008470:	6909      	ldr	r1, [r1, #16]
 8008472:	3301      	adds	r3, #1
 8008474:	eba5 0901 	sub.w	r9, r5, r1
 8008478:	6965      	ldr	r5, [r4, #20]
 800847a:	444b      	add	r3, r9
 800847c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008484:	106d      	asrs	r5, r5, #1
 8008486:	429d      	cmp	r5, r3
 8008488:	bf38      	it	cc
 800848a:	461d      	movcc	r5, r3
 800848c:	0553      	lsls	r3, r2, #21
 800848e:	d531      	bpl.n	80084f4 <__ssputs_r+0xa0>
 8008490:	4629      	mov	r1, r5
 8008492:	f7fe fb63 	bl	8006b5c <_malloc_r>
 8008496:	4606      	mov	r6, r0
 8008498:	b950      	cbnz	r0, 80084b0 <__ssputs_r+0x5c>
 800849a:	230c      	movs	r3, #12
 800849c:	f04f 30ff 	mov.w	r0, #4294967295
 80084a0:	f8ca 3000 	str.w	r3, [sl]
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b0:	464a      	mov	r2, r9
 80084b2:	6921      	ldr	r1, [r4, #16]
 80084b4:	f000 fcf2 	bl	8008e9c <memcpy>
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c2:	81a3      	strh	r3, [r4, #12]
 80084c4:	6126      	str	r6, [r4, #16]
 80084c6:	444e      	add	r6, r9
 80084c8:	6026      	str	r6, [r4, #0]
 80084ca:	463e      	mov	r6, r7
 80084cc:	6165      	str	r5, [r4, #20]
 80084ce:	eba5 0509 	sub.w	r5, r5, r9
 80084d2:	60a5      	str	r5, [r4, #8]
 80084d4:	42be      	cmp	r6, r7
 80084d6:	d900      	bls.n	80084da <__ssputs_r+0x86>
 80084d8:	463e      	mov	r6, r7
 80084da:	4632      	mov	r2, r6
 80084dc:	4641      	mov	r1, r8
 80084de:	6820      	ldr	r0, [r4, #0]
 80084e0:	f000 fcea 	bl	8008eb8 <memmove>
 80084e4:	68a3      	ldr	r3, [r4, #8]
 80084e6:	6822      	ldr	r2, [r4, #0]
 80084e8:	1b9b      	subs	r3, r3, r6
 80084ea:	4432      	add	r2, r6
 80084ec:	2000      	movs	r0, #0
 80084ee:	60a3      	str	r3, [r4, #8]
 80084f0:	6022      	str	r2, [r4, #0]
 80084f2:	e7db      	b.n	80084ac <__ssputs_r+0x58>
 80084f4:	462a      	mov	r2, r5
 80084f6:	f000 fcf9 	bl	8008eec <_realloc_r>
 80084fa:	4606      	mov	r6, r0
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d1e1      	bne.n	80084c4 <__ssputs_r+0x70>
 8008500:	4650      	mov	r0, sl
 8008502:	6921      	ldr	r1, [r4, #16]
 8008504:	f7fe fade 	bl	8006ac4 <_free_r>
 8008508:	e7c7      	b.n	800849a <__ssputs_r+0x46>
	...

0800850c <_svfiprintf_r>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	4698      	mov	r8, r3
 8008512:	898b      	ldrh	r3, [r1, #12]
 8008514:	4607      	mov	r7, r0
 8008516:	061b      	lsls	r3, r3, #24
 8008518:	460d      	mov	r5, r1
 800851a:	4614      	mov	r4, r2
 800851c:	b09d      	sub	sp, #116	; 0x74
 800851e:	d50e      	bpl.n	800853e <_svfiprintf_r+0x32>
 8008520:	690b      	ldr	r3, [r1, #16]
 8008522:	b963      	cbnz	r3, 800853e <_svfiprintf_r+0x32>
 8008524:	2140      	movs	r1, #64	; 0x40
 8008526:	f7fe fb19 	bl	8006b5c <_malloc_r>
 800852a:	6028      	str	r0, [r5, #0]
 800852c:	6128      	str	r0, [r5, #16]
 800852e:	b920      	cbnz	r0, 800853a <_svfiprintf_r+0x2e>
 8008530:	230c      	movs	r3, #12
 8008532:	603b      	str	r3, [r7, #0]
 8008534:	f04f 30ff 	mov.w	r0, #4294967295
 8008538:	e0d1      	b.n	80086de <_svfiprintf_r+0x1d2>
 800853a:	2340      	movs	r3, #64	; 0x40
 800853c:	616b      	str	r3, [r5, #20]
 800853e:	2300      	movs	r3, #0
 8008540:	9309      	str	r3, [sp, #36]	; 0x24
 8008542:	2320      	movs	r3, #32
 8008544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008548:	2330      	movs	r3, #48	; 0x30
 800854a:	f04f 0901 	mov.w	r9, #1
 800854e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008552:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086f8 <_svfiprintf_r+0x1ec>
 8008556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800855a:	4623      	mov	r3, r4
 800855c:	469a      	mov	sl, r3
 800855e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008562:	b10a      	cbz	r2, 8008568 <_svfiprintf_r+0x5c>
 8008564:	2a25      	cmp	r2, #37	; 0x25
 8008566:	d1f9      	bne.n	800855c <_svfiprintf_r+0x50>
 8008568:	ebba 0b04 	subs.w	fp, sl, r4
 800856c:	d00b      	beq.n	8008586 <_svfiprintf_r+0x7a>
 800856e:	465b      	mov	r3, fp
 8008570:	4622      	mov	r2, r4
 8008572:	4629      	mov	r1, r5
 8008574:	4638      	mov	r0, r7
 8008576:	f7ff ff6d 	bl	8008454 <__ssputs_r>
 800857a:	3001      	adds	r0, #1
 800857c:	f000 80aa 	beq.w	80086d4 <_svfiprintf_r+0x1c8>
 8008580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008582:	445a      	add	r2, fp
 8008584:	9209      	str	r2, [sp, #36]	; 0x24
 8008586:	f89a 3000 	ldrb.w	r3, [sl]
 800858a:	2b00      	cmp	r3, #0
 800858c:	f000 80a2 	beq.w	80086d4 <_svfiprintf_r+0x1c8>
 8008590:	2300      	movs	r3, #0
 8008592:	f04f 32ff 	mov.w	r2, #4294967295
 8008596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800859a:	f10a 0a01 	add.w	sl, sl, #1
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	9307      	str	r3, [sp, #28]
 80085a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a6:	931a      	str	r3, [sp, #104]	; 0x68
 80085a8:	4654      	mov	r4, sl
 80085aa:	2205      	movs	r2, #5
 80085ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b0:	4851      	ldr	r0, [pc, #324]	; (80086f8 <_svfiprintf_r+0x1ec>)
 80085b2:	f000 fc65 	bl	8008e80 <memchr>
 80085b6:	9a04      	ldr	r2, [sp, #16]
 80085b8:	b9d8      	cbnz	r0, 80085f2 <_svfiprintf_r+0xe6>
 80085ba:	06d0      	lsls	r0, r2, #27
 80085bc:	bf44      	itt	mi
 80085be:	2320      	movmi	r3, #32
 80085c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c4:	0711      	lsls	r1, r2, #28
 80085c6:	bf44      	itt	mi
 80085c8:	232b      	movmi	r3, #43	; 0x2b
 80085ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ce:	f89a 3000 	ldrb.w	r3, [sl]
 80085d2:	2b2a      	cmp	r3, #42	; 0x2a
 80085d4:	d015      	beq.n	8008602 <_svfiprintf_r+0xf6>
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	9a07      	ldr	r2, [sp, #28]
 80085e0:	4621      	mov	r1, r4
 80085e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e6:	3b30      	subs	r3, #48	; 0x30
 80085e8:	2b09      	cmp	r3, #9
 80085ea:	d94e      	bls.n	800868a <_svfiprintf_r+0x17e>
 80085ec:	b1b0      	cbz	r0, 800861c <_svfiprintf_r+0x110>
 80085ee:	9207      	str	r2, [sp, #28]
 80085f0:	e014      	b.n	800861c <_svfiprintf_r+0x110>
 80085f2:	eba0 0308 	sub.w	r3, r0, r8
 80085f6:	fa09 f303 	lsl.w	r3, r9, r3
 80085fa:	4313      	orrs	r3, r2
 80085fc:	46a2      	mov	sl, r4
 80085fe:	9304      	str	r3, [sp, #16]
 8008600:	e7d2      	b.n	80085a8 <_svfiprintf_r+0x9c>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	1d19      	adds	r1, r3, #4
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	9103      	str	r1, [sp, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	bfbb      	ittet	lt
 800860e:	425b      	neglt	r3, r3
 8008610:	f042 0202 	orrlt.w	r2, r2, #2
 8008614:	9307      	strge	r3, [sp, #28]
 8008616:	9307      	strlt	r3, [sp, #28]
 8008618:	bfb8      	it	lt
 800861a:	9204      	strlt	r2, [sp, #16]
 800861c:	7823      	ldrb	r3, [r4, #0]
 800861e:	2b2e      	cmp	r3, #46	; 0x2e
 8008620:	d10c      	bne.n	800863c <_svfiprintf_r+0x130>
 8008622:	7863      	ldrb	r3, [r4, #1]
 8008624:	2b2a      	cmp	r3, #42	; 0x2a
 8008626:	d135      	bne.n	8008694 <_svfiprintf_r+0x188>
 8008628:	9b03      	ldr	r3, [sp, #12]
 800862a:	3402      	adds	r4, #2
 800862c:	1d1a      	adds	r2, r3, #4
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	9203      	str	r2, [sp, #12]
 8008632:	2b00      	cmp	r3, #0
 8008634:	bfb8      	it	lt
 8008636:	f04f 33ff 	movlt.w	r3, #4294967295
 800863a:	9305      	str	r3, [sp, #20]
 800863c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008708 <_svfiprintf_r+0x1fc>
 8008640:	2203      	movs	r2, #3
 8008642:	4650      	mov	r0, sl
 8008644:	7821      	ldrb	r1, [r4, #0]
 8008646:	f000 fc1b 	bl	8008e80 <memchr>
 800864a:	b140      	cbz	r0, 800865e <_svfiprintf_r+0x152>
 800864c:	2340      	movs	r3, #64	; 0x40
 800864e:	eba0 000a 	sub.w	r0, r0, sl
 8008652:	fa03 f000 	lsl.w	r0, r3, r0
 8008656:	9b04      	ldr	r3, [sp, #16]
 8008658:	3401      	adds	r4, #1
 800865a:	4303      	orrs	r3, r0
 800865c:	9304      	str	r3, [sp, #16]
 800865e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008662:	2206      	movs	r2, #6
 8008664:	4825      	ldr	r0, [pc, #148]	; (80086fc <_svfiprintf_r+0x1f0>)
 8008666:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800866a:	f000 fc09 	bl	8008e80 <memchr>
 800866e:	2800      	cmp	r0, #0
 8008670:	d038      	beq.n	80086e4 <_svfiprintf_r+0x1d8>
 8008672:	4b23      	ldr	r3, [pc, #140]	; (8008700 <_svfiprintf_r+0x1f4>)
 8008674:	bb1b      	cbnz	r3, 80086be <_svfiprintf_r+0x1b2>
 8008676:	9b03      	ldr	r3, [sp, #12]
 8008678:	3307      	adds	r3, #7
 800867a:	f023 0307 	bic.w	r3, r3, #7
 800867e:	3308      	adds	r3, #8
 8008680:	9303      	str	r3, [sp, #12]
 8008682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008684:	4433      	add	r3, r6
 8008686:	9309      	str	r3, [sp, #36]	; 0x24
 8008688:	e767      	b.n	800855a <_svfiprintf_r+0x4e>
 800868a:	460c      	mov	r4, r1
 800868c:	2001      	movs	r0, #1
 800868e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008692:	e7a5      	b.n	80085e0 <_svfiprintf_r+0xd4>
 8008694:	2300      	movs	r3, #0
 8008696:	f04f 0c0a 	mov.w	ip, #10
 800869a:	4619      	mov	r1, r3
 800869c:	3401      	adds	r4, #1
 800869e:	9305      	str	r3, [sp, #20]
 80086a0:	4620      	mov	r0, r4
 80086a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a6:	3a30      	subs	r2, #48	; 0x30
 80086a8:	2a09      	cmp	r2, #9
 80086aa:	d903      	bls.n	80086b4 <_svfiprintf_r+0x1a8>
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0c5      	beq.n	800863c <_svfiprintf_r+0x130>
 80086b0:	9105      	str	r1, [sp, #20]
 80086b2:	e7c3      	b.n	800863c <_svfiprintf_r+0x130>
 80086b4:	4604      	mov	r4, r0
 80086b6:	2301      	movs	r3, #1
 80086b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086bc:	e7f0      	b.n	80086a0 <_svfiprintf_r+0x194>
 80086be:	ab03      	add	r3, sp, #12
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	462a      	mov	r2, r5
 80086c4:	4638      	mov	r0, r7
 80086c6:	4b0f      	ldr	r3, [pc, #60]	; (8008704 <_svfiprintf_r+0x1f8>)
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	f3af 8000 	nop.w
 80086ce:	1c42      	adds	r2, r0, #1
 80086d0:	4606      	mov	r6, r0
 80086d2:	d1d6      	bne.n	8008682 <_svfiprintf_r+0x176>
 80086d4:	89ab      	ldrh	r3, [r5, #12]
 80086d6:	065b      	lsls	r3, r3, #25
 80086d8:	f53f af2c 	bmi.w	8008534 <_svfiprintf_r+0x28>
 80086dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086de:	b01d      	add	sp, #116	; 0x74
 80086e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	ab03      	add	r3, sp, #12
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	462a      	mov	r2, r5
 80086ea:	4638      	mov	r0, r7
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <_svfiprintf_r+0x1f8>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	f000 f9d4 	bl	8008a9c <_printf_i>
 80086f4:	e7eb      	b.n	80086ce <_svfiprintf_r+0x1c2>
 80086f6:	bf00      	nop
 80086f8:	0800a203 	.word	0x0800a203
 80086fc:	0800a20d 	.word	0x0800a20d
 8008700:	00000000 	.word	0x00000000
 8008704:	08008455 	.word	0x08008455
 8008708:	0800a209 	.word	0x0800a209

0800870c <__sfputc_r>:
 800870c:	6893      	ldr	r3, [r2, #8]
 800870e:	b410      	push	{r4}
 8008710:	3b01      	subs	r3, #1
 8008712:	2b00      	cmp	r3, #0
 8008714:	6093      	str	r3, [r2, #8]
 8008716:	da07      	bge.n	8008728 <__sfputc_r+0x1c>
 8008718:	6994      	ldr	r4, [r2, #24]
 800871a:	42a3      	cmp	r3, r4
 800871c:	db01      	blt.n	8008722 <__sfputc_r+0x16>
 800871e:	290a      	cmp	r1, #10
 8008720:	d102      	bne.n	8008728 <__sfputc_r+0x1c>
 8008722:	bc10      	pop	{r4}
 8008724:	f7ff bbe0 	b.w	8007ee8 <__swbuf_r>
 8008728:	6813      	ldr	r3, [r2, #0]
 800872a:	1c58      	adds	r0, r3, #1
 800872c:	6010      	str	r0, [r2, #0]
 800872e:	7019      	strb	r1, [r3, #0]
 8008730:	4608      	mov	r0, r1
 8008732:	bc10      	pop	{r4}
 8008734:	4770      	bx	lr

08008736 <__sfputs_r>:
 8008736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	4614      	mov	r4, r2
 800873e:	18d5      	adds	r5, r2, r3
 8008740:	42ac      	cmp	r4, r5
 8008742:	d101      	bne.n	8008748 <__sfputs_r+0x12>
 8008744:	2000      	movs	r0, #0
 8008746:	e007      	b.n	8008758 <__sfputs_r+0x22>
 8008748:	463a      	mov	r2, r7
 800874a:	4630      	mov	r0, r6
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	f7ff ffdc 	bl	800870c <__sfputc_r>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d1f3      	bne.n	8008740 <__sfputs_r+0xa>
 8008758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800875c <_vfiprintf_r>:
 800875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008760:	460d      	mov	r5, r1
 8008762:	4614      	mov	r4, r2
 8008764:	4698      	mov	r8, r3
 8008766:	4606      	mov	r6, r0
 8008768:	b09d      	sub	sp, #116	; 0x74
 800876a:	b118      	cbz	r0, 8008774 <_vfiprintf_r+0x18>
 800876c:	6983      	ldr	r3, [r0, #24]
 800876e:	b90b      	cbnz	r3, 8008774 <_vfiprintf_r+0x18>
 8008770:	f7fd ffb4 	bl	80066dc <__sinit>
 8008774:	4b89      	ldr	r3, [pc, #548]	; (800899c <_vfiprintf_r+0x240>)
 8008776:	429d      	cmp	r5, r3
 8008778:	d11b      	bne.n	80087b2 <_vfiprintf_r+0x56>
 800877a:	6875      	ldr	r5, [r6, #4]
 800877c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d405      	bmi.n	800878e <_vfiprintf_r+0x32>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d402      	bmi.n	800878e <_vfiprintf_r+0x32>
 8008788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800878a:	f7fe f97f 	bl	8006a8c <__retarget_lock_acquire_recursive>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	071b      	lsls	r3, r3, #28
 8008792:	d501      	bpl.n	8008798 <_vfiprintf_r+0x3c>
 8008794:	692b      	ldr	r3, [r5, #16]
 8008796:	b9eb      	cbnz	r3, 80087d4 <_vfiprintf_r+0x78>
 8008798:	4629      	mov	r1, r5
 800879a:	4630      	mov	r0, r6
 800879c:	f7ff fc08 	bl	8007fb0 <__swsetup_r>
 80087a0:	b1c0      	cbz	r0, 80087d4 <_vfiprintf_r+0x78>
 80087a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087a4:	07dc      	lsls	r4, r3, #31
 80087a6:	d50e      	bpl.n	80087c6 <_vfiprintf_r+0x6a>
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	b01d      	add	sp, #116	; 0x74
 80087ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b2:	4b7b      	ldr	r3, [pc, #492]	; (80089a0 <_vfiprintf_r+0x244>)
 80087b4:	429d      	cmp	r5, r3
 80087b6:	d101      	bne.n	80087bc <_vfiprintf_r+0x60>
 80087b8:	68b5      	ldr	r5, [r6, #8]
 80087ba:	e7df      	b.n	800877c <_vfiprintf_r+0x20>
 80087bc:	4b79      	ldr	r3, [pc, #484]	; (80089a4 <_vfiprintf_r+0x248>)
 80087be:	429d      	cmp	r5, r3
 80087c0:	bf08      	it	eq
 80087c2:	68f5      	ldreq	r5, [r6, #12]
 80087c4:	e7da      	b.n	800877c <_vfiprintf_r+0x20>
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	0598      	lsls	r0, r3, #22
 80087ca:	d4ed      	bmi.n	80087a8 <_vfiprintf_r+0x4c>
 80087cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ce:	f7fe f95f 	bl	8006a90 <__retarget_lock_release_recursive>
 80087d2:	e7e9      	b.n	80087a8 <_vfiprintf_r+0x4c>
 80087d4:	2300      	movs	r3, #0
 80087d6:	9309      	str	r3, [sp, #36]	; 0x24
 80087d8:	2320      	movs	r3, #32
 80087da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087de:	2330      	movs	r3, #48	; 0x30
 80087e0:	f04f 0901 	mov.w	r9, #1
 80087e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80087e8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80089a8 <_vfiprintf_r+0x24c>
 80087ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087f0:	4623      	mov	r3, r4
 80087f2:	469a      	mov	sl, r3
 80087f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f8:	b10a      	cbz	r2, 80087fe <_vfiprintf_r+0xa2>
 80087fa:	2a25      	cmp	r2, #37	; 0x25
 80087fc:	d1f9      	bne.n	80087f2 <_vfiprintf_r+0x96>
 80087fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008802:	d00b      	beq.n	800881c <_vfiprintf_r+0xc0>
 8008804:	465b      	mov	r3, fp
 8008806:	4622      	mov	r2, r4
 8008808:	4629      	mov	r1, r5
 800880a:	4630      	mov	r0, r6
 800880c:	f7ff ff93 	bl	8008736 <__sfputs_r>
 8008810:	3001      	adds	r0, #1
 8008812:	f000 80aa 	beq.w	800896a <_vfiprintf_r+0x20e>
 8008816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008818:	445a      	add	r2, fp
 800881a:	9209      	str	r2, [sp, #36]	; 0x24
 800881c:	f89a 3000 	ldrb.w	r3, [sl]
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 80a2 	beq.w	800896a <_vfiprintf_r+0x20e>
 8008826:	2300      	movs	r3, #0
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008830:	f10a 0a01 	add.w	sl, sl, #1
 8008834:	9304      	str	r3, [sp, #16]
 8008836:	9307      	str	r3, [sp, #28]
 8008838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800883c:	931a      	str	r3, [sp, #104]	; 0x68
 800883e:	4654      	mov	r4, sl
 8008840:	2205      	movs	r2, #5
 8008842:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008846:	4858      	ldr	r0, [pc, #352]	; (80089a8 <_vfiprintf_r+0x24c>)
 8008848:	f000 fb1a 	bl	8008e80 <memchr>
 800884c:	9a04      	ldr	r2, [sp, #16]
 800884e:	b9d8      	cbnz	r0, 8008888 <_vfiprintf_r+0x12c>
 8008850:	06d1      	lsls	r1, r2, #27
 8008852:	bf44      	itt	mi
 8008854:	2320      	movmi	r3, #32
 8008856:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800885a:	0713      	lsls	r3, r2, #28
 800885c:	bf44      	itt	mi
 800885e:	232b      	movmi	r3, #43	; 0x2b
 8008860:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008864:	f89a 3000 	ldrb.w	r3, [sl]
 8008868:	2b2a      	cmp	r3, #42	; 0x2a
 800886a:	d015      	beq.n	8008898 <_vfiprintf_r+0x13c>
 800886c:	4654      	mov	r4, sl
 800886e:	2000      	movs	r0, #0
 8008870:	f04f 0c0a 	mov.w	ip, #10
 8008874:	9a07      	ldr	r2, [sp, #28]
 8008876:	4621      	mov	r1, r4
 8008878:	f811 3b01 	ldrb.w	r3, [r1], #1
 800887c:	3b30      	subs	r3, #48	; 0x30
 800887e:	2b09      	cmp	r3, #9
 8008880:	d94e      	bls.n	8008920 <_vfiprintf_r+0x1c4>
 8008882:	b1b0      	cbz	r0, 80088b2 <_vfiprintf_r+0x156>
 8008884:	9207      	str	r2, [sp, #28]
 8008886:	e014      	b.n	80088b2 <_vfiprintf_r+0x156>
 8008888:	eba0 0308 	sub.w	r3, r0, r8
 800888c:	fa09 f303 	lsl.w	r3, r9, r3
 8008890:	4313      	orrs	r3, r2
 8008892:	46a2      	mov	sl, r4
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	e7d2      	b.n	800883e <_vfiprintf_r+0xe2>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	1d19      	adds	r1, r3, #4
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	9103      	str	r1, [sp, #12]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	bfbb      	ittet	lt
 80088a4:	425b      	neglt	r3, r3
 80088a6:	f042 0202 	orrlt.w	r2, r2, #2
 80088aa:	9307      	strge	r3, [sp, #28]
 80088ac:	9307      	strlt	r3, [sp, #28]
 80088ae:	bfb8      	it	lt
 80088b0:	9204      	strlt	r2, [sp, #16]
 80088b2:	7823      	ldrb	r3, [r4, #0]
 80088b4:	2b2e      	cmp	r3, #46	; 0x2e
 80088b6:	d10c      	bne.n	80088d2 <_vfiprintf_r+0x176>
 80088b8:	7863      	ldrb	r3, [r4, #1]
 80088ba:	2b2a      	cmp	r3, #42	; 0x2a
 80088bc:	d135      	bne.n	800892a <_vfiprintf_r+0x1ce>
 80088be:	9b03      	ldr	r3, [sp, #12]
 80088c0:	3402      	adds	r4, #2
 80088c2:	1d1a      	adds	r2, r3, #4
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	9203      	str	r2, [sp, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	bfb8      	it	lt
 80088cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80088d0:	9305      	str	r3, [sp, #20]
 80088d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089b8 <_vfiprintf_r+0x25c>
 80088d6:	2203      	movs	r2, #3
 80088d8:	4650      	mov	r0, sl
 80088da:	7821      	ldrb	r1, [r4, #0]
 80088dc:	f000 fad0 	bl	8008e80 <memchr>
 80088e0:	b140      	cbz	r0, 80088f4 <_vfiprintf_r+0x198>
 80088e2:	2340      	movs	r3, #64	; 0x40
 80088e4:	eba0 000a 	sub.w	r0, r0, sl
 80088e8:	fa03 f000 	lsl.w	r0, r3, r0
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	3401      	adds	r4, #1
 80088f0:	4303      	orrs	r3, r0
 80088f2:	9304      	str	r3, [sp, #16]
 80088f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f8:	2206      	movs	r2, #6
 80088fa:	482c      	ldr	r0, [pc, #176]	; (80089ac <_vfiprintf_r+0x250>)
 80088fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008900:	f000 fabe 	bl	8008e80 <memchr>
 8008904:	2800      	cmp	r0, #0
 8008906:	d03f      	beq.n	8008988 <_vfiprintf_r+0x22c>
 8008908:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <_vfiprintf_r+0x254>)
 800890a:	bb1b      	cbnz	r3, 8008954 <_vfiprintf_r+0x1f8>
 800890c:	9b03      	ldr	r3, [sp, #12]
 800890e:	3307      	adds	r3, #7
 8008910:	f023 0307 	bic.w	r3, r3, #7
 8008914:	3308      	adds	r3, #8
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800891a:	443b      	add	r3, r7
 800891c:	9309      	str	r3, [sp, #36]	; 0x24
 800891e:	e767      	b.n	80087f0 <_vfiprintf_r+0x94>
 8008920:	460c      	mov	r4, r1
 8008922:	2001      	movs	r0, #1
 8008924:	fb0c 3202 	mla	r2, ip, r2, r3
 8008928:	e7a5      	b.n	8008876 <_vfiprintf_r+0x11a>
 800892a:	2300      	movs	r3, #0
 800892c:	f04f 0c0a 	mov.w	ip, #10
 8008930:	4619      	mov	r1, r3
 8008932:	3401      	adds	r4, #1
 8008934:	9305      	str	r3, [sp, #20]
 8008936:	4620      	mov	r0, r4
 8008938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893c:	3a30      	subs	r2, #48	; 0x30
 800893e:	2a09      	cmp	r2, #9
 8008940:	d903      	bls.n	800894a <_vfiprintf_r+0x1ee>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0c5      	beq.n	80088d2 <_vfiprintf_r+0x176>
 8008946:	9105      	str	r1, [sp, #20]
 8008948:	e7c3      	b.n	80088d2 <_vfiprintf_r+0x176>
 800894a:	4604      	mov	r4, r0
 800894c:	2301      	movs	r3, #1
 800894e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008952:	e7f0      	b.n	8008936 <_vfiprintf_r+0x1da>
 8008954:	ab03      	add	r3, sp, #12
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	462a      	mov	r2, r5
 800895a:	4630      	mov	r0, r6
 800895c:	4b15      	ldr	r3, [pc, #84]	; (80089b4 <_vfiprintf_r+0x258>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	f3af 8000 	nop.w
 8008964:	4607      	mov	r7, r0
 8008966:	1c78      	adds	r0, r7, #1
 8008968:	d1d6      	bne.n	8008918 <_vfiprintf_r+0x1bc>
 800896a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800896c:	07d9      	lsls	r1, r3, #31
 800896e:	d405      	bmi.n	800897c <_vfiprintf_r+0x220>
 8008970:	89ab      	ldrh	r3, [r5, #12]
 8008972:	059a      	lsls	r2, r3, #22
 8008974:	d402      	bmi.n	800897c <_vfiprintf_r+0x220>
 8008976:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008978:	f7fe f88a 	bl	8006a90 <__retarget_lock_release_recursive>
 800897c:	89ab      	ldrh	r3, [r5, #12]
 800897e:	065b      	lsls	r3, r3, #25
 8008980:	f53f af12 	bmi.w	80087a8 <_vfiprintf_r+0x4c>
 8008984:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008986:	e711      	b.n	80087ac <_vfiprintf_r+0x50>
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	462a      	mov	r2, r5
 800898e:	4630      	mov	r0, r6
 8008990:	4b08      	ldr	r3, [pc, #32]	; (80089b4 <_vfiprintf_r+0x258>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	f000 f882 	bl	8008a9c <_printf_i>
 8008998:	e7e4      	b.n	8008964 <_vfiprintf_r+0x208>
 800899a:	bf00      	nop
 800899c:	08009ce4 	.word	0x08009ce4
 80089a0:	08009d04 	.word	0x08009d04
 80089a4:	08009cc4 	.word	0x08009cc4
 80089a8:	0800a203 	.word	0x0800a203
 80089ac:	0800a20d 	.word	0x0800a20d
 80089b0:	00000000 	.word	0x00000000
 80089b4:	08008737 	.word	0x08008737
 80089b8:	0800a209 	.word	0x0800a209

080089bc <_printf_common>:
 80089bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089c0:	4616      	mov	r6, r2
 80089c2:	4699      	mov	r9, r3
 80089c4:	688a      	ldr	r2, [r1, #8]
 80089c6:	690b      	ldr	r3, [r1, #16]
 80089c8:	4607      	mov	r7, r0
 80089ca:	4293      	cmp	r3, r2
 80089cc:	bfb8      	it	lt
 80089ce:	4613      	movlt	r3, r2
 80089d0:	6033      	str	r3, [r6, #0]
 80089d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089d6:	460c      	mov	r4, r1
 80089d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089dc:	b10a      	cbz	r2, 80089e2 <_printf_common+0x26>
 80089de:	3301      	adds	r3, #1
 80089e0:	6033      	str	r3, [r6, #0]
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	0699      	lsls	r1, r3, #26
 80089e6:	bf42      	ittt	mi
 80089e8:	6833      	ldrmi	r3, [r6, #0]
 80089ea:	3302      	addmi	r3, #2
 80089ec:	6033      	strmi	r3, [r6, #0]
 80089ee:	6825      	ldr	r5, [r4, #0]
 80089f0:	f015 0506 	ands.w	r5, r5, #6
 80089f4:	d106      	bne.n	8008a04 <_printf_common+0x48>
 80089f6:	f104 0a19 	add.w	sl, r4, #25
 80089fa:	68e3      	ldr	r3, [r4, #12]
 80089fc:	6832      	ldr	r2, [r6, #0]
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	42ab      	cmp	r3, r5
 8008a02:	dc28      	bgt.n	8008a56 <_printf_common+0x9a>
 8008a04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a08:	1e13      	subs	r3, r2, #0
 8008a0a:	6822      	ldr	r2, [r4, #0]
 8008a0c:	bf18      	it	ne
 8008a0e:	2301      	movne	r3, #1
 8008a10:	0692      	lsls	r2, r2, #26
 8008a12:	d42d      	bmi.n	8008a70 <_printf_common+0xb4>
 8008a14:	4649      	mov	r1, r9
 8008a16:	4638      	mov	r0, r7
 8008a18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a1c:	47c0      	blx	r8
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d020      	beq.n	8008a64 <_printf_common+0xa8>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	68e5      	ldr	r5, [r4, #12]
 8008a26:	f003 0306 	and.w	r3, r3, #6
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	bf18      	it	ne
 8008a2e:	2500      	movne	r5, #0
 8008a30:	6832      	ldr	r2, [r6, #0]
 8008a32:	f04f 0600 	mov.w	r6, #0
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	bf08      	it	eq
 8008a3a:	1aad      	subeq	r5, r5, r2
 8008a3c:	6922      	ldr	r2, [r4, #16]
 8008a3e:	bf08      	it	eq
 8008a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a44:	4293      	cmp	r3, r2
 8008a46:	bfc4      	itt	gt
 8008a48:	1a9b      	subgt	r3, r3, r2
 8008a4a:	18ed      	addgt	r5, r5, r3
 8008a4c:	341a      	adds	r4, #26
 8008a4e:	42b5      	cmp	r5, r6
 8008a50:	d11a      	bne.n	8008a88 <_printf_common+0xcc>
 8008a52:	2000      	movs	r0, #0
 8008a54:	e008      	b.n	8008a68 <_printf_common+0xac>
 8008a56:	2301      	movs	r3, #1
 8008a58:	4652      	mov	r2, sl
 8008a5a:	4649      	mov	r1, r9
 8008a5c:	4638      	mov	r0, r7
 8008a5e:	47c0      	blx	r8
 8008a60:	3001      	adds	r0, #1
 8008a62:	d103      	bne.n	8008a6c <_printf_common+0xb0>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6c:	3501      	adds	r5, #1
 8008a6e:	e7c4      	b.n	80089fa <_printf_common+0x3e>
 8008a70:	2030      	movs	r0, #48	; 0x30
 8008a72:	18e1      	adds	r1, r4, r3
 8008a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a7e:	4422      	add	r2, r4
 8008a80:	3302      	adds	r3, #2
 8008a82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a86:	e7c5      	b.n	8008a14 <_printf_common+0x58>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4622      	mov	r2, r4
 8008a8c:	4649      	mov	r1, r9
 8008a8e:	4638      	mov	r0, r7
 8008a90:	47c0      	blx	r8
 8008a92:	3001      	adds	r0, #1
 8008a94:	d0e6      	beq.n	8008a64 <_printf_common+0xa8>
 8008a96:	3601      	adds	r6, #1
 8008a98:	e7d9      	b.n	8008a4e <_printf_common+0x92>
	...

08008a9c <_printf_i>:
 8008a9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aa0:	460c      	mov	r4, r1
 8008aa2:	7e27      	ldrb	r7, [r4, #24]
 8008aa4:	4691      	mov	r9, r2
 8008aa6:	2f78      	cmp	r7, #120	; 0x78
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	469a      	mov	sl, r3
 8008aac:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008aae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ab2:	d807      	bhi.n	8008ac4 <_printf_i+0x28>
 8008ab4:	2f62      	cmp	r7, #98	; 0x62
 8008ab6:	d80a      	bhi.n	8008ace <_printf_i+0x32>
 8008ab8:	2f00      	cmp	r7, #0
 8008aba:	f000 80d9 	beq.w	8008c70 <_printf_i+0x1d4>
 8008abe:	2f58      	cmp	r7, #88	; 0x58
 8008ac0:	f000 80a4 	beq.w	8008c0c <_printf_i+0x170>
 8008ac4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008acc:	e03a      	b.n	8008b44 <_printf_i+0xa8>
 8008ace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ad2:	2b15      	cmp	r3, #21
 8008ad4:	d8f6      	bhi.n	8008ac4 <_printf_i+0x28>
 8008ad6:	a001      	add	r0, pc, #4	; (adr r0, 8008adc <_printf_i+0x40>)
 8008ad8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008adc:	08008b35 	.word	0x08008b35
 8008ae0:	08008b49 	.word	0x08008b49
 8008ae4:	08008ac5 	.word	0x08008ac5
 8008ae8:	08008ac5 	.word	0x08008ac5
 8008aec:	08008ac5 	.word	0x08008ac5
 8008af0:	08008ac5 	.word	0x08008ac5
 8008af4:	08008b49 	.word	0x08008b49
 8008af8:	08008ac5 	.word	0x08008ac5
 8008afc:	08008ac5 	.word	0x08008ac5
 8008b00:	08008ac5 	.word	0x08008ac5
 8008b04:	08008ac5 	.word	0x08008ac5
 8008b08:	08008c57 	.word	0x08008c57
 8008b0c:	08008b79 	.word	0x08008b79
 8008b10:	08008c39 	.word	0x08008c39
 8008b14:	08008ac5 	.word	0x08008ac5
 8008b18:	08008ac5 	.word	0x08008ac5
 8008b1c:	08008c79 	.word	0x08008c79
 8008b20:	08008ac5 	.word	0x08008ac5
 8008b24:	08008b79 	.word	0x08008b79
 8008b28:	08008ac5 	.word	0x08008ac5
 8008b2c:	08008ac5 	.word	0x08008ac5
 8008b30:	08008c41 	.word	0x08008c41
 8008b34:	680b      	ldr	r3, [r1, #0]
 8008b36:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	600a      	str	r2, [r1, #0]
 8008b40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0a4      	b.n	8008c92 <_printf_i+0x1f6>
 8008b48:	6825      	ldr	r5, [r4, #0]
 8008b4a:	6808      	ldr	r0, [r1, #0]
 8008b4c:	062e      	lsls	r6, r5, #24
 8008b4e:	f100 0304 	add.w	r3, r0, #4
 8008b52:	d50a      	bpl.n	8008b6a <_printf_i+0xce>
 8008b54:	6805      	ldr	r5, [r0, #0]
 8008b56:	600b      	str	r3, [r1, #0]
 8008b58:	2d00      	cmp	r5, #0
 8008b5a:	da03      	bge.n	8008b64 <_printf_i+0xc8>
 8008b5c:	232d      	movs	r3, #45	; 0x2d
 8008b5e:	426d      	negs	r5, r5
 8008b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b64:	230a      	movs	r3, #10
 8008b66:	485e      	ldr	r0, [pc, #376]	; (8008ce0 <_printf_i+0x244>)
 8008b68:	e019      	b.n	8008b9e <_printf_i+0x102>
 8008b6a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b6e:	6805      	ldr	r5, [r0, #0]
 8008b70:	600b      	str	r3, [r1, #0]
 8008b72:	bf18      	it	ne
 8008b74:	b22d      	sxthne	r5, r5
 8008b76:	e7ef      	b.n	8008b58 <_printf_i+0xbc>
 8008b78:	680b      	ldr	r3, [r1, #0]
 8008b7a:	6825      	ldr	r5, [r4, #0]
 8008b7c:	1d18      	adds	r0, r3, #4
 8008b7e:	6008      	str	r0, [r1, #0]
 8008b80:	0628      	lsls	r0, r5, #24
 8008b82:	d501      	bpl.n	8008b88 <_printf_i+0xec>
 8008b84:	681d      	ldr	r5, [r3, #0]
 8008b86:	e002      	b.n	8008b8e <_printf_i+0xf2>
 8008b88:	0669      	lsls	r1, r5, #25
 8008b8a:	d5fb      	bpl.n	8008b84 <_printf_i+0xe8>
 8008b8c:	881d      	ldrh	r5, [r3, #0]
 8008b8e:	2f6f      	cmp	r7, #111	; 0x6f
 8008b90:	bf0c      	ite	eq
 8008b92:	2308      	moveq	r3, #8
 8008b94:	230a      	movne	r3, #10
 8008b96:	4852      	ldr	r0, [pc, #328]	; (8008ce0 <_printf_i+0x244>)
 8008b98:	2100      	movs	r1, #0
 8008b9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b9e:	6866      	ldr	r6, [r4, #4]
 8008ba0:	2e00      	cmp	r6, #0
 8008ba2:	bfa8      	it	ge
 8008ba4:	6821      	ldrge	r1, [r4, #0]
 8008ba6:	60a6      	str	r6, [r4, #8]
 8008ba8:	bfa4      	itt	ge
 8008baa:	f021 0104 	bicge.w	r1, r1, #4
 8008bae:	6021      	strge	r1, [r4, #0]
 8008bb0:	b90d      	cbnz	r5, 8008bb6 <_printf_i+0x11a>
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d04d      	beq.n	8008c52 <_printf_i+0x1b6>
 8008bb6:	4616      	mov	r6, r2
 8008bb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bbc:	fb03 5711 	mls	r7, r3, r1, r5
 8008bc0:	5dc7      	ldrb	r7, [r0, r7]
 8008bc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bc6:	462f      	mov	r7, r5
 8008bc8:	42bb      	cmp	r3, r7
 8008bca:	460d      	mov	r5, r1
 8008bcc:	d9f4      	bls.n	8008bb8 <_printf_i+0x11c>
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d10b      	bne.n	8008bea <_printf_i+0x14e>
 8008bd2:	6823      	ldr	r3, [r4, #0]
 8008bd4:	07df      	lsls	r7, r3, #31
 8008bd6:	d508      	bpl.n	8008bea <_printf_i+0x14e>
 8008bd8:	6923      	ldr	r3, [r4, #16]
 8008bda:	6861      	ldr	r1, [r4, #4]
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	bfde      	ittt	le
 8008be0:	2330      	movle	r3, #48	; 0x30
 8008be2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008be6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bea:	1b92      	subs	r2, r2, r6
 8008bec:	6122      	str	r2, [r4, #16]
 8008bee:	464b      	mov	r3, r9
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4640      	mov	r0, r8
 8008bf4:	f8cd a000 	str.w	sl, [sp]
 8008bf8:	aa03      	add	r2, sp, #12
 8008bfa:	f7ff fedf 	bl	80089bc <_printf_common>
 8008bfe:	3001      	adds	r0, #1
 8008c00:	d14c      	bne.n	8008c9c <_printf_i+0x200>
 8008c02:	f04f 30ff 	mov.w	r0, #4294967295
 8008c06:	b004      	add	sp, #16
 8008c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0c:	4834      	ldr	r0, [pc, #208]	; (8008ce0 <_printf_i+0x244>)
 8008c0e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c12:	680e      	ldr	r6, [r1, #0]
 8008c14:	6823      	ldr	r3, [r4, #0]
 8008c16:	f856 5b04 	ldr.w	r5, [r6], #4
 8008c1a:	061f      	lsls	r7, r3, #24
 8008c1c:	600e      	str	r6, [r1, #0]
 8008c1e:	d514      	bpl.n	8008c4a <_printf_i+0x1ae>
 8008c20:	07d9      	lsls	r1, r3, #31
 8008c22:	bf44      	itt	mi
 8008c24:	f043 0320 	orrmi.w	r3, r3, #32
 8008c28:	6023      	strmi	r3, [r4, #0]
 8008c2a:	b91d      	cbnz	r5, 8008c34 <_printf_i+0x198>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	f023 0320 	bic.w	r3, r3, #32
 8008c32:	6023      	str	r3, [r4, #0]
 8008c34:	2310      	movs	r3, #16
 8008c36:	e7af      	b.n	8008b98 <_printf_i+0xfc>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	f043 0320 	orr.w	r3, r3, #32
 8008c3e:	6023      	str	r3, [r4, #0]
 8008c40:	2378      	movs	r3, #120	; 0x78
 8008c42:	4828      	ldr	r0, [pc, #160]	; (8008ce4 <_printf_i+0x248>)
 8008c44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c48:	e7e3      	b.n	8008c12 <_printf_i+0x176>
 8008c4a:	065e      	lsls	r6, r3, #25
 8008c4c:	bf48      	it	mi
 8008c4e:	b2ad      	uxthmi	r5, r5
 8008c50:	e7e6      	b.n	8008c20 <_printf_i+0x184>
 8008c52:	4616      	mov	r6, r2
 8008c54:	e7bb      	b.n	8008bce <_printf_i+0x132>
 8008c56:	680b      	ldr	r3, [r1, #0]
 8008c58:	6826      	ldr	r6, [r4, #0]
 8008c5a:	1d1d      	adds	r5, r3, #4
 8008c5c:	6960      	ldr	r0, [r4, #20]
 8008c5e:	600d      	str	r5, [r1, #0]
 8008c60:	0635      	lsls	r5, r6, #24
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	d501      	bpl.n	8008c6a <_printf_i+0x1ce>
 8008c66:	6018      	str	r0, [r3, #0]
 8008c68:	e002      	b.n	8008c70 <_printf_i+0x1d4>
 8008c6a:	0671      	lsls	r1, r6, #25
 8008c6c:	d5fb      	bpl.n	8008c66 <_printf_i+0x1ca>
 8008c6e:	8018      	strh	r0, [r3, #0]
 8008c70:	2300      	movs	r3, #0
 8008c72:	4616      	mov	r6, r2
 8008c74:	6123      	str	r3, [r4, #16]
 8008c76:	e7ba      	b.n	8008bee <_printf_i+0x152>
 8008c78:	680b      	ldr	r3, [r1, #0]
 8008c7a:	1d1a      	adds	r2, r3, #4
 8008c7c:	600a      	str	r2, [r1, #0]
 8008c7e:	681e      	ldr	r6, [r3, #0]
 8008c80:	2100      	movs	r1, #0
 8008c82:	4630      	mov	r0, r6
 8008c84:	6862      	ldr	r2, [r4, #4]
 8008c86:	f000 f8fb 	bl	8008e80 <memchr>
 8008c8a:	b108      	cbz	r0, 8008c90 <_printf_i+0x1f4>
 8008c8c:	1b80      	subs	r0, r0, r6
 8008c8e:	6060      	str	r0, [r4, #4]
 8008c90:	6863      	ldr	r3, [r4, #4]
 8008c92:	6123      	str	r3, [r4, #16]
 8008c94:	2300      	movs	r3, #0
 8008c96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c9a:	e7a8      	b.n	8008bee <_printf_i+0x152>
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	47d0      	blx	sl
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d0ab      	beq.n	8008c02 <_printf_i+0x166>
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	079b      	lsls	r3, r3, #30
 8008cae:	d413      	bmi.n	8008cd8 <_printf_i+0x23c>
 8008cb0:	68e0      	ldr	r0, [r4, #12]
 8008cb2:	9b03      	ldr	r3, [sp, #12]
 8008cb4:	4298      	cmp	r0, r3
 8008cb6:	bfb8      	it	lt
 8008cb8:	4618      	movlt	r0, r3
 8008cba:	e7a4      	b.n	8008c06 <_printf_i+0x16a>
 8008cbc:	2301      	movs	r3, #1
 8008cbe:	4632      	mov	r2, r6
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	47d0      	blx	sl
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	d09b      	beq.n	8008c02 <_printf_i+0x166>
 8008cca:	3501      	adds	r5, #1
 8008ccc:	68e3      	ldr	r3, [r4, #12]
 8008cce:	9903      	ldr	r1, [sp, #12]
 8008cd0:	1a5b      	subs	r3, r3, r1
 8008cd2:	42ab      	cmp	r3, r5
 8008cd4:	dcf2      	bgt.n	8008cbc <_printf_i+0x220>
 8008cd6:	e7eb      	b.n	8008cb0 <_printf_i+0x214>
 8008cd8:	2500      	movs	r5, #0
 8008cda:	f104 0619 	add.w	r6, r4, #25
 8008cde:	e7f5      	b.n	8008ccc <_printf_i+0x230>
 8008ce0:	0800a214 	.word	0x0800a214
 8008ce4:	0800a225 	.word	0x0800a225

08008ce8 <_read_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4604      	mov	r4, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	4611      	mov	r1, r2
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	4d05      	ldr	r5, [pc, #20]	; (8008d08 <_read_r+0x20>)
 8008cf4:	602a      	str	r2, [r5, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	f7f8 fc93 	bl	8001622 <_read>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_read_r+0x1e>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_read_r+0x1e>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	200006f0 	.word	0x200006f0

08008d0c <sniprintf>:
 8008d0c:	b40c      	push	{r2, r3}
 8008d0e:	b530      	push	{r4, r5, lr}
 8008d10:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <sniprintf+0x64>)
 8008d12:	1e0c      	subs	r4, r1, #0
 8008d14:	681d      	ldr	r5, [r3, #0]
 8008d16:	b09d      	sub	sp, #116	; 0x74
 8008d18:	da08      	bge.n	8008d2c <sniprintf+0x20>
 8008d1a:	238b      	movs	r3, #139	; 0x8b
 8008d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d20:	602b      	str	r3, [r5, #0]
 8008d22:	b01d      	add	sp, #116	; 0x74
 8008d24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d28:	b002      	add	sp, #8
 8008d2a:	4770      	bx	lr
 8008d2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008d30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d34:	bf0c      	ite	eq
 8008d36:	4623      	moveq	r3, r4
 8008d38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	9307      	str	r3, [sp, #28]
 8008d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d44:	9002      	str	r0, [sp, #8]
 8008d46:	9006      	str	r0, [sp, #24]
 8008d48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	ab21      	add	r3, sp, #132	; 0x84
 8008d50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008d52:	a902      	add	r1, sp, #8
 8008d54:	9301      	str	r3, [sp, #4]
 8008d56:	f7ff fbd9 	bl	800850c <_svfiprintf_r>
 8008d5a:	1c43      	adds	r3, r0, #1
 8008d5c:	bfbc      	itt	lt
 8008d5e:	238b      	movlt	r3, #139	; 0x8b
 8008d60:	602b      	strlt	r3, [r5, #0]
 8008d62:	2c00      	cmp	r4, #0
 8008d64:	d0dd      	beq.n	8008d22 <sniprintf+0x16>
 8008d66:	2200      	movs	r2, #0
 8008d68:	9b02      	ldr	r3, [sp, #8]
 8008d6a:	701a      	strb	r2, [r3, #0]
 8008d6c:	e7d9      	b.n	8008d22 <sniprintf+0x16>
 8008d6e:	bf00      	nop
 8008d70:	20000044 	.word	0x20000044

08008d74 <siscanf>:
 8008d74:	b40e      	push	{r1, r2, r3}
 8008d76:	f44f 7201 	mov.w	r2, #516	; 0x204
 8008d7a:	b530      	push	{r4, r5, lr}
 8008d7c:	b09c      	sub	sp, #112	; 0x70
 8008d7e:	ac1f      	add	r4, sp, #124	; 0x7c
 8008d80:	f854 5b04 	ldr.w	r5, [r4], #4
 8008d84:	f8ad 2014 	strh.w	r2, [sp, #20]
 8008d88:	9002      	str	r0, [sp, #8]
 8008d8a:	9006      	str	r0, [sp, #24]
 8008d8c:	f7f7 fa4a 	bl	8000224 <strlen>
 8008d90:	4b0b      	ldr	r3, [pc, #44]	; (8008dc0 <siscanf+0x4c>)
 8008d92:	9003      	str	r0, [sp, #12]
 8008d94:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d96:	2300      	movs	r3, #0
 8008d98:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d9a:	9314      	str	r3, [sp, #80]	; 0x50
 8008d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008da0:	9007      	str	r0, [sp, #28]
 8008da2:	4808      	ldr	r0, [pc, #32]	; (8008dc4 <siscanf+0x50>)
 8008da4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008da8:	462a      	mov	r2, r5
 8008daa:	4623      	mov	r3, r4
 8008dac:	a902      	add	r1, sp, #8
 8008dae:	6800      	ldr	r0, [r0, #0]
 8008db0:	9401      	str	r4, [sp, #4]
 8008db2:	f000 f91b 	bl	8008fec <__ssvfiscanf_r>
 8008db6:	b01c      	add	sp, #112	; 0x70
 8008db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dbc:	b003      	add	sp, #12
 8008dbe:	4770      	bx	lr
 8008dc0:	08006daf 	.word	0x08006daf
 8008dc4:	20000044 	.word	0x20000044

08008dc8 <strcpy>:
 8008dc8:	4603      	mov	r3, r0
 8008dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dce:	f803 2b01 	strb.w	r2, [r3], #1
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	d1f9      	bne.n	8008dca <strcpy+0x2>
 8008dd6:	4770      	bx	lr

08008dd8 <strncmp>:
 8008dd8:	b510      	push	{r4, lr}
 8008dda:	b16a      	cbz	r2, 8008df8 <strncmp+0x20>
 8008ddc:	3901      	subs	r1, #1
 8008dde:	1884      	adds	r4, r0, r2
 8008de0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008de4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d103      	bne.n	8008df4 <strncmp+0x1c>
 8008dec:	42a0      	cmp	r0, r4
 8008dee:	d001      	beq.n	8008df4 <strncmp+0x1c>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d1f5      	bne.n	8008de0 <strncmp+0x8>
 8008df4:	1a98      	subs	r0, r3, r2
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	4610      	mov	r0, r2
 8008dfa:	e7fc      	b.n	8008df6 <strncmp+0x1e>

08008dfc <__ascii_wctomb>:
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	b141      	cbz	r1, 8008e14 <__ascii_wctomb+0x18>
 8008e02:	2aff      	cmp	r2, #255	; 0xff
 8008e04:	d904      	bls.n	8008e10 <__ascii_wctomb+0x14>
 8008e06:	228a      	movs	r2, #138	; 0x8a
 8008e08:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	4770      	bx	lr
 8008e10:	2001      	movs	r0, #1
 8008e12:	700a      	strb	r2, [r1, #0]
 8008e14:	4770      	bx	lr

08008e16 <abort>:
 8008e16:	2006      	movs	r0, #6
 8008e18:	b508      	push	{r3, lr}
 8008e1a:	f000 fc0d 	bl	8009638 <raise>
 8008e1e:	2001      	movs	r0, #1
 8008e20:	f7f8 fbf5 	bl	800160e <_exit>

08008e24 <__env_lock>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__env_lock+0x8>)
 8008e26:	f7fd be31 	b.w	8006a8c <__retarget_lock_acquire_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	200006e6 	.word	0x200006e6

08008e30 <__env_unlock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__env_unlock+0x8>)
 8008e32:	f7fd be2d 	b.w	8006a90 <__retarget_lock_release_recursive>
 8008e36:	bf00      	nop
 8008e38:	200006e6 	.word	0x200006e6

08008e3c <_fstat_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	2300      	movs	r3, #0
 8008e40:	4d06      	ldr	r5, [pc, #24]	; (8008e5c <_fstat_r+0x20>)
 8008e42:	4604      	mov	r4, r0
 8008e44:	4608      	mov	r0, r1
 8008e46:	4611      	mov	r1, r2
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	f7f8 fc2e 	bl	80016aa <_fstat>
 8008e4e:	1c43      	adds	r3, r0, #1
 8008e50:	d102      	bne.n	8008e58 <_fstat_r+0x1c>
 8008e52:	682b      	ldr	r3, [r5, #0]
 8008e54:	b103      	cbz	r3, 8008e58 <_fstat_r+0x1c>
 8008e56:	6023      	str	r3, [r4, #0]
 8008e58:	bd38      	pop	{r3, r4, r5, pc}
 8008e5a:	bf00      	nop
 8008e5c:	200006f0 	.word	0x200006f0

08008e60 <_isatty_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	2300      	movs	r3, #0
 8008e64:	4d05      	ldr	r5, [pc, #20]	; (8008e7c <_isatty_r+0x1c>)
 8008e66:	4604      	mov	r4, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	602b      	str	r3, [r5, #0]
 8008e6c:	f7f8 fc2c 	bl	80016c8 <_isatty>
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d102      	bne.n	8008e7a <_isatty_r+0x1a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	b103      	cbz	r3, 8008e7a <_isatty_r+0x1a>
 8008e78:	6023      	str	r3, [r4, #0]
 8008e7a:	bd38      	pop	{r3, r4, r5, pc}
 8008e7c:	200006f0 	.word	0x200006f0

08008e80 <memchr>:
 8008e80:	4603      	mov	r3, r0
 8008e82:	b510      	push	{r4, lr}
 8008e84:	b2c9      	uxtb	r1, r1
 8008e86:	4402      	add	r2, r0
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	d101      	bne.n	8008e92 <memchr+0x12>
 8008e8e:	2000      	movs	r0, #0
 8008e90:	e003      	b.n	8008e9a <memchr+0x1a>
 8008e92:	7804      	ldrb	r4, [r0, #0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	428c      	cmp	r4, r1
 8008e98:	d1f6      	bne.n	8008e88 <memchr+0x8>
 8008e9a:	bd10      	pop	{r4, pc}

08008e9c <memcpy>:
 8008e9c:	440a      	add	r2, r1
 8008e9e:	4291      	cmp	r1, r2
 8008ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ea4:	d100      	bne.n	8008ea8 <memcpy+0xc>
 8008ea6:	4770      	bx	lr
 8008ea8:	b510      	push	{r4, lr}
 8008eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008eae:	4291      	cmp	r1, r2
 8008eb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eb4:	d1f9      	bne.n	8008eaa <memcpy+0xe>
 8008eb6:	bd10      	pop	{r4, pc}

08008eb8 <memmove>:
 8008eb8:	4288      	cmp	r0, r1
 8008eba:	b510      	push	{r4, lr}
 8008ebc:	eb01 0402 	add.w	r4, r1, r2
 8008ec0:	d902      	bls.n	8008ec8 <memmove+0x10>
 8008ec2:	4284      	cmp	r4, r0
 8008ec4:	4623      	mov	r3, r4
 8008ec6:	d807      	bhi.n	8008ed8 <memmove+0x20>
 8008ec8:	1e43      	subs	r3, r0, #1
 8008eca:	42a1      	cmp	r1, r4
 8008ecc:	d008      	beq.n	8008ee0 <memmove+0x28>
 8008ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ed6:	e7f8      	b.n	8008eca <memmove+0x12>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	4402      	add	r2, r0
 8008edc:	428a      	cmp	r2, r1
 8008ede:	d100      	bne.n	8008ee2 <memmove+0x2a>
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eea:	e7f7      	b.n	8008edc <memmove+0x24>

08008eec <_realloc_r>:
 8008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eee:	4607      	mov	r7, r0
 8008ef0:	4614      	mov	r4, r2
 8008ef2:	460e      	mov	r6, r1
 8008ef4:	b921      	cbnz	r1, 8008f00 <_realloc_r+0x14>
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008efc:	f7fd be2e 	b.w	8006b5c <_malloc_r>
 8008f00:	b922      	cbnz	r2, 8008f0c <_realloc_r+0x20>
 8008f02:	f7fd fddf 	bl	8006ac4 <_free_r>
 8008f06:	4625      	mov	r5, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f0c:	f000 fc70 	bl	80097f0 <_malloc_usable_size_r>
 8008f10:	42a0      	cmp	r0, r4
 8008f12:	d20f      	bcs.n	8008f34 <_realloc_r+0x48>
 8008f14:	4621      	mov	r1, r4
 8008f16:	4638      	mov	r0, r7
 8008f18:	f7fd fe20 	bl	8006b5c <_malloc_r>
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d0f2      	beq.n	8008f08 <_realloc_r+0x1c>
 8008f22:	4631      	mov	r1, r6
 8008f24:	4622      	mov	r2, r4
 8008f26:	f7ff ffb9 	bl	8008e9c <memcpy>
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4638      	mov	r0, r7
 8008f2e:	f7fd fdc9 	bl	8006ac4 <_free_r>
 8008f32:	e7e9      	b.n	8008f08 <_realloc_r+0x1c>
 8008f34:	4635      	mov	r5, r6
 8008f36:	e7e7      	b.n	8008f08 <_realloc_r+0x1c>

08008f38 <_sungetc_r>:
 8008f38:	b538      	push	{r3, r4, r5, lr}
 8008f3a:	1c4b      	adds	r3, r1, #1
 8008f3c:	4614      	mov	r4, r2
 8008f3e:	d103      	bne.n	8008f48 <_sungetc_r+0x10>
 8008f40:	f04f 35ff 	mov.w	r5, #4294967295
 8008f44:	4628      	mov	r0, r5
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	8993      	ldrh	r3, [r2, #12]
 8008f4a:	b2cd      	uxtb	r5, r1
 8008f4c:	f023 0320 	bic.w	r3, r3, #32
 8008f50:	8193      	strh	r3, [r2, #12]
 8008f52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f54:	6852      	ldr	r2, [r2, #4]
 8008f56:	b18b      	cbz	r3, 8008f7c <_sungetc_r+0x44>
 8008f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	dd08      	ble.n	8008f70 <_sungetc_r+0x38>
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	1e5a      	subs	r2, r3, #1
 8008f62:	6022      	str	r2, [r4, #0]
 8008f64:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	6063      	str	r3, [r4, #4]
 8008f6e:	e7e9      	b.n	8008f44 <_sungetc_r+0xc>
 8008f70:	4621      	mov	r1, r4
 8008f72:	f000 fc05 	bl	8009780 <__submore>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0f1      	beq.n	8008f5e <_sungetc_r+0x26>
 8008f7a:	e7e1      	b.n	8008f40 <_sungetc_r+0x8>
 8008f7c:	6921      	ldr	r1, [r4, #16]
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	b151      	cbz	r1, 8008f98 <_sungetc_r+0x60>
 8008f82:	4299      	cmp	r1, r3
 8008f84:	d208      	bcs.n	8008f98 <_sungetc_r+0x60>
 8008f86:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008f8a:	42a9      	cmp	r1, r5
 8008f8c:	d104      	bne.n	8008f98 <_sungetc_r+0x60>
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	3201      	adds	r2, #1
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	6062      	str	r2, [r4, #4]
 8008f96:	e7d5      	b.n	8008f44 <_sungetc_r+0xc>
 8008f98:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fa0:	6363      	str	r3, [r4, #52]	; 0x34
 8008fa2:	2303      	movs	r3, #3
 8008fa4:	63a3      	str	r3, [r4, #56]	; 0x38
 8008fa6:	4623      	mov	r3, r4
 8008fa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008fac:	6023      	str	r3, [r4, #0]
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e7dc      	b.n	8008f6c <_sungetc_r+0x34>

08008fb2 <__ssrefill_r>:
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008fb8:	b169      	cbz	r1, 8008fd6 <__ssrefill_r+0x24>
 8008fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	d001      	beq.n	8008fc6 <__ssrefill_r+0x14>
 8008fc2:	f7fd fd7f 	bl	8006ac4 <_free_r>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fca:	6360      	str	r0, [r4, #52]	; 0x34
 8008fcc:	6063      	str	r3, [r4, #4]
 8008fce:	b113      	cbz	r3, 8008fd6 <__ssrefill_r+0x24>
 8008fd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	6923      	ldr	r3, [r4, #16]
 8008fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fdc:	6023      	str	r3, [r4, #0]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f043 0320 	orr.w	r3, r3, #32
 8008fe8:	81a3      	strh	r3, [r4, #12]
 8008fea:	e7f3      	b.n	8008fd4 <__ssrefill_r+0x22>

08008fec <__ssvfiscanf_r>:
 8008fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008ffa:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008ffe:	49b3      	ldr	r1, [pc, #716]	; (80092cc <__ssvfiscanf_r+0x2e0>)
 8009000:	f10d 0804 	add.w	r8, sp, #4
 8009004:	91a0      	str	r1, [sp, #640]	; 0x280
 8009006:	49b2      	ldr	r1, [pc, #712]	; (80092d0 <__ssvfiscanf_r+0x2e4>)
 8009008:	4fb2      	ldr	r7, [pc, #712]	; (80092d4 <__ssvfiscanf_r+0x2e8>)
 800900a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80092d8 <__ssvfiscanf_r+0x2ec>
 800900e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009012:	91a1      	str	r1, [sp, #644]	; 0x284
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	f892 a000 	ldrb.w	sl, [r2]
 800901a:	f1ba 0f00 	cmp.w	sl, #0
 800901e:	f000 8153 	beq.w	80092c8 <__ssvfiscanf_r+0x2dc>
 8009022:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8009026:	1c55      	adds	r5, r2, #1
 8009028:	f013 0308 	ands.w	r3, r3, #8
 800902c:	d019      	beq.n	8009062 <__ssvfiscanf_r+0x76>
 800902e:	6863      	ldr	r3, [r4, #4]
 8009030:	2b00      	cmp	r3, #0
 8009032:	dd0f      	ble.n	8009054 <__ssvfiscanf_r+0x68>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	781a      	ldrb	r2, [r3, #0]
 8009038:	5cba      	ldrb	r2, [r7, r2]
 800903a:	0712      	lsls	r2, r2, #28
 800903c:	d401      	bmi.n	8009042 <__ssvfiscanf_r+0x56>
 800903e:	462a      	mov	r2, r5
 8009040:	e7e9      	b.n	8009016 <__ssvfiscanf_r+0x2a>
 8009042:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009044:	3301      	adds	r3, #1
 8009046:	3201      	adds	r2, #1
 8009048:	9245      	str	r2, [sp, #276]	; 0x114
 800904a:	6862      	ldr	r2, [r4, #4]
 800904c:	6023      	str	r3, [r4, #0]
 800904e:	3a01      	subs	r2, #1
 8009050:	6062      	str	r2, [r4, #4]
 8009052:	e7ec      	b.n	800902e <__ssvfiscanf_r+0x42>
 8009054:	4621      	mov	r1, r4
 8009056:	4630      	mov	r0, r6
 8009058:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800905a:	4798      	blx	r3
 800905c:	2800      	cmp	r0, #0
 800905e:	d0e9      	beq.n	8009034 <__ssvfiscanf_r+0x48>
 8009060:	e7ed      	b.n	800903e <__ssvfiscanf_r+0x52>
 8009062:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8009066:	f040 8086 	bne.w	8009176 <__ssvfiscanf_r+0x18a>
 800906a:	9341      	str	r3, [sp, #260]	; 0x104
 800906c:	9343      	str	r3, [sp, #268]	; 0x10c
 800906e:	7853      	ldrb	r3, [r2, #1]
 8009070:	2b2a      	cmp	r3, #42	; 0x2a
 8009072:	bf04      	itt	eq
 8009074:	2310      	moveq	r3, #16
 8009076:	1c95      	addeq	r5, r2, #2
 8009078:	f04f 020a 	mov.w	r2, #10
 800907c:	bf08      	it	eq
 800907e:	9341      	streq	r3, [sp, #260]	; 0x104
 8009080:	46ab      	mov	fp, r5
 8009082:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8009086:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800908a:	2b09      	cmp	r3, #9
 800908c:	d91d      	bls.n	80090ca <__ssvfiscanf_r+0xde>
 800908e:	2203      	movs	r2, #3
 8009090:	4891      	ldr	r0, [pc, #580]	; (80092d8 <__ssvfiscanf_r+0x2ec>)
 8009092:	f7ff fef5 	bl	8008e80 <memchr>
 8009096:	b140      	cbz	r0, 80090aa <__ssvfiscanf_r+0xbe>
 8009098:	2301      	movs	r3, #1
 800909a:	465d      	mov	r5, fp
 800909c:	eba0 0009 	sub.w	r0, r0, r9
 80090a0:	fa03 f000 	lsl.w	r0, r3, r0
 80090a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80090a6:	4318      	orrs	r0, r3
 80090a8:	9041      	str	r0, [sp, #260]	; 0x104
 80090aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80090ae:	2b78      	cmp	r3, #120	; 0x78
 80090b0:	d806      	bhi.n	80090c0 <__ssvfiscanf_r+0xd4>
 80090b2:	2b57      	cmp	r3, #87	; 0x57
 80090b4:	d810      	bhi.n	80090d8 <__ssvfiscanf_r+0xec>
 80090b6:	2b25      	cmp	r3, #37	; 0x25
 80090b8:	d05d      	beq.n	8009176 <__ssvfiscanf_r+0x18a>
 80090ba:	d857      	bhi.n	800916c <__ssvfiscanf_r+0x180>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d075      	beq.n	80091ac <__ssvfiscanf_r+0x1c0>
 80090c0:	2303      	movs	r3, #3
 80090c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80090c4:	230a      	movs	r3, #10
 80090c6:	9342      	str	r3, [sp, #264]	; 0x108
 80090c8:	e082      	b.n	80091d0 <__ssvfiscanf_r+0x1e4>
 80090ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80090cc:	465d      	mov	r5, fp
 80090ce:	fb02 1303 	mla	r3, r2, r3, r1
 80090d2:	3b30      	subs	r3, #48	; 0x30
 80090d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80090d6:	e7d3      	b.n	8009080 <__ssvfiscanf_r+0x94>
 80090d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80090dc:	2a20      	cmp	r2, #32
 80090de:	d8ef      	bhi.n	80090c0 <__ssvfiscanf_r+0xd4>
 80090e0:	a101      	add	r1, pc, #4	; (adr r1, 80090e8 <__ssvfiscanf_r+0xfc>)
 80090e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80090e6:	bf00      	nop
 80090e8:	080091bb 	.word	0x080091bb
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	080090c1 	.word	0x080090c1
 80090f4:	08009219 	.word	0x08009219
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	080090c1 	.word	0x080090c1
 8009108:	080090c1 	.word	0x080090c1
 800910c:	080090c1 	.word	0x080090c1
 8009110:	080090c1 	.word	0x080090c1
 8009114:	0800922f 	.word	0x0800922f
 8009118:	08009205 	.word	0x08009205
 800911c:	08009173 	.word	0x08009173
 8009120:	08009173 	.word	0x08009173
 8009124:	08009173 	.word	0x08009173
 8009128:	080090c1 	.word	0x080090c1
 800912c:	08009209 	.word	0x08009209
 8009130:	080090c1 	.word	0x080090c1
 8009134:	080090c1 	.word	0x080090c1
 8009138:	080090c1 	.word	0x080090c1
 800913c:	080090c1 	.word	0x080090c1
 8009140:	0800923f 	.word	0x0800923f
 8009144:	08009211 	.word	0x08009211
 8009148:	080091b3 	.word	0x080091b3
 800914c:	080090c1 	.word	0x080090c1
 8009150:	080090c1 	.word	0x080090c1
 8009154:	0800923b 	.word	0x0800923b
 8009158:	080090c1 	.word	0x080090c1
 800915c:	08009205 	.word	0x08009205
 8009160:	080090c1 	.word	0x080090c1
 8009164:	080090c1 	.word	0x080090c1
 8009168:	080091bb 	.word	0x080091bb
 800916c:	3b45      	subs	r3, #69	; 0x45
 800916e:	2b02      	cmp	r3, #2
 8009170:	d8a6      	bhi.n	80090c0 <__ssvfiscanf_r+0xd4>
 8009172:	2305      	movs	r3, #5
 8009174:	e02b      	b.n	80091ce <__ssvfiscanf_r+0x1e2>
 8009176:	6863      	ldr	r3, [r4, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	dd0d      	ble.n	8009198 <__ssvfiscanf_r+0x1ac>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	781a      	ldrb	r2, [r3, #0]
 8009180:	4552      	cmp	r2, sl
 8009182:	f040 80a1 	bne.w	80092c8 <__ssvfiscanf_r+0x2dc>
 8009186:	3301      	adds	r3, #1
 8009188:	6862      	ldr	r2, [r4, #4]
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800918e:	3a01      	subs	r2, #1
 8009190:	3301      	adds	r3, #1
 8009192:	6062      	str	r2, [r4, #4]
 8009194:	9345      	str	r3, [sp, #276]	; 0x114
 8009196:	e752      	b.n	800903e <__ssvfiscanf_r+0x52>
 8009198:	4621      	mov	r1, r4
 800919a:	4630      	mov	r0, r6
 800919c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800919e:	4798      	blx	r3
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d0eb      	beq.n	800917c <__ssvfiscanf_r+0x190>
 80091a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f040 8084 	bne.w	80092b4 <__ssvfiscanf_r+0x2c8>
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	e086      	b.n	80092c0 <__ssvfiscanf_r+0x2d4>
 80091b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091b4:	f042 0220 	orr.w	r2, r2, #32
 80091b8:	9241      	str	r2, [sp, #260]	; 0x104
 80091ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80091bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091c0:	9241      	str	r2, [sp, #260]	; 0x104
 80091c2:	2210      	movs	r2, #16
 80091c4:	2b6f      	cmp	r3, #111	; 0x6f
 80091c6:	bf34      	ite	cc
 80091c8:	2303      	movcc	r3, #3
 80091ca:	2304      	movcs	r3, #4
 80091cc:	9242      	str	r2, [sp, #264]	; 0x108
 80091ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80091d0:	6863      	ldr	r3, [r4, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd41      	ble.n	800925a <__ssvfiscanf_r+0x26e>
 80091d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80091d8:	0659      	lsls	r1, r3, #25
 80091da:	d404      	bmi.n	80091e6 <__ssvfiscanf_r+0x1fa>
 80091dc:	6823      	ldr	r3, [r4, #0]
 80091de:	781a      	ldrb	r2, [r3, #0]
 80091e0:	5cba      	ldrb	r2, [r7, r2]
 80091e2:	0712      	lsls	r2, r2, #28
 80091e4:	d440      	bmi.n	8009268 <__ssvfiscanf_r+0x27c>
 80091e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	dc4f      	bgt.n	800928c <__ssvfiscanf_r+0x2a0>
 80091ec:	466b      	mov	r3, sp
 80091ee:	4622      	mov	r2, r4
 80091f0:	4630      	mov	r0, r6
 80091f2:	a941      	add	r1, sp, #260	; 0x104
 80091f4:	f000 f874 	bl	80092e0 <_scanf_chars>
 80091f8:	2801      	cmp	r0, #1
 80091fa:	d065      	beq.n	80092c8 <__ssvfiscanf_r+0x2dc>
 80091fc:	2802      	cmp	r0, #2
 80091fe:	f47f af1e 	bne.w	800903e <__ssvfiscanf_r+0x52>
 8009202:	e7cf      	b.n	80091a4 <__ssvfiscanf_r+0x1b8>
 8009204:	220a      	movs	r2, #10
 8009206:	e7dd      	b.n	80091c4 <__ssvfiscanf_r+0x1d8>
 8009208:	2300      	movs	r3, #0
 800920a:	9342      	str	r3, [sp, #264]	; 0x108
 800920c:	2303      	movs	r3, #3
 800920e:	e7de      	b.n	80091ce <__ssvfiscanf_r+0x1e2>
 8009210:	2308      	movs	r3, #8
 8009212:	9342      	str	r3, [sp, #264]	; 0x108
 8009214:	2304      	movs	r3, #4
 8009216:	e7da      	b.n	80091ce <__ssvfiscanf_r+0x1e2>
 8009218:	4629      	mov	r1, r5
 800921a:	4640      	mov	r0, r8
 800921c:	f000 f9aa 	bl	8009574 <__sccl>
 8009220:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009222:	4605      	mov	r5, r0
 8009224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009228:	9341      	str	r3, [sp, #260]	; 0x104
 800922a:	2301      	movs	r3, #1
 800922c:	e7cf      	b.n	80091ce <__ssvfiscanf_r+0x1e2>
 800922e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009234:	9341      	str	r3, [sp, #260]	; 0x104
 8009236:	2300      	movs	r3, #0
 8009238:	e7c9      	b.n	80091ce <__ssvfiscanf_r+0x1e2>
 800923a:	2302      	movs	r3, #2
 800923c:	e7c7      	b.n	80091ce <__ssvfiscanf_r+0x1e2>
 800923e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009240:	06c3      	lsls	r3, r0, #27
 8009242:	f53f aefc 	bmi.w	800903e <__ssvfiscanf_r+0x52>
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800924a:	1d19      	adds	r1, r3, #4
 800924c:	9100      	str	r1, [sp, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	07c0      	lsls	r0, r0, #31
 8009252:	bf4c      	ite	mi
 8009254:	801a      	strhmi	r2, [r3, #0]
 8009256:	601a      	strpl	r2, [r3, #0]
 8009258:	e6f1      	b.n	800903e <__ssvfiscanf_r+0x52>
 800925a:	4621      	mov	r1, r4
 800925c:	4630      	mov	r0, r6
 800925e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009260:	4798      	blx	r3
 8009262:	2800      	cmp	r0, #0
 8009264:	d0b7      	beq.n	80091d6 <__ssvfiscanf_r+0x1ea>
 8009266:	e79d      	b.n	80091a4 <__ssvfiscanf_r+0x1b8>
 8009268:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800926a:	3201      	adds	r2, #1
 800926c:	9245      	str	r2, [sp, #276]	; 0x114
 800926e:	6862      	ldr	r2, [r4, #4]
 8009270:	3a01      	subs	r2, #1
 8009272:	2a00      	cmp	r2, #0
 8009274:	6062      	str	r2, [r4, #4]
 8009276:	dd02      	ble.n	800927e <__ssvfiscanf_r+0x292>
 8009278:	3301      	adds	r3, #1
 800927a:	6023      	str	r3, [r4, #0]
 800927c:	e7ae      	b.n	80091dc <__ssvfiscanf_r+0x1f0>
 800927e:	4621      	mov	r1, r4
 8009280:	4630      	mov	r0, r6
 8009282:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009284:	4798      	blx	r3
 8009286:	2800      	cmp	r0, #0
 8009288:	d0a8      	beq.n	80091dc <__ssvfiscanf_r+0x1f0>
 800928a:	e78b      	b.n	80091a4 <__ssvfiscanf_r+0x1b8>
 800928c:	2b04      	cmp	r3, #4
 800928e:	dc06      	bgt.n	800929e <__ssvfiscanf_r+0x2b2>
 8009290:	466b      	mov	r3, sp
 8009292:	4622      	mov	r2, r4
 8009294:	4630      	mov	r0, r6
 8009296:	a941      	add	r1, sp, #260	; 0x104
 8009298:	f000 f87a 	bl	8009390 <_scanf_i>
 800929c:	e7ac      	b.n	80091f8 <__ssvfiscanf_r+0x20c>
 800929e:	4b0f      	ldr	r3, [pc, #60]	; (80092dc <__ssvfiscanf_r+0x2f0>)
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f43f aecc 	beq.w	800903e <__ssvfiscanf_r+0x52>
 80092a6:	466b      	mov	r3, sp
 80092a8:	4622      	mov	r2, r4
 80092aa:	4630      	mov	r0, r6
 80092ac:	a941      	add	r1, sp, #260	; 0x104
 80092ae:	f3af 8000 	nop.w
 80092b2:	e7a1      	b.n	80091f8 <__ssvfiscanf_r+0x20c>
 80092b4:	89a3      	ldrh	r3, [r4, #12]
 80092b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80092ba:	bf18      	it	ne
 80092bc:	f04f 30ff 	movne.w	r0, #4294967295
 80092c0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80092c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80092ca:	e7f9      	b.n	80092c0 <__ssvfiscanf_r+0x2d4>
 80092cc:	08008f39 	.word	0x08008f39
 80092d0:	08008fb3 	.word	0x08008fb3
 80092d4:	0800a0f9 	.word	0x0800a0f9
 80092d8:	0800a209 	.word	0x0800a209
 80092dc:	00000000 	.word	0x00000000

080092e0 <_scanf_chars>:
 80092e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e4:	4615      	mov	r5, r2
 80092e6:	688a      	ldr	r2, [r1, #8]
 80092e8:	4680      	mov	r8, r0
 80092ea:	460c      	mov	r4, r1
 80092ec:	b932      	cbnz	r2, 80092fc <_scanf_chars+0x1c>
 80092ee:	698a      	ldr	r2, [r1, #24]
 80092f0:	2a00      	cmp	r2, #0
 80092f2:	bf0c      	ite	eq
 80092f4:	2201      	moveq	r2, #1
 80092f6:	f04f 32ff 	movne.w	r2, #4294967295
 80092fa:	608a      	str	r2, [r1, #8]
 80092fc:	2700      	movs	r7, #0
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800938c <_scanf_chars+0xac>
 8009304:	06d1      	lsls	r1, r2, #27
 8009306:	bf5f      	itttt	pl
 8009308:	681a      	ldrpl	r2, [r3, #0]
 800930a:	1d11      	addpl	r1, r2, #4
 800930c:	6019      	strpl	r1, [r3, #0]
 800930e:	6816      	ldrpl	r6, [r2, #0]
 8009310:	69a0      	ldr	r0, [r4, #24]
 8009312:	b188      	cbz	r0, 8009338 <_scanf_chars+0x58>
 8009314:	2801      	cmp	r0, #1
 8009316:	d107      	bne.n	8009328 <_scanf_chars+0x48>
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	6963      	ldr	r3, [r4, #20]
 800931e:	5c9b      	ldrb	r3, [r3, r2]
 8009320:	b953      	cbnz	r3, 8009338 <_scanf_chars+0x58>
 8009322:	bb27      	cbnz	r7, 800936e <_scanf_chars+0x8e>
 8009324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009328:	2802      	cmp	r0, #2
 800932a:	d120      	bne.n	800936e <_scanf_chars+0x8e>
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	f813 3009 	ldrb.w	r3, [r3, r9]
 8009334:	071b      	lsls	r3, r3, #28
 8009336:	d41a      	bmi.n	800936e <_scanf_chars+0x8e>
 8009338:	6823      	ldr	r3, [r4, #0]
 800933a:	3701      	adds	r7, #1
 800933c:	06da      	lsls	r2, r3, #27
 800933e:	bf5e      	ittt	pl
 8009340:	682b      	ldrpl	r3, [r5, #0]
 8009342:	781b      	ldrbpl	r3, [r3, #0]
 8009344:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009348:	682a      	ldr	r2, [r5, #0]
 800934a:	686b      	ldr	r3, [r5, #4]
 800934c:	3201      	adds	r2, #1
 800934e:	602a      	str	r2, [r5, #0]
 8009350:	68a2      	ldr	r2, [r4, #8]
 8009352:	3b01      	subs	r3, #1
 8009354:	3a01      	subs	r2, #1
 8009356:	606b      	str	r3, [r5, #4]
 8009358:	60a2      	str	r2, [r4, #8]
 800935a:	b142      	cbz	r2, 800936e <_scanf_chars+0x8e>
 800935c:	2b00      	cmp	r3, #0
 800935e:	dcd7      	bgt.n	8009310 <_scanf_chars+0x30>
 8009360:	4629      	mov	r1, r5
 8009362:	4640      	mov	r0, r8
 8009364:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009368:	4798      	blx	r3
 800936a:	2800      	cmp	r0, #0
 800936c:	d0d0      	beq.n	8009310 <_scanf_chars+0x30>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f013 0310 	ands.w	r3, r3, #16
 8009374:	d105      	bne.n	8009382 <_scanf_chars+0xa2>
 8009376:	68e2      	ldr	r2, [r4, #12]
 8009378:	3201      	adds	r2, #1
 800937a:	60e2      	str	r2, [r4, #12]
 800937c:	69a2      	ldr	r2, [r4, #24]
 800937e:	b102      	cbz	r2, 8009382 <_scanf_chars+0xa2>
 8009380:	7033      	strb	r3, [r6, #0]
 8009382:	6923      	ldr	r3, [r4, #16]
 8009384:	2000      	movs	r0, #0
 8009386:	441f      	add	r7, r3
 8009388:	6127      	str	r7, [r4, #16]
 800938a:	e7cb      	b.n	8009324 <_scanf_chars+0x44>
 800938c:	0800a0f9 	.word	0x0800a0f9

08009390 <_scanf_i>:
 8009390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	460c      	mov	r4, r1
 8009396:	4698      	mov	r8, r3
 8009398:	4b72      	ldr	r3, [pc, #456]	; (8009564 <_scanf_i+0x1d4>)
 800939a:	b087      	sub	sp, #28
 800939c:	4682      	mov	sl, r0
 800939e:	4616      	mov	r6, r2
 80093a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093a4:	ab03      	add	r3, sp, #12
 80093a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80093aa:	4b6f      	ldr	r3, [pc, #444]	; (8009568 <_scanf_i+0x1d8>)
 80093ac:	69a1      	ldr	r1, [r4, #24]
 80093ae:	4a6f      	ldr	r2, [pc, #444]	; (800956c <_scanf_i+0x1dc>)
 80093b0:	4627      	mov	r7, r4
 80093b2:	2903      	cmp	r1, #3
 80093b4:	bf18      	it	ne
 80093b6:	461a      	movne	r2, r3
 80093b8:	68a3      	ldr	r3, [r4, #8]
 80093ba:	9201      	str	r2, [sp, #4]
 80093bc:	1e5a      	subs	r2, r3, #1
 80093be:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80093c2:	bf81      	itttt	hi
 80093c4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80093c8:	eb03 0905 	addhi.w	r9, r3, r5
 80093cc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80093d0:	60a3      	strhi	r3, [r4, #8]
 80093d2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80093d6:	bf98      	it	ls
 80093d8:	f04f 0900 	movls.w	r9, #0
 80093dc:	463d      	mov	r5, r7
 80093de:	f04f 0b00 	mov.w	fp, #0
 80093e2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	6831      	ldr	r1, [r6, #0]
 80093ea:	ab03      	add	r3, sp, #12
 80093ec:	2202      	movs	r2, #2
 80093ee:	7809      	ldrb	r1, [r1, #0]
 80093f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80093f4:	f7ff fd44 	bl	8008e80 <memchr>
 80093f8:	b328      	cbz	r0, 8009446 <_scanf_i+0xb6>
 80093fa:	f1bb 0f01 	cmp.w	fp, #1
 80093fe:	d159      	bne.n	80094b4 <_scanf_i+0x124>
 8009400:	6862      	ldr	r2, [r4, #4]
 8009402:	b92a      	cbnz	r2, 8009410 <_scanf_i+0x80>
 8009404:	2308      	movs	r3, #8
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	6063      	str	r3, [r4, #4]
 800940a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800940e:	6022      	str	r2, [r4, #0]
 8009410:	6822      	ldr	r2, [r4, #0]
 8009412:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009416:	6022      	str	r2, [r4, #0]
 8009418:	68a2      	ldr	r2, [r4, #8]
 800941a:	1e51      	subs	r1, r2, #1
 800941c:	60a1      	str	r1, [r4, #8]
 800941e:	b192      	cbz	r2, 8009446 <_scanf_i+0xb6>
 8009420:	6832      	ldr	r2, [r6, #0]
 8009422:	1c51      	adds	r1, r2, #1
 8009424:	6031      	str	r1, [r6, #0]
 8009426:	7812      	ldrb	r2, [r2, #0]
 8009428:	f805 2b01 	strb.w	r2, [r5], #1
 800942c:	6872      	ldr	r2, [r6, #4]
 800942e:	3a01      	subs	r2, #1
 8009430:	2a00      	cmp	r2, #0
 8009432:	6072      	str	r2, [r6, #4]
 8009434:	dc07      	bgt.n	8009446 <_scanf_i+0xb6>
 8009436:	4631      	mov	r1, r6
 8009438:	4650      	mov	r0, sl
 800943a:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800943e:	4790      	blx	r2
 8009440:	2800      	cmp	r0, #0
 8009442:	f040 8085 	bne.w	8009550 <_scanf_i+0x1c0>
 8009446:	f10b 0b01 	add.w	fp, fp, #1
 800944a:	f1bb 0f03 	cmp.w	fp, #3
 800944e:	d1cb      	bne.n	80093e8 <_scanf_i+0x58>
 8009450:	6863      	ldr	r3, [r4, #4]
 8009452:	b90b      	cbnz	r3, 8009458 <_scanf_i+0xc8>
 8009454:	230a      	movs	r3, #10
 8009456:	6063      	str	r3, [r4, #4]
 8009458:	6863      	ldr	r3, [r4, #4]
 800945a:	4945      	ldr	r1, [pc, #276]	; (8009570 <_scanf_i+0x1e0>)
 800945c:	6960      	ldr	r0, [r4, #20]
 800945e:	1ac9      	subs	r1, r1, r3
 8009460:	f000 f888 	bl	8009574 <__sccl>
 8009464:	f04f 0b00 	mov.w	fp, #0
 8009468:	68a3      	ldr	r3, [r4, #8]
 800946a:	6822      	ldr	r2, [r4, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d03d      	beq.n	80094ec <_scanf_i+0x15c>
 8009470:	6831      	ldr	r1, [r6, #0]
 8009472:	6960      	ldr	r0, [r4, #20]
 8009474:	f891 c000 	ldrb.w	ip, [r1]
 8009478:	f810 000c 	ldrb.w	r0, [r0, ip]
 800947c:	2800      	cmp	r0, #0
 800947e:	d035      	beq.n	80094ec <_scanf_i+0x15c>
 8009480:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009484:	d124      	bne.n	80094d0 <_scanf_i+0x140>
 8009486:	0510      	lsls	r0, r2, #20
 8009488:	d522      	bpl.n	80094d0 <_scanf_i+0x140>
 800948a:	f10b 0b01 	add.w	fp, fp, #1
 800948e:	f1b9 0f00 	cmp.w	r9, #0
 8009492:	d003      	beq.n	800949c <_scanf_i+0x10c>
 8009494:	3301      	adds	r3, #1
 8009496:	f109 39ff 	add.w	r9, r9, #4294967295
 800949a:	60a3      	str	r3, [r4, #8]
 800949c:	6873      	ldr	r3, [r6, #4]
 800949e:	3b01      	subs	r3, #1
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	6073      	str	r3, [r6, #4]
 80094a4:	dd1b      	ble.n	80094de <_scanf_i+0x14e>
 80094a6:	6833      	ldr	r3, [r6, #0]
 80094a8:	3301      	adds	r3, #1
 80094aa:	6033      	str	r3, [r6, #0]
 80094ac:	68a3      	ldr	r3, [r4, #8]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	60a3      	str	r3, [r4, #8]
 80094b2:	e7d9      	b.n	8009468 <_scanf_i+0xd8>
 80094b4:	f1bb 0f02 	cmp.w	fp, #2
 80094b8:	d1ae      	bne.n	8009418 <_scanf_i+0x88>
 80094ba:	6822      	ldr	r2, [r4, #0]
 80094bc:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80094c0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80094c4:	d1bf      	bne.n	8009446 <_scanf_i+0xb6>
 80094c6:	2310      	movs	r3, #16
 80094c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094cc:	6063      	str	r3, [r4, #4]
 80094ce:	e7a2      	b.n	8009416 <_scanf_i+0x86>
 80094d0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	780b      	ldrb	r3, [r1, #0]
 80094d8:	f805 3b01 	strb.w	r3, [r5], #1
 80094dc:	e7de      	b.n	800949c <_scanf_i+0x10c>
 80094de:	4631      	mov	r1, r6
 80094e0:	4650      	mov	r0, sl
 80094e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80094e6:	4798      	blx	r3
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d0df      	beq.n	80094ac <_scanf_i+0x11c>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	05d9      	lsls	r1, r3, #23
 80094f0:	d50d      	bpl.n	800950e <_scanf_i+0x17e>
 80094f2:	42bd      	cmp	r5, r7
 80094f4:	d909      	bls.n	800950a <_scanf_i+0x17a>
 80094f6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80094fa:	4632      	mov	r2, r6
 80094fc:	4650      	mov	r0, sl
 80094fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009502:	f105 39ff 	add.w	r9, r5, #4294967295
 8009506:	4798      	blx	r3
 8009508:	464d      	mov	r5, r9
 800950a:	42bd      	cmp	r5, r7
 800950c:	d028      	beq.n	8009560 <_scanf_i+0x1d0>
 800950e:	6822      	ldr	r2, [r4, #0]
 8009510:	f012 0210 	ands.w	r2, r2, #16
 8009514:	d113      	bne.n	800953e <_scanf_i+0x1ae>
 8009516:	702a      	strb	r2, [r5, #0]
 8009518:	4639      	mov	r1, r7
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	4650      	mov	r0, sl
 800951e:	9e01      	ldr	r6, [sp, #4]
 8009520:	47b0      	blx	r6
 8009522:	f8d8 3000 	ldr.w	r3, [r8]
 8009526:	6821      	ldr	r1, [r4, #0]
 8009528:	1d1a      	adds	r2, r3, #4
 800952a:	f8c8 2000 	str.w	r2, [r8]
 800952e:	f011 0f20 	tst.w	r1, #32
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	d00f      	beq.n	8009556 <_scanf_i+0x1c6>
 8009536:	6018      	str	r0, [r3, #0]
 8009538:	68e3      	ldr	r3, [r4, #12]
 800953a:	3301      	adds	r3, #1
 800953c:	60e3      	str	r3, [r4, #12]
 800953e:	2000      	movs	r0, #0
 8009540:	1bed      	subs	r5, r5, r7
 8009542:	44ab      	add	fp, r5
 8009544:	6925      	ldr	r5, [r4, #16]
 8009546:	445d      	add	r5, fp
 8009548:	6125      	str	r5, [r4, #16]
 800954a:	b007      	add	sp, #28
 800954c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009550:	f04f 0b00 	mov.w	fp, #0
 8009554:	e7ca      	b.n	80094ec <_scanf_i+0x15c>
 8009556:	07ca      	lsls	r2, r1, #31
 8009558:	bf4c      	ite	mi
 800955a:	8018      	strhmi	r0, [r3, #0]
 800955c:	6018      	strpl	r0, [r3, #0]
 800955e:	e7eb      	b.n	8009538 <_scanf_i+0x1a8>
 8009560:	2001      	movs	r0, #1
 8009562:	e7f2      	b.n	800954a <_scanf_i+0x1ba>
 8009564:	08009ca0 	.word	0x08009ca0
 8009568:	080079fd 	.word	0x080079fd
 800956c:	0800977d 	.word	0x0800977d
 8009570:	0800a24f 	.word	0x0800a24f

08009574 <__sccl>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	780b      	ldrb	r3, [r1, #0]
 8009578:	4604      	mov	r4, r0
 800957a:	2b5e      	cmp	r3, #94	; 0x5e
 800957c:	bf13      	iteet	ne
 800957e:	2200      	movne	r2, #0
 8009580:	2201      	moveq	r2, #1
 8009582:	784b      	ldrbeq	r3, [r1, #1]
 8009584:	1c48      	addne	r0, r1, #1
 8009586:	bf08      	it	eq
 8009588:	1c88      	addeq	r0, r1, #2
 800958a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800958e:	1e61      	subs	r1, r4, #1
 8009590:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009594:	42a9      	cmp	r1, r5
 8009596:	d1fb      	bne.n	8009590 <__sccl+0x1c>
 8009598:	b90b      	cbnz	r3, 800959e <__sccl+0x2a>
 800959a:	3801      	subs	r0, #1
 800959c:	bd70      	pop	{r4, r5, r6, pc}
 800959e:	f082 0101 	eor.w	r1, r2, #1
 80095a2:	54e1      	strb	r1, [r4, r3]
 80095a4:	1c42      	adds	r2, r0, #1
 80095a6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80095aa:	4610      	mov	r0, r2
 80095ac:	2d2d      	cmp	r5, #45	; 0x2d
 80095ae:	f102 36ff 	add.w	r6, r2, #4294967295
 80095b2:	d006      	beq.n	80095c2 <__sccl+0x4e>
 80095b4:	2d5d      	cmp	r5, #93	; 0x5d
 80095b6:	d0f1      	beq.n	800959c <__sccl+0x28>
 80095b8:	b90d      	cbnz	r5, 80095be <__sccl+0x4a>
 80095ba:	4630      	mov	r0, r6
 80095bc:	e7ee      	b.n	800959c <__sccl+0x28>
 80095be:	462b      	mov	r3, r5
 80095c0:	e7ef      	b.n	80095a2 <__sccl+0x2e>
 80095c2:	7816      	ldrb	r6, [r2, #0]
 80095c4:	2e5d      	cmp	r6, #93	; 0x5d
 80095c6:	d0fa      	beq.n	80095be <__sccl+0x4a>
 80095c8:	42b3      	cmp	r3, r6
 80095ca:	dcf8      	bgt.n	80095be <__sccl+0x4a>
 80095cc:	4618      	mov	r0, r3
 80095ce:	3001      	adds	r0, #1
 80095d0:	4286      	cmp	r6, r0
 80095d2:	5421      	strb	r1, [r4, r0]
 80095d4:	dcfb      	bgt.n	80095ce <__sccl+0x5a>
 80095d6:	43d8      	mvns	r0, r3
 80095d8:	4430      	add	r0, r6
 80095da:	42b3      	cmp	r3, r6
 80095dc:	bfa8      	it	ge
 80095de:	2000      	movge	r0, #0
 80095e0:	1c5d      	adds	r5, r3, #1
 80095e2:	182b      	adds	r3, r5, r0
 80095e4:	3202      	adds	r2, #2
 80095e6:	e7de      	b.n	80095a6 <__sccl+0x32>

080095e8 <_raise_r>:
 80095e8:	291f      	cmp	r1, #31
 80095ea:	b538      	push	{r3, r4, r5, lr}
 80095ec:	4604      	mov	r4, r0
 80095ee:	460d      	mov	r5, r1
 80095f0:	d904      	bls.n	80095fc <_raise_r+0x14>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	f04f 30ff 	mov.w	r0, #4294967295
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095fe:	b112      	cbz	r2, 8009606 <_raise_r+0x1e>
 8009600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009604:	b94b      	cbnz	r3, 800961a <_raise_r+0x32>
 8009606:	4620      	mov	r0, r4
 8009608:	f000 f830 	bl	800966c <_getpid_r>
 800960c:	462a      	mov	r2, r5
 800960e:	4601      	mov	r1, r0
 8009610:	4620      	mov	r0, r4
 8009612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009616:	f000 b817 	b.w	8009648 <_kill_r>
 800961a:	2b01      	cmp	r3, #1
 800961c:	d00a      	beq.n	8009634 <_raise_r+0x4c>
 800961e:	1c59      	adds	r1, r3, #1
 8009620:	d103      	bne.n	800962a <_raise_r+0x42>
 8009622:	2316      	movs	r3, #22
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	2001      	movs	r0, #1
 8009628:	e7e7      	b.n	80095fa <_raise_r+0x12>
 800962a:	2400      	movs	r4, #0
 800962c:	4628      	mov	r0, r5
 800962e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009632:	4798      	blx	r3
 8009634:	2000      	movs	r0, #0
 8009636:	e7e0      	b.n	80095fa <_raise_r+0x12>

08009638 <raise>:
 8009638:	4b02      	ldr	r3, [pc, #8]	; (8009644 <raise+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f7ff bfd3 	b.w	80095e8 <_raise_r>
 8009642:	bf00      	nop
 8009644:	20000044 	.word	0x20000044

08009648 <_kill_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	2300      	movs	r3, #0
 800964c:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_kill_r+0x20>)
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f7f7 ffca 	bl	80015ee <_kill>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d102      	bne.n	8009664 <_kill_r+0x1c>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b103      	cbz	r3, 8009664 <_kill_r+0x1c>
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd38      	pop	{r3, r4, r5, pc}
 8009666:	bf00      	nop
 8009668:	200006f0 	.word	0x200006f0

0800966c <_getpid_r>:
 800966c:	f7f7 bfb8 	b.w	80015e0 <_getpid>

08009670 <_strtol_l.isra.0>:
 8009670:	2b01      	cmp	r3, #1
 8009672:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009676:	4686      	mov	lr, r0
 8009678:	d001      	beq.n	800967e <_strtol_l.isra.0+0xe>
 800967a:	2b24      	cmp	r3, #36	; 0x24
 800967c:	d906      	bls.n	800968c <_strtol_l.isra.0+0x1c>
 800967e:	f7fc fefb 	bl	8006478 <__errno>
 8009682:	2316      	movs	r3, #22
 8009684:	6003      	str	r3, [r0, #0]
 8009686:	2000      	movs	r0, #0
 8009688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968c:	468c      	mov	ip, r1
 800968e:	4e3a      	ldr	r6, [pc, #232]	; (8009778 <_strtol_l.isra.0+0x108>)
 8009690:	4660      	mov	r0, ip
 8009692:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009696:	5da5      	ldrb	r5, [r4, r6]
 8009698:	f015 0508 	ands.w	r5, r5, #8
 800969c:	d1f8      	bne.n	8009690 <_strtol_l.isra.0+0x20>
 800969e:	2c2d      	cmp	r4, #45	; 0x2d
 80096a0:	d133      	bne.n	800970a <_strtol_l.isra.0+0x9a>
 80096a2:	f04f 0801 	mov.w	r8, #1
 80096a6:	f89c 4000 	ldrb.w	r4, [ip]
 80096aa:	f100 0c02 	add.w	ip, r0, #2
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d05d      	beq.n	800976e <_strtol_l.isra.0+0xfe>
 80096b2:	2b10      	cmp	r3, #16
 80096b4:	d10c      	bne.n	80096d0 <_strtol_l.isra.0+0x60>
 80096b6:	2c30      	cmp	r4, #48	; 0x30
 80096b8:	d10a      	bne.n	80096d0 <_strtol_l.isra.0+0x60>
 80096ba:	f89c 0000 	ldrb.w	r0, [ip]
 80096be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80096c2:	2858      	cmp	r0, #88	; 0x58
 80096c4:	d14e      	bne.n	8009764 <_strtol_l.isra.0+0xf4>
 80096c6:	2310      	movs	r3, #16
 80096c8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80096cc:	f10c 0c02 	add.w	ip, ip, #2
 80096d0:	2500      	movs	r5, #0
 80096d2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80096d6:	3f01      	subs	r7, #1
 80096d8:	fbb7 f9f3 	udiv	r9, r7, r3
 80096dc:	4628      	mov	r0, r5
 80096de:	fb03 7a19 	mls	sl, r3, r9, r7
 80096e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80096e6:	2e09      	cmp	r6, #9
 80096e8:	d818      	bhi.n	800971c <_strtol_l.isra.0+0xac>
 80096ea:	4634      	mov	r4, r6
 80096ec:	42a3      	cmp	r3, r4
 80096ee:	dd24      	ble.n	800973a <_strtol_l.isra.0+0xca>
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	db1f      	blt.n	8009734 <_strtol_l.isra.0+0xc4>
 80096f4:	4581      	cmp	r9, r0
 80096f6:	d31d      	bcc.n	8009734 <_strtol_l.isra.0+0xc4>
 80096f8:	d101      	bne.n	80096fe <_strtol_l.isra.0+0x8e>
 80096fa:	45a2      	cmp	sl, r4
 80096fc:	db1a      	blt.n	8009734 <_strtol_l.isra.0+0xc4>
 80096fe:	2501      	movs	r5, #1
 8009700:	fb00 4003 	mla	r0, r0, r3, r4
 8009704:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009708:	e7eb      	b.n	80096e2 <_strtol_l.isra.0+0x72>
 800970a:	2c2b      	cmp	r4, #43	; 0x2b
 800970c:	bf08      	it	eq
 800970e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8009712:	46a8      	mov	r8, r5
 8009714:	bf08      	it	eq
 8009716:	f100 0c02 	addeq.w	ip, r0, #2
 800971a:	e7c8      	b.n	80096ae <_strtol_l.isra.0+0x3e>
 800971c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8009720:	2e19      	cmp	r6, #25
 8009722:	d801      	bhi.n	8009728 <_strtol_l.isra.0+0xb8>
 8009724:	3c37      	subs	r4, #55	; 0x37
 8009726:	e7e1      	b.n	80096ec <_strtol_l.isra.0+0x7c>
 8009728:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800972c:	2e19      	cmp	r6, #25
 800972e:	d804      	bhi.n	800973a <_strtol_l.isra.0+0xca>
 8009730:	3c57      	subs	r4, #87	; 0x57
 8009732:	e7db      	b.n	80096ec <_strtol_l.isra.0+0x7c>
 8009734:	f04f 35ff 	mov.w	r5, #4294967295
 8009738:	e7e4      	b.n	8009704 <_strtol_l.isra.0+0x94>
 800973a:	2d00      	cmp	r5, #0
 800973c:	da08      	bge.n	8009750 <_strtol_l.isra.0+0xe0>
 800973e:	2322      	movs	r3, #34	; 0x22
 8009740:	4638      	mov	r0, r7
 8009742:	f8ce 3000 	str.w	r3, [lr]
 8009746:	2a00      	cmp	r2, #0
 8009748:	d09e      	beq.n	8009688 <_strtol_l.isra.0+0x18>
 800974a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800974e:	e007      	b.n	8009760 <_strtol_l.isra.0+0xf0>
 8009750:	f1b8 0f00 	cmp.w	r8, #0
 8009754:	d000      	beq.n	8009758 <_strtol_l.isra.0+0xe8>
 8009756:	4240      	negs	r0, r0
 8009758:	2a00      	cmp	r2, #0
 800975a:	d095      	beq.n	8009688 <_strtol_l.isra.0+0x18>
 800975c:	2d00      	cmp	r5, #0
 800975e:	d1f4      	bne.n	800974a <_strtol_l.isra.0+0xda>
 8009760:	6011      	str	r1, [r2, #0]
 8009762:	e791      	b.n	8009688 <_strtol_l.isra.0+0x18>
 8009764:	2430      	movs	r4, #48	; 0x30
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1b2      	bne.n	80096d0 <_strtol_l.isra.0+0x60>
 800976a:	2308      	movs	r3, #8
 800976c:	e7b0      	b.n	80096d0 <_strtol_l.isra.0+0x60>
 800976e:	2c30      	cmp	r4, #48	; 0x30
 8009770:	d0a3      	beq.n	80096ba <_strtol_l.isra.0+0x4a>
 8009772:	230a      	movs	r3, #10
 8009774:	e7ac      	b.n	80096d0 <_strtol_l.isra.0+0x60>
 8009776:	bf00      	nop
 8009778:	0800a0f9 	.word	0x0800a0f9

0800977c <_strtol_r>:
 800977c:	f7ff bf78 	b.w	8009670 <_strtol_l.isra.0>

08009780 <__submore>:
 8009780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009784:	460c      	mov	r4, r1
 8009786:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800978c:	4299      	cmp	r1, r3
 800978e:	d11b      	bne.n	80097c8 <__submore+0x48>
 8009790:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009794:	f7fd f9e2 	bl	8006b5c <_malloc_r>
 8009798:	b918      	cbnz	r0, 80097a2 <__submore+0x22>
 800979a:	f04f 30ff 	mov.w	r0, #4294967295
 800979e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80097a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80097ac:	6360      	str	r0, [r4, #52]	; 0x34
 80097ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80097b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80097b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80097ba:	7043      	strb	r3, [r0, #1]
 80097bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80097c0:	7003      	strb	r3, [r0, #0]
 80097c2:	6020      	str	r0, [r4, #0]
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7ea      	b.n	800979e <__submore+0x1e>
 80097c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80097ca:	0077      	lsls	r7, r6, #1
 80097cc:	463a      	mov	r2, r7
 80097ce:	f7ff fb8d 	bl	8008eec <_realloc_r>
 80097d2:	4605      	mov	r5, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d0e0      	beq.n	800979a <__submore+0x1a>
 80097d8:	eb00 0806 	add.w	r8, r0, r6
 80097dc:	4601      	mov	r1, r0
 80097de:	4632      	mov	r2, r6
 80097e0:	4640      	mov	r0, r8
 80097e2:	f7ff fb5b 	bl	8008e9c <memcpy>
 80097e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80097ea:	f8c4 8000 	str.w	r8, [r4]
 80097ee:	e7e9      	b.n	80097c4 <__submore+0x44>

080097f0 <_malloc_usable_size_r>:
 80097f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f4:	1f18      	subs	r0, r3, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfbc      	itt	lt
 80097fa:	580b      	ldrlt	r3, [r1, r0]
 80097fc:	18c0      	addlt	r0, r0, r3
 80097fe:	4770      	bx	lr

08009800 <_gettimeofday>:
 8009800:	2258      	movs	r2, #88	; 0x58
 8009802:	4b02      	ldr	r3, [pc, #8]	; (800980c <_gettimeofday+0xc>)
 8009804:	f04f 30ff 	mov.w	r0, #4294967295
 8009808:	601a      	str	r2, [r3, #0]
 800980a:	4770      	bx	lr
 800980c:	200006f0 	.word	0x200006f0

08009810 <_init>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr

0800981c <_fini>:
 800981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981e:	bf00      	nop
 8009820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009822:	bc08      	pop	{r3}
 8009824:	469e      	mov	lr, r3
 8009826:	4770      	bx	lr
