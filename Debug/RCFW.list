
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7a0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000147c  0800e988  0800e988  0001e988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe04  0800fe04  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800fe04  0800fe04  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fe04  0800fe04  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe04  0800fe04  0001fe04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe08  0800fe08  0001fe08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800fe0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200001ec  0800fff8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800fff8  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbb0  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405a  00000000  00000000  0003bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0003fe20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  000412f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f065  00000000  00000000  000425f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c823  00000000  00000000  0006165d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a679c  00000000  00000000  0007de80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012461c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000677c  00000000  00000000  00124670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e970 	.word	0x0800e970

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800e970 	.word	0x0800e970

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2uiz>:
 8001068:	0042      	lsls	r2, r0, #1
 800106a:	d20e      	bcs.n	800108a <__aeabi_f2uiz+0x22>
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30b      	bcc.n	800108a <__aeabi_f2uiz+0x22>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d409      	bmi.n	8001090 <__aeabi_f2uiz+0x28>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	fa23 f002 	lsr.w	r0, r3, r2
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2uiz+0x32>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d102      	bne.n	80010a0 <__aeabi_f2uiz+0x38>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	4770      	bx	lr
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f009 feae 	bl	800ae10 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <MAIN_displayRcfwBanner+0x5c>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 feaa 	bl	800ae10 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <MAIN_displayRcfwBanner+0x60>)
 80010be:	2001      	movs	r0, #1
 80010c0:	f009 fea6 	bl	800ae10 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <MAIN_displayRcfwBanner+0x64>)
 80010c6:	2001      	movs	r0, #1
 80010c8:	f009 fea2 	bl	800ae10 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80010cc:	4910      	ldr	r1, [pc, #64]	; (8001110 <MAIN_displayRcfwBanner+0x68>)
 80010ce:	2001      	movs	r0, #1
 80010d0:	f009 fe9e 	bl	800ae10 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80010d4:	490f      	ldr	r1, [pc, #60]	; (8001114 <MAIN_displayRcfwBanner+0x6c>)
 80010d6:	2001      	movs	r0, #1
 80010d8:	f009 fe9a 	bl	800ae10 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <MAIN_displayRcfwBanner+0x70>)
 80010de:	2001      	movs	r0, #1
 80010e0:	f009 fe96 	bl	800ae10 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <MAIN_displayRcfwBanner+0x74>)
 80010e6:	2001      	movs	r0, #1
 80010e8:	f009 fe92 	bl	800ae10 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <MAIN_displayRcfwBanner+0x78>)
 80010ee:	2001      	movs	r0, #1
 80010f0:	f009 fe8e 	bl	800ae10 <LOG_log>
  LOG_info("");
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010f6:	2001      	movs	r0, #1
 80010f8:	f009 fe8a 	bl	800ae10 <LOG_log>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800e988 	.word	0x0800e988
 8001104:	0800e98c 	.word	0x0800e98c
 8001108:	0800e9d0 	.word	0x0800e9d0
 800110c:	0800ea14 	.word	0x0800ea14
 8001110:	0800ea58 	.word	0x0800ea58
 8001114:	0800ea9c 	.word	0x0800ea9c
 8001118:	0800eae0 	.word	0x0800eae0
 800111c:	0800eb24 	.word	0x0800eb24
 8001120:	0800eb68 	.word	0x0800eb68

08001124 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <MAIN_togglePrintOutput+0x34>)
 8001132:	2001      	movs	r0, #1
 8001134:	f009 fe6c 	bl	800ae10 <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800113e:	e007      	b.n	8001150 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <MAIN_togglePrintOutput+0x38>)
 8001142:	2001      	movs	r0, #1
 8001144:	f009 fe64 	bl	800ae10 <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200009c8 	.word	0x200009c8
 8001158:	0800ebac 	.word	0x0800ebac
 800115c:	0800ebc8 	.word	0x0800ebc8

08001160 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	4857      	ldr	r0, [pc, #348]	; (80012d0 <MAIN_updateLogSetup+0x170>)
 8001172:	f004 f9bf 	bl	80054f4 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <MAIN_updateLogSetup+0x170>)
 8001180:	f004 fbbc 	bl	80058fc <HAL_RTC_GetDate>

  switch (p_data->button)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7c1b      	ldrb	r3, [r3, #16]
 8001188:	3b05      	subs	r3, #5
 800118a:	2b03      	cmp	r3, #3
 800118c:	f200 8084 	bhi.w	8001298 <MAIN_updateLogSetup+0x138>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <MAIN_updateLogSetup+0x38>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	0800125d 	.word	0x0800125d
 80011a0:	080011e5 	.word	0x080011e5
 80011a4:	08001221 	.word	0x08001221
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <MAIN_updateLogSetup+0x66>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a fb6e 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011be:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 80011c0:	f009 fdf6 	bl	800adb0 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 80011c4:	e06a      	b.n	800129c <MAIN_updateLogSetup+0x13c>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00a fb63 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d95f      	bls.n	800129c <MAIN_updateLogSetup+0x13c>
        g_MAIN_padUpPressedStartTime = 0;
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
      break;
 80011e2:	e05b      	b.n	800129c <MAIN_updateLogSetup+0x13c>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10a      	bne.n	8001202 <MAIN_updateLogSetup+0xa2>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a fb50 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80011fa:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 80011fc:	f009 fdf0 	bl	800ade0 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8001200:	e04e      	b.n	80012a0 <MAIN_updateLogSetup+0x140>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f00a fb45 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 800120c:	4602      	mov	r2, r0
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d943      	bls.n	80012a0 <MAIN_updateLogSetup+0x140>
        g_MAIN_padDownPressedStartTime = 0;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
      break;
 800121e:	e03f      	b.n	80012a0 <MAIN_updateLogSetup+0x140>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTime == 0)
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <MAIN_updateLogSetup+0xde>
      {
        g_MAIN_padLeftPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4618      	mov	r0, r3
 800122e:	f00a fb32 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 8001232:	4603      	mov	r3, r0
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001236:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 8001238:	f009 fd8c 	bl	800ad54 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTime = 0;
      }
      break;
 800123c:	e032      	b.n	80012a4 <MAIN_updateLogSetup+0x144>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padLeftPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f00a fb27 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 8001248:	4602      	mov	r2, r0
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d927      	bls.n	80012a4 <MAIN_updateLogSetup+0x144>
        g_MAIN_padLeftPressedStartTime = 0;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
      break;
 800125a:	e023      	b.n	80012a4 <MAIN_updateLogSetup+0x144>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTime == 0)
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10a      	bne.n	800127a <MAIN_updateLogSetup+0x11a>
      {
        g_MAIN_padRightPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f00a fb14 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001272:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 8001274:	f7ff ff56 	bl	8001124 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTime = 0;
      }
      break;
 8001278:	e016      	b.n	80012a8 <MAIN_updateLogSetup+0x148>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padRightPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f00a fb09 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 8001284:	4602      	mov	r2, r0
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d90b      	bls.n	80012a8 <MAIN_updateLogSetup+0x148>
        g_MAIN_padRightPressedStartTime = 0;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
      break;
 8001296:	e007      	b.n	80012a8 <MAIN_updateLogSetup+0x148>

    default:
      ; /* Nothing to do */;
      break;
 8001298:	bf00      	nop
 800129a:	e006      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 800129c:	bf00      	nop
 800129e:	e004      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a0:	bf00      	nop
 80012a2:	e002      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a4:	bf00      	nop
 80012a6:	e000      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a8:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7c1b      	ldrb	r3, [r3, #16]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d00a      	beq.n	80012c8 <MAIN_updateLogSetup+0x168>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7c1b      	ldrb	r3, [r3, #16]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	d006      	beq.n	80012c8 <MAIN_updateLogSetup+0x168>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
}
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000084c 	.word	0x2000084c
 80012d4:	20000208 	.word	0x20000208
 80012d8:	2000020c 	.word	0x2000020c
 80012dc:	20000210 	.word	0x20000210
 80012e0:	20000214 	.word	0x20000214

080012e4 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <MAIN_updateLedMode+0x2e>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d808      	bhi.n	8001312 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4911      	ldr	r1, [pc, #68]	; (8001348 <MAIN_updateLedMode+0x64>)
 8001304:	2002      	movs	r0, #2
 8001306:	f009 fd83 	bl	800ae10 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 800130a:	2000      	movs	r0, #0
 800130c:	f009 fc60 	bl	800abd0 <LED_setMode>
 8001310:	e016      	b.n	8001340 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d00e      	beq.n	8001336 <MAIN_updateLedMode+0x52>
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc10      	bgt.n	800133e <MAIN_updateLedMode+0x5a>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <MAIN_updateLedMode+0x42>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d004      	beq.n	800132e <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8001324:	e00b      	b.n	800133e <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8001326:	2002      	movs	r0, #2
 8001328:	f009 fc52 	bl	800abd0 <LED_setMode>
        break;
 800132c:	e008      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 800132e:	2003      	movs	r0, #3
 8001330:	f009 fc4e 	bl	800abd0 <LED_setMode>
        break;
 8001334:	e004      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8001336:	2004      	movs	r0, #4
 8001338:	f009 fc4a 	bl	800abd0 <LED_setMode>
        break;
 800133c:	e000      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        break;
 800133e:	bf00      	nop
    }
  }

  return;
 8001340:	bf00      	nop
}
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800ebe4 	.word	0x0800ebe4

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b090      	sub	sp, #64	; 0x40
 8001350:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f001 fb3b 	bl	80029cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f9b1 	bl	80016bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 fdb3 	bl	8001ec4 <MX_GPIO_Init>
  MX_TIM1_Init();
 800135e:	f000 fa8d 	bl	800187c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001362:	f000 fd85 	bl	8001e70 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001366:	f000 fd59 	bl	8001e1c <MX_UART4_Init>
  MX_ADC1_Init();
 800136a:	f000 f9ff 	bl	800176c <MX_ADC1_Init>
  MX_TIM8_Init();
 800136e:	f000 fc91 	bl	8001c94 <MX_TIM8_Init>
  MX_RTC_Init();
 8001372:	f000 fa39 	bl	80017e8 <MX_RTC_Init>
  MX_TIM7_Init();
 8001376:	f000 fc57 	bl	8001c28 <MX_TIM7_Init>
  MX_TIM2_Init();
 800137a:	f000 facf 	bl	800191c <MX_TIM2_Init>
  MX_TIM3_Init();
 800137e:	f000 fb21 	bl	80019c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001382:	f000 fb73 	bl	8001a6c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001386:	f000 fbc5 	bl	8001b14 <MX_TIM5_Init>
  MX_TIM6_Init();
 800138a:	f000 fc17 	bl	8001bbc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime    = 0;
 800138e:	4bad      	ldr	r3, [pc, #692]	; (8001644 <main+0x2f8>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime  = 0;
 8001394:	4bac      	ldr	r3, [pc, #688]	; (8001648 <main+0x2fc>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTime  = 0;
 800139a:	4bac      	ldr	r3, [pc, #688]	; (800164c <main+0x300>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTime = 0;
 80013a0:	4bab      	ldr	r3, [pc, #684]	; (8001650 <main+0x304>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput              = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 80013a6:	4bab      	ldr	r3, [pc, #684]	; (8001654 <main+0x308>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f00a f91b 	bl	800b5ec <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 80013b6:	48a8      	ldr	r0, [pc, #672]	; (8001658 <main+0x30c>)
 80013b8:	f008 f980 	bl	80096bc <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 80013bc:	48a7      	ldr	r0, [pc, #668]	; (800165c <main+0x310>)
 80013be:	f009 fdb9 	bl	800af34 <MAS_init>

  /* Temporary delay/workaound to deal with debugger connection issue */
  for (int i = 0; i < 10; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
 80013c6:	e006      	b.n	80013d6 <main+0x8a>
  {
    HAL_Delay(1000);
 80013c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013cc:	f001 fb60 	bl	8002a90 <HAL_Delay>
  for (int i = 0; i < 10; i++)
 80013d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d2:	3301      	adds	r3, #1
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
 80013d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d8:	2b09      	cmp	r3, #9
 80013da:	ddf5      	ble.n	80013c8 <main+0x7c>
  }

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 80013dc:	2101      	movs	r1, #1
 80013de:	48a0      	ldr	r0, [pc, #640]	; (8001660 <main+0x314>)
 80013e0:	f009 fc9e 	bl	800ad20 <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 80013e4:	2000      	movs	r0, #0
 80013e6:	f009 fcd3 	bl	800ad90 <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 80013ea:	499e      	ldr	r1, [pc, #632]	; (8001664 <main+0x318>)
 80013ec:	2001      	movs	r0, #1
 80013ee:	f009 fd0f 	bl	800ae10 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 80013f2:	f7ff fe59 	bl	80010a8 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 80013f6:	489c      	ldr	r0, [pc, #624]	; (8001668 <main+0x31c>)
 80013f8:	f004 fe56 	bl	80060a8 <HAL_TIM_Base_Start>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8001402:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001406:	2b00      	cmp	r3, #0
 8001408:	d007      	beq.n	800141a <main+0xce>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 800140a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800140e:	461a      	mov	r2, r3
 8001410:	4996      	ldr	r1, [pc, #600]	; (800166c <main+0x320>)
 8001412:	2003      	movs	r0, #3
 8001414:	f009 fcfc 	bl	800ae10 <LOG_log>
 8001418:	e003      	b.n	8001422 <main+0xd6>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 800141a:	4995      	ldr	r1, [pc, #596]	; (8001670 <main+0x324>)
 800141c:	2001      	movs	r0, #1
 800141e:	f009 fcf7 	bl	800ae10 <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8001422:	4894      	ldr	r0, [pc, #592]	; (8001674 <main+0x328>)
 8001424:	f00a f9e2 	bl	800b7ec <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8001428:	4892      	ldr	r0, [pc, #584]	; (8001674 <main+0x328>)
 800142a:	f004 fec7 	bl	80061bc <HAL_TIM_Base_Start_IT>
 800142e:	4603      	mov	r3, r0
 8001430:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8001434:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001438:	2b00      	cmp	r3, #0
 800143a:	d007      	beq.n	800144c <main+0x100>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 800143c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001440:	461a      	mov	r2, r3
 8001442:	498d      	ldr	r1, [pc, #564]	; (8001678 <main+0x32c>)
 8001444:	2003      	movs	r0, #3
 8001446:	f009 fce3 	bl	800ae10 <LOG_log>
 800144a:	e003      	b.n	8001454 <main+0x108>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 800144c:	498b      	ldr	r1, [pc, #556]	; (800167c <main+0x330>)
 800144e:	2001      	movs	r0, #1
 8001450:	f009 fcde 	bl	800ae10 <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 8001454:	2004      	movs	r0, #4
 8001456:	f009 fbbb 	bl	800abd0 <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 800145a:	4889      	ldr	r0, [pc, #548]	; (8001680 <main+0x334>)
 800145c:	f004 feae 	bl	80061bc <HAL_TIM_Base_Start_IT>
 8001460:	4603      	mov	r3, r0
 8001462:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8001466:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800146a:	2b00      	cmp	r3, #0
 800146c:	d007      	beq.n	800147e <main+0x132>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 800146e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001472:	461a      	mov	r2, r3
 8001474:	4983      	ldr	r1, [pc, #524]	; (8001684 <main+0x338>)
 8001476:	2003      	movs	r0, #3
 8001478:	f009 fcca 	bl	800ae10 <LOG_log>
 800147c:	e003      	b.n	8001486 <main+0x13a>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 800147e:	4982      	ldr	r1, [pc, #520]	; (8001688 <main+0x33c>)
 8001480:	2001      	movs	r0, #1
 8001482:	f009 fcc5 	bl	800ae10 <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001486:	213c      	movs	r1, #60	; 0x3c
 8001488:	4880      	ldr	r0, [pc, #512]	; (800168c <main+0x340>)
 800148a:	f005 facf 	bl	8006a2c <HAL_TIM_Encoder_Start_IT>
 800148e:	4603      	mov	r3, r0
 8001490:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001494:	213c      	movs	r1, #60	; 0x3c
 8001496:	487e      	ldr	r0, [pc, #504]	; (8001690 <main+0x344>)
 8001498:	f005 fac8 	bl	8006a2c <HAL_TIM_Encoder_Start_IT>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014a4:	4313      	orrs	r3, r2
 80014a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80014aa:	213c      	movs	r1, #60	; 0x3c
 80014ac:	4879      	ldr	r0, [pc, #484]	; (8001694 <main+0x348>)
 80014ae:	f005 fabd 	bl	8006a2c <HAL_TIM_Encoder_Start_IT>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80014c0:	213c      	movs	r1, #60	; 0x3c
 80014c2:	4875      	ldr	r0, [pc, #468]	; (8001698 <main+0x34c>)
 80014c4:	f005 fab2 	bl	8006a2c <HAL_TIM_Encoder_Start_IT>
 80014c8:	4603      	mov	r3, r0
 80014ca:	461a      	mov	r2, r3
 80014cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014d0:	4313      	orrs	r3, r2
 80014d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 80014d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <main+0x1a2>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 80014de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80014e2:	461a      	mov	r2, r3
 80014e4:	496d      	ldr	r1, [pc, #436]	; (800169c <main+0x350>)
 80014e6:	2003      	movs	r0, #3
 80014e8:	f009 fc92 	bl	800ae10 <LOG_log>
 80014ec:	e003      	b.n	80014f6 <main+0x1aa>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 80014ee:	496c      	ldr	r1, [pc, #432]	; (80016a0 <main+0x354>)
 80014f0:	2001      	movs	r0, #1
 80014f2:	f009 fc8d 	bl	800ae10 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 80014f6:	486b      	ldr	r0, [pc, #428]	; (80016a4 <main+0x358>)
 80014f8:	f004 fdd6 	bl	80060a8 <HAL_TIM_Base_Start>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8001502:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <main+0x1ce>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 800150a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800150e:	461a      	mov	r2, r3
 8001510:	4965      	ldr	r1, [pc, #404]	; (80016a8 <main+0x35c>)
 8001512:	2003      	movs	r0, #3
 8001514:	f009 fc7c 	bl	800ae10 <LOG_log>
 8001518:	e003      	b.n	8001522 <main+0x1d6>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 800151a:	4964      	ldr	r1, [pc, #400]	; (80016ac <main+0x360>)
 800151c:	2001      	movs	r0, #1
 800151e:	f009 fc77 	bl	800ae10 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8001522:	494f      	ldr	r1, [pc, #316]	; (8001660 <main+0x314>)
 8001524:	4862      	ldr	r0, [pc, #392]	; (80016b0 <main+0x364>)
 8001526:	f007 fd95 	bl	8009054 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800152a:	2100      	movs	r1, #0
 800152c:	485d      	ldr	r0, [pc, #372]	; (80016a4 <main+0x358>)
 800152e:	f004 ffb3 	bl	8006498 <HAL_TIM_PWM_Start>
 8001532:	4603      	mov	r3, r0
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001538:	2104      	movs	r1, #4
 800153a:	485a      	ldr	r0, [pc, #360]	; (80016a4 <main+0x358>)
 800153c:	f004 ffac 	bl	8006498 <HAL_TIM_PWM_Start>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001548:	4313      	orrs	r3, r2
 800154a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800154e:	2108      	movs	r1, #8
 8001550:	4854      	ldr	r0, [pc, #336]	; (80016a4 <main+0x358>)
 8001552:	f004 ffa1 	bl	8006498 <HAL_TIM_PWM_Start>
 8001556:	4603      	mov	r3, r0
 8001558:	461a      	mov	r2, r3
 800155a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800155e:	4313      	orrs	r3, r2
 8001560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001564:	210c      	movs	r1, #12
 8001566:	484f      	ldr	r0, [pc, #316]	; (80016a4 <main+0x358>)
 8001568:	f004 ff96 	bl	8006498 <HAL_TIM_PWM_Start>
 800156c:	4603      	mov	r3, r0
 800156e:	461a      	mov	r2, r3
 8001570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001574:	4313      	orrs	r3, r2
 8001576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 800157a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <main+0x246>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8001582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001586:	461a      	mov	r2, r3
 8001588:	494a      	ldr	r1, [pc, #296]	; (80016b4 <main+0x368>)
 800158a:	2003      	movs	r0, #3
 800158c:	f009 fc40 	bl	800ae10 <LOG_log>
 8001590:	e003      	b.n	800159a <main+0x24e>
  }
  else
  {
    LOG_info("Started PWM channels");
 8001592:	4949      	ldr	r1, [pc, #292]	; (80016b8 <main+0x36c>)
 8001594:	2001      	movs	r0, #1
 8001596:	f009 fc3b 	bl	800ae10 <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 800159a:	f007 ff3f 	bl	800941c <BLU_init>
  BLU_initData(&l_bluetoothData);
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	4618      	mov	r0, r3
 80015a4:	f007 ff4a 	bl	800943c <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 80015a8:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <main+0x34c>)
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4b39      	ldr	r3, [pc, #228]	; (8001694 <main+0x348>)
 80015ae:	4a38      	ldr	r2, [pc, #224]	; (8001690 <main+0x344>)
 80015b0:	4936      	ldr	r1, [pc, #216]	; (800168c <main+0x340>)
 80015b2:	483c      	ldr	r0, [pc, #240]	; (80016a4 <main+0x358>)
 80015b4:	f008 f912 	bl	80097dc <DRV_init>
  DRV_logInfo();
 80015b8:	f008 fece 	bl	800a358 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	; (8001668 <main+0x31c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c2:	86fb      	strh	r3, [r7, #54]	; 0x36

  while (1)
  {
    BLU_receiveData        (&l_bluetoothData);
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4618      	mov	r0, r3
 80015ca:	f007 ff4f 	bl	800946c <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4618      	mov	r0, r3
 80015d4:	f008 fa3e 	bl	8009a54 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 80015d8:	f008 feb4 	bl	800a344 <DRV_getMode>
 80015dc:	4603      	mov	r3, r0
 80015de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    BAT_update         (&l_voltageInMv            );
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4618      	mov	r0, r3
 80015e6:	f007 fd83 	bl	80090f0 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015f0:	4611      	mov	r1, r2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fe76 	bl	80012e4 <MAIN_updateLedMode>
    MAIN_updateLogSetup(&l_bluetoothData          );
 80015f8:	f107 0308 	add.w	r3, r7, #8
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fdaf 	bl	8001160 <MAIN_updateLogSetup>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8001602:	f242 7010 	movw	r0, #10000	; 0x2710
 8001606:	f00a f905 	bl	800b814 <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4618      	mov	r0, r3
 8001610:	f008 f8ac 	bl	800976c <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8001614:	f107 031c 	add.w	r3, r7, #28
 8001618:	4618      	mov	r0, r3
 800161a:	f009 fce3 	bl	800afe4 <MAS_updateFifo>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <main+0x31c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	85bb      	strh	r3, [r7, #44]	; 0x2c
    l_deltaTime   = l_lastTime - l_currentTime;
 8001626:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001628:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_lastTime    = l_currentTime;
 800162e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001630:	86fb      	strh	r3, [r7, #54]	; 0x36

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTime);
 8001632:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f008 fb4a 	bl	8009cd4 <DRV_updateFromMaster>
    BLU_receiveData        (&l_bluetoothData);
 8001640:	e7c0      	b.n	80015c4 <main+0x278>
 8001642:	bf00      	nop
 8001644:	20000208 	.word	0x20000208
 8001648:	2000020c 	.word	0x2000020c
 800164c:	20000210 	.word	0x20000210
 8001650:	20000214 	.word	0x20000214
 8001654:	200009c8 	.word	0x200009c8
 8001658:	200007d8 	.word	0x200007d8
 800165c:	200009cc 	.word	0x200009cc
 8001660:	2000084c 	.word	0x2000084c
 8001664:	0800ec04 	.word	0x0800ec04
 8001668:	20000860 	.word	0x20000860
 800166c:	0800ec14 	.word	0x0800ec14
 8001670:	0800ec4c 	.word	0x0800ec4c
 8001674:	20000af4 	.word	0x20000af4
 8001678:	0800ec70 	.word	0x0800ec70
 800167c:	0800ecac 	.word	0x0800ecac
 8001680:	20000914 	.word	0x20000914
 8001684:	0800ecd0 	.word	0x0800ecd0
 8001688:	0800ed0c 	.word	0x0800ed0c
 800168c:	20000a40 	.word	0x20000a40
 8001690:	200006f4 	.word	0x200006f4
 8001694:	2000058c 	.word	0x2000058c
 8001698:	20000640 	.word	0x20000640
 800169c:	0800ed28 	.word	0x0800ed28
 80016a0:	0800ed64 	.word	0x0800ed64
 80016a4:	200004d8 	.word	0x200004d8
 80016a8:	0800ed88 	.word	0x0800ed88
 80016ac:	0800edc0 	.word	0x0800edc0
 80016b0:	200007a8 	.word	0x200007a8
 80016b4:	0800ede0 	.word	0x0800ede0
 80016b8:	0800ee18 	.word	0x0800ee18

080016bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b096      	sub	sp, #88	; 0x58
 80016c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c6:	2228      	movs	r2, #40	; 0x28
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f00a f9b4 	bl	800ba38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
 80016ee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016f0:	230a      	movs	r3, #10
 80016f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f4:	2301      	movs	r3, #1
 80016f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016f8:	2310      	movs	r3, #16
 80016fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016fc:	2301      	movs	r3, #1
 80016fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001700:	2300      	movs	r3, #0
 8001702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001704:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fd77 	bl	80041fc <HAL_RCC_OscConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001714:	f000 fcd6 	bl	80020c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001718:	230f      	movs	r3, #15
 800171a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001720:	2300      	movs	r3, #0
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800172c:	f107 031c 	add.w	r3, r7, #28
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f003 f8d2 	bl	80048dc <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800173e:	f000 fcc1 	bl	80020c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001742:	2303      	movs	r3, #3
 8001744:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800174a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	4618      	mov	r0, r3
 8001754:	f003 fb02 	bl	8004d5c <HAL_RCCEx_PeriphCLKConfig>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800175e:	f000 fcb1 	bl	80020c4 <Error_Handler>
  }
}
 8001762:	bf00      	nop
 8001764:	3758      	adds	r7, #88	; 0x58
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <MX_ADC1_Init+0x74>)
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <MX_ADC1_Init+0x78>)
 8001780:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_ADC1_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <MX_ADC1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_ADC1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_ADC1_Init+0x74>)
 8001796:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800179a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800179c:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <MX_ADC1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_ADC1_Init+0x74>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <MX_ADC1_Init+0x74>)
 80017aa:	f001 f995 	bl	8002ad8 <HAL_ADC_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80017b4:	f000 fc86 	bl	80020c4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017b8:	2305      	movs	r3, #5
 80017ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017bc:	2301      	movs	r3, #1
 80017be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_ADC1_Init+0x74>)
 80017ca:	f001 fd37 	bl	800323c <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017d4:	f000 fc76 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	200007a8 	.word	0x200007a8
 80017e4:	40012400 	.word	0x40012400

080017e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	2100      	movs	r1, #0
 80017f2:	460a      	mov	r2, r1
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	460a      	mov	r2, r1
 80017f8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <MX_RTC_Init+0x8c>)
 8001800:	4a1d      	ldr	r2, [pc, #116]	; (8001878 <MX_RTC_Init+0x90>)
 8001802:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MX_RTC_Init+0x8c>)
 8001806:	f04f 32ff 	mov.w	r2, #4294967295
 800180a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <MX_RTC_Init+0x8c>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001812:	4818      	ldr	r0, [pc, #96]	; (8001874 <MX_RTC_Init+0x8c>)
 8001814:	f003 fcbe 	bl	8005194 <HAL_RTC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800181e:	f000 fc51 	bl	80020c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001822:	2300      	movs	r3, #0
 8001824:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001826:	2300      	movs	r3, #0
 8001828:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800182a:	2300      	movs	r3, #0
 800182c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2201      	movs	r2, #1
 8001832:	4619      	mov	r1, r3
 8001834:	480f      	ldr	r0, [pc, #60]	; (8001874 <MX_RTC_Init+0x8c>)
 8001836:	f003 fd77 	bl	8005328 <HAL_RTC_SetTime>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001840:	f000 fc40 	bl	80020c4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001844:	2301      	movs	r3, #1
 8001846:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001848:	2301      	movs	r3, #1
 800184a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800184c:	2301      	movs	r3, #1
 800184e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001850:	2300      	movs	r3, #0
 8001852:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001854:	463b      	mov	r3, r7
 8001856:	2201      	movs	r2, #1
 8001858:	4619      	mov	r1, r3
 800185a:	4806      	ldr	r0, [pc, #24]	; (8001874 <MX_RTC_Init+0x8c>)
 800185c:	f003 ff30 	bl	80056c0 <HAL_RTC_SetDate>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001866:	f000 fc2d 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	2000084c 	.word	0x2000084c
 8001878:	40002800 	.word	0x40002800

0800187c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0308 	add.w	r3, r7, #8
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	463b      	mov	r3, r7
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001898:	4b1e      	ldr	r3, [pc, #120]	; (8001914 <MX_TIM1_Init+0x98>)
 800189a:	4a1f      	ldr	r2, [pc, #124]	; (8001918 <MX_TIM1_Init+0x9c>)
 800189c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <MX_TIM1_Init+0x98>)
 80018a0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80018a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <MX_TIM1_Init+0x98>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80018ac:	4b19      	ldr	r3, [pc, #100]	; (8001914 <MX_TIM1_Init+0x98>)
 80018ae:	22f9      	movs	r2, #249	; 0xf9
 80018b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <MX_TIM1_Init+0x98>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b8:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_TIM1_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <MX_TIM1_Init+0x98>)
 80018c0:	2280      	movs	r2, #128	; 0x80
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c4:	4813      	ldr	r0, [pc, #76]	; (8001914 <MX_TIM1_Init+0x98>)
 80018c6:	f004 fb1d 	bl	8005f04 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018d0:	f000 fbf8 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0308 	add.w	r3, r7, #8
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_TIM1_Init+0x98>)
 80018e2:	f005 fc47 	bl	8007174 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018ec:	f000 fbea 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f0:	2300      	movs	r3, #0
 80018f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018f8:	463b      	mov	r3, r7
 80018fa:	4619      	mov	r1, r3
 80018fc:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_TIM1_Init+0x98>)
 80018fe:	f006 fb95 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001908:	f000 fbdc 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800190c:	bf00      	nop
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000914 	.word	0x20000914
 8001918:	40012c00 	.word	0x40012c00

0800191c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2224      	movs	r2, #36	; 0x24
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f00a f884 	bl	800ba38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001938:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <MX_TIM2_Init+0xa4>)
 800193a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800193e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001940:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <MX_TIM2_Init+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <MX_TIM2_Init+0xa4>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800194c:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_TIM2_Init+0xa4>)
 800194e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001952:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001954:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_TIM2_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_TIM2_Init+0xa4>)
 800195c:	2280      	movs	r2, #128	; 0x80
 800195e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001960:	2303      	movs	r3, #3
 8001962:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001968:	2301      	movs	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001970:	230a      	movs	r3, #10
 8001972:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001978:	2301      	movs	r3, #1
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4619      	mov	r1, r3
 800198a:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_TIM2_Init+0xa4>)
 800198c:	f004 feac 	bl	80066e8 <HAL_TIM_Encoder_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001996:	f000 fb95 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	4619      	mov	r1, r3
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <MX_TIM2_Init+0xa4>)
 80019a8:	f006 fb40 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80019b2:	f000 fb87 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	3730      	adds	r7, #48	; 0x30
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000a40 	.word	0x20000a40

080019c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2224      	movs	r2, #36	; 0x24
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00a f830 	bl	800ba38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019e2:	4a21      	ldr	r2, [pc, #132]	; (8001a68 <MX_TIM3_Init+0xa4>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e6:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019f2:	4b1c      	ldr	r3, [pc, #112]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM3_Init+0xa0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM3_Init+0xa0>)
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a06:	2303      	movs	r3, #3
 8001a08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a16:	230a      	movs	r3, #10
 8001a18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a2a:	f107 030c 	add.w	r3, r7, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <MX_TIM3_Init+0xa0>)
 8001a32:	f004 fe59 	bl	80066e8 <HAL_TIM_Encoder_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f000 fb42 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a44:	2300      	movs	r3, #0
 8001a46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_TIM3_Init+0xa0>)
 8001a4e:	f006 faed 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a58:	f000 fb34 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	3730      	adds	r7, #48	; 0x30
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	200006f4 	.word	0x200006f4
 8001a68:	40000400 	.word	0x40000400

08001a6c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f009 ffdc 	bl	800ba38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a88:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <MX_TIM4_Init+0xa4>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001a9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001aaa:	2280      	movs	r2, #128	; 0x80
 8001aac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001abe:	230a      	movs	r3, #10
 8001ac0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001ada:	f004 fe05 	bl	80066e8 <HAL_TIM_Encoder_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ae4:	f000 faee 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM4_Init+0xa0>)
 8001af6:	f006 fa99 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b00:	f000 fae0 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3730      	adds	r7, #48	; 0x30
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000058c 	.word	0x2000058c
 8001b10:	40000800 	.word	0x40000800

08001b14 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f009 ff88 	bl	800ba38 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b32:	4a21      	ldr	r2, [pc, #132]	; (8001bb8 <MX_TIM5_Init+0xa4>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b56:	2303      	movs	r3, #3
 8001b58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b66:	230a      	movs	r3, #10
 8001b68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b82:	f004 fdb1 	bl	80066e8 <HAL_TIM_Encoder_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b8c:	f000 fa9a 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM5_Init+0xa0>)
 8001b9e:	f006 fa45 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001ba8:	f000 fa8c 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3730      	adds	r7, #48	; 0x30
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000640 	.word	0x20000640
 8001bb8:	40000c00 	.word	0x40000c00

08001bbc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bcc:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <MX_TIM6_Init+0x68>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bd2:	2207      	movs	r2, #7
 8001bd4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be4:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001be6:	2280      	movs	r2, #128	; 0x80
 8001be8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bea:	480d      	ldr	r0, [pc, #52]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001bec:	f004 f98a 	bl	8005f04 <HAL_TIM_Base_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001bf6:	f000 fa65 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	; (8001c20 <MX_TIM6_Init+0x64>)
 8001c08:	f006 fa10 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c12:	f000 fa57 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000860 	.word	0x20000860
 8001c24:	40001000 	.word	0x40001000

08001c28 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c36:	4b15      	ldr	r3, [pc, #84]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c38:	4a15      	ldr	r2, [pc, #84]	; (8001c90 <MX_TIM7_Init+0x68>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c3e:	2207      	movs	r2, #7
 8001c40:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c48:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c50:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c52:	2280      	movs	r2, #128	; 0x80
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c58:	f004 f954 	bl	8005f04 <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c62:	f000 fa2f 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c6e:	463b      	mov	r3, r7
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	; (8001c8c <MX_TIM7_Init+0x64>)
 8001c74:	f006 f9da 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c7e:	f000 fa21 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000af4 	.word	0x20000af4
 8001c90:	40001400 	.word	0x40001400

08001c94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b096      	sub	sp, #88	; 0x58
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc6:	1d3b      	adds	r3, r7, #4
 8001cc8:	2220      	movs	r2, #32
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f009 feb3 	bl	800ba38 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cd2:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001cd4:	4a50      	ldr	r2, [pc, #320]	; (8001e18 <MX_TIM8_Init+0x184>)
 8001cd6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001cda:	2207      	movs	r2, #7
 8001cdc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cde:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001ce6:	2264      	movs	r2, #100	; 0x64
 8001ce8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cea:	4b4a      	ldr	r3, [pc, #296]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cfc:	4845      	ldr	r0, [pc, #276]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001cfe:	f004 f901 	bl	8005f04 <HAL_TIM_Base_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001d08:	f000 f9dc 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d10:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d16:	4619      	mov	r1, r3
 8001d18:	483e      	ldr	r0, [pc, #248]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001d1a:	f005 fa2b 	bl	8007174 <HAL_TIM_ConfigClockSource>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001d24:	f000 f9ce 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d28:	483a      	ldr	r0, [pc, #232]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001d2a:	f004 fad9 	bl	80062e0 <HAL_TIM_PWM_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d34:	f000 f9c6 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d44:	4619      	mov	r1, r3
 8001d46:	4833      	ldr	r0, [pc, #204]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001d48:	f006 f970 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001d52:	f000 f9b7 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d56:	2360      	movs	r3, #96	; 0x60
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d62:	2300      	movs	r3, #0
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	2200      	movs	r2, #0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4826      	ldr	r0, [pc, #152]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001d7c:	f005 f85c 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001d86:	f000 f99d 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	2204      	movs	r2, #4
 8001d90:	4619      	mov	r1, r3
 8001d92:	4820      	ldr	r0, [pc, #128]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001d94:	f005 f850 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d9e:	f000 f991 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	2208      	movs	r2, #8
 8001da8:	4619      	mov	r1, r3
 8001daa:	481a      	ldr	r0, [pc, #104]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001dac:	f005 f844 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001db6:	f000 f985 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4814      	ldr	r0, [pc, #80]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001dc4:	f005 f838 	bl	8006e38 <HAL_TIM_PWM_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001dce:	f000 f979 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4807      	ldr	r0, [pc, #28]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001df6:	f006 f9e9 	bl	80081cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001e00:	f000 f960 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <MX_TIM8_Init+0x180>)
 8001e06:	f000 fb7f 	bl	8002508 <HAL_TIM_MspPostInit>

}
 8001e0a:	bf00      	nop
 8001e0c:	3758      	adds	r7, #88	; 0x58
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	200004d8 	.word	0x200004d8
 8001e18:	40013400 	.word	0x40013400

08001e1c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e20:	4b11      	ldr	r3, [pc, #68]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <MX_UART4_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e28:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	; (8001e68 <MX_UART4_Init+0x4c>)
 8001e54:	f006 faa2 	bl	800839c <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 f931 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200009cc 	.word	0x200009cc
 8001e6c:	40004c00 	.word	0x40004c00

08001e70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e74:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <MX_USART1_UART_Init+0x50>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b0e      	ldr	r3, [pc, #56]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea0:	4b06      	ldr	r3, [pc, #24]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_USART1_UART_Init+0x4c>)
 8001ea8:	f006 fa78 	bl	800839c <HAL_UART_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001eb2:	f000 f907 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	200007d8 	.word	0x200007d8
 8001ec0:	40013800 	.word	0x40013800

08001ec4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed8:	4b4e      	ldr	r3, [pc, #312]	; (8002014 <MX_GPIO_Init+0x150>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a4d      	ldr	r2, [pc, #308]	; (8002014 <MX_GPIO_Init+0x150>)
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <MX_GPIO_Init+0x150>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	60fb      	str	r3, [r7, #12]
 8001eee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b48      	ldr	r3, [pc, #288]	; (8002014 <MX_GPIO_Init+0x150>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a47      	ldr	r2, [pc, #284]	; (8002014 <MX_GPIO_Init+0x150>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b45      	ldr	r3, [pc, #276]	; (8002014 <MX_GPIO_Init+0x150>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <MX_GPIO_Init+0x150>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a41      	ldr	r2, [pc, #260]	; (8002014 <MX_GPIO_Init+0x150>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <MX_GPIO_Init+0x150>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f20:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <MX_GPIO_Init+0x150>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <MX_GPIO_Init+0x150>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b39      	ldr	r3, [pc, #228]	; (8002014 <MX_GPIO_Init+0x150>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	603b      	str	r3, [r7, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f243 013a 	movw	r1, #12346	; 0x303a
 8001f3e:	4836      	ldr	r0, [pc, #216]	; (8002018 <MX_GPIO_Init+0x154>)
 8001f40:	f002 f8f6 	bl	8004130 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2110      	movs	r1, #16
 8001f48:	4834      	ldr	r0, [pc, #208]	; (800201c <MX_GPIO_Init+0x158>)
 8001f4a:	f002 f8f1 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2133      	movs	r1, #51	; 0x33
 8001f52:	4833      	ldr	r0, [pc, #204]	; (8002020 <MX_GPIO_Init+0x15c>)
 8001f54:	f002 f8ec 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4831      	ldr	r0, [pc, #196]	; (8002024 <MX_GPIO_Init+0x160>)
 8001f5e:	f002 f8e7 	bl	8004130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2302      	movs	r3, #2
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4827      	ldr	r0, [pc, #156]	; (8002018 <MX_GPIO_Init+0x154>)
 8001f7c:	f001 fe44 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 8001f80:	f241 033a 	movw	r3, #4154	; 0x103a
 8001f84:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f86:	2301      	movs	r3, #1
 8001f88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4619      	mov	r1, r3
 8001f98:	481f      	ldr	r0, [pc, #124]	; (8002018 <MX_GPIO_Init+0x154>)
 8001f9a:	f001 fe35 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4819      	ldr	r0, [pc, #100]	; (8002018 <MX_GPIO_Init+0x154>)
 8001fb2:	f001 fe29 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001fb6:	2310      	movs	r3, #16
 8001fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0310 	add.w	r3, r7, #16
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4813      	ldr	r0, [pc, #76]	; (800201c <MX_GPIO_Init+0x158>)
 8001fce:	f001 fe1b 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8001fd2:	2333      	movs	r3, #51	; 0x33
 8001fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480d      	ldr	r0, [pc, #52]	; (8002020 <MX_GPIO_Init+0x15c>)
 8001fea:	f001 fe0d 	bl	8003c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 0310 	add.w	r3, r7, #16
 8002002:	4619      	mov	r1, r3
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <MX_GPIO_Init+0x160>)
 8002006:	f001 fdff 	bl	8003c08 <HAL_GPIO_Init>

}
 800200a:	bf00      	nop
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40011000 	.word	0x40011000
 800201c:	40010800 	.word	0x40010800
 8002020:	40010c00 	.word	0x40010c00
 8002024:	40011400 	.word	0x40011400

08002028 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_IC_CaptureCallback+0x38>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00b      	beq.n	8002050 <HAL_TIM_IC_CaptureCallback+0x28>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_TIM_IC_CaptureCallback+0x28>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_TIM_IC_CaptureCallback+0x40>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d003      	beq.n	8002050 <HAL_TIM_IC_CaptureCallback+0x28>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_TIM_IC_CaptureCallback+0x44>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d103      	bne.n	8002058 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f007 fcbb 	bl	80099cc <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8002056:	bf00      	nop
 8002058:	bf00      	nop
}
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000a40 	.word	0x20000a40
 8002064:	200006f4 	.word	0x200006f4
 8002068:	2000058c 	.word	0x2000058c
 800206c:	20000640 	.word	0x20000640

08002070 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a04      	ldr	r2, [pc, #16]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d101      	bne.n	8002084 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8002080:	f008 fdee 	bl	800ac60 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20000914 	.word	0x20000914

08002090 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <HAL_UART_RxCpltCallback+0x2c>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d102      	bne.n	80020a6 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 80020a0:	f007 fb38 	bl	8009714 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80020a4:	e005      	b.n	80020b2 <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <HAL_UART_RxCpltCallback+0x30>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 80020ae:	f008 ff6d 	bl	800af8c <MAS_receiveData>
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200007d8 	.word	0x200007d8
 80020c0:	200009cc 	.word	0x200009cc

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 80020cc:	4902      	ldr	r1, [pc, #8]	; (80020d8 <Error_Handler+0x14>)
 80020ce:	2003      	movs	r0, #3
 80020d0:	f008 fe9e 	bl	800ae10 <LOG_log>

  while (1)
 80020d4:	e7fe      	b.n	80020d4 <Error_Handler+0x10>
 80020d6:	bf00      	nop
 80020d8:	0800ee30 	.word	0x0800ee30

080020dc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4904      	ldr	r1, [pc, #16]	; (80020fc <assert_failed+0x20>)
 80020ec:	2003      	movs	r0, #3
 80020ee:	f008 fe8f 	bl	800ae10 <LOG_log>

    return;
 80020f2:	bf00      	nop
  /* USER CODE END 6 */
}
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800ee4c 	.word	0x0800ee4c

08002100 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002106:	4b15      	ldr	r3, [pc, #84]	; (800215c <HAL_MspInit+0x5c>)
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	4a14      	ldr	r2, [pc, #80]	; (800215c <HAL_MspInit+0x5c>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6193      	str	r3, [r2, #24]
 8002112:	4b12      	ldr	r3, [pc, #72]	; (800215c <HAL_MspInit+0x5c>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_MspInit+0x5c>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a0e      	ldr	r2, [pc, #56]	; (800215c <HAL_MspInit+0x5c>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	61d3      	str	r3, [r2, #28]
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <HAL_MspInit+0x5c>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002136:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <HAL_MspInit+0x60>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_MspInit+0x60>)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002152:	bf00      	nop
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	40021000 	.word	0x40021000
 8002160:	40010000 	.word	0x40010000

08002164 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a14      	ldr	r2, [pc, #80]	; (80021d0 <HAL_ADC_MspInit+0x6c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d121      	bne.n	80021c8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_ADC_MspInit+0x70>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_ADC_MspInit+0x70>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_ADC_MspInit+0x70>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_ADC_MspInit+0x70>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_ADC_MspInit+0x70>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <HAL_ADC_MspInit+0x70>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 80021b4:	2320      	movs	r3, #32
 80021b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021b8:	2303      	movs	r3, #3
 80021ba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 0310 	add.w	r3, r7, #16
 80021c0:	4619      	mov	r1, r3
 80021c2:	4805      	ldr	r0, [pc, #20]	; (80021d8 <HAL_ADC_MspInit+0x74>)
 80021c4:	f001 fd20 	bl	8003c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40012400 	.word	0x40012400
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010800 	.word	0x40010800

080021dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0b      	ldr	r2, [pc, #44]	; (8002218 <HAL_RTC_MspInit+0x3c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d110      	bne.n	8002210 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80021ee:	f001 fff9 	bl	80041e4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_RTC_MspInit+0x40>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_RTC_MspInit+0x40>)
 80021f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <HAL_RTC_MspInit+0x40>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800220a:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RTC_MspInit+0x44>)
 800220c:	2201      	movs	r2, #1
 800220e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40002800 	.word	0x40002800
 800221c:	40021000 	.word	0x40021000
 8002220:	4242043c 	.word	0x4242043c

08002224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <HAL_TIM_Base_MspInit+0xb0>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d114      	bne.n	8002260 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002236:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	4a27      	ldr	r2, [pc, #156]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 800223c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002240:	6193      	str	r3, [r2, #24]
 8002242:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 800224e:	2200      	movs	r2, #0
 8002250:	2106      	movs	r1, #6
 8002252:	2019      	movs	r0, #25
 8002254:	f001 fb46 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002258:	2019      	movs	r0, #25
 800225a:	f001 fb6f 	bl	800393c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800225e:	e034      	b.n	80022ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a1d      	ldr	r2, [pc, #116]	; (80022dc <HAL_TIM_Base_MspInit+0xb8>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d10c      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002270:	f043 0310 	orr.w	r3, r3, #16
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	693b      	ldr	r3, [r7, #16]
}
 8002282:	e022      	b.n	80022ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_TIM_Base_MspInit+0xbc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10c      	bne.n	80022a8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 8002294:	f043 0320 	orr.w	r3, r3, #32
 8002298:	61d3      	str	r3, [r2, #28]
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
}
 80022a6:	e010      	b.n	80022ca <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_TIM_Base_MspInit+0xc0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10b      	bne.n	80022ca <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 80022b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022bc:	6193      	str	r3, [r2, #24]
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_TIM_Base_MspInit+0xb4>)
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c6:	60bb      	str	r3, [r7, #8]
 80022c8:	68bb      	ldr	r3, [r7, #8]
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40012c00 	.word	0x40012c00
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40001000 	.word	0x40001000
 80022e0:	40001400 	.word	0x40001400
 80022e4:	40013400 	.word	0x40013400

080022e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b090      	sub	sp, #64	; 0x40
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002306:	d157      	bne.n	80023b8 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a77      	ldr	r2, [pc, #476]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	61d3      	str	r3, [r2, #28]
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	62bb      	str	r3, [r7, #40]	; 0x28
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	4b72      	ldr	r3, [pc, #456]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a71      	ldr	r2, [pc, #452]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002338:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800233e:	f043 0308 	orr.w	r3, r3, #8
 8002342:	6193      	str	r3, [r2, #24]
 8002344:	4b69      	ldr	r3, [pc, #420]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8002350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002356:	2300      	movs	r3, #0
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002362:	4619      	mov	r1, r3
 8002364:	4862      	ldr	r0, [pc, #392]	; (80024f0 <HAL_TIM_Encoder_MspInit+0x208>)
 8002366:	f001 fc4f 	bl	8003c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 800236a:	2308      	movs	r3, #8
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800236e:	2300      	movs	r3, #0
 8002370:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 8002376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800237a:	4619      	mov	r1, r3
 800237c:	485d      	ldr	r0, [pc, #372]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800237e:	f001 fc43 	bl	8003c08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002382:	4b5d      	ldr	r3, [pc, #372]	; (80024f8 <HAL_TIM_Encoder_MspInit+0x210>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002392:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a0:	4a55      	ldr	r2, [pc, #340]	; (80024f8 <HAL_TIM_Encoder_MspInit+0x210>)
 80023a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a4:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2104      	movs	r1, #4
 80023aa:	201c      	movs	r0, #28
 80023ac:	f001 fa9a 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80023b0:	201c      	movs	r0, #28
 80023b2:	f001 fac3 	bl	800393c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023b6:	e094      	b.n	80024e2 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4f      	ldr	r2, [pc, #316]	; (80024fc <HAL_TIM_Encoder_MspInit+0x214>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d12c      	bne.n	800241c <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	4a49      	ldr	r2, [pc, #292]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	61d3      	str	r3, [r2, #28]
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	4a43      	ldr	r2, [pc, #268]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80023e0:	f043 0304 	orr.w	r3, r3, #4
 80023e4:	6193      	str	r3, [r2, #24]
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 80023f2:	23c0      	movs	r3, #192	; 0xc0
 80023f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002402:	4619      	mov	r1, r3
 8002404:	483a      	ldr	r0, [pc, #232]	; (80024f0 <HAL_TIM_Encoder_MspInit+0x208>)
 8002406:	f001 fbff 	bl	8003c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2104      	movs	r1, #4
 800240e:	201d      	movs	r0, #29
 8002410:	f001 fa68 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002414:	201d      	movs	r0, #29
 8002416:	f001 fa91 	bl	800393c <HAL_NVIC_EnableIRQ>
}
 800241a:	e062      	b.n	80024e2 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a37      	ldr	r2, [pc, #220]	; (8002500 <HAL_TIM_Encoder_MspInit+0x218>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d12c      	bne.n	8002480 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a30      	ldr	r2, [pc, #192]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800242c:	f043 0304 	orr.w	r3, r3, #4
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	617b      	str	r3, [r7, #20]
 800243c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6193      	str	r3, [r2, #24]
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245a:	2300      	movs	r3, #0
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245e:	2300      	movs	r3, #0
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002462:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002466:	4619      	mov	r1, r3
 8002468:	4822      	ldr	r0, [pc, #136]	; (80024f4 <HAL_TIM_Encoder_MspInit+0x20c>)
 800246a:	f001 fbcd 	bl	8003c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2104      	movs	r1, #4
 8002472:	201e      	movs	r0, #30
 8002474:	f001 fa36 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002478:	201e      	movs	r0, #30
 800247a:	f001 fa5f 	bl	800393c <HAL_NVIC_EnableIRQ>
}
 800247e:	e030      	b.n	80024e2 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d12b      	bne.n	80024e2 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	4a17      	ldr	r2, [pc, #92]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	61d3      	str	r3, [r2, #28]
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0308 	and.w	r3, r3, #8
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a2:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	4a11      	ldr	r2, [pc, #68]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6193      	str	r3, [r2, #24]
 80024ae:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_TIM_Encoder_MspInit+0x204>)
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 80024ba:	2303      	movs	r3, #3
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024be:	2300      	movs	r3, #0
 80024c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ca:	4619      	mov	r1, r3
 80024cc:	4808      	ldr	r0, [pc, #32]	; (80024f0 <HAL_TIM_Encoder_MspInit+0x208>)
 80024ce:	f001 fb9b 	bl	8003c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2104      	movs	r1, #4
 80024d6:	2032      	movs	r0, #50	; 0x32
 80024d8:	f001 fa04 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024dc:	2032      	movs	r0, #50	; 0x32
 80024de:	f001 fa2d 	bl	800393c <HAL_NVIC_EnableIRQ>
}
 80024e2:	bf00      	nop
 80024e4:	3740      	adds	r7, #64	; 0x40
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010800 	.word	0x40010800
 80024f4:	40010c00 	.word	0x40010c00
 80024f8:	40010000 	.word	0x40010000
 80024fc:	40000400 	.word	0x40000400
 8002500:	40000800 	.word	0x40000800
 8002504:	40000c00 	.word	0x40000c00

08002508 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_TIM_MspPostInit+0x5c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d118      	bne.n	800255a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002528:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_TIM_MspPostInit+0x60>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <HAL_TIM_MspPostInit+0x60>)
 800252e:	f043 0310 	orr.w	r3, r3, #16
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_TIM_MspPostInit+0x60>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8002540:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002544:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254a:	2303      	movs	r3, #3
 800254c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <HAL_TIM_MspPostInit+0x64>)
 8002556:	f001 fb57 	bl	8003c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40013400 	.word	0x40013400
 8002568:	40021000 	.word	0x40021000
 800256c:	40011000 	.word	0x40011000

08002570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0318 	add.w	r3, r7, #24
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a40      	ldr	r2, [pc, #256]	; (800268c <HAL_UART_MspInit+0x11c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d13a      	bne.n	8002606 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002590:	4b3f      	ldr	r3, [pc, #252]	; (8002690 <HAL_UART_MspInit+0x120>)
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	4a3e      	ldr	r2, [pc, #248]	; (8002690 <HAL_UART_MspInit+0x120>)
 8002596:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800259a:	61d3      	str	r3, [r2, #28]
 800259c:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <HAL_UART_MspInit+0x120>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a8:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_UART_MspInit+0x120>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a38      	ldr	r2, [pc, #224]	; (8002690 <HAL_UART_MspInit+0x120>)
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b36      	ldr	r3, [pc, #216]	; (8002690 <HAL_UART_MspInit+0x120>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 80025c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	4619      	mov	r1, r3
 80025d4:	482f      	ldr	r0, [pc, #188]	; (8002694 <HAL_UART_MspInit+0x124>)
 80025d6:	f001 fb17 	bl	8003c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 80025da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80025e8:	f107 0318 	add.w	r3, r7, #24
 80025ec:	4619      	mov	r1, r3
 80025ee:	4829      	ldr	r0, [pc, #164]	; (8002694 <HAL_UART_MspInit+0x124>)
 80025f0:	f001 fb0a 	bl	8003c08 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2105      	movs	r1, #5
 80025f8:	2034      	movs	r0, #52	; 0x34
 80025fa:	f001 f973 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80025fe:	2034      	movs	r0, #52	; 0x34
 8002600:	f001 f99c 	bl	800393c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002604:	e03e      	b.n	8002684 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a23      	ldr	r2, [pc, #140]	; (8002698 <HAL_UART_MspInit+0x128>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d139      	bne.n	8002684 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002610:	4b1f      	ldr	r3, [pc, #124]	; (8002690 <HAL_UART_MspInit+0x120>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a1e      	ldr	r2, [pc, #120]	; (8002690 <HAL_UART_MspInit+0x120>)
 8002616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_UART_MspInit+0x120>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_UART_MspInit+0x120>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_UART_MspInit+0x120>)
 800262e:	f043 0304 	orr.w	r3, r3, #4
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b16      	ldr	r3, [pc, #88]	; (8002690 <HAL_UART_MspInit+0x120>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	60bb      	str	r3, [r7, #8]
 800263e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8002640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	4619      	mov	r1, r3
 8002654:	4811      	ldr	r0, [pc, #68]	; (800269c <HAL_UART_MspInit+0x12c>)
 8002656:	f001 fad7 	bl	8003c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 800265a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800265e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	4619      	mov	r1, r3
 800266e:	480b      	ldr	r0, [pc, #44]	; (800269c <HAL_UART_MspInit+0x12c>)
 8002670:	f001 faca 	bl	8003c08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2105      	movs	r1, #5
 8002678:	2025      	movs	r0, #37	; 0x25
 800267a:	f001 f933 	bl	80038e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800267e:	2025      	movs	r0, #37	; 0x25
 8002680:	f001 f95c 	bl	800393c <HAL_NVIC_EnableIRQ>
}
 8002684:	bf00      	nop
 8002686:	3728      	adds	r7, #40	; 0x28
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40004c00 	.word	0x40004c00
 8002690:	40021000 	.word	0x40021000
 8002694:	40011000 	.word	0x40011000
 8002698:	40013800 	.word	0x40013800
 800269c:	40010800 	.word	0x40010800

080026a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 80026a4:	4902      	ldr	r1, [pc, #8]	; (80026b0 <NMI_Handler+0x10>)
 80026a6:	2003      	movs	r0, #3
 80026a8:	f008 fbb2 	bl	800ae10 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026ac:	e7fe      	b.n	80026ac <NMI_Handler+0xc>
 80026ae:	bf00      	nop
 80026b0:	0800ee64 	.word	0x0800ee64

080026b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 80026b8:	4902      	ldr	r1, [pc, #8]	; (80026c4 <HardFault_Handler+0x10>)
 80026ba:	2003      	movs	r0, #3
 80026bc:	f008 fba8 	bl	800ae10 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <HardFault_Handler+0xc>
 80026c2:	bf00      	nop
 80026c4:	0800ee7c 	.word	0x0800ee7c

080026c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 80026cc:	4902      	ldr	r1, [pc, #8]	; (80026d8 <MemManage_Handler+0x10>)
 80026ce:	2003      	movs	r0, #3
 80026d0:	f008 fb9e 	bl	800ae10 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d4:	e7fe      	b.n	80026d4 <MemManage_Handler+0xc>
 80026d6:	bf00      	nop
 80026d8:	0800ee9c 	.word	0x0800ee9c

080026dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 80026e0:	4902      	ldr	r1, [pc, #8]	; (80026ec <BusFault_Handler+0x10>)
 80026e2:	2003      	movs	r0, #3
 80026e4:	f008 fb94 	bl	800ae10 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e8:	e7fe      	b.n	80026e8 <BusFault_Handler+0xc>
 80026ea:	bf00      	nop
 80026ec:	0800eebc 	.word	0x0800eebc

080026f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 80026f4:	4902      	ldr	r1, [pc, #8]	; (8002700 <UsageFault_Handler+0x10>)
 80026f6:	2003      	movs	r0, #3
 80026f8:	f008 fb8a 	bl	800ae10 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026fc:	e7fe      	b.n	80026fc <UsageFault_Handler+0xc>
 80026fe:	bf00      	nop
 8002700:	0800eedc 	.word	0x0800eedc

08002704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8002708:	4902      	ldr	r1, [pc, #8]	; (8002714 <SVC_Handler+0x10>)
 800270a:	2003      	movs	r0, #3
 800270c:	f008 fb80 	bl	800ae10 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	0800eefc 	.word	0x0800eefc

08002718 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 800271c:	4902      	ldr	r1, [pc, #8]	; (8002728 <DebugMon_Handler+0x10>)
 800271e:	2003      	movs	r0, #3
 8002720:	f008 fb76 	bl	800ae10 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	0800ef14 	.word	0x0800ef14

0800272c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8002730:	4902      	ldr	r1, [pc, #8]	; (800273c <PendSV_Handler+0x10>)
 8002732:	2003      	movs	r0, #3
 8002734:	f008 fb6c 	bl	800ae10 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	0800ef34 	.word	0x0800ef34

08002740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002744:	f000 f988 	bl	8002a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM1_UP_IRQHandler+0x10>)
 8002752:	f004 fa49 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20000914 	.word	0x20000914

08002760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <TIM2_IRQHandler+0x10>)
 8002766:	f004 fa3f 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000a40 	.word	0x20000a40

08002774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <TIM3_IRQHandler+0x10>)
 800277a:	f004 fa35 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200006f4 	.word	0x200006f4

08002788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <TIM4_IRQHandler+0x10>)
 800278e:	f004 fa2b 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000058c 	.word	0x2000058c

0800279c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <USART1_IRQHandler+0x10>)
 80027a2:	f005 ff81 	bl	80086a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200007d8 	.word	0x200007d8

080027b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <TIM5_IRQHandler+0x10>)
 80027b6:	f004 fa17 	bl	8006be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000640 	.word	0x20000640

080027c4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <UART4_IRQHandler+0x10>)
 80027ca:	f005 ff6d 	bl	80086a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	200009cc 	.word	0x200009cc

080027d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
	return 1;
 80027dc:	2301      	movs	r3, #1
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr

080027e6 <_kill>:

int _kill(int pid, int sig)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027f0:	f009 f8e8 	bl	800b9c4 <__errno>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2216      	movs	r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
	return -1;
 80027fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <_exit>:

void _exit (int status)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b082      	sub	sp, #8
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800280e:	f04f 31ff 	mov.w	r1, #4294967295
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff ffe7 	bl	80027e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002818:	e7fe      	b.n	8002818 <_exit+0x12>

0800281a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e00a      	b.n	8002842 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800282c:	f3af 8000 	nop.w
 8002830:	4601      	mov	r1, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	60ba      	str	r2, [r7, #8]
 8002838:	b2ca      	uxtb	r2, r1
 800283a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	3301      	adds	r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	dbf0      	blt.n	800282c <_read+0x12>
	}

return len;
 800284a:	687b      	ldr	r3, [r7, #4]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d00a      	beq.n	800287c <_write+0x28>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d007      	beq.n	800287c <_write+0x28>
  {
    errno = EBADF;
 800286c:	f009 f8aa 	bl	800b9c4 <__errno>
 8002870:	4603      	mov	r3, r0
 8002872:	2209      	movs	r2, #9
 8002874:	601a      	str	r2, [r3, #0]
    return -1;
 8002876:	f04f 33ff 	mov.w	r3, #4294967295
 800287a:	e00f      	b.n	800289c <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <_write+0x50>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4619      	mov	r1, r3
 8002888:	68b8      	ldr	r0, [r7, #8]
 800288a:	f006 ff93 	bl	80097b4 <CON_sendString>
 800288e:	e004      	b.n	800289a <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4619      	mov	r1, r3
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f008 fbc9 	bl	800b02c <MAS_sendString>
  }

  return len;
 800289a:	687b      	ldr	r3, [r7, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200009c8 	.word	0x200009c8

080028a8 <_close>:

int _close(int file)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
	return -1;
 80028b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ce:	605a      	str	r2, [r3, #4]
	return 0;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <_isatty>:

int _isatty(int file)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
	return 1;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002910:	4a14      	ldr	r2, [pc, #80]	; (8002964 <_sbrk+0x5c>)
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <_sbrk+0x60>)
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <_sbrk+0x64>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <_sbrk+0x68>)
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	429a      	cmp	r2, r3
 8002936:	d207      	bcs.n	8002948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002938:	f009 f844 	bl	800b9c4 <__errno>
 800293c:	4603      	mov	r3, r0
 800293e:	220c      	movs	r2, #12
 8002940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e009      	b.n	800295c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	4a05      	ldr	r2, [pc, #20]	; (800296c <_sbrk+0x64>)
 8002958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	2000c000 	.word	0x2000c000
 8002968:	00000400 	.word	0x00000400
 800296c:	20000218 	.word	0x20000218
 8002970:	20000bc0 	.word	0x20000bc0

08002974 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480c      	ldr	r0, [pc, #48]	; (80029b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002982:	490d      	ldr	r1, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002984:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002998:	4c0a      	ldr	r4, [pc, #40]	; (80029c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029a6:	f7ff ffe5 	bl	8002974 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f009 f811 	bl	800b9d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029ae:	f7fe fccd 	bl	800134c <main>
  bx lr
 80029b2:	4770      	bx	lr
  ldr r0, =_sdata
 80029b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80029bc:	0800fe0c 	.word	0x0800fe0c
  ldr r2, =_sbss
 80029c0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80029c4:	20000bbc 	.word	0x20000bbc

080029c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c8:	e7fe      	b.n	80029c8 <ADC1_2_IRQHandler>
	...

080029cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d0:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <HAL_Init+0x28>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a07      	ldr	r2, [pc, #28]	; (80029f4 <HAL_Init+0x28>)
 80029d6:	f043 0310 	orr.w	r3, r3, #16
 80029da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029dc:	2003      	movs	r0, #3
 80029de:	f000 ff61 	bl	80038a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f000 f808 	bl	80029f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e8:	f7ff fb8a 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40022000 	.word	0x40022000

080029f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a00:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_InitTick+0x54>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_InitTick+0x58>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 ffa8 	bl	800396c <HAL_SYSTICK_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e00e      	b.n	8002a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b0f      	cmp	r3, #15
 8002a2a:	d80a      	bhi.n	8002a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	f04f 30ff 	mov.w	r0, #4294967295
 8002a34:	f000 ff56 	bl	80038e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a38:	4a06      	ldr	r2, [pc, #24]	; (8002a54 <HAL_InitTick+0x5c>)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	e000      	b.n	8002a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000000 	.word	0x20000000
 8002a50:	20000008 	.word	0x20000008
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a5c:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_IncTick+0x1c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_IncTick+0x20>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4413      	add	r3, r2
 8002a68:	4a03      	ldr	r2, [pc, #12]	; (8002a78 <HAL_IncTick+0x20>)
 8002a6a:	6013      	str	r3, [r2, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000008 	.word	0x20000008
 8002a78:	20000ba8 	.word	0x20000ba8

08002a7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b02      	ldr	r3, [pc, #8]	; (8002a8c <HAL_GetTick+0x10>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	20000ba8 	.word	0x20000ba8

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff fff0 	bl	8002a7c <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffe0 	bl	8002a7c <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000008 	.word	0x20000008

08002ad8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e188      	b.n	8002e0c <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a8c      	ldr	r2, [pc, #560]	; (8002d30 <HAL_ADC_Init+0x258>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00e      	beq.n	8002b22 <HAL_ADC_Init+0x4a>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a8a      	ldr	r2, [pc, #552]	; (8002d34 <HAL_ADC_Init+0x25c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_ADC_Init+0x4a>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a89      	ldr	r2, [pc, #548]	; (8002d38 <HAL_ADC_Init+0x260>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_ADC_Init+0x4a>
 8002b18:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002b1c:	4887      	ldr	r0, [pc, #540]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002b1e:	f7ff fadd 	bl	80020dc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_ADC_Init+0x66>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b32:	d004      	beq.n	8002b3e <HAL_ADC_Init+0x66>
 8002b34:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002b38:	4880      	ldr	r0, [pc, #512]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002b3a:	f7ff facf 	bl	80020dc <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <HAL_ADC_Init+0x82>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d004      	beq.n	8002b5a <HAL_ADC_Init+0x82>
 8002b50:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002b54:	4879      	ldr	r0, [pc, #484]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002b56:	f7ff fac1 	bl	80020dc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7b1b      	ldrb	r3, [r3, #12]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_ADC_Init+0x9c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7b1b      	ldrb	r3, [r3, #12]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_Init+0x9c>
 8002b6a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002b6e:	4873      	ldr	r0, [pc, #460]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002b70:	f7ff fab4 	bl	80020dc <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d044      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b84:	d03f      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002b8e:	d03a      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b98:	d035      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002ba2:	d030      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bac:	d02b      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d027      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bbe:	d022      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002bc8:	d01d      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002bd2:	d018      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bdc:	d013      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be6:	d00e      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bf0:	d009      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002bfa:	d004      	beq.n	8002c06 <HAL_ADC_Init+0x12e>
 8002bfc:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002c00:	484e      	ldr	r0, [pc, #312]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002c02:	f7ff fa6b 	bl	80020dc <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d02a      	beq.n	8002c64 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d003      	beq.n	8002c1e <HAL_ADC_Init+0x146>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d904      	bls.n	8002c28 <HAL_ADC_Init+0x150>
 8002c1e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002c22:	4846      	ldr	r0, [pc, #280]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002c24:	f7ff fa5a 	bl	80020dc <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7d1b      	ldrb	r3, [r3, #20]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_ADC_Init+0x16a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7d1b      	ldrb	r3, [r3, #20]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d004      	beq.n	8002c42 <HAL_ADC_Init+0x16a>
 8002c38:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002c3c:	483f      	ldr	r0, [pc, #252]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002c3e:	f7ff fa4d 	bl	80020dc <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	7d1b      	ldrb	r3, [r3, #20]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00c      	beq.n	8002c64 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_ADC_Init+0x182>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d904      	bls.n	8002c64 <HAL_ADC_Init+0x18c>
 8002c5a:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002c5e:	4837      	ldr	r0, [pc, #220]	; (8002d3c <HAL_ADC_Init+0x264>)
 8002c60:	f7ff fa3c 	bl	80020dc <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff fa72 	bl	8002164 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fd01 	bl	8003688 <ADC_ConversionStop_Disable>
 8002c86:	4603      	mov	r3, r0
 8002c88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 80b1 	bne.w	8002dfa <HAL_ADC_Init+0x322>
 8002c98:	7dfb      	ldrb	r3, [r7, #23]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 80ad 	bne.w	8002dfa <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ca8:	f023 0302 	bic.w	r3, r3, #2
 8002cac:	f043 0202 	orr.w	r2, r3, #2
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	491e      	ldr	r1, [pc, #120]	; (8002d38 <HAL_ADC_Init+0x260>)
 8002cbe:	428b      	cmp	r3, r1
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_ADC_Init+0x200>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cca:	d002      	beq.n	8002cd2 <HAL_ADC_Init+0x1fa>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_Init+0x204>
 8002cd2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cd6:	e001      	b.n	8002cdc <HAL_ADC_Init+0x204>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002cdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	7b1b      	ldrb	r3, [r3, #12]
 8002ce2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ce4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf4:	d003      	beq.n	8002cfe <HAL_ADC_Init+0x226>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d102      	bne.n	8002d04 <HAL_ADC_Init+0x22c>
 8002cfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d02:	e000      	b.n	8002d06 <HAL_ADC_Init+0x22e>
 8002d04:	2300      	movs	r3, #0
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7d1b      	ldrb	r3, [r3, #20]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d121      	bne.n	8002d58 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7b1b      	ldrb	r3, [r3, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	035a      	lsls	r2, r3, #13
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e013      	b.n	8002d58 <HAL_ADC_Init+0x280>
 8002d30:	40012400 	.word	0x40012400
 8002d34:	40012800 	.word	0x40012800
 8002d38:	40013c00 	.word	0x40013c00
 8002d3c:	0800ef50 	.word	0x0800ef50
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f043 0220 	orr.w	r2, r3, #32
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689a      	ldr	r2, [r3, #8]
 8002d72:	4b28      	ldr	r3, [pc, #160]	; (8002e14 <HAL_ADC_Init+0x33c>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6812      	ldr	r2, [r2, #0]
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d88:	d003      	beq.n	8002d92 <HAL_ADC_Init+0x2ba>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d104      	bne.n	8002d9c <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	051b      	lsls	r3, r3, #20
 8002d9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_ADC_Init+0x340>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dca:	f023 0303 	bic.w	r3, r3, #3
 8002dce:	f043 0201 	orr.w	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002dd6:	e018      	b.n	8002e0a <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ddc:	f023 0312 	bic.w	r3, r3, #18
 8002de0:	f043 0210 	orr.w	r2, r3, #16
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002df8:	e007      	b.n	8002e0a <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	f043 0210 	orr.w	r2, r3, #16
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	ffe1f7fd 	.word	0xffe1f7fd
 8002e18:	ff1f0efe 	.word	0xff1f0efe

08002e1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <HAL_ADC_Start+0x17c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00e      	beq.n	8002e50 <HAL_ADC_Start+0x34>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a59      	ldr	r2, [pc, #356]	; (8002f9c <HAL_ADC_Start+0x180>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d009      	beq.n	8002e50 <HAL_ADC_Start+0x34>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_ADC_Start+0x184>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d004      	beq.n	8002e50 <HAL_ADC_Start+0x34>
 8002e46:	f240 411b 	movw	r1, #1051	; 0x41b
 8002e4a:	4856      	ldr	r0, [pc, #344]	; (8002fa4 <HAL_ADC_Start+0x188>)
 8002e4c:	f7ff f946 	bl	80020dc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_Start+0x42>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e098      	b.n	8002f90 <HAL_ADC_Start+0x174>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fbb4 	bl	80035d4 <ADC_Enable>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 8087 	bne.w	8002f86 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	f023 0301 	bic.w	r3, r3, #1
 8002e84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a42      	ldr	r2, [pc, #264]	; (8002f9c <HAL_ADC_Start+0x180>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d105      	bne.n	8002ea2 <HAL_ADC_Start+0x86>
 8002e96:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_ADC_Start+0x17c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d115      	bne.n	8002ece <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d026      	beq.n	8002f0a <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002ecc:	e01d      	b.n	8002f0a <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2e      	ldr	r2, [pc, #184]	; (8002f98 <HAL_ADC_Start+0x17c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d004      	beq.n	8002eee <HAL_ADC_Start+0xd2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a2c      	ldr	r2, [pc, #176]	; (8002f9c <HAL_ADC_Start+0x180>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d10d      	bne.n	8002f0a <HAL_ADC_Start+0xee>
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <HAL_ADC_Start+0x17c>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f023 0206 	bic.w	r2, r3, #6
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f22:	e002      	b.n	8002f2a <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f06f 0202 	mvn.w	r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002f46:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002f4a:	d113      	bne.n	8002f74 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f50:	4a12      	ldr	r2, [pc, #72]	; (8002f9c <HAL_ADC_Start+0x180>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d105      	bne.n	8002f62 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002f56:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_ADC_Start+0x17c>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d108      	bne.n	8002f74 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	e00c      	b.n	8002f8e <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	e003      	b.n	8002f8e <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40012400 	.word	0x40012400
 8002f9c:	40012800 	.word	0x40012800
 8002fa0:	40013c00 	.word	0x40013c00
 8002fa4:	0800ef50 	.word	0x0800ef50

08002fa8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a80      	ldr	r2, [pc, #512]	; (80031c4 <HAL_ADC_PollForConversion+0x21c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00e      	beq.n	8002fe6 <HAL_ADC_PollForConversion+0x3e>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a7e      	ldr	r2, [pc, #504]	; (80031c8 <HAL_ADC_PollForConversion+0x220>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d009      	beq.n	8002fe6 <HAL_ADC_PollForConversion+0x3e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7d      	ldr	r2, [pc, #500]	; (80031cc <HAL_ADC_PollForConversion+0x224>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d004      	beq.n	8002fe6 <HAL_ADC_PollForConversion+0x3e>
 8002fdc:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002fe0:	487b      	ldr	r0, [pc, #492]	; (80031d0 <HAL_ADC_PollForConversion+0x228>)
 8002fe2:	f7ff f87b 	bl	80020dc <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fe6:	f7ff fd49 	bl	8002a7c <HAL_GetTick>
 8002fea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0d3      	b.n	80031ba <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d131      	bne.n	8003084 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003026:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800302a:	2b00      	cmp	r3, #0
 800302c:	d12a      	bne.n	8003084 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800302e:	e021      	b.n	8003074 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003036:	d01d      	beq.n	8003074 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_ADC_PollForConversion+0xa6>
 800303e:	f7ff fd1d 	bl	8002a7c <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d212      	bcs.n	8003074 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10b      	bne.n	8003074 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	f043 0204 	orr.w	r2, r3, #4
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e0a2      	b.n	80031ba <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0d6      	beq.n	8003030 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003082:	e070      	b.n	8003166 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_ADC_PollForConversion+0x22c>)
 8003086:	681c      	ldr	r4, [r3, #0]
 8003088:	2002      	movs	r0, #2
 800308a:	f001 ff7d 	bl	8004f88 <HAL_RCCEx_GetPeriphCLKFreq>
 800308e:	4603      	mov	r3, r0
 8003090:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6919      	ldr	r1, [r3, #16]
 800309a:	4b4f      	ldr	r3, [pc, #316]	; (80031d8 <HAL_ADC_PollForConversion+0x230>)
 800309c:	400b      	ands	r3, r1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d118      	bne.n	80030d4 <HAL_ADC_PollForConversion+0x12c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68d9      	ldr	r1, [r3, #12]
 80030a8:	4b4c      	ldr	r3, [pc, #304]	; (80031dc <HAL_ADC_PollForConversion+0x234>)
 80030aa:	400b      	ands	r3, r1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d111      	bne.n	80030d4 <HAL_ADC_PollForConversion+0x12c>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <HAL_ADC_PollForConversion+0x238>)
 80030b8:	400b      	ands	r3, r1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HAL_ADC_PollForConversion+0x128>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68d9      	ldr	r1, [r3, #12]
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_ADC_PollForConversion+0x23c>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_PollForConversion+0x128>
 80030cc:	2314      	movs	r3, #20
 80030ce:	e020      	b.n	8003112 <HAL_ADC_PollForConversion+0x16a>
 80030d0:	2329      	movs	r3, #41	; 0x29
 80030d2:	e01e      	b.n	8003112 <HAL_ADC_PollForConversion+0x16a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	4b41      	ldr	r3, [pc, #260]	; (80031e0 <HAL_ADC_PollForConversion+0x238>)
 80030dc:	400b      	ands	r3, r1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d106      	bne.n	80030f0 <HAL_ADC_PollForConversion+0x148>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68d9      	ldr	r1, [r3, #12]
 80030e8:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <HAL_ADC_PollForConversion+0x23c>)
 80030ea:	400b      	ands	r3, r1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00d      	beq.n	800310c <HAL_ADC_PollForConversion+0x164>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6919      	ldr	r1, [r3, #16]
 80030f6:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <HAL_ADC_PollForConversion+0x240>)
 80030f8:	400b      	ands	r3, r1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d108      	bne.n	8003110 <HAL_ADC_PollForConversion+0x168>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68d9      	ldr	r1, [r3, #12]
 8003104:	4b38      	ldr	r3, [pc, #224]	; (80031e8 <HAL_ADC_PollForConversion+0x240>)
 8003106:	400b      	ands	r3, r1
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_ADC_PollForConversion+0x168>
 800310c:	2354      	movs	r3, #84	; 0x54
 800310e:	e000      	b.n	8003112 <HAL_ADC_PollForConversion+0x16a>
 8003110:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003112:	fb02 f303 	mul.w	r3, r2, r3
 8003116:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003118:	e021      	b.n	800315e <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003120:	d01a      	beq.n	8003158 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_ADC_PollForConversion+0x190>
 8003128:	f7ff fca8 	bl	8002a7c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d20f      	bcs.n	8003158 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	429a      	cmp	r2, r3
 800313e:	d90b      	bls.n	8003158 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f043 0204 	orr.w	r2, r3, #4
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e030      	b.n	80031ba <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3301      	adds	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	429a      	cmp	r2, r3
 8003164:	d8d9      	bhi.n	800311a <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f06f 0212 	mvn.w	r2, #18
 800316e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003174:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003186:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800318a:	d115      	bne.n	80031b8 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003190:	2b00      	cmp	r3, #0
 8003192:	d111      	bne.n	80031b8 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	371c      	adds	r7, #28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40012400 	.word	0x40012400
 80031c8:	40012800 	.word	0x40012800
 80031cc:	40013c00 	.word	0x40013c00
 80031d0:	0800ef50 	.word	0x0800ef50
 80031d4:	20000000 	.word	0x20000000
 80031d8:	24924924 	.word	0x24924924
 80031dc:	00924924 	.word	0x00924924
 80031e0:	12492492 	.word	0x12492492
 80031e4:	00492492 	.word	0x00492492
 80031e8:	00249249 	.word	0x00249249

080031ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_ADC_GetValue+0x40>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00e      	beq.n	800321c <HAL_ADC_GetValue+0x30>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a0b      	ldr	r2, [pc, #44]	; (8003230 <HAL_ADC_GetValue+0x44>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d009      	beq.n	800321c <HAL_ADC_GetValue+0x30>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_ADC_GetValue+0x48>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_ADC_GetValue+0x30>
 8003212:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8003216:	4808      	ldr	r0, [pc, #32]	; (8003238 <HAL_ADC_GetValue+0x4c>)
 8003218:	f7fe ff60 	bl	80020dc <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40012400 	.word	0x40012400
 8003230:	40012800 	.word	0x40012800
 8003234:	40013c00 	.word	0x40013c00
 8003238:	0800ef50 	.word	0x0800ef50

0800323c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a8b      	ldr	r2, [pc, #556]	; (8003480 <HAL_ADC_ConfigChannel+0x244>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x3a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a89      	ldr	r2, [pc, #548]	; (8003484 <HAL_ADC_ConfigChannel+0x248>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x3a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a88      	ldr	r2, [pc, #544]	; (8003488 <HAL_ADC_ConfigChannel+0x24c>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_ADC_ConfigChannel+0x3a>
 800326c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8003270:	4886      	ldr	r0, [pc, #536]	; (800348c <HAL_ADC_ConfigChannel+0x250>)
 8003272:	f7fe ff33 	bl	80020dc <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d048      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d044      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d040      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b03      	cmp	r3, #3
 8003294:	d03c      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b04      	cmp	r3, #4
 800329c:	d038      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d034      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d030      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2b07      	cmp	r3, #7
 80032b4:	d02c      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d028      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b09      	cmp	r3, #9
 80032c4:	d024      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b0a      	cmp	r3, #10
 80032cc:	d020      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b0b      	cmp	r3, #11
 80032d4:	d01c      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b0c      	cmp	r3, #12
 80032dc:	d018      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b0d      	cmp	r3, #13
 80032e4:	d014      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b0e      	cmp	r3, #14
 80032ec:	d010      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	d00c      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d008      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2b11      	cmp	r3, #17
 8003304:	d004      	beq.n	8003310 <HAL_ADC_ConfigChannel+0xd4>
 8003306:	f240 71de 	movw	r1, #2014	; 0x7de
 800330a:	4860      	ldr	r0, [pc, #384]	; (800348c <HAL_ADC_ConfigChannel+0x250>)
 800330c:	f7fe fee6 	bl	80020dc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d040      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b02      	cmp	r3, #2
 800331e:	d03c      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d038      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d034      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d030      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d02c      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b07      	cmp	r3, #7
 8003346:	d028      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b08      	cmp	r3, #8
 800334e:	d024      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b09      	cmp	r3, #9
 8003356:	d020      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b0a      	cmp	r3, #10
 800335e:	d01c      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b0b      	cmp	r3, #11
 8003366:	d018      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d014      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b0d      	cmp	r3, #13
 8003376:	d010      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b0e      	cmp	r3, #14
 800337e:	d00c      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d008      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	2b10      	cmp	r3, #16
 800338e:	d004      	beq.n	800339a <HAL_ADC_ConfigChannel+0x15e>
 8003390:	f240 71df 	movw	r1, #2015	; 0x7df
 8003394:	483d      	ldr	r0, [pc, #244]	; (800348c <HAL_ADC_ConfigChannel+0x250>)
 8003396:	f7fe fea1 	bl	80020dc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d01c      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d018      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d014      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d010      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	2b05      	cmp	r3, #5
 80033c8:	d00c      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d008      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	2b07      	cmp	r3, #7
 80033d8:	d004      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x1a8>
 80033da:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80033de:	482b      	ldr	r0, [pc, #172]	; (800348c <HAL_ADC_ConfigChannel+0x250>)
 80033e0:	f7fe fe7c 	bl	80020dc <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d101      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x1b6>
 80033ee:	2302      	movs	r3, #2
 80033f0:	e0e5      	b.n	80035be <HAL_ADC_ConfigChannel+0x382>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b06      	cmp	r3, #6
 8003400:	d81c      	bhi.n	800343c <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685a      	ldr	r2, [r3, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3b05      	subs	r3, #5
 8003414:	221f      	movs	r2, #31
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	4019      	ands	r1, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	3b05      	subs	r3, #5
 800342e:	fa00 f203 	lsl.w	r2, r0, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	635a      	str	r2, [r3, #52]	; 0x34
 800343a:	e045      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d825      	bhi.n	8003490 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	3b23      	subs	r3, #35	; 0x23
 8003456:	221f      	movs	r2, #31
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	4019      	ands	r1, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	3b23      	subs	r3, #35	; 0x23
 8003470:	fa00 f203 	lsl.w	r2, r0, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
 800347c:	e024      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x28c>
 800347e:	bf00      	nop
 8003480:	40012400 	.word	0x40012400
 8003484:	40012800 	.word	0x40012800
 8003488:	40013c00 	.word	0x40013c00
 800348c:	0800ef50 	.word	0x0800ef50
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	3b41      	subs	r3, #65	; 0x41
 80034a2:	221f      	movs	r2, #31
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4019      	ands	r1, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b41      	subs	r3, #65	; 0x41
 80034bc:	fa00 f203 	lsl.w	r2, r0, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d91c      	bls.n	800350a <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68d9      	ldr	r1, [r3, #12]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4613      	mov	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	4413      	add	r3, r2
 80034e0:	3b1e      	subs	r3, #30
 80034e2:	2207      	movs	r2, #7
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	4019      	ands	r1, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	6898      	ldr	r0, [r3, #8]
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4613      	mov	r3, r2
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	4413      	add	r3, r2
 80034fa:	3b1e      	subs	r3, #30
 80034fc:	fa00 f203 	lsl.w	r2, r0, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	60da      	str	r2, [r3, #12]
 8003508:	e019      	b.n	800353e <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6919      	ldr	r1, [r3, #16]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	2207      	movs	r2, #7
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	43db      	mvns	r3, r3
 8003522:	4019      	ands	r1, r3
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6898      	ldr	r0, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	4413      	add	r3, r2
 8003532:	fa00 f203 	lsl.w	r2, r0, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b10      	cmp	r3, #16
 8003544:	d003      	beq.n	800354e <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800354a:	2b11      	cmp	r3, #17
 800354c:	d132      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1d      	ldr	r2, [pc, #116]	; (80035c8 <HAL_ADC_ConfigChannel+0x38c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d125      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d126      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003574:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b10      	cmp	r3, #16
 800357c:	d11a      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <HAL_ADC_ConfigChannel+0x390>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <HAL_ADC_ConfigChannel+0x394>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	0c9a      	lsrs	r2, r3, #18
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003594:	e002      	b.n	800359c <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3b01      	subs	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f9      	bne.n	8003596 <HAL_ADC_ConfigChannel+0x35a>
 80035a2:	e007      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40012400 	.word	0x40012400
 80035cc:	20000000 	.word	0x20000000
 80035d0:	431bde83 	.word	0x431bde83

080035d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d040      	beq.n	8003674 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003602:	4b1f      	ldr	r3, [pc, #124]	; (8003680 <ADC_Enable+0xac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <ADC_Enable+0xb0>)
 8003608:	fba2 2303 	umull	r2, r3, r2, r3
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003610:	e002      	b.n	8003618 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3b01      	subs	r3, #1
 8003616:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f9      	bne.n	8003612 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800361e:	f7ff fa2d 	bl	8002a7c <HAL_GetTick>
 8003622:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003624:	e01f      	b.n	8003666 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003626:	f7ff fa29 	bl	8002a7c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d918      	bls.n	8003666 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d011      	beq.n	8003666 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	f043 0210 	orr.w	r2, r3, #16
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e007      	b.n	8003676 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d1d8      	bne.n	8003626 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000
 8003684:	431bde83 	.word	0x431bde83

08003688 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d12e      	bne.n	8003700 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036b2:	f7ff f9e3 	bl	8002a7c <HAL_GetTick>
 80036b6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036b8:	e01b      	b.n	80036f2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80036ba:	f7ff f9df 	bl	8002a7c <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d914      	bls.n	80036f2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d10d      	bne.n	80036f2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	f043 0210 	orr.w	r2, r3, #16
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e6:	f043 0201 	orr.w	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e007      	b.n	8003702 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d0dc      	beq.n	80036ba <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
	...

0800370c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373e:	4a04      	ldr	r2, [pc, #16]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	60d3      	str	r3, [r2, #12]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <__NVIC_GetPriorityGrouping+0x18>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 0307 	and.w	r3, r3, #7
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db0b      	blt.n	800379a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4906      	ldr	r1, [pc, #24]	; (80037a4 <__NVIC_EnableIRQ+0x34>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2001      	movs	r0, #1
 8003792:	fa00 f202 	lsl.w	r2, r0, r2
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3b01      	subs	r3, #1
 800386c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003870:	d301      	bcc.n	8003876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003872:	2301      	movs	r3, #1
 8003874:	e00f      	b.n	8003896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003876:	4a0a      	ldr	r2, [pc, #40]	; (80038a0 <SysTick_Config+0x40>)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800387e:	210f      	movs	r1, #15
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	f7ff ff90 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003888:	4b05      	ldr	r3, [pc, #20]	; (80038a0 <SysTick_Config+0x40>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800388e:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <SysTick_Config+0x40>)
 8003890:	2207      	movs	r2, #7
 8003892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	e000e010 	.word	0xe000e010

080038a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b07      	cmp	r3, #7
 80038b0:	d00f      	beq.n	80038d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d00c      	beq.n	80038d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d009      	beq.n	80038d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d006      	beq.n	80038d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d003      	beq.n	80038d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80038ca:	2192      	movs	r1, #146	; 0x92
 80038cc:	4804      	ldr	r0, [pc, #16]	; (80038e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80038ce:	f7fe fc05 	bl	80020dc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ff1a 	bl	800370c <__NVIC_SetPriorityGrouping>
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	0800ef88 	.word	0x0800ef88

080038e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b0f      	cmp	r3, #15
 80038fa:	d903      	bls.n	8003904 <HAL_NVIC_SetPriority+0x20>
 80038fc:	21aa      	movs	r1, #170	; 0xaa
 80038fe:	480e      	ldr	r0, [pc, #56]	; (8003938 <HAL_NVIC_SetPriority+0x54>)
 8003900:	f7fe fbec 	bl	80020dc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2b0f      	cmp	r3, #15
 8003908:	d903      	bls.n	8003912 <HAL_NVIC_SetPriority+0x2e>
 800390a:	21ab      	movs	r1, #171	; 0xab
 800390c:	480a      	ldr	r0, [pc, #40]	; (8003938 <HAL_NVIC_SetPriority+0x54>)
 800390e:	f7fe fbe5 	bl	80020dc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003912:	f7ff ff1f 	bl	8003754 <__NVIC_GetPriorityGrouping>
 8003916:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f7ff ff6d 	bl	80037fc <NVIC_EncodePriority>
 8003922:	4602      	mov	r2, r0
 8003924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff ff3c 	bl	80037a8 <__NVIC_SetPriority>
}
 8003930:	bf00      	nop
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	0800ef88 	.word	0x0800ef88

0800393c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	2b00      	cmp	r3, #0
 800394c:	da03      	bge.n	8003956 <HAL_NVIC_EnableIRQ+0x1a>
 800394e:	21be      	movs	r1, #190	; 0xbe
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <HAL_NVIC_EnableIRQ+0x2c>)
 8003952:	f7fe fbc3 	bl	80020dc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff08 	bl	8003770 <__NVIC_EnableIRQ>
}
 8003960:	bf00      	nop
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	0800ef88 	.word	0x0800ef88

0800396c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff73 	bl	8003860 <SysTick_Config>
 800397a:	4603      	mov	r3, r0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003996:	2b02      	cmp	r3, #2
 8003998:	d008      	beq.n	80039ac <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2204      	movs	r2, #4
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e020      	b.n	80039ee <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 020e 	bic.w	r2, r2, #14
 80039ba:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0201 	bic.w	r2, r2, #1
 80039ca:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f202 	lsl.w	r2, r1, r2
 80039da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d005      	beq.n	8003a1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2204      	movs	r2, #4
 8003a12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e0d6      	b.n	8003bc8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 020e 	bic.w	r2, r2, #14
 8003a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4b64      	ldr	r3, [pc, #400]	; (8003bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d958      	bls.n	8003af8 <HAL_DMA_Abort_IT+0x100>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a63      	ldr	r2, [pc, #396]	; (8003bd8 <HAL_DMA_Abort_IT+0x1e0>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d04f      	beq.n	8003af0 <HAL_DMA_Abort_IT+0xf8>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a61      	ldr	r2, [pc, #388]	; (8003bdc <HAL_DMA_Abort_IT+0x1e4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d048      	beq.n	8003aec <HAL_DMA_Abort_IT+0xf4>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a60      	ldr	r2, [pc, #384]	; (8003be0 <HAL_DMA_Abort_IT+0x1e8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d040      	beq.n	8003ae6 <HAL_DMA_Abort_IT+0xee>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <HAL_DMA_Abort_IT+0x1ec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d038      	beq.n	8003ae0 <HAL_DMA_Abort_IT+0xe8>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a5d      	ldr	r2, [pc, #372]	; (8003be8 <HAL_DMA_Abort_IT+0x1f0>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d030      	beq.n	8003ada <HAL_DMA_Abort_IT+0xe2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a5b      	ldr	r2, [pc, #364]	; (8003bec <HAL_DMA_Abort_IT+0x1f4>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d028      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0xdc>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a53      	ldr	r2, [pc, #332]	; (8003bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d020      	beq.n	8003ace <HAL_DMA_Abort_IT+0xd6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a57      	ldr	r2, [pc, #348]	; (8003bf0 <HAL_DMA_Abort_IT+0x1f8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d019      	beq.n	8003aca <HAL_DMA_Abort_IT+0xd2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a56      	ldr	r2, [pc, #344]	; (8003bf4 <HAL_DMA_Abort_IT+0x1fc>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d012      	beq.n	8003ac6 <HAL_DMA_Abort_IT+0xce>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <HAL_DMA_Abort_IT+0x200>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00a      	beq.n	8003ac0 <HAL_DMA_Abort_IT+0xc8>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a53      	ldr	r2, [pc, #332]	; (8003bfc <HAL_DMA_Abort_IT+0x204>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d102      	bne.n	8003aba <HAL_DMA_Abort_IT+0xc2>
 8003ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ab8:	e01b      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003abe:	e018      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ac4:	e015      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	e013      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003aca:	2301      	movs	r3, #1
 8003acc:	e011      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ace:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ad2:	e00e      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ad4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ad8:	e00b      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ade:	e008      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ae4:	e005      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003aea:	e002      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003aec:	2310      	movs	r3, #16
 8003aee:	e000      	b.n	8003af2 <HAL_DMA_Abort_IT+0xfa>
 8003af0:	2301      	movs	r3, #1
 8003af2:	4a43      	ldr	r2, [pc, #268]	; (8003c00 <HAL_DMA_Abort_IT+0x208>)
 8003af4:	6053      	str	r3, [r2, #4]
 8003af6:	e057      	b.n	8003ba8 <HAL_DMA_Abort_IT+0x1b0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a36      	ldr	r2, [pc, #216]	; (8003bd8 <HAL_DMA_Abort_IT+0x1e0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d04f      	beq.n	8003ba2 <HAL_DMA_Abort_IT+0x1aa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <HAL_DMA_Abort_IT+0x1e4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d048      	beq.n	8003b9e <HAL_DMA_Abort_IT+0x1a6>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a33      	ldr	r2, [pc, #204]	; (8003be0 <HAL_DMA_Abort_IT+0x1e8>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d040      	beq.n	8003b98 <HAL_DMA_Abort_IT+0x1a0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a32      	ldr	r2, [pc, #200]	; (8003be4 <HAL_DMA_Abort_IT+0x1ec>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d038      	beq.n	8003b92 <HAL_DMA_Abort_IT+0x19a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a30      	ldr	r2, [pc, #192]	; (8003be8 <HAL_DMA_Abort_IT+0x1f0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d030      	beq.n	8003b8c <HAL_DMA_Abort_IT+0x194>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <HAL_DMA_Abort_IT+0x1f4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d028      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x18e>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a26      	ldr	r2, [pc, #152]	; (8003bd4 <HAL_DMA_Abort_IT+0x1dc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d020      	beq.n	8003b80 <HAL_DMA_Abort_IT+0x188>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2b      	ldr	r2, [pc, #172]	; (8003bf0 <HAL_DMA_Abort_IT+0x1f8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d019      	beq.n	8003b7c <HAL_DMA_Abort_IT+0x184>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a29      	ldr	r2, [pc, #164]	; (8003bf4 <HAL_DMA_Abort_IT+0x1fc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMA_Abort_IT+0x180>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <HAL_DMA_Abort_IT+0x200>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00a      	beq.n	8003b72 <HAL_DMA_Abort_IT+0x17a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <HAL_DMA_Abort_IT+0x204>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d102      	bne.n	8003b6c <HAL_DMA_Abort_IT+0x174>
 8003b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b6a:	e01b      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b70:	e018      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b76:	e015      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b78:	2310      	movs	r3, #16
 8003b7a:	e013      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e011      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b84:	e00e      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b86:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b8a:	e00b      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b90:	e008      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b96:	e005      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b9c:	e002      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	e000      	b.n	8003ba4 <HAL_DMA_Abort_IT+0x1ac>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_DMA_Abort_IT+0x20c>)
 8003ba6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
    } 
  }
  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40020080 	.word	0x40020080
 8003bd8:	40020008 	.word	0x40020008
 8003bdc:	4002001c 	.word	0x4002001c
 8003be0:	40020030 	.word	0x40020030
 8003be4:	40020044 	.word	0x40020044
 8003be8:	40020058 	.word	0x40020058
 8003bec:	4002006c 	.word	0x4002006c
 8003bf0:	40020408 	.word	0x40020408
 8003bf4:	4002041c 	.word	0x4002041c
 8003bf8:	40020430 	.word	0x40020430
 8003bfc:	40020444 	.word	0x40020444
 8003c00:	40020400 	.word	0x40020400
 8003c04:	40020000 	.word	0x40020000

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b08a      	sub	sp, #40	; 0x28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c16:	2300      	movs	r3, #0
 8003c18:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4aa9      	ldr	r2, [pc, #676]	; (8003ec4 <HAL_GPIO_Init+0x2bc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01b      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4aa8      	ldr	r2, [pc, #672]	; (8003ec8 <HAL_GPIO_Init+0x2c0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d017      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4aa7      	ldr	r2, [pc, #668]	; (8003ecc <HAL_GPIO_Init+0x2c4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4aa6      	ldr	r2, [pc, #664]	; (8003ed0 <HAL_GPIO_Init+0x2c8>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00f      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4aa5      	ldr	r2, [pc, #660]	; (8003ed4 <HAL_GPIO_Init+0x2cc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4aa4      	ldr	r2, [pc, #656]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4aa3      	ldr	r2, [pc, #652]	; (8003edc <HAL_GPIO_Init+0x2d4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x52>
 8003c52:	21bd      	movs	r1, #189	; 0xbd
 8003c54:	48a2      	ldr	r0, [pc, #648]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003c56:	f7fe fa41 	bl	80020dc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_GPIO_Init+0x68>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0c1b      	lsrs	r3, r3, #16
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_GPIO_Init+0x70>
 8003c70:	21be      	movs	r1, #190	; 0xbe
 8003c72:	489b      	ldr	r0, [pc, #620]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003c74:	f7fe fa32 	bl	80020dc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8235 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	f000 8230 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2b11      	cmp	r3, #17
 8003c92:	f000 822b 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	f000 8226 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b12      	cmp	r3, #18
 8003ca6:	f000 8221 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	4a8d      	ldr	r2, [pc, #564]	; (8003ee4 <HAL_GPIO_Init+0x2dc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	f000 821b 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	4a8b      	ldr	r2, [pc, #556]	; (8003ee8 <HAL_GPIO_Init+0x2e0>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	f000 8215 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	4a89      	ldr	r2, [pc, #548]	; (8003eec <HAL_GPIO_Init+0x2e4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	f000 820f 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	4a87      	ldr	r2, [pc, #540]	; (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	f000 8209 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a85      	ldr	r2, [pc, #532]	; (8003ef4 <HAL_GPIO_Init+0x2ec>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	f000 8203 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a83      	ldr	r2, [pc, #524]	; (8003ef8 <HAL_GPIO_Init+0x2f0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f000 81fd 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	f000 81f8 	beq.w	80040ec <HAL_GPIO_Init+0x4e4>
 8003cfc:	21bf      	movs	r1, #191	; 0xbf
 8003cfe:	4878      	ldr	r0, [pc, #480]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003d00:	f7fe f9ec 	bl	80020dc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d04:	e1f2      	b.n	80040ec <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003d06:	2201      	movs	r2, #1
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	f040 81e1 	bne.w	80040e6 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a67      	ldr	r2, [pc, #412]	; (8003ec4 <HAL_GPIO_Init+0x2bc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d01b      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a66      	ldr	r2, [pc, #408]	; (8003ec8 <HAL_GPIO_Init+0x2c0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d017      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a65      	ldr	r2, [pc, #404]	; (8003ecc <HAL_GPIO_Init+0x2c4>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d013      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a64      	ldr	r2, [pc, #400]	; (8003ed0 <HAL_GPIO_Init+0x2c8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00f      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a63      	ldr	r2, [pc, #396]	; (8003ed4 <HAL_GPIO_Init+0x2cc>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00b      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a62      	ldr	r2, [pc, #392]	; (8003ed8 <HAL_GPIO_Init+0x2d0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a61      	ldr	r2, [pc, #388]	; (8003edc <HAL_GPIO_Init+0x2d4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d003      	beq.n	8003d64 <HAL_GPIO_Init+0x15c>
 8003d5c:	21cd      	movs	r1, #205	; 0xcd
 8003d5e:	4860      	ldr	r0, [pc, #384]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003d60:	f7fe f9bc 	bl	80020dc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	4a63      	ldr	r2, [pc, #396]	; (8003ef8 <HAL_GPIO_Init+0x2f0>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	f000 80c6 	beq.w	8003efc <HAL_GPIO_Init+0x2f4>
 8003d70:	4a61      	ldr	r2, [pc, #388]	; (8003ef8 <HAL_GPIO_Init+0x2f0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	f200 80ec 	bhi.w	8003f50 <HAL_GPIO_Init+0x348>
 8003d78:	4a5c      	ldr	r2, [pc, #368]	; (8003eec <HAL_GPIO_Init+0x2e4>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	f000 80be 	beq.w	8003efc <HAL_GPIO_Init+0x2f4>
 8003d80:	4a5a      	ldr	r2, [pc, #360]	; (8003eec <HAL_GPIO_Init+0x2e4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	f200 80e4 	bhi.w	8003f50 <HAL_GPIO_Init+0x348>
 8003d88:	4a5a      	ldr	r2, [pc, #360]	; (8003ef4 <HAL_GPIO_Init+0x2ec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	f000 80b6 	beq.w	8003efc <HAL_GPIO_Init+0x2f4>
 8003d90:	4a58      	ldr	r2, [pc, #352]	; (8003ef4 <HAL_GPIO_Init+0x2ec>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	f200 80dc 	bhi.w	8003f50 <HAL_GPIO_Init+0x348>
 8003d98:	4a53      	ldr	r2, [pc, #332]	; (8003ee8 <HAL_GPIO_Init+0x2e0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	f000 80ae 	beq.w	8003efc <HAL_GPIO_Init+0x2f4>
 8003da0:	4a51      	ldr	r2, [pc, #324]	; (8003ee8 <HAL_GPIO_Init+0x2e0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	f200 80d4 	bhi.w	8003f50 <HAL_GPIO_Init+0x348>
 8003da8:	4a51      	ldr	r2, [pc, #324]	; (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	f000 80a6 	beq.w	8003efc <HAL_GPIO_Init+0x2f4>
 8003db0:	4a4f      	ldr	r2, [pc, #316]	; (8003ef0 <HAL_GPIO_Init+0x2e8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	f200 80cc 	bhi.w	8003f50 <HAL_GPIO_Init+0x348>
 8003db8:	2b12      	cmp	r3, #18
 8003dba:	d82b      	bhi.n	8003e14 <HAL_GPIO_Init+0x20c>
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	f200 80c7 	bhi.w	8003f50 <HAL_GPIO_Init+0x348>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <HAL_GPIO_Init+0x1c0>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003efd 	.word	0x08003efd
 8003dcc:	08003e1d 	.word	0x08003e1d
 8003dd0:	08003e6f 	.word	0x08003e6f
 8003dd4:	08003f4b 	.word	0x08003f4b
 8003dd8:	08003f51 	.word	0x08003f51
 8003ddc:	08003f51 	.word	0x08003f51
 8003de0:	08003f51 	.word	0x08003f51
 8003de4:	08003f51 	.word	0x08003f51
 8003de8:	08003f51 	.word	0x08003f51
 8003dec:	08003f51 	.word	0x08003f51
 8003df0:	08003f51 	.word	0x08003f51
 8003df4:	08003f51 	.word	0x08003f51
 8003df8:	08003f51 	.word	0x08003f51
 8003dfc:	08003f51 	.word	0x08003f51
 8003e00:	08003f51 	.word	0x08003f51
 8003e04:	08003f51 	.word	0x08003f51
 8003e08:	08003f51 	.word	0x08003f51
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e99 	.word	0x08003e99
 8003e14:	4a33      	ldr	r2, [pc, #204]	; (8003ee4 <HAL_GPIO_Init+0x2dc>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d070      	beq.n	8003efc <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e1a:	e099      	b.n	8003f50 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d00b      	beq.n	8003e3c <HAL_GPIO_Init+0x234>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d007      	beq.n	8003e3c <HAL_GPIO_Init+0x234>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d003      	beq.n	8003e3c <HAL_GPIO_Init+0x234>
 8003e34:	21d5      	movs	r1, #213	; 0xd5
 8003e36:	482a      	ldr	r0, [pc, #168]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003e38:	f7fe f950 	bl	80020dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	623b      	str	r3, [r7, #32]
          break;
 8003e42:	e086      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d00b      	beq.n	8003e64 <HAL_GPIO_Init+0x25c>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d007      	beq.n	8003e64 <HAL_GPIO_Init+0x25c>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x25c>
 8003e5c:	21dc      	movs	r1, #220	; 0xdc
 8003e5e:	4820      	ldr	r0, [pc, #128]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003e60:	f7fe f93c 	bl	80020dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	623b      	str	r3, [r7, #32]
          break;
 8003e6c:	e071      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d00b      	beq.n	8003e8e <HAL_GPIO_Init+0x286>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d007      	beq.n	8003e8e <HAL_GPIO_Init+0x286>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d003      	beq.n	8003e8e <HAL_GPIO_Init+0x286>
 8003e86:	21e3      	movs	r1, #227	; 0xe3
 8003e88:	4815      	ldr	r0, [pc, #84]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003e8a:	f7fe f927 	bl	80020dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	3308      	adds	r3, #8
 8003e94:	623b      	str	r3, [r7, #32]
          break;
 8003e96:	e05c      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d00b      	beq.n	8003eb8 <HAL_GPIO_Init+0x2b0>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d007      	beq.n	8003eb8 <HAL_GPIO_Init+0x2b0>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d003      	beq.n	8003eb8 <HAL_GPIO_Init+0x2b0>
 8003eb0:	21ea      	movs	r1, #234	; 0xea
 8003eb2:	480b      	ldr	r0, [pc, #44]	; (8003ee0 <HAL_GPIO_Init+0x2d8>)
 8003eb4:	f7fe f912 	bl	80020dc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	330c      	adds	r3, #12
 8003ebe:	623b      	str	r3, [r7, #32]
          break;
 8003ec0:	e047      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
 8003ec2:	bf00      	nop
 8003ec4:	40010800 	.word	0x40010800
 8003ec8:	40010c00 	.word	0x40010c00
 8003ecc:	40011000 	.word	0x40011000
 8003ed0:	40011400 	.word	0x40011400
 8003ed4:	40011800 	.word	0x40011800
 8003ed8:	40011c00 	.word	0x40011c00
 8003edc:	40012000 	.word	0x40012000
 8003ee0:	0800efc4 	.word	0x0800efc4
 8003ee4:	10110000 	.word	0x10110000
 8003ee8:	10210000 	.word	0x10210000
 8003eec:	10310000 	.word	0x10310000
 8003ef0:	10120000 	.word	0x10120000
 8003ef4:	10220000 	.word	0x10220000
 8003ef8:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00b      	beq.n	8003f1c <HAL_GPIO_Init+0x314>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d007      	beq.n	8003f1c <HAL_GPIO_Init+0x314>
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d003      	beq.n	8003f1c <HAL_GPIO_Init+0x314>
 8003f14:	21f7      	movs	r1, #247	; 0xf7
 8003f16:	487c      	ldr	r0, [pc, #496]	; (8004108 <HAL_GPIO_Init+0x500>)
 8003f18:	f7fe f8e0 	bl	80020dc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d102      	bne.n	8003f2a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f24:	2304      	movs	r3, #4
 8003f26:	623b      	str	r3, [r7, #32]
          break;
 8003f28:	e013      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d105      	bne.n	8003f3e <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f32:	2308      	movs	r3, #8
 8003f34:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69fa      	ldr	r2, [r7, #28]
 8003f3a:	611a      	str	r2, [r3, #16]
          break;
 8003f3c:	e009      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f3e:	2308      	movs	r3, #8
 8003f40:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	615a      	str	r2, [r3, #20]
          break;
 8003f48:	e003      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	623b      	str	r3, [r7, #32]
          break;
 8003f4e:	e000      	b.n	8003f52 <HAL_GPIO_Init+0x34a>
          break;
 8003f50:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2bff      	cmp	r3, #255	; 0xff
 8003f56:	d801      	bhi.n	8003f5c <HAL_GPIO_Init+0x354>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	e001      	b.n	8003f60 <HAL_GPIO_Init+0x358>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2bff      	cmp	r3, #255	; 0xff
 8003f66:	d802      	bhi.n	8003f6e <HAL_GPIO_Init+0x366>
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	e002      	b.n	8003f74 <HAL_GPIO_Init+0x36c>
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	3b08      	subs	r3, #8
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	210f      	movs	r1, #15
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	401a      	ands	r2, r3
 8003f86:	6a39      	ldr	r1, [r7, #32]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a2 	beq.w	80040e6 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fa2:	4b5a      	ldr	r3, [pc, #360]	; (800410c <HAL_GPIO_Init+0x504>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	4a59      	ldr	r2, [pc, #356]	; (800410c <HAL_GPIO_Init+0x504>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6193      	str	r3, [r2, #24]
 8003fae:	4b57      	ldr	r3, [pc, #348]	; (800410c <HAL_GPIO_Init+0x504>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003fba:	4a55      	ldr	r2, [pc, #340]	; (8004110 <HAL_GPIO_Init+0x508>)
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	3302      	adds	r3, #2
 8003fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fc6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	220f      	movs	r2, #15
 8003fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd6:	43db      	mvns	r3, r3
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4013      	ands	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a4c      	ldr	r2, [pc, #304]	; (8004114 <HAL_GPIO_Init+0x50c>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <HAL_GPIO_Init+0x41e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_GPIO_Init+0x510>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x41a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_GPIO_Init+0x514>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x416>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_GPIO_Init+0x518>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x412>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a48      	ldr	r2, [pc, #288]	; (8004124 <HAL_GPIO_Init+0x51c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x40e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a47      	ldr	r2, [pc, #284]	; (8004128 <HAL_GPIO_Init+0x520>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x40a>
 800400e:	2305      	movs	r3, #5
 8004010:	e00a      	b.n	8004028 <HAL_GPIO_Init+0x420>
 8004012:	2306      	movs	r3, #6
 8004014:	e008      	b.n	8004028 <HAL_GPIO_Init+0x420>
 8004016:	2304      	movs	r3, #4
 8004018:	e006      	b.n	8004028 <HAL_GPIO_Init+0x420>
 800401a:	2303      	movs	r3, #3
 800401c:	e004      	b.n	8004028 <HAL_GPIO_Init+0x420>
 800401e:	2302      	movs	r3, #2
 8004020:	e002      	b.n	8004028 <HAL_GPIO_Init+0x420>
 8004022:	2301      	movs	r3, #1
 8004024:	e000      	b.n	8004028 <HAL_GPIO_Init+0x420>
 8004026:	2300      	movs	r3, #0
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	f002 0203 	and.w	r2, r2, #3
 800402e:	0092      	lsls	r2, r2, #2
 8004030:	4093      	lsls	r3, r2
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004038:	4935      	ldr	r1, [pc, #212]	; (8004110 <HAL_GPIO_Init+0x508>)
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	089b      	lsrs	r3, r3, #2
 800403e:	3302      	adds	r3, #2
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004052:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_GPIO_Init+0x524>)
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4935      	ldr	r1, [pc, #212]	; (800412c <HAL_GPIO_Init+0x524>)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	4313      	orrs	r3, r2
 800405c:	600b      	str	r3, [r1, #0]
 800405e:	e006      	b.n	800406e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_GPIO_Init+0x524>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	43db      	mvns	r3, r3
 8004068:	4930      	ldr	r1, [pc, #192]	; (800412c <HAL_GPIO_Init+0x524>)
 800406a:	4013      	ands	r3, r2
 800406c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d006      	beq.n	8004088 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800407a:	4b2c      	ldr	r3, [pc, #176]	; (800412c <HAL_GPIO_Init+0x524>)
 800407c:	685a      	ldr	r2, [r3, #4]
 800407e:	492b      	ldr	r1, [pc, #172]	; (800412c <HAL_GPIO_Init+0x524>)
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	604b      	str	r3, [r1, #4]
 8004086:	e006      	b.n	8004096 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004088:	4b28      	ldr	r3, [pc, #160]	; (800412c <HAL_GPIO_Init+0x524>)
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	43db      	mvns	r3, r3
 8004090:	4926      	ldr	r1, [pc, #152]	; (800412c <HAL_GPIO_Init+0x524>)
 8004092:	4013      	ands	r3, r2
 8004094:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d006      	beq.n	80040b0 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_GPIO_Init+0x524>)
 80040a4:	689a      	ldr	r2, [r3, #8]
 80040a6:	4921      	ldr	r1, [pc, #132]	; (800412c <HAL_GPIO_Init+0x524>)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
 80040ae:	e006      	b.n	80040be <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_GPIO_Init+0x524>)
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	43db      	mvns	r3, r3
 80040b8:	491c      	ldr	r1, [pc, #112]	; (800412c <HAL_GPIO_Init+0x524>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d006      	beq.n	80040d8 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <HAL_GPIO_Init+0x524>)
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	4917      	ldr	r1, [pc, #92]	; (800412c <HAL_GPIO_Init+0x524>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60cb      	str	r3, [r1, #12]
 80040d6:	e006      	b.n	80040e6 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040d8:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_GPIO_Init+0x524>)
 80040da:	68da      	ldr	r2, [r3, #12]
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	43db      	mvns	r3, r3
 80040e0:	4912      	ldr	r1, [pc, #72]	; (800412c <HAL_GPIO_Init+0x524>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e8:	3301      	adds	r3, #1
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	fa22 f303 	lsr.w	r3, r2, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f47f ae05 	bne.w	8003d06 <HAL_GPIO_Init+0xfe>
  }
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3728      	adds	r7, #40	; 0x28
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	0800efc4 	.word	0x0800efc4
 800410c:	40021000 	.word	0x40021000
 8004110:	40010000 	.word	0x40010000
 8004114:	40010800 	.word	0x40010800
 8004118:	40010c00 	.word	0x40010c00
 800411c:	40011000 	.word	0x40011000
 8004120:	40011400 	.word	0x40011400
 8004124:	40011800 	.word	0x40011800
 8004128:	40011c00 	.word	0x40011c00
 800412c:	40010400 	.word	0x40010400

08004130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	807b      	strh	r3, [r7, #2]
 800413c:	4613      	mov	r3, r2
 800413e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_GPIO_WritePin+0x20>
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_GPIO_WritePin+0x2a>
 8004150:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8004154:	480e      	ldr	r0, [pc, #56]	; (8004190 <HAL_GPIO_WritePin+0x60>)
 8004156:	f7fd ffc1 	bl	80020dc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800415a:	787b      	ldrb	r3, [r7, #1]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d007      	beq.n	8004170 <HAL_GPIO_WritePin+0x40>
 8004160:	787b      	ldrb	r3, [r7, #1]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d004      	beq.n	8004170 <HAL_GPIO_WritePin+0x40>
 8004166:	f240 11d5 	movw	r1, #469	; 0x1d5
 800416a:	4809      	ldr	r0, [pc, #36]	; (8004190 <HAL_GPIO_WritePin+0x60>)
 800416c:	f7fd ffb6 	bl	80020dc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004170:	787b      	ldrb	r3, [r7, #1]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004176:	887a      	ldrh	r2, [r7, #2]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800417c:	e003      	b.n	8004186 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800417e:	887b      	ldrh	r3, [r7, #2]
 8004180:	041a      	lsls	r2, r3, #16
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	611a      	str	r2, [r3, #16]
}
 8004186:	bf00      	nop
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	0800efc4 	.word	0x0800efc4

08004194 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d004      	beq.n	80041b0 <HAL_GPIO_TogglePin+0x1c>
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	0c1b      	lsrs	r3, r3, #16
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d004      	beq.n	80041ba <HAL_GPIO_TogglePin+0x26>
 80041b0:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80041b4:	480a      	ldr	r0, [pc, #40]	; (80041e0 <HAL_GPIO_TogglePin+0x4c>)
 80041b6:	f7fd ff91 	bl	80020dc <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041c0:	887a      	ldrh	r2, [r7, #2]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	041a      	lsls	r2, r3, #16
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	43d9      	mvns	r1, r3
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	400b      	ands	r3, r1
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	611a      	str	r2, [r3, #16]
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	0800efc4 	.word	0x0800efc4

080041e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_PWR_EnableBkUpAccess+0x14>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bc80      	pop	{r7}
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	420e0020 	.word	0x420e0020

080041fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e35c      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d01c      	beq.n	8004250 <HAL_RCC_OscConfig+0x54>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x54>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d110      	bne.n	8004250 <HAL_RCC_OscConfig+0x54>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <HAL_RCC_OscConfig+0x54>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d104      	bne.n	8004250 <HAL_RCC_OscConfig+0x54>
 8004246:	f240 1167 	movw	r1, #359	; 0x167
 800424a:	48a5      	ldr	r0, [pc, #660]	; (80044e0 <HAL_RCC_OscConfig+0x2e4>)
 800424c:	f7fd ff46 	bl	80020dc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 809a 	beq.w	8004392 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00e      	beq.n	8004284 <HAL_RCC_OscConfig+0x88>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426e:	d009      	beq.n	8004284 <HAL_RCC_OscConfig+0x88>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004278:	d004      	beq.n	8004284 <HAL_RCC_OscConfig+0x88>
 800427a:	f240 116d 	movw	r1, #365	; 0x16d
 800427e:	4898      	ldr	r0, [pc, #608]	; (80044e0 <HAL_RCC_OscConfig+0x2e4>)
 8004280:	f7fd ff2c 	bl	80020dc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004284:	4b97      	ldr	r3, [pc, #604]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 030c 	and.w	r3, r3, #12
 800428c:	2b04      	cmp	r3, #4
 800428e:	d00c      	beq.n	80042aa <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004290:	4b94      	ldr	r3, [pc, #592]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 030c 	and.w	r3, r3, #12
 8004298:	2b08      	cmp	r3, #8
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_OscConfig+0xc6>
 800429c:	4b91      	ldr	r3, [pc, #580]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042aa:	4b8e      	ldr	r3, [pc, #568]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d06c      	beq.n	8004390 <HAL_RCC_OscConfig+0x194>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d168      	bne.n	8004390 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e302      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ca:	d106      	bne.n	80042da <HAL_RCC_OscConfig+0xde>
 80042cc:	4b85      	ldr	r3, [pc, #532]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a84      	ldr	r2, [pc, #528]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e02e      	b.n	8004338 <HAL_RCC_OscConfig+0x13c>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10c      	bne.n	80042fc <HAL_RCC_OscConfig+0x100>
 80042e2:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a7f      	ldr	r2, [pc, #508]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	4b7d      	ldr	r3, [pc, #500]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a7c      	ldr	r2, [pc, #496]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80042f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0x13c>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x124>
 8004306:	4b77      	ldr	r3, [pc, #476]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a76      	ldr	r2, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b74      	ldr	r3, [pc, #464]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a73      	ldr	r2, [pc, #460]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x13c>
 8004320:	4b70      	ldr	r3, [pc, #448]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6f      	ldr	r2, [pc, #444]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b6d      	ldr	r3, [pc, #436]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a6c      	ldr	r2, [pc, #432]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fe fb9c 	bl	8002a7c <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004348:	f7fe fb98 	bl	8002a7c <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e2b6      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0x14c>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fe fb88 	bl	8002a7c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fb84 	bl	8002a7c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e2a2      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b58      	ldr	r3, [pc, #352]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x174>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d079      	beq.n	8004492 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1bc>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d004      	beq.n	80043b8 <HAL_RCC_OscConfig+0x1bc>
 80043ae:	f240 11a1 	movw	r1, #417	; 0x1a1
 80043b2:	484b      	ldr	r0, [pc, #300]	; (80044e0 <HAL_RCC_OscConfig+0x2e4>)
 80043b4:	f7fd fe92 	bl	80020dc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	695b      	ldr	r3, [r3, #20]
 80043bc:	2b1f      	cmp	r3, #31
 80043be:	d904      	bls.n	80043ca <HAL_RCC_OscConfig+0x1ce>
 80043c0:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80043c4:	4846      	ldr	r0, [pc, #280]	; (80044e0 <HAL_RCC_OscConfig+0x2e4>)
 80043c6:	f7fd fe89 	bl	80020dc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 030c 	and.w	r3, r3, #12
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d11c      	bne.n	800441c <HAL_RCC_OscConfig+0x220>
 80043e2:	4b40      	ldr	r3, [pc, #256]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d116      	bne.n	800441c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCC_OscConfig+0x20a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d001      	beq.n	8004406 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e260      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004406:	4b37      	ldr	r3, [pc, #220]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4933      	ldr	r1, [pc, #204]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004416:	4313      	orrs	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	e03a      	b.n	8004492 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d020      	beq.n	8004466 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <HAL_RCC_OscConfig+0x2ec>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fe fb27 	bl	8002a7c <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004432:	f7fe fb23 	bl	8002a7c <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e241      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004444:	4b27      	ldr	r3, [pc, #156]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4921      	ldr	r1, [pc, #132]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]
 8004464:	e015      	b.n	8004492 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004466:	4b20      	ldr	r3, [pc, #128]	; (80044e8 <HAL_RCC_OscConfig+0x2ec>)
 8004468:	2200      	movs	r2, #0
 800446a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446c:	f7fe fb06 	bl	8002a7c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004474:	f7fe fb02 	bl	8002a7c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e220      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <HAL_RCC_OscConfig+0x2e8>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0308 	and.w	r3, r3, #8
 800449a:	2b00      	cmp	r3, #0
 800449c:	d048      	beq.n	8004530 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2bc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d004      	beq.n	80044b8 <HAL_RCC_OscConfig+0x2bc>
 80044ae:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80044b2:	480b      	ldr	r0, [pc, #44]	; (80044e0 <HAL_RCC_OscConfig+0x2e4>)
 80044b4:	f7fd fe12 	bl	80020dc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d021      	beq.n	8004504 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_OscConfig+0x2f0>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c6:	f7fe fad9 	bl	8002a7c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044cc:	e010      	b.n	80044f0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ce:	f7fe fad5 	bl	8002a7c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d909      	bls.n	80044f0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e1f3      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
 80044e0:	0800f000 	.word	0x0800f000
 80044e4:	40021000 	.word	0x40021000
 80044e8:	42420000 	.word	0x42420000
 80044ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f0:	4b67      	ldr	r3, [pc, #412]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0e8      	beq.n	80044ce <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044fc:	2001      	movs	r0, #1
 80044fe:	f000 fc0f 	bl	8004d20 <RCC_Delay>
 8004502:	e015      	b.n	8004530 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004504:	4b63      	ldr	r3, [pc, #396]	; (8004694 <HAL_RCC_OscConfig+0x498>)
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450a:	f7fe fab7 	bl	8002a7c <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004512:	f7fe fab3 	bl	8002a7c <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1d1      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004524:	4b5a      	ldr	r3, [pc, #360]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80c0 	beq.w	80046be <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00c      	beq.n	8004564 <HAL_RCC_OscConfig+0x368>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d008      	beq.n	8004564 <HAL_RCC_OscConfig+0x368>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	2b05      	cmp	r3, #5
 8004558:	d004      	beq.n	8004564 <HAL_RCC_OscConfig+0x368>
 800455a:	f240 2111 	movw	r1, #529	; 0x211
 800455e:	484e      	ldr	r0, [pc, #312]	; (8004698 <HAL_RCC_OscConfig+0x49c>)
 8004560:	f7fd fdbc 	bl	80020dc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004564:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10d      	bne.n	800458c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004570:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004572:	69db      	ldr	r3, [r3, #28]
 8004574:	4a46      	ldr	r2, [pc, #280]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457a:	61d3      	str	r3, [r2, #28]
 800457c:	4b44      	ldr	r3, [pc, #272]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004588:	2301      	movs	r3, #1
 800458a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800458c:	4b43      	ldr	r3, [pc, #268]	; (800469c <HAL_RCC_OscConfig+0x4a0>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004594:	2b00      	cmp	r3, #0
 8004596:	d118      	bne.n	80045ca <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004598:	4b40      	ldr	r3, [pc, #256]	; (800469c <HAL_RCC_OscConfig+0x4a0>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a3f      	ldr	r2, [pc, #252]	; (800469c <HAL_RCC_OscConfig+0x4a0>)
 800459e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a4:	f7fe fa6a 	bl	8002a7c <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ac:	f7fe fa66 	bl	8002a7c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e184      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045be:	4b37      	ldr	r3, [pc, #220]	; (800469c <HAL_RCC_OscConfig+0x4a0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f0      	beq.n	80045ac <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d106      	bne.n	80045e0 <HAL_RCC_OscConfig+0x3e4>
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	4a2e      	ldr	r2, [pc, #184]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80045d8:	f043 0301 	orr.w	r3, r3, #1
 80045dc:	6213      	str	r3, [r2, #32]
 80045de:	e02d      	b.n	800463c <HAL_RCC_OscConfig+0x440>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d10c      	bne.n	8004602 <HAL_RCC_OscConfig+0x406>
 80045e8:	4b29      	ldr	r3, [pc, #164]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a28      	ldr	r2, [pc, #160]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	4b26      	ldr	r3, [pc, #152]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	4a25      	ldr	r2, [pc, #148]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 80045fa:	f023 0304 	bic.w	r3, r3, #4
 80045fe:	6213      	str	r3, [r2, #32]
 8004600:	e01c      	b.n	800463c <HAL_RCC_OscConfig+0x440>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b05      	cmp	r3, #5
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0x428>
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4a20      	ldr	r2, [pc, #128]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004610:	f043 0304 	orr.w	r3, r3, #4
 8004614:	6213      	str	r3, [r2, #32]
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	6213      	str	r3, [r2, #32]
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0x440>
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	4a19      	ldr	r2, [pc, #100]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 800462a:	f023 0301 	bic.w	r3, r3, #1
 800462e:	6213      	str	r3, [r2, #32]
 8004630:	4b17      	ldr	r3, [pc, #92]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	4a16      	ldr	r2, [pc, #88]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004636:	f023 0304 	bic.w	r3, r3, #4
 800463a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d015      	beq.n	8004670 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004644:	f7fe fa1a 	bl	8002a7c <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464a:	e00a      	b.n	8004662 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464c:	f7fe fa16 	bl	8002a7c <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	f241 3288 	movw	r2, #5000	; 0x1388
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e132      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004662:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_OscConfig+0x494>)
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ee      	beq.n	800464c <HAL_RCC_OscConfig+0x450>
 800466e:	e01d      	b.n	80046ac <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004670:	f7fe fa04 	bl	8002a7c <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004676:	e013      	b.n	80046a0 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004678:	f7fe fa00 	bl	8002a7c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	f241 3288 	movw	r2, #5000	; 0x1388
 8004686:	4293      	cmp	r3, r2
 8004688:	d90a      	bls.n	80046a0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e11c      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000
 8004694:	42420480 	.word	0x42420480
 8004698:	0800f000 	.word	0x0800f000
 800469c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046a0:	4b8b      	ldr	r3, [pc, #556]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e5      	bne.n	8004678 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d105      	bne.n	80046be <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046b2:	4b87      	ldr	r3, [pc, #540]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 80046b4:	69db      	ldr	r3, [r3, #28]
 80046b6:	4a86      	ldr	r2, [pc, #536]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 80046b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046bc:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4e4>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69db      	ldr	r3, [r3, #28]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d008      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4e4>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d004      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4e4>
 80046d6:	f240 21af 	movw	r1, #687	; 0x2af
 80046da:	487e      	ldr	r0, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x6d8>)
 80046dc:	f7fd fcfe 	bl	80020dc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80ee 	beq.w	80048c6 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ea:	4b79      	ldr	r3, [pc, #484]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	f003 030c 	and.w	r3, r3, #12
 80046f2:	2b08      	cmp	r3, #8
 80046f4:	f000 80ce 	beq.w	8004894 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f040 80b2 	bne.w	8004866 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d009      	beq.n	800471e <HAL_RCC_OscConfig+0x522>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004712:	d004      	beq.n	800471e <HAL_RCC_OscConfig+0x522>
 8004714:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004718:	486e      	ldr	r0, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x6d8>)
 800471a:	f7fd fcdf 	bl	80020dc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d04a      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800472e:	d045      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004738:	d040      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004742:	d03b      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800474c:	d036      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004756:	d031      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004760:	d02c      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800476a:	d027      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004774:	d022      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800477e:	d01d      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004784:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004788:	d018      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004792:	d013      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800479c:	d00e      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80047a6:	d009      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80047b0:	d004      	beq.n	80047bc <HAL_RCC_OscConfig+0x5c0>
 80047b2:	f240 21b9 	movw	r1, #697	; 0x2b9
 80047b6:	4847      	ldr	r0, [pc, #284]	; (80048d4 <HAL_RCC_OscConfig+0x6d8>)
 80047b8:	f7fd fc90 	bl	80020dc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047bc:	4b46      	ldr	r3, [pc, #280]	; (80048d8 <HAL_RCC_OscConfig+0x6dc>)
 80047be:	2200      	movs	r2, #0
 80047c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7fe f95b 	bl	8002a7c <HAL_GetTick>
 80047c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047ca:	f7fe f957 	bl	8002a7c <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e075      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047dc:	4b3c      	ldr	r3, [pc, #240]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1f0      	bne.n	80047ca <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	d116      	bne.n	8004820 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d009      	beq.n	800480e <HAL_RCC_OscConfig+0x612>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004802:	d004      	beq.n	800480e <HAL_RCC_OscConfig+0x612>
 8004804:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004808:	4832      	ldr	r0, [pc, #200]	; (80048d4 <HAL_RCC_OscConfig+0x6d8>)
 800480a:	f7fd fc67 	bl	80020dc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800480e:	4b30      	ldr	r3, [pc, #192]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	492d      	ldr	r1, [pc, #180]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004820:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a19      	ldr	r1, [r3, #32]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	430b      	orrs	r3, r1
 8004832:	4927      	ldr	r1, [pc, #156]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_OscConfig+0x6dc>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fe f91d 	bl	8002a7c <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004846:	f7fe f919 	bl	8002a7c <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e037      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004858:	4b1d      	ldr	r3, [pc, #116]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x64a>
 8004864:	e02f      	b.n	80048c6 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b1c      	ldr	r3, [pc, #112]	; (80048d8 <HAL_RCC_OscConfig+0x6dc>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fe f906 	bl	8002a7c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004874:	f7fe f902 	bl	8002a7c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e020      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004886:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x678>
 8004892:	e018      	b.n	80048c6 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e013      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_OscConfig+0x6d4>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d001      	beq.n	80048c6 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3718      	adds	r7, #24
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40021000 	.word	0x40021000
 80048d4:	0800f000 	.word	0x0800f000
 80048d8:	42420060 	.word	0x42420060

080048dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e176      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d116      	bne.n	800492a <HAL_RCC_ClockConfig+0x4e>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d110      	bne.n	800492a <HAL_RCC_ClockConfig+0x4e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10a      	bne.n	800492a <HAL_RCC_ClockConfig+0x4e>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d104      	bne.n	800492a <HAL_RCC_ClockConfig+0x4e>
 8004920:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004924:	4874      	ldr	r0, [pc, #464]	; (8004af8 <HAL_RCC_ClockConfig+0x21c>)
 8004926:	f7fd fbd9 	bl	80020dc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCC_ClockConfig+0x6a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d007      	beq.n	8004946 <HAL_RCC_ClockConfig+0x6a>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d004      	beq.n	8004946 <HAL_RCC_ClockConfig+0x6a>
 800493c:	f240 3139 	movw	r1, #825	; 0x339
 8004940:	486d      	ldr	r0, [pc, #436]	; (8004af8 <HAL_RCC_ClockConfig+0x21c>)
 8004942:	f7fd fbcb 	bl	80020dc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004946:	4b6d      	ldr	r3, [pc, #436]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d910      	bls.n	8004976 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004954:	4b69      	ldr	r3, [pc, #420]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f023 0207 	bic.w	r2, r3, #7
 800495c:	4967      	ldr	r1, [pc, #412]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004964:	4b65      	ldr	r3, [pc, #404]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d001      	beq.n	8004976 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e133      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d049      	beq.n	8004a16 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800498e:	4b5c      	ldr	r3, [pc, #368]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4a5b      	ldr	r2, [pc, #364]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004994:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004998:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a6:	4b56      	ldr	r3, [pc, #344]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	4a55      	ldr	r2, [pc, #340]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 80049ac:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049b0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d024      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	2b80      	cmp	r3, #128	; 0x80
 80049c0:	d020      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b90      	cmp	r3, #144	; 0x90
 80049c8:	d01c      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2ba0      	cmp	r3, #160	; 0xa0
 80049d0:	d018      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	2bb0      	cmp	r3, #176	; 0xb0
 80049d8:	d014      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2bc0      	cmp	r3, #192	; 0xc0
 80049e0:	d010      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2bd0      	cmp	r3, #208	; 0xd0
 80049e8:	d00c      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	2be0      	cmp	r3, #224	; 0xe0
 80049f0:	d008      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2bf0      	cmp	r3, #240	; 0xf0
 80049f8:	d004      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x128>
 80049fa:	f240 315f 	movw	r1, #863	; 0x35f
 80049fe:	483e      	ldr	r0, [pc, #248]	; (8004af8 <HAL_RCC_ClockConfig+0x21c>)
 8004a00:	f7fd fb6c 	bl	80020dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a04:	4b3e      	ldr	r3, [pc, #248]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	493b      	ldr	r1, [pc, #236]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d051      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x168>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d008      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x168>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d004      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x168>
 8004a3a:	f240 3166 	movw	r1, #870	; 0x366
 8004a3e:	482e      	ldr	r0, [pc, #184]	; (8004af8 <HAL_RCC_ClockConfig+0x21c>)
 8004a40:	f7fd fb4c 	bl	80020dc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4c:	4b2c      	ldr	r3, [pc, #176]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d115      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0c0      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a64:	4b26      	ldr	r3, [pc, #152]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d109      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0b4      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a74:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0ac      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a84:	4b1e      	ldr	r3, [pc, #120]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f023 0203 	bic.w	r2, r3, #3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	491b      	ldr	r1, [pc, #108]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a96:	f7fd fff1 	bl	8002a7c <HAL_GetTick>
 8004a9a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9c:	e00a      	b.n	8004ab4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9e:	f7fd ffed 	bl	8002a7c <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e094      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab4:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <HAL_RCC_ClockConfig+0x224>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f003 020c 	and.w	r2, r3, #12
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d1eb      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac6:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d217      	bcs.n	8004b04 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad4:	4b09      	ldr	r3, [pc, #36]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 0207 	bic.w	r2, r3, #7
 8004adc:	4907      	ldr	r1, [pc, #28]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCC_ClockConfig+0x220>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d008      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e073      	b.n	8004bde <HAL_RCC_ClockConfig+0x302>
 8004af6:	bf00      	nop
 8004af8:	0800f000 	.word	0x0800f000
 8004afc:	40022000 	.word	0x40022000
 8004b00:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d025      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d018      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x26e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b20:	d013      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x26e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b2a:	d00e      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x26e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b34:	d009      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x26e>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b3e:	d004      	beq.n	8004b4a <HAL_RCC_ClockConfig+0x26e>
 8004b40:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004b44:	4828      	ldr	r0, [pc, #160]	; (8004be8 <HAL_RCC_ClockConfig+0x30c>)
 8004b46:	f7fd fac9 	bl	80020dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4a:	4b28      	ldr	r3, [pc, #160]	; (8004bec <HAL_RCC_ClockConfig+0x310>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4925      	ldr	r1, [pc, #148]	; (8004bec <HAL_RCC_ClockConfig+0x310>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0308 	and.w	r3, r3, #8
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d026      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d018      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x2c6>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b78:	d013      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x2c6>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b82:	d00e      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x2c6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b8c:	d009      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x2c6>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b96:	d004      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x2c6>
 8004b98:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004b9c:	4812      	ldr	r0, [pc, #72]	; (8004be8 <HAL_RCC_ClockConfig+0x30c>)
 8004b9e:	f7fd fa9d 	bl	80020dc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_RCC_ClockConfig+0x310>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	490e      	ldr	r1, [pc, #56]	; (8004bec <HAL_RCC_ClockConfig+0x310>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bb6:	f000 f821 	bl	8004bfc <HAL_RCC_GetSysClockFreq>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	4b0b      	ldr	r3, [pc, #44]	; (8004bec <HAL_RCC_ClockConfig+0x310>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	091b      	lsrs	r3, r3, #4
 8004bc2:	f003 030f 	and.w	r3, r3, #15
 8004bc6:	490a      	ldr	r1, [pc, #40]	; (8004bf0 <HAL_RCC_ClockConfig+0x314>)
 8004bc8:	5ccb      	ldrb	r3, [r1, r3]
 8004bca:	fa22 f303 	lsr.w	r3, r2, r3
 8004bce:	4a09      	ldr	r2, [pc, #36]	; (8004bf4 <HAL_RCC_ClockConfig+0x318>)
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_RCC_ClockConfig+0x31c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fd ff0e 	bl	80029f8 <HAL_InitTick>

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	0800f000 	.word	0x0800f000
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	0800fa08 	.word	0x0800fa08
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	20000004 	.word	0x20000004

08004bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bfc:	b490      	push	{r4, r7}
 8004bfe:	b08a      	sub	sp, #40	; 0x28
 8004c00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c04:	1d3c      	adds	r4, r7, #4
 8004c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c0c:	f240 2301 	movw	r3, #513	; 0x201
 8004c10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
 8004c16:	2300      	movs	r3, #0
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	2300      	movs	r3, #0
 8004c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d002      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x40>
 8004c36:	2b08      	cmp	r3, #8
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x46>
 8004c3a:	e02d      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c3c:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3e:	623b      	str	r3, [r7, #32]
      break;
 8004c40:	e02d      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	0c9b      	lsrs	r3, r3, #18
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c4e:	4413      	add	r3, r2
 8004c50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c60:	4b13      	ldr	r3, [pc, #76]	; (8004cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	0c5b      	lsrs	r3, r3, #17
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c6e:	4413      	add	r3, r2
 8004c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4a0e      	ldr	r2, [pc, #56]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c7a:	fb02 f203 	mul.w	r2, r2, r3
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c84:	627b      	str	r3, [r7, #36]	; 0x24
 8004c86:	e004      	b.n	8004c92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	623b      	str	r3, [r7, #32]
      break;
 8004c96:	e002      	b.n	8004c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c98:	4b06      	ldr	r3, [pc, #24]	; (8004cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9a:	623b      	str	r3, [r7, #32]
      break;
 8004c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3728      	adds	r7, #40	; 0x28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc90      	pop	{r4, r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	0800f038 	.word	0x0800f038
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	007a1200 	.word	0x007a1200
 8004cb8:	003d0900 	.word	0x003d0900

08004cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc0:	4b02      	ldr	r3, [pc, #8]	; (8004ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bc80      	pop	{r7}
 8004cca:	4770      	bx	lr
 8004ccc:	20000000 	.word	0x20000000

08004cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cd4:	f7ff fff2 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	4b05      	ldr	r3, [pc, #20]	; (8004cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	4903      	ldr	r1, [pc, #12]	; (8004cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ce6:	5ccb      	ldrb	r3, [r1, r3]
 8004ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	0800fa18 	.word	0x0800fa18

08004cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cfc:	f7ff ffde 	bl	8004cbc <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	0adb      	lsrs	r3, r3, #11
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4903      	ldr	r1, [pc, #12]	; (8004d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	0800fa18 	.word	0x0800fa18

08004d20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <RCC_Delay+0x34>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <RCC_Delay+0x38>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	0a5b      	lsrs	r3, r3, #9
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d3c:	bf00      	nop
  }
  while (Delay --);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1e5a      	subs	r2, r3, #1
 8004d42:	60fa      	str	r2, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f9      	bne.n	8004d3c <RCC_Delay+0x1c>
}
 8004d48:	bf00      	nop
 8004d4a:	bf00      	nop
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bc80      	pop	{r7}
 8004d52:	4770      	bx	lr
 8004d54:	20000000 	.word	0x20000000
 8004d58:	10624dd3 	.word	0x10624dd3

08004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	613b      	str	r3, [r7, #16]
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11b      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d115      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10f      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d103      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004da8:	216c      	movs	r1, #108	; 0x6c
 8004daa:	4873      	ldr	r0, [pc, #460]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004dac:	f7fd f996 	bl	80020dc <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8095 	beq.w	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d012      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	d00d      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d008      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de6:	d003      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004de8:	2174      	movs	r1, #116	; 0x74
 8004dea:	4863      	ldr	r0, [pc, #396]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004dec:	f7fd f976 	bl	80020dc <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df0:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10d      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b5f      	ldr	r3, [pc, #380]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4a5e      	ldr	r2, [pc, #376]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	61d3      	str	r3, [r2, #28]
 8004e08:	4b5c      	ldr	r3, [pc, #368]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e14:	2301      	movs	r3, #1
 8004e16:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d118      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e24:	4b56      	ldr	r3, [pc, #344]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a55      	ldr	r2, [pc, #340]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e30:	f7fd fe24 	bl	8002a7c <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e38:	f7fd fe20 	bl	8002a7c <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e092      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e4a:	4b4d      	ldr	r3, [pc, #308]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e56:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02e      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d027      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e74:	4b41      	ldr	r3, [pc, #260]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7e:	4b41      	ldr	r3, [pc, #260]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e84:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e8a:	4a3c      	ldr	r2, [pc, #240]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d014      	beq.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e9a:	f7fd fdef 	bl	8002a7c <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea0:	e00a      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea2:	f7fd fdeb 	bl	8002a7c <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e05b      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb8:	4b30      	ldr	r3, [pc, #192]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0ee      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	492a      	ldr	r1, [pc, #168]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ed6:	7dfb      	ldrb	r3, [r7, #23]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ede:	69db      	ldr	r3, [r3, #28]
 8004ee0:	4a26      	ldr	r2, [pc, #152]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01f      	beq.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d012      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f04:	d00d      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f18:	d003      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004f1a:	21b9      	movs	r1, #185	; 0xb9
 8004f1c:	4816      	ldr	r0, [pc, #88]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004f1e:	f7fd f8dd 	bl	80020dc <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f22:	4b16      	ldr	r3, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	4913      	ldr	r1, [pc, #76]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d016      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f48:	d008      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d004      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004f52:	f240 1115 	movw	r1, #277	; 0x115
 8004f56:	4808      	ldr	r0, [pc, #32]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004f58:	f7fd f8c0 	bl	80020dc <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f5c:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	0800f048 	.word	0x0800f048
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
 8004f84:	42420440 	.word	0x42420440

08004f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f88:	b590      	push	{r4, r7, lr}
 8004f8a:	b08d      	sub	sp, #52	; 0x34
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f90:	4b7a      	ldr	r3, [pc, #488]	; (800517c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004f92:	f107 040c 	add.w	r4, r7, #12
 8004f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f9c:	f240 2301 	movw	r3, #513	; 0x201
 8004fa0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004faa:	2300      	movs	r3, #0
 8004fac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d118      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d113      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0308 	and.w	r3, r3, #8
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004fe8:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004fec:	4864      	ldr	r0, [pc, #400]	; (8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004fee:	f7fd f875 	bl	80020dc <assert_failed>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	f200 80b6 	bhi.w	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004ffc:	a201      	add	r2, pc, #4	; (adr r2, 8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005002:	bf00      	nop
 8005004:	080050e7 	.word	0x080050e7
 8005008:	0800514d 	.word	0x0800514d
 800500c:	08005169 	.word	0x08005169
 8005010:	080050d7 	.word	0x080050d7
 8005014:	08005169 	.word	0x08005169
 8005018:	08005169 	.word	0x08005169
 800501c:	08005169 	.word	0x08005169
 8005020:	080050df 	.word	0x080050df
 8005024:	08005169 	.word	0x08005169
 8005028:	08005169 	.word	0x08005169
 800502c:	08005169 	.word	0x08005169
 8005030:	08005169 	.word	0x08005169
 8005034:	08005169 	.word	0x08005169
 8005038:	08005169 	.word	0x08005169
 800503c:	08005169 	.word	0x08005169
 8005040:	08005045 	.word	0x08005045
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005044:	4b4f      	ldr	r3, [pc, #316]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800504a:	4b4e      	ldr	r3, [pc, #312]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	f000 808a 	beq.w	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	0c9b      	lsrs	r3, r3, #18
 800505c:	f003 030f 	and.w	r3, r3, #15
 8005060:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005064:	4413      	add	r3, r2
 8005066:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800506a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d018      	beq.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005076:	4b43      	ldr	r3, [pc, #268]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	0c5b      	lsrs	r3, r3, #17
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005084:	4413      	add	r3, r2
 8005086:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800508a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005096:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	fbb2 f2f3 	udiv	r2, r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050a6:	e004      	b.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	4a38      	ldr	r2, [pc, #224]	; (800518c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050b2:	4b34      	ldr	r3, [pc, #208]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050be:	d102      	bne.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80050c4:	e052      	b.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4a31      	ldr	r2, [pc, #196]	; (8005190 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80050d4:	e04a      	b.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80050d6:	f7ff fd91 	bl	8004bfc <HAL_RCC_GetSysClockFreq>
 80050da:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80050dc:	e049      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80050de:	f7ff fd8d 	bl	8004bfc <HAL_RCC_GetSysClockFreq>
 80050e2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80050e4:	e045      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80050e6:	4b27      	ldr	r3, [pc, #156]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f6:	d108      	bne.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8005102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
 8005108:	e01f      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005114:	d109      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8005116:	4b1b      	ldr	r3, [pc, #108]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8005122:	f649 4340 	movw	r3, #40000	; 0x9c40
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
 8005128:	e00f      	b.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005134:	d11c      	bne.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8005136:	4b13      	ldr	r3, [pc, #76]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d016      	beq.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8005142:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005146:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8005148:	e012      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800514a:	e011      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800514c:	f7ff fdd4 	bl	8004cf8 <HAL_RCC_GetPCLK2Freq>
 8005150:	4602      	mov	r2, r0
 8005152:	4b0c      	ldr	r3, [pc, #48]	; (8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	0b9b      	lsrs	r3, r3, #14
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	3301      	adds	r3, #1
 800515e:	005b      	lsls	r3, r3, #1
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005166:	e004      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8005168:	bf00      	nop
 800516a:	e002      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800516c:	bf00      	nop
 800516e:	e000      	b.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8005170:	bf00      	nop
    }
  }
  return (frequency);
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005174:	4618      	mov	r0, r3
 8005176:	3734      	adds	r7, #52	; 0x34
 8005178:	46bd      	mov	sp, r7
 800517a:	bd90      	pop	{r4, r7, pc}
 800517c:	0800f084 	.word	0x0800f084
 8005180:	0800f048 	.word	0x0800f048
 8005184:	40021000 	.word	0x40021000
 8005188:	007a1200 	.word	0x007a1200
 800518c:	003d0900 	.word	0x003d0900
 8005190:	aaaaaaab 	.word	0xaaaaaaab

08005194 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e0b4      	b.n	8005314 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a5b      	ldr	r2, [pc, #364]	; (800531c <HAL_RTC_Init+0x188>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_RTC_Init+0x2a>
 80051b4:	f240 111d 	movw	r1, #285	; 0x11d
 80051b8:	4859      	ldr	r0, [pc, #356]	; (8005320 <HAL_RTC_Init+0x18c>)
 80051ba:	f7fc ff8f 	bl	80020dc <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d012      	beq.n	80051ec <HAL_RTC_Init+0x58>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d00e      	beq.n	80051ec <HAL_RTC_Init+0x58>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d6:	d009      	beq.n	80051ec <HAL_RTC_Init+0x58>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051e0:	d004      	beq.n	80051ec <HAL_RTC_Init+0x58>
 80051e2:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80051e6:	484e      	ldr	r0, [pc, #312]	; (8005320 <HAL_RTC_Init+0x18c>)
 80051e8:	f7fc ff78 	bl	80020dc <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f4:	d309      	bcc.n	800520a <HAL_RTC_Init+0x76>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d004      	beq.n	800520a <HAL_RTC_Init+0x76>
 8005200:	f240 111f 	movw	r1, #287	; 0x11f
 8005204:	4846      	ldr	r0, [pc, #280]	; (8005320 <HAL_RTC_Init+0x18c>)
 8005206:	f7fc ff69 	bl	80020dc <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	7c5b      	ldrb	r3, [r3, #17]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fc ffde 	bl	80021dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2202      	movs	r2, #2
 8005224:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 fbca 	bl	80059c0 <HAL_RTC_WaitForSynchro>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d004      	beq.n	800523c <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2204      	movs	r2, #4
 8005236:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e06b      	b.n	8005314 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fc83 	bl	8005b48 <RTC_EnterInitMode>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e060      	b.n	8005314 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0207 	bic.w	r2, r2, #7
 8005260:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800526a:	4b2e      	ldr	r3, [pc, #184]	; (8005324 <HAL_RTC_Init+0x190>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	4a2d      	ldr	r2, [pc, #180]	; (8005324 <HAL_RTC_Init+0x190>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005276:	4b2b      	ldr	r3, [pc, #172]	; (8005324 <HAL_RTC_Init+0x190>)
 8005278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	4928      	ldr	r1, [pc, #160]	; (8005324 <HAL_RTC_Init+0x190>)
 8005284:	4313      	orrs	r3, r2
 8005286:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d003      	beq.n	800529a <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e00e      	b.n	80052b8 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800529a:	2001      	movs	r0, #1
 800529c:	f7ff fe74 	bl	8004f88 <HAL_RCCEx_GetPeriphCLKFreq>
 80052a0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2204      	movs	r2, #4
 80052ac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e030      	b.n	8005314 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3b01      	subs	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f023 010f 	bic.w	r1, r3, #15
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	0c1a      	lsrs	r2, r3, #16
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	b291      	uxth	r1, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	430b      	orrs	r3, r1
 80052e2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fc57 	bl	8005b98 <RTC_ExitInitMode>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2204      	movs	r2, #4
 80052f4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e00c      	b.n	8005314 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8005312:	2300      	movs	r3, #0
  }
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40002800 	.word	0x40002800
 8005320:	0800f094 	.word	0x0800f094
 8005324:	40006c00 	.word	0x40006c00

08005328 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	2300      	movs	r3, #0
 800533a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_RTC_SetTime+0x20>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0cd      	b.n	80054e8 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_RTC_SetTime+0x3a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d004      	beq.n	8005362 <HAL_RTC_SetTime+0x3a>
 8005358:	f240 21ca 	movw	r1, #714	; 0x2ca
 800535c:	4864      	ldr	r0, [pc, #400]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 800535e:	f7fc febd 	bl	80020dc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	7c1b      	ldrb	r3, [r3, #16]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_RTC_SetTime+0x46>
 800536a:	2302      	movs	r3, #2
 800536c:	e0bc      	b.n	80054e8 <HAL_RTC_SetTime+0x1c0>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2201      	movs	r2, #1
 8005372:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2202      	movs	r2, #2
 8005378:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d12e      	bne.n	80053de <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b17      	cmp	r3, #23
 8005386:	d904      	bls.n	8005392 <HAL_RTC_SetTime+0x6a>
 8005388:	f240 21d3 	movw	r1, #723	; 0x2d3
 800538c:	4858      	ldr	r0, [pc, #352]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 800538e:	f7fc fea5 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	2b3b      	cmp	r3, #59	; 0x3b
 8005398:	d904      	bls.n	80053a4 <HAL_RTC_SetTime+0x7c>
 800539a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800539e:	4854      	ldr	r0, [pc, #336]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 80053a0:	f7fc fe9c 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	789b      	ldrb	r3, [r3, #2]
 80053a8:	2b3b      	cmp	r3, #59	; 0x3b
 80053aa:	d904      	bls.n	80053b6 <HAL_RTC_SetTime+0x8e>
 80053ac:	f240 21d5 	movw	r1, #725	; 0x2d5
 80053b0:	484f      	ldr	r0, [pc, #316]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 80053b2:	f7fc fe93 	bl	80020dc <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80053c0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	785b      	ldrb	r3, [r3, #1]
 80053c8:	4619      	mov	r1, r3
 80053ca:	460b      	mov	r3, r1
 80053cc:	011b      	lsls	r3, r3, #4
 80053ce:	1a5b      	subs	r3, r3, r1
 80053d0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80053d2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80053d8:	4413      	add	r3, r2
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e045      	b.n	800546a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f000 fc1d 	bl	8005c22 <RTC_Bcd2ToByte>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b17      	cmp	r3, #23
 80053ec:	d904      	bls.n	80053f8 <HAL_RTC_SetTime+0xd0>
 80053ee:	f240 21dd 	movw	r1, #733	; 0x2dd
 80053f2:	483f      	ldr	r0, [pc, #252]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 80053f4:	f7fc fe72 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fc10 	bl	8005c22 <RTC_Bcd2ToByte>
 8005402:	4603      	mov	r3, r0
 8005404:	2b3b      	cmp	r3, #59	; 0x3b
 8005406:	d904      	bls.n	8005412 <HAL_RTC_SetTime+0xea>
 8005408:	f240 21de 	movw	r1, #734	; 0x2de
 800540c:	4838      	ldr	r0, [pc, #224]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 800540e:	f7fc fe65 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	789b      	ldrb	r3, [r3, #2]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fc03 	bl	8005c22 <RTC_Bcd2ToByte>
 800541c:	4603      	mov	r3, r0
 800541e:	2b3b      	cmp	r3, #59	; 0x3b
 8005420:	d904      	bls.n	800542c <HAL_RTC_SetTime+0x104>
 8005422:	f240 21df 	movw	r1, #735	; 0x2df
 8005426:	4832      	ldr	r0, [pc, #200]	; (80054f0 <HAL_RTC_SetTime+0x1c8>)
 8005428:	f7fc fe58 	bl	80020dc <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fbf6 	bl	8005c22 <RTC_Bcd2ToByte>
 8005436:	4603      	mov	r3, r0
 8005438:	461a      	mov	r2, r3
 800543a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800543e:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fbeb 	bl	8005c22 <RTC_Bcd2ToByte>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	4613      	mov	r3, r2
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	1a9b      	subs	r3, r3, r2
 8005456:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005458:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	789b      	ldrb	r3, [r3, #2]
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fbdf 	bl	8005c22 <RTC_Bcd2ToByte>
 8005464:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005466:	4423      	add	r3, r4
 8005468:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fb04 	bl	8005a7a <RTC_WriteTimeCounter>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2204      	movs	r2, #4
 800547c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e02f      	b.n	80054e8 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0205 	bic.w	r2, r2, #5
 8005496:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	f000 fb15 	bl	8005ac8 <RTC_ReadAlarmCounter>
 800549e:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d018      	beq.n	80054da <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d214      	bcs.n	80054da <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80054b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80054ba:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80054bc:	6939      	ldr	r1, [r7, #16]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f000 fb1b 	bl	8005afa <RTC_WriteAlarmCounter>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2204      	movs	r2, #4
 80054ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e006      	b.n	80054e8 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80054e6:	2300      	movs	r3, #0
  }
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	371c      	adds	r7, #28
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd90      	pop	{r4, r7, pc}
 80054f0:	0800f094 	.word	0x0800f094

080054f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	2300      	movs	r3, #0
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	2300      	movs	r3, #0
 800550e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_RTC_GetTime+0x28>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0c0      	b.n	80056a2 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d007      	beq.n	8005536 <HAL_RTC_GetTime+0x42>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d004      	beq.n	8005536 <HAL_RTC_GetTime+0x42>
 800552c:	f240 312d 	movw	r1, #813	; 0x32d
 8005530:	485e      	ldr	r0, [pc, #376]	; (80056ac <HAL_RTC_GetTime+0x1b8>)
 8005532:	f7fc fdd3 	bl	80020dc <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0ac      	b.n	80056a2 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fa66 	bl	8005a1a <RTC_ReadTimeCounter>
 800554e:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	4a57      	ldr	r2, [pc, #348]	; (80056b0 <HAL_RTC_GetTime+0x1bc>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	0adb      	lsrs	r3, r3, #11
 800555a:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	4b54      	ldr	r3, [pc, #336]	; (80056b0 <HAL_RTC_GetTime+0x1bc>)
 8005560:	fba3 1302 	umull	r1, r3, r3, r2
 8005564:	0adb      	lsrs	r3, r3, #11
 8005566:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800556a:	fb01 f303 	mul.w	r3, r1, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	4a50      	ldr	r2, [pc, #320]	; (80056b4 <HAL_RTC_GetTime+0x1c0>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	4a4b      	ldr	r2, [pc, #300]	; (80056b0 <HAL_RTC_GetTime+0x1bc>)
 8005582:	fba2 1203 	umull	r1, r2, r2, r3
 8005586:	0ad2      	lsrs	r2, r2, #11
 8005588:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800558c:	fb01 f202 	mul.w	r2, r1, r2
 8005590:	1a9a      	subs	r2, r3, r2
 8005592:	4b48      	ldr	r3, [pc, #288]	; (80056b4 <HAL_RTC_GetTime+0x1c0>)
 8005594:	fba3 1302 	umull	r1, r3, r3, r2
 8005598:	0959      	lsrs	r1, r3, #5
 800559a:	460b      	mov	r3, r1
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	1a5b      	subs	r3, r3, r1
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	1ad1      	subs	r1, r2, r3
 80055a4:	b2ca      	uxtb	r2, r1
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b17      	cmp	r3, #23
 80055ae:	d955      	bls.n	800565c <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4a41      	ldr	r2, [pc, #260]	; (80056b8 <HAL_RTC_GetTime+0x1c4>)
 80055b4:	fba2 2303 	umull	r2, r3, r2, r3
 80055b8:	091b      	lsrs	r3, r3, #4
 80055ba:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80055bc:	6939      	ldr	r1, [r7, #16]
 80055be:	4b3e      	ldr	r3, [pc, #248]	; (80056b8 <HAL_RTC_GetTime+0x1c4>)
 80055c0:	fba3 2301 	umull	r2, r3, r3, r1
 80055c4:	091a      	lsrs	r2, r3, #4
 80055c6:	4613      	mov	r3, r2
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	4413      	add	r3, r2
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	1aca      	subs	r2, r1, r3
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f000 fa76 	bl	8005ac8 <RTC_ReadAlarmCounter>
 80055dc:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e4:	d008      	beq.n	80055f8 <HAL_RTC_GetTime+0x104>
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d904      	bls.n	80055f8 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	e002      	b.n	80055fe <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80055f8:	f04f 33ff 	mov.w	r3, #4294967295
 80055fc:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	4a2e      	ldr	r2, [pc, #184]	; (80056bc <HAL_RTC_GetTime+0x1c8>)
 8005602:	fb02 f303 	mul.w	r3, r2, r3
 8005606:	69ba      	ldr	r2, [r7, #24]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800560c:	69b9      	ldr	r1, [r7, #24]
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 fa33 	bl	8005a7a <RTC_WriteTimeCounter>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e041      	b.n	80056a2 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d00c      	beq.n	8005640 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	4413      	add	r3, r2
 800562c:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800562e:	69f9      	ldr	r1, [r7, #28]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 fa62 	bl	8005afa <RTC_WriteAlarmCounter>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e030      	b.n	80056a2 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 fa59 	bl	8005afa <RTC_WriteAlarmCounter>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e027      	b.n	80056a2 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fb01 	bl	8005c5c <RTC_DateUpdate>
 800565a:	e003      	b.n	8005664 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01a      	beq.n	80056a0 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 faba 	bl	8005be8 <RTC_ByteToBcd2>
 8005674:	4603      	mov	r3, r0
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	785b      	ldrb	r3, [r3, #1]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fab1 	bl	8005be8 <RTC_ByteToBcd2>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	789b      	ldrb	r3, [r3, #2]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 faa8 	bl	8005be8 <RTC_ByteToBcd2>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3720      	adds	r7, #32
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	0800f094 	.word	0x0800f094
 80056b0:	91a2b3c5 	.word	0x91a2b3c5
 80056b4:	88888889 	.word	0x88888889
 80056b8:	aaaaaaab 	.word	0xaaaaaaab
 80056bc:	00015180 	.word	0x00015180

080056c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	2300      	movs	r3, #0
 80056d2:	61bb      	str	r3, [r7, #24]
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <HAL_RTC_SetDate+0x24>
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0fc      	b.n	80058e2 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_RTC_SetDate+0x3e>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d004      	beq.n	80056fe <HAL_RTC_SetDate+0x3e>
 80056f4:	f44f 7167 	mov.w	r1, #924	; 0x39c
 80056f8:	487c      	ldr	r0, [pc, #496]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 80056fa:	f7fc fcef 	bl	80020dc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7c1b      	ldrb	r3, [r3, #16]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_RTC_SetDate+0x4a>
 8005706:	2302      	movs	r3, #2
 8005708:	e0eb      	b.n	80058e2 <HAL_RTC_SetDate+0x222>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2202      	movs	r2, #2
 8005714:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d12f      	bne.n	800577c <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	78db      	ldrb	r3, [r3, #3]
 8005720:	2b63      	cmp	r3, #99	; 0x63
 8005722:	d904      	bls.n	800572e <HAL_RTC_SetDate+0x6e>
 8005724:	f240 31a5 	movw	r1, #933	; 0x3a5
 8005728:	4870      	ldr	r0, [pc, #448]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 800572a:	f7fc fcd7 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_RTC_SetDate+0x7e>
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d904      	bls.n	8005748 <HAL_RTC_SetDate+0x88>
 800573e:	f240 31a6 	movw	r1, #934	; 0x3a6
 8005742:	486a      	ldr	r0, [pc, #424]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 8005744:	f7fc fcca 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	789b      	ldrb	r3, [r3, #2]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d003      	beq.n	8005758 <HAL_RTC_SetDate+0x98>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	789b      	ldrb	r3, [r3, #2]
 8005754:	2b1f      	cmp	r3, #31
 8005756:	d904      	bls.n	8005762 <HAL_RTC_SetDate+0xa2>
 8005758:	f240 31a7 	movw	r1, #935	; 0x3a7
 800575c:	4863      	ldr	r0, [pc, #396]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 800575e:	f7fc fcbd 	bl	80020dc <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	78da      	ldrb	r2, [r3, #3]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785a      	ldrb	r2, [r3, #1]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	789a      	ldrb	r2, [r3, #2]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	739a      	strb	r2, [r3, #14]
 800577a:	e051      	b.n	8005820 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	78db      	ldrb	r3, [r3, #3]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fa4e 	bl	8005c22 <RTC_Bcd2ToByte>
 8005786:	4603      	mov	r3, r0
 8005788:	2b63      	cmp	r3, #99	; 0x63
 800578a:	d904      	bls.n	8005796 <HAL_RTC_SetDate+0xd6>
 800578c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8005790:	4856      	ldr	r0, [pc, #344]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 8005792:	f7fc fca3 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	785b      	ldrb	r3, [r3, #1]
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fa41 	bl	8005c22 <RTC_Bcd2ToByte>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_RTC_SetDate+0xf6>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fa39 	bl	8005c22 <RTC_Bcd2ToByte>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d904      	bls.n	80057c0 <HAL_RTC_SetDate+0x100>
 80057b6:	f240 31b1 	movw	r1, #945	; 0x3b1
 80057ba:	484c      	ldr	r0, [pc, #304]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 80057bc:	f7fc fc8e 	bl	80020dc <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	789b      	ldrb	r3, [r3, #2]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fa2c 	bl	8005c22 <RTC_Bcd2ToByte>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_RTC_SetDate+0x120>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	789b      	ldrb	r3, [r3, #2]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fa24 	bl	8005c22 <RTC_Bcd2ToByte>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b1f      	cmp	r3, #31
 80057de:	d904      	bls.n	80057ea <HAL_RTC_SetDate+0x12a>
 80057e0:	f240 31b2 	movw	r1, #946	; 0x3b2
 80057e4:	4841      	ldr	r0, [pc, #260]	; (80058ec <HAL_RTC_SetDate+0x22c>)
 80057e6:	f7fc fc79 	bl	80020dc <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	78db      	ldrb	r3, [r3, #3]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fa17 	bl	8005c22 <RTC_Bcd2ToByte>
 80057f4:	4603      	mov	r3, r0
 80057f6:	461a      	mov	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fa0e 	bl	8005c22 <RTC_Bcd2ToByte>
 8005806:	4603      	mov	r3, r0
 8005808:	461a      	mov	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	789b      	ldrb	r3, [r3, #2]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 fa05 	bl	8005c22 <RTC_Bcd2ToByte>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	7bdb      	ldrb	r3, [r3, #15]
 8005824:	4618      	mov	r0, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	7b59      	ldrb	r1, [r3, #13]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	7b9b      	ldrb	r3, [r3, #14]
 800582e:	461a      	mov	r2, r3
 8005830:	f000 faf0 	bl	8005e14 <RTC_WeekDayNum>
 8005834:	4603      	mov	r3, r0
 8005836:	461a      	mov	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	7b1a      	ldrb	r2, [r3, #12]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f8e8 	bl	8005a1a <RTC_ReadTimeCounter>
 800584a:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <HAL_RTC_SetDate+0x230>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	0adb      	lsrs	r3, r3, #11
 8005856:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2b18      	cmp	r3, #24
 800585c:	d93a      	bls.n	80058d4 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	4a24      	ldr	r2, [pc, #144]	; (80058f4 <HAL_RTC_SetDate+0x234>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	091b      	lsrs	r3, r3, #4
 8005868:	4a23      	ldr	r2, [pc, #140]	; (80058f8 <HAL_RTC_SetDate+0x238>)
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005874:	69f9      	ldr	r1, [r7, #28]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f8ff 	bl	8005a7a <RTC_WriteTimeCounter>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2204      	movs	r2, #4
 8005886:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2200      	movs	r2, #0
 800588c:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e027      	b.n	80058e2 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 f918 	bl	8005ac8 <RTC_ReadAlarmCounter>
 8005898:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a0:	d018      	beq.n	80058d4 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d214      	bcs.n	80058d4 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80058b0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80058b4:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80058b6:	69b9      	ldr	r1, [r7, #24]
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f000 f91e 	bl	8005afa <RTC_WriteAlarmCounter>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d007      	beq.n	80058d4 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2204      	movs	r2, #4
 80058c8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e006      	b.n	80058e2 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	0800f094 	.word	0x0800f094
 80058f0:	91a2b3c5 	.word	0x91a2b3c5
 80058f4:	aaaaaaab 	.word	0xaaaaaaab
 80058f8:	00015180 	.word	0x00015180

080058fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005908:	f107 0314 	add.w	r3, r7, #20
 800590c:	2100      	movs	r1, #0
 800590e:	460a      	mov	r2, r1
 8005910:	801a      	strh	r2, [r3, #0]
 8005912:	460a      	mov	r2, r1
 8005914:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <HAL_RTC_GetDate+0x26>
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e045      	b.n	80059b2 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <HAL_RTC_GetDate+0x40>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d004      	beq.n	800593c <HAL_RTC_GetDate+0x40>
 8005932:	f240 410e 	movw	r1, #1038	; 0x40e
 8005936:	4821      	ldr	r0, [pc, #132]	; (80059bc <HAL_RTC_GetDate+0xc0>)
 8005938:	f7fc fbd0 	bl	80020dc <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	2200      	movs	r2, #0
 8005942:	4619      	mov	r1, r3
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f7ff fdd5 	bl	80054f4 <HAL_RTC_GetTime>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e02e      	b.n	80059b2 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	7b1a      	ldrb	r2, [r3, #12]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	7bda      	ldrb	r2, [r3, #15]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	7b5a      	ldrb	r2, [r3, #13]
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	7b9a      	ldrb	r2, [r3, #14]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01a      	beq.n	80059b0 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	78db      	ldrb	r3, [r3, #3]
 800597e:	4618      	mov	r0, r3
 8005980:	f000 f932 	bl	8005be8 <RTC_ByteToBcd2>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	4618      	mov	r0, r3
 8005992:	f000 f929 	bl	8005be8 <RTC_ByteToBcd2>
 8005996:	4603      	mov	r3, r0
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	789b      	ldrb	r3, [r3, #2]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f920 	bl	8005be8 <RTC_ByteToBcd2>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	0800f094 	.word	0x0800f094

080059c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e01d      	b.n	8005a12 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0208 	bic.w	r2, r2, #8
 80059e4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80059e6:	f7fd f849 	bl	8002a7c <HAL_GetTick>
 80059ea:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80059ec:	e009      	b.n	8005a02 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059ee:	f7fd f845 	bl	8002a7c <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059fc:	d901      	bls.n	8005a02 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e007      	b.n	8005a12 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d0ee      	beq.n	80059ee <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005a1a:	b480      	push	{r7}
 8005a1c:	b087      	sub	sp, #28
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	827b      	strh	r3, [r7, #18]
 8005a26:	2300      	movs	r3, #0
 8005a28:	823b      	strh	r3, [r7, #16]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005a4a:	8a7a      	ldrh	r2, [r7, #18]
 8005a4c:	8a3b      	ldrh	r3, [r7, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d008      	beq.n	8005a64 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005a52:	8a3b      	ldrh	r3, [r7, #16]
 8005a54:	041a      	lsls	r2, r3, #16
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
 8005a62:	e004      	b.n	8005a6e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005a64:	8a7b      	ldrh	r3, [r7, #18]
 8005a66:	041a      	lsls	r2, r3, #16
 8005a68:	89fb      	ldrh	r3, [r7, #14]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005a6e:	697b      	ldr	r3, [r7, #20]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	371c      	adds	r7, #28
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bc80      	pop	{r7}
 8005a78:	4770      	bx	lr

08005a7a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a84:	2300      	movs	r3, #0
 8005a86:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f85d 	bl	8005b48 <RTC_EnterInitMode>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	73fb      	strb	r3, [r7, #15]
 8005a98:	e011      	b.n	8005abe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	683a      	ldr	r2, [r7, #0]
 8005aa0:	0c12      	lsrs	r2, r2, #16
 8005aa2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f872 	bl	8005b98 <RTC_ExitInitMode>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	81fb      	strh	r3, [r7, #14]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005ae8:	89fb      	ldrh	r3, [r7, #14]
 8005aea:	041a      	lsls	r2, r3, #16
 8005aec:	89bb      	ldrh	r3, [r7, #12]
 8005aee:	4313      	orrs	r3, r2
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bc80      	pop	{r7}
 8005af8:	4770      	bx	lr

08005afa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b084      	sub	sp, #16
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2300      	movs	r3, #0
 8005b06:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f81d 	bl	8005b48 <RTC_EnterInitMode>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	e011      	b.n	8005b3e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	0c12      	lsrs	r2, r2, #16
 8005b22:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f832 	bl	8005b98 <RTC_ExitInitMode>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005b54:	f7fc ff92 	bl	8002a7c <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b5a:	e009      	b.n	8005b70 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b5c:	f7fc ff8e 	bl	8002a7c <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b6a:	d901      	bls.n	8005b70 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e00f      	b.n	8005b90 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ee      	beq.n	8005b5c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0210 	orr.w	r2, r2, #16
 8005b8c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0210 	bic.w	r2, r2, #16
 8005bb2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005bb4:	f7fc ff62 	bl	8002a7c <HAL_GetTick>
 8005bb8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bba:	e009      	b.n	8005bd0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005bbc:	f7fc ff5e 	bl	8002a7c <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bca:	d901      	bls.n	8005bd0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e007      	b.n	8005be0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0ee      	beq.n	8005bbc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005bf6:	e005      	b.n	8005c04 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005bfe:	79fb      	ldrb	r3, [r7, #7]
 8005c00:	3b0a      	subs	r3, #10
 8005c02:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	2b09      	cmp	r3, #9
 8005c08:	d8f6      	bhi.n	8005bf8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	b2db      	uxtb	r3, r3
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bc80      	pop	{r7}
 8005c20:	4770      	bx	lr

08005c22 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b085      	sub	sp, #20
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	4603      	mov	r3, r0
 8005c2a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005c30:	79fb      	ldrb	r3, [r7, #7]
 8005c32:	091b      	lsrs	r3, r3, #4
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	461a      	mov	r2, r3
 8005c38:	4613      	mov	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005c42:	79fb      	ldrb	r3, [r7, #7]
 8005c44:	f003 030f 	and.w	r3, r3, #15
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4413      	add	r3, r2
 8005c50:	b2db      	uxtb	r3, r3
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	613b      	str	r3, [r7, #16]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	7bdb      	ldrb	r3, [r3, #15]
 8005c7a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	7b5b      	ldrb	r3, [r3, #13]
 8005c80:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	7b9b      	ldrb	r3, [r3, #14]
 8005c86:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	e06f      	b.n	8005d6e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d011      	beq.n	8005cb8 <RTC_DateUpdate+0x5c>
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d00e      	beq.n	8005cb8 <RTC_DateUpdate+0x5c>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d00b      	beq.n	8005cb8 <RTC_DateUpdate+0x5c>
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b07      	cmp	r3, #7
 8005ca4:	d008      	beq.n	8005cb8 <RTC_DateUpdate+0x5c>
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b08      	cmp	r3, #8
 8005caa:	d005      	beq.n	8005cb8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b0a      	cmp	r3, #10
 8005cb0:	d002      	beq.n	8005cb8 <RTC_DateUpdate+0x5c>
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b0c      	cmp	r3, #12
 8005cb6:	d117      	bne.n	8005ce8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b1e      	cmp	r3, #30
 8005cbc:	d803      	bhi.n	8005cc6 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005cc4:	e050      	b.n	8005d68 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	d005      	beq.n	8005cd8 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005cd6:	e047      	b.n	8005d68 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]
          year++;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005ce6:	e03f      	b.n	8005d68 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d008      	beq.n	8005d00 <RTC_DateUpdate+0xa4>
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	2b06      	cmp	r3, #6
 8005cf2:	d005      	beq.n	8005d00 <RTC_DateUpdate+0xa4>
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b09      	cmp	r3, #9
 8005cf8:	d002      	beq.n	8005d00 <RTC_DateUpdate+0xa4>
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b0b      	cmp	r3, #11
 8005cfe:	d10c      	bne.n	8005d1a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b1d      	cmp	r3, #29
 8005d04:	d803      	bhi.n	8005d0e <RTC_DateUpdate+0xb2>
      {
        day++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005d0c:	e02c      	b.n	8005d68 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	3301      	adds	r3, #1
 8005d12:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d14:	2301      	movs	r3, #1
 8005d16:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005d18:	e026      	b.n	8005d68 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d123      	bne.n	8005d68 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2b1b      	cmp	r3, #27
 8005d24:	d803      	bhi.n	8005d2e <RTC_DateUpdate+0xd2>
      {
        day++;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	60fb      	str	r3, [r7, #12]
 8005d2c:	e01c      	b.n	8005d68 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b1c      	cmp	r3, #28
 8005d32:	d111      	bne.n	8005d58 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f839 	bl	8005db0 <RTC_IsLeapYear>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d003      	beq.n	8005d4c <RTC_DateUpdate+0xf0>
        {
          day++;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	e00d      	b.n	8005d68 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005d52:	2301      	movs	r3, #1
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	e007      	b.n	8005d68 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b1d      	cmp	r3, #29
 8005d5c:	d104      	bne.n	8005d68 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	3301      	adds	r3, #1
 8005d62:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60bb      	str	r3, [r7, #8]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d38b      	bcc.n	8005c8e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	b2d2      	uxtb	r2, r2
 8005d96:	4619      	mov	r1, r3
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	f000 f83b 	bl	8005e14 <RTC_WeekDayNum>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	461a      	mov	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	731a      	strb	r2, [r3, #12]
}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	4603      	mov	r3, r0
 8005db8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	f003 0303 	and.w	r3, r3, #3
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d001      	beq.n	8005dca <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e01d      	b.n	8005e06 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005dca:	88fb      	ldrh	r3, [r7, #6]
 8005dcc:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <RTC_IsLeapYear+0x60>)
 8005dce:	fba2 1203 	umull	r1, r2, r2, r3
 8005dd2:	0952      	lsrs	r2, r2, #5
 8005dd4:	2164      	movs	r1, #100	; 0x64
 8005dd6:	fb01 f202 	mul.w	r2, r1, r2
 8005dda:	1a9b      	subs	r3, r3, r2
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e00f      	b.n	8005e06 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005de6:	88fb      	ldrh	r3, [r7, #6]
 8005de8:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <RTC_IsLeapYear+0x60>)
 8005dea:	fba2 1203 	umull	r1, r2, r2, r3
 8005dee:	09d2      	lsrs	r2, r2, #7
 8005df0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005df4:	fb01 f202 	mul.w	r2, r1, r2
 8005df8:	1a9b      	subs	r3, r3, r2
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005e04:	2300      	movs	r3, #0
  }
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	51eb851f 	.word	0x51eb851f

08005e14 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	70fb      	strb	r3, [r7, #3]
 8005e20:	4613      	mov	r3, r2
 8005e22:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	60bb      	str	r3, [r7, #8]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005e32:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005e34:	78fb      	ldrb	r3, [r7, #3]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d82d      	bhi.n	8005e96 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005e3a:	78fa      	ldrb	r2, [r7, #3]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	4413      	add	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	4a2c      	ldr	r2, [pc, #176]	; (8005ef8 <RTC_WeekDayNum+0xe4>)
 8005e48:	fba2 2303 	umull	r2, r3, r2, r3
 8005e4c:	085a      	lsrs	r2, r3, #1
 8005e4e:	78bb      	ldrb	r3, [r7, #2]
 8005e50:	441a      	add	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	441a      	add	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	089b      	lsrs	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	3b01      	subs	r3, #1
 8005e62:	4926      	ldr	r1, [pc, #152]	; (8005efc <RTC_WeekDayNum+0xe8>)
 8005e64:	fba1 1303 	umull	r1, r3, r1, r3
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	1ad2      	subs	r2, r2, r3
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	4922      	ldr	r1, [pc, #136]	; (8005efc <RTC_WeekDayNum+0xe8>)
 8005e72:	fba1 1303 	umull	r1, r3, r1, r3
 8005e76:	09db      	lsrs	r3, r3, #7
 8005e78:	4413      	add	r3, r2
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	4b20      	ldr	r3, [pc, #128]	; (8005f00 <RTC_WeekDayNum+0xec>)
 8005e7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e82:	1ad1      	subs	r1, r2, r3
 8005e84:	0849      	lsrs	r1, r1, #1
 8005e86:	440b      	add	r3, r1
 8005e88:	0899      	lsrs	r1, r3, #2
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	1a5b      	subs	r3, r3, r1
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e029      	b.n	8005eea <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005e96:	78fa      	ldrb	r2, [r7, #3]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <RTC_WeekDayNum+0xe4>)
 8005ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea8:	085a      	lsrs	r2, r3, #1
 8005eaa:	78bb      	ldrb	r3, [r7, #2]
 8005eac:	441a      	add	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	089b      	lsrs	r3, r3, #2
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4910      	ldr	r1, [pc, #64]	; (8005efc <RTC_WeekDayNum+0xe8>)
 8005ebc:	fba1 1303 	umull	r1, r3, r1, r3
 8005ec0:	095b      	lsrs	r3, r3, #5
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	490d      	ldr	r1, [pc, #52]	; (8005efc <RTC_WeekDayNum+0xe8>)
 8005ec8:	fba1 1303 	umull	r1, r3, r1, r3
 8005ecc:	09db      	lsrs	r3, r3, #7
 8005ece:	4413      	add	r3, r2
 8005ed0:	1c9a      	adds	r2, r3, #2
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <RTC_WeekDayNum+0xec>)
 8005ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed8:	1ad1      	subs	r1, r2, r3
 8005eda:	0849      	lsrs	r1, r1, #1
 8005edc:	440b      	add	r3, r1
 8005ede:	0899      	lsrs	r1, r3, #2
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	1a5b      	subs	r3, r3, r1
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	b2db      	uxtb	r3, r3
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bc80      	pop	{r7}
 8005ef6:	4770      	bx	lr
 8005ef8:	38e38e39 	.word	0x38e38e39
 8005efc:	51eb851f 	.word	0x51eb851f
 8005f00:	24924925 	.word	0x24924925

08005f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0b2      	b.n	800607c <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5a      	ldr	r2, [pc, #360]	; (8006084 <HAL_TIM_Base_Init+0x180>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d027      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a58      	ldr	r2, [pc, #352]	; (8006088 <HAL_TIM_Base_Init+0x184>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d022      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f32:	d01d      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a54      	ldr	r2, [pc, #336]	; (800608c <HAL_TIM_Base_Init+0x188>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d018      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a53      	ldr	r2, [pc, #332]	; (8006090 <HAL_TIM_Base_Init+0x18c>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d013      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a51      	ldr	r2, [pc, #324]	; (8006094 <HAL_TIM_Base_Init+0x190>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d00e      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a50      	ldr	r2, [pc, #320]	; (8006098 <HAL_TIM_Base_Init+0x194>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d009      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a4e      	ldr	r2, [pc, #312]	; (800609c <HAL_TIM_Base_Init+0x198>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_TIM_Base_Init+0x6c>
 8005f66:	f240 1113 	movw	r1, #275	; 0x113
 8005f6a:	484d      	ldr	r0, [pc, #308]	; (80060a0 <HAL_TIM_Base_Init+0x19c>)
 8005f6c:	f7fc f8b6 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d014      	beq.n	8005fa2 <HAL_TIM_Base_Init+0x9e>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d010      	beq.n	8005fa2 <HAL_TIM_Base_Init+0x9e>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b20      	cmp	r3, #32
 8005f86:	d00c      	beq.n	8005fa2 <HAL_TIM_Base_Init+0x9e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b40      	cmp	r3, #64	; 0x40
 8005f8e:	d008      	beq.n	8005fa2 <HAL_TIM_Base_Init+0x9e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	2b60      	cmp	r3, #96	; 0x60
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIM_Base_Init+0x9e>
 8005f98:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005f9c:	4840      	ldr	r0, [pc, #256]	; (80060a0 <HAL_TIM_Base_Init+0x19c>)
 8005f9e:	f7fc f89d 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_TIM_Base_Init+0xc4>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d009      	beq.n	8005fc8 <HAL_TIM_Base_Init+0xc4>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIM_Base_Init+0xc4>
 8005fbe:	f240 1115 	movw	r1, #277	; 0x115
 8005fc2:	4837      	ldr	r0, [pc, #220]	; (80060a0 <HAL_TIM_Base_Init+0x19c>)
 8005fc4:	f7fc f88a 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <HAL_TIM_Base_Init+0xde>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b80      	cmp	r3, #128	; 0x80
 8005fd6:	d004      	beq.n	8005fe2 <HAL_TIM_Base_Init+0xde>
 8005fd8:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005fdc:	4830      	ldr	r0, [pc, #192]	; (80060a0 <HAL_TIM_Base_Init+0x19c>)
 8005fde:	f7fc f87d 	bl	80020dc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d111      	bne.n	8006012 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f001 ffc0 	bl	8007f7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006000:	2b00      	cmp	r3, #0
 8006002:	d102      	bne.n	800600a <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <HAL_TIM_Base_Init+0x1a0>)
 8006008:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	3304      	adds	r3, #4
 8006022:	4619      	mov	r1, r3
 8006024:	4610      	mov	r0, r2
 8006026:	f001 fbff 	bl	8007828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3708      	adds	r7, #8
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40012c00 	.word	0x40012c00
 8006088:	40013400 	.word	0x40013400
 800608c:	40000400 	.word	0x40000400
 8006090:	40000800 	.word	0x40000800
 8006094:	40000c00 	.word	0x40000c00
 8006098:	40001000 	.word	0x40001000
 800609c:	40001400 	.word	0x40001400
 80060a0:	0800f0cc 	.word	0x0800f0cc
 80060a4:	08002225 	.word	0x08002225

080060a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a39      	ldr	r2, [pc, #228]	; (800619c <HAL_TIM_Base_Start+0xf4>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d027      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a38      	ldr	r2, [pc, #224]	; (80061a0 <HAL_TIM_Base_Start+0xf8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d022      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060cc:	d01d      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a34      	ldr	r2, [pc, #208]	; (80061a4 <HAL_TIM_Base_Start+0xfc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d018      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a32      	ldr	r2, [pc, #200]	; (80061a8 <HAL_TIM_Base_Start+0x100>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a31      	ldr	r2, [pc, #196]	; (80061ac <HAL_TIM_Base_Start+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00e      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2f      	ldr	r2, [pc, #188]	; (80061b0 <HAL_TIM_Base_Start+0x108>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <HAL_TIM_Base_Start+0x10c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_TIM_Base_Start+0x62>
 8006100:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8006104:	482c      	ldr	r0, [pc, #176]	; (80061b8 <HAL_TIM_Base_Start+0x110>)
 8006106:	f7fb ffe9 	bl	80020dc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e03c      	b.n	8006194 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2202      	movs	r2, #2
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a1d      	ldr	r2, [pc, #116]	; (800619c <HAL_TIM_Base_Start+0xf4>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_TIM_Base_Start+0xb6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <HAL_TIM_Base_Start+0xf8>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_TIM_Base_Start+0xb6>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613e:	d00e      	beq.n	800615e <HAL_TIM_Base_Start+0xb6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a17      	ldr	r2, [pc, #92]	; (80061a4 <HAL_TIM_Base_Start+0xfc>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_TIM_Base_Start+0xb6>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a16      	ldr	r2, [pc, #88]	; (80061a8 <HAL_TIM_Base_Start+0x100>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_TIM_Base_Start+0xb6>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a14      	ldr	r2, [pc, #80]	; (80061ac <HAL_TIM_Base_Start+0x104>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d111      	bne.n	8006182 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2b06      	cmp	r3, #6
 800616e:	d010      	beq.n	8006192 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006180:	e007      	b.n	8006192 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40012c00 	.word	0x40012c00
 80061a0:	40013400 	.word	0x40013400
 80061a4:	40000400 	.word	0x40000400
 80061a8:	40000800 	.word	0x40000800
 80061ac:	40000c00 	.word	0x40000c00
 80061b0:	40001000 	.word	0x40001000
 80061b4:	40001400 	.word	0x40001400
 80061b8:	0800f0cc 	.word	0x0800f0cc

080061bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a3d      	ldr	r2, [pc, #244]	; (80062c0 <HAL_TIM_Base_Start_IT+0x104>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d027      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a3c      	ldr	r2, [pc, #240]	; (80062c4 <HAL_TIM_Base_Start_IT+0x108>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d022      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e0:	d01d      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a38      	ldr	r2, [pc, #224]	; (80062c8 <HAL_TIM_Base_Start_IT+0x10c>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a36      	ldr	r2, [pc, #216]	; (80062cc <HAL_TIM_Base_Start_IT+0x110>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a35      	ldr	r2, [pc, #212]	; (80062d0 <HAL_TIM_Base_Start_IT+0x114>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a33      	ldr	r2, [pc, #204]	; (80062d4 <HAL_TIM_Base_Start_IT+0x118>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a32      	ldr	r2, [pc, #200]	; (80062d8 <HAL_TIM_Base_Start_IT+0x11c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIM_Base_Start_IT+0x62>
 8006214:	f240 11cf 	movw	r1, #463	; 0x1cf
 8006218:	4830      	ldr	r0, [pc, #192]	; (80062dc <HAL_TIM_Base_Start_IT+0x120>)
 800621a:	f7fb ff5f 	bl	80020dc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e044      	b.n	80062b8 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68da      	ldr	r2, [r3, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <HAL_TIM_Base_Start_IT+0x104>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d018      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xc6>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1b      	ldr	r2, [pc, #108]	; (80062c4 <HAL_TIM_Base_Start_IT+0x108>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xc6>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d00e      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xc6>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <HAL_TIM_Base_Start_IT+0x10c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d009      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xc6>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a16      	ldr	r2, [pc, #88]	; (80062cc <HAL_TIM_Base_Start_IT+0x110>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d004      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xc6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <HAL_TIM_Base_Start_IT+0x114>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d111      	bne.n	80062a6 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b06      	cmp	r3, #6
 8006292:	d010      	beq.n	80062b6 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f042 0201 	orr.w	r2, r2, #1
 80062a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a4:	e007      	b.n	80062b6 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062b6:	2300      	movs	r3, #0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	40012c00 	.word	0x40012c00
 80062c4:	40013400 	.word	0x40013400
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40001000 	.word	0x40001000
 80062d8:	40001400 	.word	0x40001400
 80062dc:	0800f0cc 	.word	0x0800f0cc

080062e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e0b2      	b.n	8006458 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a5a      	ldr	r2, [pc, #360]	; (8006460 <HAL_TIM_PWM_Init+0x180>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d027      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a58      	ldr	r2, [pc, #352]	; (8006464 <HAL_TIM_PWM_Init+0x184>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d022      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630e:	d01d      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a54      	ldr	r2, [pc, #336]	; (8006468 <HAL_TIM_PWM_Init+0x188>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d018      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a53      	ldr	r2, [pc, #332]	; (800646c <HAL_TIM_PWM_Init+0x18c>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d013      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a51      	ldr	r2, [pc, #324]	; (8006470 <HAL_TIM_PWM_Init+0x190>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d00e      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a50      	ldr	r2, [pc, #320]	; (8006474 <HAL_TIM_PWM_Init+0x194>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d009      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a4e      	ldr	r2, [pc, #312]	; (8006478 <HAL_TIM_PWM_Init+0x198>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d004      	beq.n	800634c <HAL_TIM_PWM_Init+0x6c>
 8006342:	f240 5113 	movw	r1, #1299	; 0x513
 8006346:	484d      	ldr	r0, [pc, #308]	; (800647c <HAL_TIM_PWM_Init+0x19c>)
 8006348:	f7fb fec8 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d014      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b10      	cmp	r3, #16
 800635a:	d010      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b20      	cmp	r3, #32
 8006362:	d00c      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	d008      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b60      	cmp	r3, #96	; 0x60
 8006372:	d004      	beq.n	800637e <HAL_TIM_PWM_Init+0x9e>
 8006374:	f240 5114 	movw	r1, #1300	; 0x514
 8006378:	4840      	ldr	r0, [pc, #256]	; (800647c <HAL_TIM_PWM_Init+0x19c>)
 800637a:	f7fb feaf 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00e      	beq.n	80063a4 <HAL_TIM_PWM_Init+0xc4>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638e:	d009      	beq.n	80063a4 <HAL_TIM_PWM_Init+0xc4>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006398:	d004      	beq.n	80063a4 <HAL_TIM_PWM_Init+0xc4>
 800639a:	f240 5115 	movw	r1, #1301	; 0x515
 800639e:	4837      	ldr	r0, [pc, #220]	; (800647c <HAL_TIM_PWM_Init+0x19c>)
 80063a0:	f7fb fe9c 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d008      	beq.n	80063be <HAL_TIM_PWM_Init+0xde>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	2b80      	cmp	r3, #128	; 0x80
 80063b2:	d004      	beq.n	80063be <HAL_TIM_PWM_Init+0xde>
 80063b4:	f240 5116 	movw	r1, #1302	; 0x516
 80063b8:	4830      	ldr	r0, [pc, #192]	; (800647c <HAL_TIM_PWM_Init+0x19c>)
 80063ba:	f7fb fe8f 	bl	80020dc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d111      	bne.n	80063ee <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f001 fdd2 	bl	8007f7c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a27      	ldr	r2, [pc, #156]	; (8006480 <HAL_TIM_PWM_Init+0x1a0>)
 80063e4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2202      	movs	r2, #2
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f001 fa11 	bl	8007828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40000c00 	.word	0x40000c00
 8006474:	40001000 	.word	0x40001000
 8006478:	40001400 	.word	0x40001400
 800647c:	0800f0cc 	.word	0x0800f0cc
 8006480:	08006485 	.word	0x08006485

08006484 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
	...

08006498 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a8a      	ldr	r2, [pc, #552]	; (80066d0 <HAL_TIM_PWM_Start+0x238>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d10b      	bne.n	80064c4 <HAL_TIM_PWM_Start+0x2c>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d062      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d05f      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b08      	cmp	r3, #8
 80064bc:	d05c      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b0c      	cmp	r3, #12
 80064c2:	d059      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a82      	ldr	r2, [pc, #520]	; (80066d4 <HAL_TIM_PWM_Start+0x23c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d10b      	bne.n	80064e6 <HAL_TIM_PWM_Start+0x4e>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d051      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d04e      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d04b      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b0c      	cmp	r3, #12
 80064e4:	d048      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ee:	d10b      	bne.n	8006508 <HAL_TIM_PWM_Start+0x70>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d040      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d03d      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d03a      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d037      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a72      	ldr	r2, [pc, #456]	; (80066d8 <HAL_TIM_PWM_Start+0x240>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10b      	bne.n	800652a <HAL_TIM_PWM_Start+0x92>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d02f      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b04      	cmp	r3, #4
 800651c:	d02c      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d029      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b0c      	cmp	r3, #12
 8006528:	d026      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a6b      	ldr	r2, [pc, #428]	; (80066dc <HAL_TIM_PWM_Start+0x244>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10b      	bne.n	800654c <HAL_TIM_PWM_Start+0xb4>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d01e      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b04      	cmp	r3, #4
 800653e:	d01b      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b08      	cmp	r3, #8
 8006544:	d018      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b0c      	cmp	r3, #12
 800654a:	d015      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a63      	ldr	r2, [pc, #396]	; (80066e0 <HAL_TIM_PWM_Start+0x248>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d10b      	bne.n	800656e <HAL_TIM_PWM_Start+0xd6>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00d      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b04      	cmp	r3, #4
 8006560:	d00a      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b08      	cmp	r3, #8
 8006566:	d007      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b0c      	cmp	r3, #12
 800656c:	d004      	beq.n	8006578 <HAL_TIM_PWM_Start+0xe0>
 800656e:	f240 5199 	movw	r1, #1433	; 0x599
 8006572:	485c      	ldr	r0, [pc, #368]	; (80066e4 <HAL_TIM_PWM_Start+0x24c>)
 8006574:	f7fb fdb2 	bl	80020dc <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <HAL_TIM_PWM_Start+0xfa>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006584:	b2db      	uxtb	r3, r3
 8006586:	2b01      	cmp	r3, #1
 8006588:	bf14      	ite	ne
 800658a:	2301      	movne	r3, #1
 800658c:	2300      	moveq	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	e022      	b.n	80065d8 <HAL_TIM_PWM_Start+0x140>
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	2b04      	cmp	r3, #4
 8006596:	d109      	bne.n	80065ac <HAL_TIM_PWM_Start+0x114>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	bf14      	ite	ne
 80065a4:	2301      	movne	r3, #1
 80065a6:	2300      	moveq	r3, #0
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	e015      	b.n	80065d8 <HAL_TIM_PWM_Start+0x140>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d109      	bne.n	80065c6 <HAL_TIM_PWM_Start+0x12e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e008      	b.n	80065d8 <HAL_TIM_PWM_Start+0x140>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	bf14      	ite	ne
 80065d2:	2301      	movne	r3, #1
 80065d4:	2300      	moveq	r3, #0
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e072      	b.n	80066c6 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_TIM_PWM_Start+0x158>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ee:	e013      	b.n	8006618 <HAL_TIM_PWM_Start+0x180>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d104      	bne.n	8006600 <HAL_TIM_PWM_Start+0x168>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065fe:	e00b      	b.n	8006618 <HAL_TIM_PWM_Start+0x180>
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	2b08      	cmp	r3, #8
 8006604:	d104      	bne.n	8006610 <HAL_TIM_PWM_Start+0x178>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800660e:	e003      	b.n	8006618 <HAL_TIM_PWM_Start+0x180>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2201      	movs	r2, #1
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f001 fc4b 	bl	8007ebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <HAL_TIM_PWM_Start+0x238>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d004      	beq.n	800663a <HAL_TIM_PWM_Start+0x1a2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a27      	ldr	r2, [pc, #156]	; (80066d4 <HAL_TIM_PWM_Start+0x23c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d101      	bne.n	800663e <HAL_TIM_PWM_Start+0x1a6>
 800663a:	2301      	movs	r3, #1
 800663c:	e000      	b.n	8006640 <HAL_TIM_PWM_Start+0x1a8>
 800663e:	2300      	movs	r3, #0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006652:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1d      	ldr	r2, [pc, #116]	; (80066d0 <HAL_TIM_PWM_Start+0x238>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d018      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1f8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <HAL_TIM_PWM_Start+0x23c>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1f8>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006670:	d00e      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1f8>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_TIM_PWM_Start+0x240>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1f8>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <HAL_TIM_PWM_Start+0x244>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_TIM_PWM_Start+0x1f8>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <HAL_TIM_PWM_Start+0x248>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d111      	bne.n	80066b4 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 0307 	and.w	r3, r3, #7
 800669a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b06      	cmp	r3, #6
 80066a0:	d010      	beq.n	80066c4 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0201 	orr.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b2:	e007      	b.n	80066c4 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0201 	orr.w	r2, r2, #1
 80066c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40012c00 	.word	0x40012c00
 80066d4:	40013400 	.word	0x40013400
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	0800f0cc 	.word	0x0800f0cc

080066e8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e192      	b.n	8006a22 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a7d      	ldr	r2, [pc, #500]	; (80068f8 <HAL_TIM_Encoder_Init+0x210>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01d      	beq.n	8006742 <HAL_TIM_Encoder_Init+0x5a>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a7c      	ldr	r2, [pc, #496]	; (80068fc <HAL_TIM_Encoder_Init+0x214>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d018      	beq.n	8006742 <HAL_TIM_Encoder_Init+0x5a>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006718:	d013      	beq.n	8006742 <HAL_TIM_Encoder_Init+0x5a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a78      	ldr	r2, [pc, #480]	; (8006900 <HAL_TIM_Encoder_Init+0x218>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d00e      	beq.n	8006742 <HAL_TIM_Encoder_Init+0x5a>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a76      	ldr	r2, [pc, #472]	; (8006904 <HAL_TIM_Encoder_Init+0x21c>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d009      	beq.n	8006742 <HAL_TIM_Encoder_Init+0x5a>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a75      	ldr	r2, [pc, #468]	; (8006908 <HAL_TIM_Encoder_Init+0x220>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d004      	beq.n	8006742 <HAL_TIM_Encoder_Init+0x5a>
 8006738:	f640 318e 	movw	r1, #2958	; 0xb8e
 800673c:	4873      	ldr	r0, [pc, #460]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 800673e:	f7fb fccd 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d014      	beq.n	8006774 <HAL_TIM_Encoder_Init+0x8c>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2b10      	cmp	r3, #16
 8006750:	d010      	beq.n	8006774 <HAL_TIM_Encoder_Init+0x8c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	2b20      	cmp	r3, #32
 8006758:	d00c      	beq.n	8006774 <HAL_TIM_Encoder_Init+0x8c>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b40      	cmp	r3, #64	; 0x40
 8006760:	d008      	beq.n	8006774 <HAL_TIM_Encoder_Init+0x8c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	2b60      	cmp	r3, #96	; 0x60
 8006768:	d004      	beq.n	8006774 <HAL_TIM_Encoder_Init+0x8c>
 800676a:	f640 318f 	movw	r1, #2959	; 0xb8f
 800676e:	4867      	ldr	r0, [pc, #412]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 8006770:	f7fb fcb4 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d00e      	beq.n	800679a <HAL_TIM_Encoder_Init+0xb2>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006784:	d009      	beq.n	800679a <HAL_TIM_Encoder_Init+0xb2>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678e:	d004      	beq.n	800679a <HAL_TIM_Encoder_Init+0xb2>
 8006790:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8006794:	485d      	ldr	r0, [pc, #372]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 8006796:	f7fb fca1 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d008      	beq.n	80067b4 <HAL_TIM_Encoder_Init+0xcc>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d004      	beq.n	80067b4 <HAL_TIM_Encoder_Init+0xcc>
 80067aa:	f640 3191 	movw	r1, #2961	; 0xb91
 80067ae:	4857      	ldr	r0, [pc, #348]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 80067b0:	f7fb fc94 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d00c      	beq.n	80067d6 <HAL_TIM_Encoder_Init+0xee>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d008      	beq.n	80067d6 <HAL_TIM_Encoder_Init+0xee>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d004      	beq.n	80067d6 <HAL_TIM_Encoder_Init+0xee>
 80067cc:	f640 3192 	movw	r1, #2962	; 0xb92
 80067d0:	484e      	ldr	r0, [pc, #312]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 80067d2:	f7fb fc83 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d00c      	beq.n	80067f8 <HAL_TIM_Encoder_Init+0x110>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d008      	beq.n	80067f8 <HAL_TIM_Encoder_Init+0x110>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	2b03      	cmp	r3, #3
 80067ec:	d004      	beq.n	80067f8 <HAL_TIM_Encoder_Init+0x110>
 80067ee:	f640 3193 	movw	r1, #2963	; 0xb93
 80067f2:	4846      	ldr	r0, [pc, #280]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 80067f4:	f7fb fc72 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d00c      	beq.n	800681a <HAL_TIM_Encoder_Init+0x132>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d008      	beq.n	800681a <HAL_TIM_Encoder_Init+0x132>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	2b03      	cmp	r3, #3
 800680e:	d004      	beq.n	800681a <HAL_TIM_Encoder_Init+0x132>
 8006810:	f640 3194 	movw	r1, #2964	; 0xb94
 8006814:	483d      	ldr	r0, [pc, #244]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 8006816:	f7fb fc61 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d008      	beq.n	8006834 <HAL_TIM_Encoder_Init+0x14c>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b02      	cmp	r3, #2
 8006828:	d004      	beq.n	8006834 <HAL_TIM_Encoder_Init+0x14c>
 800682a:	f640 3195 	movw	r1, #2965	; 0xb95
 800682e:	4837      	ldr	r0, [pc, #220]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 8006830:	f7fb fc54 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d008      	beq.n	800684e <HAL_TIM_Encoder_Init+0x166>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d004      	beq.n	800684e <HAL_TIM_Encoder_Init+0x166>
 8006844:	f640 3196 	movw	r1, #2966	; 0xb96
 8006848:	4830      	ldr	r0, [pc, #192]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 800684a:	f7fb fc47 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d010      	beq.n	8006878 <HAL_TIM_Encoder_Init+0x190>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	2b04      	cmp	r3, #4
 800685c:	d00c      	beq.n	8006878 <HAL_TIM_Encoder_Init+0x190>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	2b08      	cmp	r3, #8
 8006864:	d008      	beq.n	8006878 <HAL_TIM_Encoder_Init+0x190>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b0c      	cmp	r3, #12
 800686c:	d004      	beq.n	8006878 <HAL_TIM_Encoder_Init+0x190>
 800686e:	f640 3197 	movw	r1, #2967	; 0xb97
 8006872:	4826      	ldr	r0, [pc, #152]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 8006874:	f7fb fc32 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_TIM_Encoder_Init+0x1ba>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	69db      	ldr	r3, [r3, #28]
 8006884:	2b04      	cmp	r3, #4
 8006886:	d00c      	beq.n	80068a2 <HAL_TIM_Encoder_Init+0x1ba>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d008      	beq.n	80068a2 <HAL_TIM_Encoder_Init+0x1ba>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b0c      	cmp	r3, #12
 8006896:	d004      	beq.n	80068a2 <HAL_TIM_Encoder_Init+0x1ba>
 8006898:	f640 3198 	movw	r1, #2968	; 0xb98
 800689c:	481b      	ldr	r0, [pc, #108]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 800689e:	f7fb fc1d 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d904      	bls.n	80068b4 <HAL_TIM_Encoder_Init+0x1cc>
 80068aa:	f640 3199 	movw	r1, #2969	; 0xb99
 80068ae:	4817      	ldr	r0, [pc, #92]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 80068b0:	f7fb fc14 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	6a1b      	ldr	r3, [r3, #32]
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d904      	bls.n	80068c6 <HAL_TIM_Encoder_Init+0x1de>
 80068bc:	f640 319a 	movw	r1, #2970	; 0xb9a
 80068c0:	4812      	ldr	r0, [pc, #72]	; (800690c <HAL_TIM_Encoder_Init+0x224>)
 80068c2:	f7fb fc0b 	bl	80020dc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d120      	bne.n	8006914 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 fb4e 	bl	8007f7c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a09      	ldr	r2, [pc, #36]	; (8006910 <HAL_TIM_Encoder_Init+0x228>)
 80068ec:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	e00d      	b.n	8006914 <HAL_TIM_Encoder_Init+0x22c>
 80068f8:	40012c00 	.word	0x40012c00
 80068fc:	40013400 	.word	0x40013400
 8006900:	40000400 	.word	0x40000400
 8006904:	40000800 	.word	0x40000800
 8006908:	40000c00 	.word	0x40000c00
 800690c:	0800f0cc 	.word	0x0800f0cc
 8006910:	080022e9 	.word	0x080022e9
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2202      	movs	r2, #2
 8006918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	6812      	ldr	r2, [r2, #0]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692a:	f023 0307 	bic.w	r3, r3, #7
 800692e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f000 ff74 	bl	8007828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006968:	f023 0303 	bic.w	r3, r3, #3
 800696c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	689a      	ldr	r2, [r3, #8]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	4313      	orrs	r3, r2
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4313      	orrs	r3, r2
 800697e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006986:	f023 030c 	bic.w	r3, r3, #12
 800698a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68da      	ldr	r2, [r3, #12]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	021b      	lsls	r3, r3, #8
 80069a2:	4313      	orrs	r3, r2
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	011a      	lsls	r2, r3, #4
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	031b      	lsls	r3, r3, #12
 80069b6:	4313      	orrs	r3, r2
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80069c4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	4313      	orrs	r3, r2
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	693a      	ldr	r2, [r7, #16]
 80069e6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a3c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006a44:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a4c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006a54:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a5d      	ldr	r2, [pc, #372]	; (8006bd0 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d01d      	beq.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a5b      	ldr	r2, [pc, #364]	; (8006bd4 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d018      	beq.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a72:	d013      	beq.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a57      	ldr	r2, [pc, #348]	; (8006bd8 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00e      	beq.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a56      	ldr	r2, [pc, #344]	; (8006bdc <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d009      	beq.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a54      	ldr	r2, [pc, #336]	; (8006be0 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d004      	beq.n	8006a9c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a92:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006a96:	4853      	ldr	r0, [pc, #332]	; (8006be4 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006a98:	f7fb fb20 	bl	80020dc <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d110      	bne.n	8006ac4 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d102      	bne.n	8006aae <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aa8:	7b7b      	ldrb	r3, [r7, #13]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d001      	beq.n	8006ab2 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e089      	b.n	8006bc6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ac2:	e031      	b.n	8006b28 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d110      	bne.n	8006aec <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d102      	bne.n	8006ad6 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ad0:	7b3b      	ldrb	r3, [r7, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e075      	b.n	8006bc6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aea:	e01d      	b.n	8006b28 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d108      	bne.n	8006b04 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006af2:	7bbb      	ldrb	r3, [r7, #14]
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d105      	bne.n	8006b04 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006af8:	7b7b      	ldrb	r3, [r7, #13]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d102      	bne.n	8006b04 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006afe:	7b3b      	ldrb	r3, [r7, #12]
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d001      	beq.n	8006b08 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e05e      	b.n	8006bc6 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_TIM_Encoder_Start_IT+0x10a>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d010      	beq.n	8006b56 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006b34:	e01f      	b.n	8006b76 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f9bc 	bl	8007ebc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0202 	orr.w	r2, r2, #2
 8006b52:	60da      	str	r2, [r3, #12]
      break;
 8006b54:	e02e      	b.n	8006bb4 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	2104      	movs	r1, #4
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 f9ac 	bl	8007ebc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	68da      	ldr	r2, [r3, #12]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0204 	orr.w	r2, r2, #4
 8006b72:	60da      	str	r2, [r3, #12]
      break;
 8006b74:	e01e      	b.n	8006bb4 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f99c 	bl	8007ebc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	2104      	movs	r1, #4
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 f995 	bl	8007ebc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0202 	orr.w	r2, r2, #2
 8006ba0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68da      	ldr	r2, [r3, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f042 0204 	orr.w	r2, r2, #4
 8006bb0:	60da      	str	r2, [r3, #12]
      break;
 8006bb2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40013400 	.word	0x40013400
 8006bd8:	40000400 	.word	0x40000400
 8006bdc:	40000800 	.word	0x40000800
 8006be0:	40000c00 	.word	0x40000c00
 8006be4:	0800f0cc 	.word	0x0800f0cc

08006be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d128      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d121      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0202 	mvn.w	r2, #2
 8006c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f003 0303 	and.w	r3, r3, #3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
 8006c34:	e009      	b.n	8006c4a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0304 	and.w	r3, r3, #4
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d128      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	d121      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0204 	mvn.w	r2, #4
 8006c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
 8006c94:	e009      	b.n	8006caa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d128      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b08      	cmp	r3, #8
 8006cca:	d121      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0208 	mvn.w	r2, #8
 8006cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2204      	movs	r2, #4
 8006cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f003 0303 	and.w	r3, r3, #3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
 8006cf4:	e009      	b.n	8006d0a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b10      	cmp	r3, #16
 8006d1c:	d128      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b10      	cmp	r3, #16
 8006d2a:	d121      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0210 	mvn.w	r2, #16
 8006d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2208      	movs	r2, #8
 8006d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d005      	beq.n	8006d56 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
 8006d54:	e009      	b.n	8006d6a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d110      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d109      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0201 	mvn.w	r2, #1
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b80      	cmp	r3, #128	; 0x80
 8006dac:	d110      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d109      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dda:	2b40      	cmp	r3, #64	; 0x40
 8006ddc:	d110      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de8:	2b40      	cmp	r3, #64	; 0x40
 8006dea:	d109      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0320 	and.w	r3, r3, #32
 8006e0a:	2b20      	cmp	r3, #32
 8006e0c:	d110      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0320 	and.w	r3, r3, #32
 8006e18:	2b20      	cmp	r3, #32
 8006e1a:	d109      	bne.n	8006e30 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0220 	mvn.w	r2, #32
 8006e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d010      	beq.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d00d      	beq.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d00a      	beq.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	d007      	beq.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b3c      	cmp	r3, #60	; 0x3c
 8006e60:	d004      	beq.n	8006e6c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e62:	f241 0127 	movw	r1, #4135	; 0x1027
 8006e66:	4890      	ldr	r0, [pc, #576]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e68:	f7fb f938 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b60      	cmp	r3, #96	; 0x60
 8006e72:	d008      	beq.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b70      	cmp	r3, #112	; 0x70
 8006e7a:	d004      	beq.n	8006e86 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006e7c:	f241 0128 	movw	r1, #4136	; 0x1028
 8006e80:	4889      	ldr	r0, [pc, #548]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e82:	f7fb f92b 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d008      	beq.n	8006ea0 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006e96:	f241 0129 	movw	r1, #4137	; 0x1029
 8006e9a:	4883      	ldr	r0, [pc, #524]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e9c:	f7fb f91e 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d008      	beq.n	8006eba <HAL_TIM_PWM_ConfigChannel+0x82>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d004      	beq.n	8006eba <HAL_TIM_PWM_ConfigChannel+0x82>
 8006eb0:	f241 012a 	movw	r1, #4138	; 0x102a
 8006eb4:	487c      	ldr	r0, [pc, #496]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006eb6:	f7fb f911 	bl	80020dc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d101      	bne.n	8006ec8 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e145      	b.n	8007154 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b0c      	cmp	r3, #12
 8006ed4:	f200 8138 	bhi.w	8007148 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f15 	.word	0x08006f15
 8006ee4:	08007149 	.word	0x08007149
 8006ee8:	08007149 	.word	0x08007149
 8006eec:	08007149 	.word	0x08007149
 8006ef0:	08006f9b 	.word	0x08006f9b
 8006ef4:	08007149 	.word	0x08007149
 8006ef8:	08007149 	.word	0x08007149
 8006efc:	08007149 	.word	0x08007149
 8006f00:	08007023 	.word	0x08007023
 8006f04:	08007149 	.word	0x08007149
 8006f08:	08007149 	.word	0x08007149
 8006f0c:	08007149 	.word	0x08007149
 8006f10:	080070c1 	.word	0x080070c1
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a64      	ldr	r2, [pc, #400]	; (80070ac <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d01d      	beq.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a63      	ldr	r2, [pc, #396]	; (80070b0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d018      	beq.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f30:	d013      	beq.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a5f      	ldr	r2, [pc, #380]	; (80070b4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d00e      	beq.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a5d      	ldr	r2, [pc, #372]	; (80070b8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d009      	beq.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a5c      	ldr	r2, [pc, #368]	; (80070bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d004      	beq.n	8006f5a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006f50:	f241 0134 	movw	r1, #4148	; 0x1034
 8006f54:	4854      	ldr	r0, [pc, #336]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006f56:	f7fb f8c1 	bl	80020dc <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fcdb 	bl	800791c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	699a      	ldr	r2, [r3, #24]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f042 0208 	orr.w	r2, r2, #8
 8006f74:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0204 	bic.w	r2, r2, #4
 8006f84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6999      	ldr	r1, [r3, #24]
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	430a      	orrs	r2, r1
 8006f96:	619a      	str	r2, [r3, #24]
      break;
 8006f98:	e0d7      	b.n	800714a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a43      	ldr	r2, [pc, #268]	; (80070ac <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a41      	ldr	r2, [pc, #260]	; (80070b0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d018      	beq.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fb6:	d013      	beq.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a3d      	ldr	r2, [pc, #244]	; (80070b4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d00e      	beq.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a3c      	ldr	r2, [pc, #240]	; (80070b8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d009      	beq.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a3a      	ldr	r2, [pc, #232]	; (80070bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d004      	beq.n	8006fe0 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006fd6:	f241 0145 	movw	r1, #4165	; 0x1045
 8006fda:	4833      	ldr	r0, [pc, #204]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006fdc:	f7fb f87e 	bl	80020dc <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 fd32 	bl	8007a50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ffa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800700a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6999      	ldr	r1, [r3, #24]
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	021a      	lsls	r2, r3, #8
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	430a      	orrs	r2, r1
 800701e:	619a      	str	r2, [r3, #24]
      break;
 8007020:	e093      	b.n	800714a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a21      	ldr	r2, [pc, #132]	; (80070ac <HAL_TIM_PWM_ConfigChannel+0x274>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d01d      	beq.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x230>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1f      	ldr	r2, [pc, #124]	; (80070b0 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d018      	beq.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x230>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703e:	d013      	beq.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x230>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00e      	beq.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x230>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a1a      	ldr	r2, [pc, #104]	; (80070b8 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d009      	beq.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x230>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a18      	ldr	r2, [pc, #96]	; (80070bc <HAL_TIM_PWM_ConfigChannel+0x284>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d004      	beq.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x230>
 800705e:	f241 0156 	movw	r1, #4182	; 0x1056
 8007062:	4811      	ldr	r0, [pc, #68]	; (80070a8 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007064:	f7fb f83a 	bl	80020dc <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fd8c 	bl	8007b8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	69da      	ldr	r2, [r3, #28]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0208 	orr.w	r2, r2, #8
 8007082:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	69da      	ldr	r2, [r3, #28]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f022 0204 	bic.w	r2, r2, #4
 8007092:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	69d9      	ldr	r1, [r3, #28]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	691a      	ldr	r2, [r3, #16]
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	61da      	str	r2, [r3, #28]
      break;
 80070a6:	e050      	b.n	800714a <HAL_TIM_PWM_ConfigChannel+0x312>
 80070a8:	0800f0cc 	.word	0x0800f0cc
 80070ac:	40012c00 	.word	0x40012c00
 80070b0:	40013400 	.word	0x40013400
 80070b4:	40000400 	.word	0x40000400
 80070b8:	40000800 	.word	0x40000800
 80070bc:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a25      	ldr	r2, [pc, #148]	; (800715c <HAL_TIM_PWM_ConfigChannel+0x324>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d01d      	beq.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a24      	ldr	r2, [pc, #144]	; (8007160 <HAL_TIM_PWM_ConfigChannel+0x328>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d018      	beq.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070dc:	d013      	beq.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a20      	ldr	r2, [pc, #128]	; (8007164 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00e      	beq.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1e      	ldr	r2, [pc, #120]	; (8007168 <HAL_TIM_PWM_ConfigChannel+0x330>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d009      	beq.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1d      	ldr	r2, [pc, #116]	; (800716c <HAL_TIM_PWM_ConfigChannel+0x334>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d004      	beq.n	8007106 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80070fc:	f241 0167 	movw	r1, #4199	; 0x1067
 8007100:	481b      	ldr	r0, [pc, #108]	; (8007170 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8007102:	f7fa ffeb 	bl	80020dc <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	4618      	mov	r0, r3
 800710e:	f000 fddb 	bl	8007cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69da      	ldr	r2, [r3, #28]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69da      	ldr	r2, [r3, #28]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	69d9      	ldr	r1, [r3, #28]
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	021a      	lsls	r2, r3, #8
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	61da      	str	r2, [r3, #28]
      break;
 8007146:	e000      	b.n	800714a <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8007148:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40013400 	.word	0x40013400
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	0800f0cc 	.word	0x0800f0cc

08007174 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_TIM_ConfigClockSource+0x18>
 8007188:	2302      	movs	r3, #2
 800718a:	e2f5      	b.n	8007778 <HAL_TIM_ConfigClockSource+0x604>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a4:	d029      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ae:	d024      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d020      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d01c      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	d018      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b30      	cmp	r3, #48	; 0x30
 80071ce:	d014      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b40      	cmp	r3, #64	; 0x40
 80071d6:	d010      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b50      	cmp	r3, #80	; 0x50
 80071de:	d00c      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b60      	cmp	r3, #96	; 0x60
 80071e6:	d008      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b70      	cmp	r3, #112	; 0x70
 80071ee:	d004      	beq.n	80071fa <HAL_TIM_ConfigClockSource+0x86>
 80071f0:	f241 4132 	movw	r1, #5170	; 0x1432
 80071f4:	487c      	ldr	r0, [pc, #496]	; (80073e8 <HAL_TIM_ConfigClockSource+0x274>)
 80071f6:	f7fa ff71 	bl	80020dc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007208:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007210:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007222:	f000 80f1 	beq.w	8007408 <HAL_TIM_ConfigClockSource+0x294>
 8007226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800722a:	f200 8299 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 800722e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007232:	d02d      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0x11c>
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	f200 8292 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 800723c:	2b70      	cmp	r3, #112	; 0x70
 800723e:	d05d      	beq.n	80072fc <HAL_TIM_ConfigClockSource+0x188>
 8007240:	2b70      	cmp	r3, #112	; 0x70
 8007242:	f200 828d 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 8007246:	2b60      	cmp	r3, #96	; 0x60
 8007248:	f000 81a5 	beq.w	8007596 <HAL_TIM_ConfigClockSource+0x422>
 800724c:	2b60      	cmp	r3, #96	; 0x60
 800724e:	f200 8287 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 8007252:	2b50      	cmp	r3, #80	; 0x50
 8007254:	f000 8149 	beq.w	80074ea <HAL_TIM_ConfigClockSource+0x376>
 8007258:	2b50      	cmp	r3, #80	; 0x50
 800725a:	f200 8281 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	f000 81fc 	beq.w	800765c <HAL_TIM_ConfigClockSource+0x4e8>
 8007264:	2b40      	cmp	r3, #64	; 0x40
 8007266:	f200 827b 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 800726a:	2b30      	cmp	r3, #48	; 0x30
 800726c:	f000 824c 	beq.w	8007708 <HAL_TIM_ConfigClockSource+0x594>
 8007270:	2b30      	cmp	r3, #48	; 0x30
 8007272:	f200 8275 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 8007276:	2b20      	cmp	r3, #32
 8007278:	f000 8246 	beq.w	8007708 <HAL_TIM_ConfigClockSource+0x594>
 800727c:	2b20      	cmp	r3, #32
 800727e:	f200 826f 	bhi.w	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 8240 	beq.w	8007708 <HAL_TIM_ConfigClockSource+0x594>
 8007288:	2b10      	cmp	r3, #16
 800728a:	f000 823d 	beq.w	8007708 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800728e:	e267      	b.n	8007760 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a55      	ldr	r2, [pc, #340]	; (80073ec <HAL_TIM_ConfigClockSource+0x278>)
 8007296:	4293      	cmp	r3, r2
 8007298:	f000 8264 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a53      	ldr	r2, [pc, #332]	; (80073f0 <HAL_TIM_ConfigClockSource+0x27c>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	f000 825e 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b0:	f000 8258 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a4e      	ldr	r2, [pc, #312]	; (80073f4 <HAL_TIM_ConfigClockSource+0x280>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	f000 8252 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a4c      	ldr	r2, [pc, #304]	; (80073f8 <HAL_TIM_ConfigClockSource+0x284>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	f000 824c 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a4a      	ldr	r2, [pc, #296]	; (80073fc <HAL_TIM_ConfigClockSource+0x288>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	f000 8246 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a48      	ldr	r2, [pc, #288]	; (8007400 <HAL_TIM_ConfigClockSource+0x28c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	f000 8240 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a46      	ldr	r2, [pc, #280]	; (8007404 <HAL_TIM_ConfigClockSource+0x290>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f000 823a 	beq.w	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
 80072f0:	f241 413e 	movw	r1, #5182	; 0x143e
 80072f4:	483c      	ldr	r0, [pc, #240]	; (80073e8 <HAL_TIM_ConfigClockSource+0x274>)
 80072f6:	f7fa fef1 	bl	80020dc <assert_failed>
      break;
 80072fa:	e233      	b.n	8007764 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a3a      	ldr	r2, [pc, #232]	; (80073ec <HAL_TIM_ConfigClockSource+0x278>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d01d      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x1ce>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a39      	ldr	r2, [pc, #228]	; (80073f0 <HAL_TIM_ConfigClockSource+0x27c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d018      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x1ce>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007318:	d013      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x1ce>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a35      	ldr	r2, [pc, #212]	; (80073f4 <HAL_TIM_ConfigClockSource+0x280>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d00e      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x1ce>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a33      	ldr	r2, [pc, #204]	; (80073f8 <HAL_TIM_ConfigClockSource+0x284>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d009      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x1ce>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a32      	ldr	r2, [pc, #200]	; (80073fc <HAL_TIM_ConfigClockSource+0x288>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d004      	beq.n	8007342 <HAL_TIM_ConfigClockSource+0x1ce>
 8007338:	f241 4145 	movw	r1, #5189	; 0x1445
 800733c:	482a      	ldr	r0, [pc, #168]	; (80073e8 <HAL_TIM_ConfigClockSource+0x274>)
 800733e:	f7fa fecd 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d013      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x1fe>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007352:	d00e      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x1fe>
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800735c:	d009      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x1fe>
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007366:	d004      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x1fe>
 8007368:	f241 4148 	movw	r1, #5192	; 0x1448
 800736c:	481e      	ldr	r0, [pc, #120]	; (80073e8 <HAL_TIM_ConfigClockSource+0x274>)
 800736e:	f7fa feb5 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800737a:	d014      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x232>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d010      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x232>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00c      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x232>
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b02      	cmp	r3, #2
 8007392:	d008      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x232>
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b0a      	cmp	r3, #10
 800739a:	d004      	beq.n	80073a6 <HAL_TIM_ConfigClockSource+0x232>
 800739c:	f241 4149 	movw	r1, #5193	; 0x1449
 80073a0:	4811      	ldr	r0, [pc, #68]	; (80073e8 <HAL_TIM_ConfigClockSource+0x274>)
 80073a2:	f7fa fe9b 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d904      	bls.n	80073b8 <HAL_TIM_ConfigClockSource+0x244>
 80073ae:	f241 414a 	movw	r1, #5194	; 0x144a
 80073b2:	480d      	ldr	r0, [pc, #52]	; (80073e8 <HAL_TIM_ConfigClockSource+0x274>)
 80073b4:	f7fa fe92 	bl	80020dc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6899      	ldr	r1, [r3, #8]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f000 fd59 	bl	8007e7e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	609a      	str	r2, [r3, #8]
      break;
 80073e4:	e1bf      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
 80073e6:	bf00      	nop
 80073e8:	0800f0cc 	.word	0x0800f0cc
 80073ec:	40012c00 	.word	0x40012c00
 80073f0:	40013400 	.word	0x40013400
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40001000 	.word	0x40001000
 8007404:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a8d      	ldr	r2, [pc, #564]	; (8007644 <HAL_TIM_ConfigClockSource+0x4d0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d01d      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x2da>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a8c      	ldr	r2, [pc, #560]	; (8007648 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d018      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x2da>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d013      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x2da>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a88      	ldr	r2, [pc, #544]	; (800764c <HAL_TIM_ConfigClockSource+0x4d8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00e      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x2da>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a86      	ldr	r2, [pc, #536]	; (8007650 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d009      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x2da>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a85      	ldr	r2, [pc, #532]	; (8007654 <HAL_TIM_ConfigClockSource+0x4e0>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d004      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x2da>
 8007444:	f241 415d 	movw	r1, #5213	; 0x145d
 8007448:	4883      	ldr	r0, [pc, #524]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 800744a:	f7fa fe47 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d013      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x30a>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	d00e      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x30a>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007468:	d009      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x30a>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007472:	d004      	beq.n	800747e <HAL_TIM_ConfigClockSource+0x30a>
 8007474:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8007478:	4877      	ldr	r0, [pc, #476]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 800747a:	f7fa fe2f 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007486:	d014      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x33e>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d010      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x33e>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x33e>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d008      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x33e>
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b0a      	cmp	r3, #10
 80074a6:	d004      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x33e>
 80074a8:	f241 4161 	movw	r1, #5217	; 0x1461
 80074ac:	486a      	ldr	r0, [pc, #424]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074ae:	f7fa fe15 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	2b0f      	cmp	r3, #15
 80074b8:	d904      	bls.n	80074c4 <HAL_TIM_ConfigClockSource+0x350>
 80074ba:	f241 4162 	movw	r1, #5218	; 0x1462
 80074be:	4866      	ldr	r0, [pc, #408]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074c0:	f7fa fe0c 	bl	80020dc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	6899      	ldr	r1, [r3, #8]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	f000 fcd3 	bl	8007e7e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689a      	ldr	r2, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074e6:	609a      	str	r2, [r3, #8]
      break;
 80074e8:	e13d      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a55      	ldr	r2, [pc, #340]	; (8007644 <HAL_TIM_ConfigClockSource+0x4d0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d01d      	beq.n	8007530 <HAL_TIM_ConfigClockSource+0x3bc>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a53      	ldr	r2, [pc, #332]	; (8007648 <HAL_TIM_ConfigClockSource+0x4d4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d018      	beq.n	8007530 <HAL_TIM_ConfigClockSource+0x3bc>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007506:	d013      	beq.n	8007530 <HAL_TIM_ConfigClockSource+0x3bc>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a4f      	ldr	r2, [pc, #316]	; (800764c <HAL_TIM_ConfigClockSource+0x4d8>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d00e      	beq.n	8007530 <HAL_TIM_ConfigClockSource+0x3bc>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a4e      	ldr	r2, [pc, #312]	; (8007650 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d009      	beq.n	8007530 <HAL_TIM_ConfigClockSource+0x3bc>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a4c      	ldr	r2, [pc, #304]	; (8007654 <HAL_TIM_ConfigClockSource+0x4e0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d004      	beq.n	8007530 <HAL_TIM_ConfigClockSource+0x3bc>
 8007526:	f241 4171 	movw	r1, #5233	; 0x1471
 800752a:	484b      	ldr	r0, [pc, #300]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 800752c:	f7fa fdd6 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007538:	d014      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x3f0>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d010      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x3f0>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00c      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x3f0>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d008      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x3f0>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b0a      	cmp	r3, #10
 8007558:	d004      	beq.n	8007564 <HAL_TIM_ConfigClockSource+0x3f0>
 800755a:	f241 4174 	movw	r1, #5236	; 0x1474
 800755e:	483e      	ldr	r0, [pc, #248]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007560:	f7fa fdbc 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b0f      	cmp	r3, #15
 800756a:	d904      	bls.n	8007576 <HAL_TIM_ConfigClockSource+0x402>
 800756c:	f241 4175 	movw	r1, #5237	; 0x1475
 8007570:	4839      	ldr	r0, [pc, #228]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007572:	f7fa fdb3 	bl	80020dc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6818      	ldr	r0, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	461a      	mov	r2, r3
 8007584:	f000 fc04 	bl	8007d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2150      	movs	r1, #80	; 0x50
 800758e:	4618      	mov	r0, r3
 8007590:	f000 fc5b 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 8007594:	e0e7      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a2a      	ldr	r2, [pc, #168]	; (8007644 <HAL_TIM_ConfigClockSource+0x4d0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d01d      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x468>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a28      	ldr	r2, [pc, #160]	; (8007648 <HAL_TIM_ConfigClockSource+0x4d4>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d018      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x468>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b2:	d013      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x468>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a24      	ldr	r2, [pc, #144]	; (800764c <HAL_TIM_ConfigClockSource+0x4d8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d00e      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x468>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a23      	ldr	r2, [pc, #140]	; (8007650 <HAL_TIM_ConfigClockSource+0x4dc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d009      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x468>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a21      	ldr	r2, [pc, #132]	; (8007654 <HAL_TIM_ConfigClockSource+0x4e0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d004      	beq.n	80075dc <HAL_TIM_ConfigClockSource+0x468>
 80075d2:	f241 4181 	movw	r1, #5249	; 0x1481
 80075d6:	4820      	ldr	r0, [pc, #128]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075d8:	f7fa fd80 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e4:	d014      	beq.n	8007610 <HAL_TIM_ConfigClockSource+0x49c>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d010      	beq.n	8007610 <HAL_TIM_ConfigClockSource+0x49c>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00c      	beq.n	8007610 <HAL_TIM_ConfigClockSource+0x49c>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d008      	beq.n	8007610 <HAL_TIM_ConfigClockSource+0x49c>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b0a      	cmp	r3, #10
 8007604:	d004      	beq.n	8007610 <HAL_TIM_ConfigClockSource+0x49c>
 8007606:	f241 4184 	movw	r1, #5252	; 0x1484
 800760a:	4813      	ldr	r0, [pc, #76]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 800760c:	f7fa fd66 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	2b0f      	cmp	r3, #15
 8007616:	d904      	bls.n	8007622 <HAL_TIM_ConfigClockSource+0x4ae>
 8007618:	f241 4185 	movw	r1, #5253	; 0x1485
 800761c:	480e      	ldr	r0, [pc, #56]	; (8007658 <HAL_TIM_ConfigClockSource+0x4e4>)
 800761e:	f7fa fd5d 	bl	80020dc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	6859      	ldr	r1, [r3, #4]
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	461a      	mov	r2, r3
 8007630:	f000 fbdc 	bl	8007dec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2160      	movs	r1, #96	; 0x60
 800763a:	4618      	mov	r0, r3
 800763c:	f000 fc05 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 8007640:	e091      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40000400 	.word	0x40000400
 8007650:	40000800 	.word	0x40000800
 8007654:	40000c00 	.word	0x40000c00
 8007658:	0800f0cc 	.word	0x0800f0cc
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a47      	ldr	r2, [pc, #284]	; (8007780 <HAL_TIM_ConfigClockSource+0x60c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d01d      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x52e>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a46      	ldr	r2, [pc, #280]	; (8007784 <HAL_TIM_ConfigClockSource+0x610>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d018      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x52e>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007678:	d013      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x52e>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a42      	ldr	r2, [pc, #264]	; (8007788 <HAL_TIM_ConfigClockSource+0x614>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00e      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x52e>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a40      	ldr	r2, [pc, #256]	; (800778c <HAL_TIM_ConfigClockSource+0x618>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d009      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x52e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a3f      	ldr	r2, [pc, #252]	; (8007790 <HAL_TIM_ConfigClockSource+0x61c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d004      	beq.n	80076a2 <HAL_TIM_ConfigClockSource+0x52e>
 8007698:	f241 4191 	movw	r1, #5265	; 0x1491
 800769c:	483d      	ldr	r0, [pc, #244]	; (8007794 <HAL_TIM_ConfigClockSource+0x620>)
 800769e:	f7fa fd1d 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076aa:	d014      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x562>
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d010      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x562>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00c      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x562>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d008      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x562>
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2b0a      	cmp	r3, #10
 80076ca:	d004      	beq.n	80076d6 <HAL_TIM_ConfigClockSource+0x562>
 80076cc:	f241 4194 	movw	r1, #5268	; 0x1494
 80076d0:	4830      	ldr	r0, [pc, #192]	; (8007794 <HAL_TIM_ConfigClockSource+0x620>)
 80076d2:	f7fa fd03 	bl	80020dc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	2b0f      	cmp	r3, #15
 80076dc:	d904      	bls.n	80076e8 <HAL_TIM_ConfigClockSource+0x574>
 80076de:	f241 4195 	movw	r1, #5269	; 0x1495
 80076e2:	482c      	ldr	r0, [pc, #176]	; (8007794 <HAL_TIM_ConfigClockSource+0x620>)
 80076e4:	f7fa fcfa 	bl	80020dc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6818      	ldr	r0, [r3, #0]
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	6859      	ldr	r1, [r3, #4]
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	461a      	mov	r2, r3
 80076f6:	f000 fb4b 	bl	8007d90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2140      	movs	r1, #64	; 0x40
 8007700:	4618      	mov	r0, r3
 8007702:	f000 fba2 	bl	8007e4a <TIM_ITRx_SetConfig>
      break;
 8007706:	e02e      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a1c      	ldr	r2, [pc, #112]	; (8007780 <HAL_TIM_ConfigClockSource+0x60c>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01d      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x5da>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a1b      	ldr	r2, [pc, #108]	; (8007784 <HAL_TIM_ConfigClockSource+0x610>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x5da>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007724:	d013      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x5da>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a17      	ldr	r2, [pc, #92]	; (8007788 <HAL_TIM_ConfigClockSource+0x614>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x5da>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a15      	ldr	r2, [pc, #84]	; (800778c <HAL_TIM_ConfigClockSource+0x618>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x5da>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a14      	ldr	r2, [pc, #80]	; (8007790 <HAL_TIM_ConfigClockSource+0x61c>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_TIM_ConfigClockSource+0x5da>
 8007744:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8007748:	4812      	ldr	r0, [pc, #72]	; (8007794 <HAL_TIM_ConfigClockSource+0x620>)
 800774a:	f7fa fcc7 	bl	80020dc <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f000 fb76 	bl	8007e4a <TIM_ITRx_SetConfig>
        break;
 800775e:	e002      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007760:	bf00      	nop
 8007762:	e000      	b.n	8007766 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007764:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40012c00 	.word	0x40012c00
 8007784:	40013400 	.word	0x40013400
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	0800f0cc 	.word	0x0800f0cc

08007798 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bc80      	pop	{r7}
 80077a8:	4770      	bx	lr

080077aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b083      	sub	sp, #12
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077b2:	bf00      	nop
 80077b4:	370c      	adds	r7, #12
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr

080077ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077d6:	bf00      	nop
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bc80      	pop	{r7}
 80077f0:	4770      	bx	lr

080077f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077f2:	b480      	push	{r7}
 80077f4:	b083      	sub	sp, #12
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	bc80      	pop	{r7}
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr

08007828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a33      	ldr	r2, [pc, #204]	; (8007908 <TIM_Base_SetConfig+0xe0>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d013      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a32      	ldr	r2, [pc, #200]	; (800790c <TIM_Base_SetConfig+0xe4>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d00f      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784e:	d00b      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4a2f      	ldr	r2, [pc, #188]	; (8007910 <TIM_Base_SetConfig+0xe8>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d007      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4a2e      	ldr	r2, [pc, #184]	; (8007914 <TIM_Base_SetConfig+0xec>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d003      	beq.n	8007868 <TIM_Base_SetConfig+0x40>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a2d      	ldr	r2, [pc, #180]	; (8007918 <TIM_Base_SetConfig+0xf0>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d108      	bne.n	800787a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	4a22      	ldr	r2, [pc, #136]	; (8007908 <TIM_Base_SetConfig+0xe0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d013      	beq.n	80078aa <TIM_Base_SetConfig+0x82>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a21      	ldr	r2, [pc, #132]	; (800790c <TIM_Base_SetConfig+0xe4>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00f      	beq.n	80078aa <TIM_Base_SetConfig+0x82>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007890:	d00b      	beq.n	80078aa <TIM_Base_SetConfig+0x82>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a1e      	ldr	r2, [pc, #120]	; (8007910 <TIM_Base_SetConfig+0xe8>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d007      	beq.n	80078aa <TIM_Base_SetConfig+0x82>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a1d      	ldr	r2, [pc, #116]	; (8007914 <TIM_Base_SetConfig+0xec>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_Base_SetConfig+0x82>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a1c      	ldr	r2, [pc, #112]	; (8007918 <TIM_Base_SetConfig+0xf0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d108      	bne.n	80078bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a09      	ldr	r2, [pc, #36]	; (8007908 <TIM_Base_SetConfig+0xe0>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_Base_SetConfig+0xc8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <TIM_Base_SetConfig+0xe4>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d103      	bne.n	80078f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	691a      	ldr	r2, [r3, #16]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	615a      	str	r2, [r3, #20]
}
 80078fe:	bf00      	nop
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	bc80      	pop	{r7}
 8007906:	4770      	bx	lr
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00

0800791c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b086      	sub	sp, #24
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	f023 0201 	bic.w	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f023 0303 	bic.w	r3, r3, #3
 8007952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4313      	orrs	r3, r2
 800795c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	f023 0302 	bic.w	r3, r3, #2
 8007964:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	4313      	orrs	r3, r2
 800796e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	4a34      	ldr	r2, [pc, #208]	; (8007a44 <TIM_OC1_SetConfig+0x128>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d003      	beq.n	8007980 <TIM_OC1_SetConfig+0x64>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a33      	ldr	r2, [pc, #204]	; (8007a48 <TIM_OC1_SetConfig+0x12c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d119      	bne.n	80079b4 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d008      	beq.n	800799a <TIM_OC1_SetConfig+0x7e>
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2b08      	cmp	r3, #8
 800798e:	d004      	beq.n	800799a <TIM_OC1_SetConfig+0x7e>
 8007990:	f641 2141 	movw	r1, #6721	; 0x1a41
 8007994:	482d      	ldr	r0, [pc, #180]	; (8007a4c <TIM_OC1_SetConfig+0x130>)
 8007996:	f7fa fba1 	bl	80020dc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f023 0308 	bic.w	r3, r3, #8
 80079a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0304 	bic.w	r3, r3, #4
 80079b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a23      	ldr	r2, [pc, #140]	; (8007a44 <TIM_OC1_SetConfig+0x128>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d003      	beq.n	80079c4 <TIM_OC1_SetConfig+0xa8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a22      	ldr	r2, [pc, #136]	; (8007a48 <TIM_OC1_SetConfig+0x12c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d12d      	bne.n	8007a20 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079cc:	d008      	beq.n	80079e0 <TIM_OC1_SetConfig+0xc4>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d004      	beq.n	80079e0 <TIM_OC1_SetConfig+0xc4>
 80079d6:	f641 214e 	movw	r1, #6734	; 0x1a4e
 80079da:	481c      	ldr	r0, [pc, #112]	; (8007a4c <TIM_OC1_SetConfig+0x130>)
 80079dc:	f7fa fb7e 	bl	80020dc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e8:	d008      	beq.n	80079fc <TIM_OC1_SetConfig+0xe0>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <TIM_OC1_SetConfig+0xe0>
 80079f2:	f641 214f 	movw	r1, #6735	; 0x1a4f
 80079f6:	4815      	ldr	r0, [pc, #84]	; (8007a4c <TIM_OC1_SetConfig+0x130>)
 80079f8:	f7fa fb70 	bl	80020dc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	695b      	ldr	r3, [r3, #20]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	621a      	str	r2, [r3, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	3718      	adds	r7, #24
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	40012c00 	.word	0x40012c00
 8007a48:	40013400 	.word	0x40013400
 8007a4c:	0800f0cc 	.word	0x0800f0cc

08007a50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a1b      	ldr	r3, [r3, #32]
 8007a5e:	f023 0210 	bic.w	r2, r3, #16
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	021b      	lsls	r3, r3, #8
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0320 	bic.w	r3, r3, #32
 8007a9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a35      	ldr	r2, [pc, #212]	; (8007b80 <TIM_OC2_SetConfig+0x130>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d003      	beq.n	8007ab8 <TIM_OC2_SetConfig+0x68>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a34      	ldr	r2, [pc, #208]	; (8007b84 <TIM_OC2_SetConfig+0x134>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d11a      	bne.n	8007aee <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d008      	beq.n	8007ad2 <TIM_OC2_SetConfig+0x82>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d004      	beq.n	8007ad2 <TIM_OC2_SetConfig+0x82>
 8007ac8:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007acc:	482e      	ldr	r0, [pc, #184]	; (8007b88 <TIM_OC2_SetConfig+0x138>)
 8007ace:	f7fa fb05 	bl	80020dc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	011b      	lsls	r3, r3, #4
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a23      	ldr	r2, [pc, #140]	; (8007b80 <TIM_OC2_SetConfig+0x130>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d003      	beq.n	8007afe <TIM_OC2_SetConfig+0xae>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a22      	ldr	r2, [pc, #136]	; (8007b84 <TIM_OC2_SetConfig+0x134>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d12f      	bne.n	8007b5e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b06:	d008      	beq.n	8007b1a <TIM_OC2_SetConfig+0xca>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d004      	beq.n	8007b1a <TIM_OC2_SetConfig+0xca>
 8007b10:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007b14:	481c      	ldr	r0, [pc, #112]	; (8007b88 <TIM_OC2_SetConfig+0x138>)
 8007b16:	f7fa fae1 	bl	80020dc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b22:	d008      	beq.n	8007b36 <TIM_OC2_SetConfig+0xe6>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d004      	beq.n	8007b36 <TIM_OC2_SetConfig+0xe6>
 8007b2c:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007b30:	4815      	ldr	r0, [pc, #84]	; (8007b88 <TIM_OC2_SetConfig+0x138>)
 8007b32:	f7fa fad3 	bl	80020dc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685a      	ldr	r2, [r3, #4]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	621a      	str	r2, [r3, #32]
}
 8007b78:	bf00      	nop
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40013400 	.word	0x40013400
 8007b88:	0800f0cc 	.word	0x0800f0cc

08007b8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a1b      	ldr	r3, [r3, #32]
 8007b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0303 	bic.w	r3, r3, #3
 8007bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a35      	ldr	r2, [pc, #212]	; (8007cbc <TIM_OC3_SetConfig+0x130>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d003      	beq.n	8007bf2 <TIM_OC3_SetConfig+0x66>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a34      	ldr	r2, [pc, #208]	; (8007cc0 <TIM_OC3_SetConfig+0x134>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d11a      	bne.n	8007c28 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <TIM_OC3_SetConfig+0x80>
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	2b08      	cmp	r3, #8
 8007c00:	d004      	beq.n	8007c0c <TIM_OC3_SetConfig+0x80>
 8007c02:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007c06:	482f      	ldr	r0, [pc, #188]	; (8007cc4 <TIM_OC3_SetConfig+0x138>)
 8007c08:	f7fa fa68 	bl	80020dc <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	021b      	lsls	r3, r3, #8
 8007c1a:	697a      	ldr	r2, [r7, #20]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a24      	ldr	r2, [pc, #144]	; (8007cbc <TIM_OC3_SetConfig+0x130>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_OC3_SetConfig+0xac>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a23      	ldr	r2, [pc, #140]	; (8007cc0 <TIM_OC3_SetConfig+0x134>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d12f      	bne.n	8007c98 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c40:	d008      	beq.n	8007c54 <TIM_OC3_SetConfig+0xc8>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d004      	beq.n	8007c54 <TIM_OC3_SetConfig+0xc8>
 8007c4a:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007c4e:	481d      	ldr	r0, [pc, #116]	; (8007cc4 <TIM_OC3_SetConfig+0x138>)
 8007c50:	f7fa fa44 	bl	80020dc <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c5c:	d008      	beq.n	8007c70 <TIM_OC3_SetConfig+0xe4>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d004      	beq.n	8007c70 <TIM_OC3_SetConfig+0xe4>
 8007c66:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007c6a:	4816      	ldr	r0, [pc, #88]	; (8007cc4 <TIM_OC3_SetConfig+0x138>)
 8007c6c:	f7fa fa36 	bl	80020dc <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	011b      	lsls	r3, r3, #4
 8007c86:	693a      	ldr	r2, [r7, #16]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	699b      	ldr	r3, [r3, #24]
 8007c90:	011b      	lsls	r3, r3, #4
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	685a      	ldr	r2, [r3, #4]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	697a      	ldr	r2, [r7, #20]
 8007cb0:	621a      	str	r2, [r3, #32]
}
 8007cb2:	bf00      	nop
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40012c00 	.word	0x40012c00
 8007cc0:	40013400 	.word	0x40013400
 8007cc4:	0800f0cc 	.word	0x0800f0cc

08007cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	69db      	ldr	r3, [r3, #28]
 8007cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	031b      	lsls	r3, r3, #12
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <TIM_OC4_SetConfig+0xbc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d003      	beq.n	8007d30 <TIM_OC4_SetConfig+0x68>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <TIM_OC4_SetConfig+0xc0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d117      	bne.n	8007d60 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d38:	d008      	beq.n	8007d4c <TIM_OC4_SetConfig+0x84>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d004      	beq.n	8007d4c <TIM_OC4_SetConfig+0x84>
 8007d42:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007d46:	4811      	ldr	r0, [pc, #68]	; (8007d8c <TIM_OC4_SetConfig+0xc4>)
 8007d48:	f7fa f9c8 	bl	80020dc <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	695b      	ldr	r3, [r3, #20]
 8007d58:	019b      	lsls	r3, r3, #6
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	621a      	str	r2, [r3, #32]
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	40012c00 	.word	0x40012c00
 8007d88:	40013400 	.word	0x40013400
 8007d8c:	0800f0cc 	.word	0x0800f0cc

08007d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a1b      	ldr	r3, [r3, #32]
 8007da6:	f023 0201 	bic.w	r2, r3, #1
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f023 030a 	bic.w	r3, r3, #10
 8007dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bc80      	pop	{r7}
 8007dea:	4770      	bx	lr

08007dec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	f023 0210 	bic.w	r2, r3, #16
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e16:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	031b      	lsls	r3, r3, #12
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	693a      	ldr	r2, [r7, #16]
 8007e3e:	621a      	str	r2, [r3, #32]
}
 8007e40:	bf00      	nop
 8007e42:	371c      	adds	r7, #28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bc80      	pop	{r7}
 8007e48:	4770      	bx	lr

08007e4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b085      	sub	sp, #20
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
 8007e52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	f043 0307 	orr.w	r3, r3, #7
 8007e6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	609a      	str	r2, [r3, #8]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bc80      	pop	{r7}
 8007e7c:	4770      	bx	lr

08007e7e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b087      	sub	sp, #28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	021a      	lsls	r2, r3, #8
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	609a      	str	r2, [r3, #8]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <TIM_CCxChannelCmd+0xa8>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d018      	beq.n	8007f02 <TIM_CCxChannelCmd+0x46>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4a25      	ldr	r2, [pc, #148]	; (8007f68 <TIM_CCxChannelCmd+0xac>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d014      	beq.n	8007f02 <TIM_CCxChannelCmd+0x46>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ede:	d010      	beq.n	8007f02 <TIM_CCxChannelCmd+0x46>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4a22      	ldr	r2, [pc, #136]	; (8007f6c <TIM_CCxChannelCmd+0xb0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00c      	beq.n	8007f02 <TIM_CCxChannelCmd+0x46>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a21      	ldr	r2, [pc, #132]	; (8007f70 <TIM_CCxChannelCmd+0xb4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d008      	beq.n	8007f02 <TIM_CCxChannelCmd+0x46>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a20      	ldr	r2, [pc, #128]	; (8007f74 <TIM_CCxChannelCmd+0xb8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d004      	beq.n	8007f02 <TIM_CCxChannelCmd+0x46>
 8007ef8:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007efc:	481e      	ldr	r0, [pc, #120]	; (8007f78 <TIM_CCxChannelCmd+0xbc>)
 8007efe:	f7fa f8ed 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d010      	beq.n	8007f2a <TIM_CCxChannelCmd+0x6e>
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d00d      	beq.n	8007f2a <TIM_CCxChannelCmd+0x6e>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d00a      	beq.n	8007f2a <TIM_CCxChannelCmd+0x6e>
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	2b0c      	cmp	r3, #12
 8007f18:	d007      	beq.n	8007f2a <TIM_CCxChannelCmd+0x6e>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b3c      	cmp	r3, #60	; 0x3c
 8007f1e:	d004      	beq.n	8007f2a <TIM_CCxChannelCmd+0x6e>
 8007f20:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007f24:	4814      	ldr	r0, [pc, #80]	; (8007f78 <TIM_CCxChannelCmd+0xbc>)
 8007f26:	f7fa f8d9 	bl	80020dc <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	f003 031f 	and.w	r3, r3, #31
 8007f30:	2201      	movs	r2, #1
 8007f32:	fa02 f303 	lsl.w	r3, r2, r3
 8007f36:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a1a      	ldr	r2, [r3, #32]
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	43db      	mvns	r3, r3
 8007f40:	401a      	ands	r2, r3
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6a1a      	ldr	r2, [r3, #32]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	fa01 f303 	lsl.w	r3, r1, r3
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40013400 	.word	0x40013400
 8007f6c:	40000400 	.word	0x40000400
 8007f70:	40000800 	.word	0x40000800
 8007f74:	40000c00 	.word	0x40000c00
 8007f78:	0800f0cc 	.word	0x0800f0cc

08007f7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a1c      	ldr	r2, [pc, #112]	; (8007ff8 <TIM_ResetCallback+0x7c>)
 8007f88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a1b      	ldr	r2, [pc, #108]	; (8007ffc <TIM_ResetCallback+0x80>)
 8007f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a1a      	ldr	r2, [pc, #104]	; (8008000 <TIM_ResetCallback+0x84>)
 8007f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a19      	ldr	r2, [pc, #100]	; (8008004 <TIM_ResetCallback+0x88>)
 8007fa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a18      	ldr	r2, [pc, #96]	; (8008008 <TIM_ResetCallback+0x8c>)
 8007fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a17      	ldr	r2, [pc, #92]	; (800800c <TIM_ResetCallback+0x90>)
 8007fb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a16      	ldr	r2, [pc, #88]	; (8008010 <TIM_ResetCallback+0x94>)
 8007fb8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a15      	ldr	r2, [pc, #84]	; (8008014 <TIM_ResetCallback+0x98>)
 8007fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a14      	ldr	r2, [pc, #80]	; (8008018 <TIM_ResetCallback+0x9c>)
 8007fc8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a13      	ldr	r2, [pc, #76]	; (800801c <TIM_ResetCallback+0xa0>)
 8007fd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a12      	ldr	r2, [pc, #72]	; (8008020 <TIM_ResetCallback+0xa4>)
 8007fd8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a11      	ldr	r2, [pc, #68]	; (8008024 <TIM_ResetCallback+0xa8>)
 8007fe0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a10      	ldr	r2, [pc, #64]	; (8008028 <TIM_ResetCallback+0xac>)
 8007fe8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bc80      	pop	{r7}
 8007ff4:	4770      	bx	lr
 8007ff6:	bf00      	nop
 8007ff8:	08002071 	.word	0x08002071
 8007ffc:	08007799 	.word	0x08007799
 8008000:	080077f3 	.word	0x080077f3
 8008004:	08007805 	.word	0x08007805
 8008008:	08002029 	.word	0x08002029
 800800c:	080077bd 	.word	0x080077bd
 8008010:	080077ab 	.word	0x080077ab
 8008014:	080077cf 	.word	0x080077cf
 8008018:	080077e1 	.word	0x080077e1
 800801c:	08007817 	.word	0x08007817
 8008020:	08008365 	.word	0x08008365
 8008024:	08008377 	.word	0x08008377
 8008028:	08008389 	.word	0x08008389

0800802c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a5c      	ldr	r2, [pc, #368]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d027      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a5a      	ldr	r2, [pc, #360]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d022      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008052:	d01d      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a56      	ldr	r2, [pc, #344]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d018      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a55      	ldr	r2, [pc, #340]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a53      	ldr	r2, [pc, #332]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00e      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a52      	ldr	r2, [pc, #328]	; (80081c0 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d009      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a50      	ldr	r2, [pc, #320]	; (80081c4 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d004      	beq.n	8008090 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008086:	f240 7186 	movw	r1, #1926	; 0x786
 800808a:	484f      	ldr	r0, [pc, #316]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800808c:	f7fa f826 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d020      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b10      	cmp	r3, #16
 800809e:	d01c      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b20      	cmp	r3, #32
 80080a6:	d018      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b30      	cmp	r3, #48	; 0x30
 80080ae:	d014      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b40      	cmp	r3, #64	; 0x40
 80080b6:	d010      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b50      	cmp	r3, #80	; 0x50
 80080be:	d00c      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b60      	cmp	r3, #96	; 0x60
 80080c6:	d008      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b70      	cmp	r3, #112	; 0x70
 80080ce:	d004      	beq.n	80080da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80080d0:	f240 7187 	movw	r1, #1927	; 0x787
 80080d4:	483c      	ldr	r0, [pc, #240]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80080d6:	f7fa f801 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b80      	cmp	r3, #128	; 0x80
 80080e0:	d008      	beq.n	80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d004      	beq.n	80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80080ea:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80080ee:	4836      	ldr	r0, [pc, #216]	; (80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80080f0:	f7f9 fff4 	bl	80020dc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d101      	bne.n	8008102 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080fe:	2302      	movs	r3, #2
 8008100:	e050      	b.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2202      	movs	r2, #2
 800810e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008128:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a1a      	ldr	r2, [pc, #104]	; (80081ac <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d018      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a19      	ldr	r2, [pc, #100]	; (80081b0 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008158:	d00e      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a15      	ldr	r2, [pc, #84]	; (80081b4 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d009      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a13      	ldr	r2, [pc, #76]	; (80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d004      	beq.n	8008178 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a12      	ldr	r2, [pc, #72]	; (80081bc <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d10c      	bne.n	8008192 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	4313      	orrs	r3, r2
 8008188:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68ba      	ldr	r2, [r7, #8]
 8008190:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	40012c00 	.word	0x40012c00
 80081b0:	40013400 	.word	0x40013400
 80081b4:	40000400 	.word	0x40000400
 80081b8:	40000800 	.word	0x40000800
 80081bc:	40000c00 	.word	0x40000c00
 80081c0:	40001000 	.word	0x40001000
 80081c4:	40001400 	.word	0x40001400
 80081c8:	0800f104 	.word	0x0800f104

080081cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a5e      	ldr	r2, [pc, #376]	; (8008358 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d009      	beq.n	80081f8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a5c      	ldr	r2, [pc, #368]	; (800835c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80081ee:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80081f2:	485b      	ldr	r0, [pc, #364]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081f4:	f7f9 ff72 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008200:	d008      	beq.n	8008214 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d004      	beq.n	8008214 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800820a:	f240 71c4 	movw	r1, #1988	; 0x7c4
 800820e:	4854      	ldr	r0, [pc, #336]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008210:	f7f9 ff64 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800821c:	d008      	beq.n	8008230 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8008226:	f240 71c5 	movw	r1, #1989	; 0x7c5
 800822a:	484d      	ldr	r0, [pc, #308]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800822c:	f7f9 ff56 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d013      	beq.n	8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d00e      	beq.n	8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800824a:	d009      	beq.n	8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008254:	d004      	beq.n	8008260 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8008256:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800825a:	4841      	ldr	r0, [pc, #260]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800825c:	f7f9 ff3e 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2bff      	cmp	r3, #255	; 0xff
 8008266:	d904      	bls.n	8008272 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008268:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800826c:	483c      	ldr	r0, [pc, #240]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800826e:	f7f9 ff35 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827a:	d008      	beq.n	800828e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d004      	beq.n	800828e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008284:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8008288:	4835      	ldr	r0, [pc, #212]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800828a:	f7f9 ff27 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800829e:	d004      	beq.n	80082aa <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80082a0:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80082a4:	482e      	ldr	r0, [pc, #184]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80082a6:	f7f9 ff19 	bl	80020dc <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b2:	d008      	beq.n	80082c6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d004      	beq.n	80082c6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80082bc:	f240 71ca 	movw	r1, #1994	; 0x7ca
 80082c0:	4827      	ldr	r0, [pc, #156]	; (8008360 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80082c2:	f7f9 ff0b 	bl	80020dc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d101      	bne.n	80082d4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80082d0:	2302      	movs	r3, #2
 80082d2:	e03d      	b.n	8008350 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4313      	orrs	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4313      	orrs	r3, r2
 8008312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	4313      	orrs	r3, r2
 800832e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	4313      	orrs	r3, r2
 800833c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40012c00 	.word	0x40012c00
 800835c:	40013400 	.word	0x40013400
 8008360:	0800f104 	.word	0x0800f104

08008364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr

08008376 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008376:	b480      	push	{r7}
 8008378:	b083      	sub	sp, #12
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	bc80      	pop	{r7}
 8008386:	4770      	bx	lr

08008388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	bc80      	pop	{r7}
 8008398:	4770      	bx	lr
	...

0800839c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e0a7      	b.n	80084fe <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	699b      	ldr	r3, [r3, #24]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d02c      	beq.n	8008410 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a53      	ldr	r2, [pc, #332]	; (8008508 <HAL_UART_Init+0x16c>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00e      	beq.n	80083de <HAL_UART_Init+0x42>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a51      	ldr	r2, [pc, #324]	; (800850c <HAL_UART_Init+0x170>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d009      	beq.n	80083de <HAL_UART_Init+0x42>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a50      	ldr	r2, [pc, #320]	; (8008510 <HAL_UART_Init+0x174>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d004      	beq.n	80083de <HAL_UART_Init+0x42>
 80083d4:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80083d8:	484e      	ldr	r0, [pc, #312]	; (8008514 <HAL_UART_Init+0x178>)
 80083da:	f7f9 fe7f 	bl	80020dc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	699b      	ldr	r3, [r3, #24]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d032      	beq.n	800844c <HAL_UART_Init+0xb0>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ee:	d02d      	beq.n	800844c <HAL_UART_Init+0xb0>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083f8:	d028      	beq.n	800844c <HAL_UART_Init+0xb0>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	699b      	ldr	r3, [r3, #24]
 80083fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008402:	d023      	beq.n	800844c <HAL_UART_Init+0xb0>
 8008404:	f240 116d 	movw	r1, #365	; 0x16d
 8008408:	4842      	ldr	r0, [pc, #264]	; (8008514 <HAL_UART_Init+0x178>)
 800840a:	f7f9 fe67 	bl	80020dc <assert_failed>
 800840e:	e01d      	b.n	800844c <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a3c      	ldr	r2, [pc, #240]	; (8008508 <HAL_UART_Init+0x16c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d018      	beq.n	800844c <HAL_UART_Init+0xb0>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a3b      	ldr	r2, [pc, #236]	; (800850c <HAL_UART_Init+0x170>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d013      	beq.n	800844c <HAL_UART_Init+0xb0>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a39      	ldr	r2, [pc, #228]	; (8008510 <HAL_UART_Init+0x174>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00e      	beq.n	800844c <HAL_UART_Init+0xb0>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a39      	ldr	r2, [pc, #228]	; (8008518 <HAL_UART_Init+0x17c>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_UART_Init+0xb0>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a37      	ldr	r2, [pc, #220]	; (800851c <HAL_UART_Init+0x180>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <HAL_UART_Init+0xb0>
 8008442:	f240 1171 	movw	r1, #369	; 0x171
 8008446:	4833      	ldr	r0, [pc, #204]	; (8008514 <HAL_UART_Init+0x178>)
 8008448:	f7f9 fe48 	bl	80020dc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d009      	beq.n	8008468 <HAL_UART_Init+0xcc>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800845c:	d004      	beq.n	8008468 <HAL_UART_Init+0xcc>
 800845e:	f240 1173 	movw	r1, #371	; 0x173
 8008462:	482c      	ldr	r0, [pc, #176]	; (8008514 <HAL_UART_Init+0x178>)
 8008464:	f7f9 fe3a 	bl	80020dc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b00      	cmp	r3, #0
 8008472:	d111      	bne.n	8008498 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fb0d 	bl	8008a9c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4a24      	ldr	r2, [pc, #144]	; (8008520 <HAL_UART_Init+0x184>)
 800848e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2224      	movs	r2, #36	; 0x24
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68da      	ldr	r2, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fd01 	bl	8008eb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	691a      	ldr	r2, [r3, #16]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68da      	ldr	r2, [r3, #12]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2220      	movs	r2, #32
 80084f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40013800 	.word	0x40013800
 800850c:	40004400 	.word	0x40004400
 8008510:	40004800 	.word	0x40004800
 8008514:	0800f140 	.word	0x0800f140
 8008518:	40004c00 	.word	0x40004c00
 800851c:	40005000 	.word	0x40005000
 8008520:	08002571 	.word	0x08002571

08008524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b08a      	sub	sp, #40	; 0x28
 8008528:	af02      	add	r7, sp, #8
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	603b      	str	r3, [r7, #0]
 8008530:	4613      	mov	r3, r2
 8008532:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b20      	cmp	r3, #32
 8008542:	d17c      	bne.n	800863e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_UART_Transmit+0x2c>
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e075      	b.n	8008640 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_UART_Transmit+0x3e>
 800855e:	2302      	movs	r3, #2
 8008560:	e06e      	b.n	8008640 <HAL_UART_Transmit+0x11c>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2221      	movs	r2, #33	; 0x21
 8008574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008578:	f7fa fa80 	bl	8002a7c <HAL_GetTick>
 800857c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	88fa      	ldrh	r2, [r7, #6]
 8008588:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008592:	d108      	bne.n	80085a6 <HAL_UART_Transmit+0x82>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800859c:	2300      	movs	r3, #0
 800859e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	61bb      	str	r3, [r7, #24]
 80085a4:	e003      	b.n	80085ae <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80085b6:	e02a      	b.n	800860e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	2180      	movs	r1, #128	; 0x80
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 faa0 	bl	8008b08 <UART_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e036      	b.n	8008640 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10b      	bne.n	80085f0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	3302      	adds	r3, #2
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	e007      	b.n	8008600 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	781a      	ldrb	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	3301      	adds	r3, #1
 80085fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008604:	b29b      	uxth	r3, r3
 8008606:	3b01      	subs	r3, #1
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008612:	b29b      	uxth	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1cf      	bne.n	80085b8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2200      	movs	r2, #0
 8008620:	2140      	movs	r1, #64	; 0x40
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fa70 	bl	8008b08 <UART_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e006      	b.n	8008640 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2220      	movs	r2, #32
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	e000      	b.n	8008640 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800863e:	2302      	movs	r3, #2
  }
}
 8008640:	4618      	mov	r0, r3
 8008642:	3720      	adds	r7, #32
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	4613      	mov	r3, r2
 8008654:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b20      	cmp	r3, #32
 8008660:	d11d      	bne.n	800869e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <HAL_UART_Receive_IT+0x26>
 8008668:	88fb      	ldrh	r3, [r7, #6]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d101      	bne.n	8008672 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e016      	b.n	80086a0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_UART_Receive_IT+0x38>
 800867c:	2302      	movs	r3, #2
 800867e:	e00f      	b.n	80086a0 <HAL_UART_Receive_IT+0x58>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800868e:	88fb      	ldrh	r3, [r7, #6]
 8008690:	461a      	mov	r2, r3
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fa81 	bl	8008b9c <UART_Start_Receive_IT>
 800869a:	4603      	mov	r3, r0
 800869c:	e000      	b.n	80086a0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800869e:	2302      	movs	r3, #2
  }
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b08a      	sub	sp, #40	; 0x28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	f003 030f 	and.w	r3, r3, #15
 80086d6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10d      	bne.n	80086fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	f003 0320 	and.w	r3, r3, #32
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d008      	beq.n	80086fa <HAL_UART_IRQHandler+0x52>
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	f003 0320 	and.w	r3, r3, #32
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fb34 	bl	8008d60 <UART_Receive_IT>
      return;
 80086f8:	e180      	b.n	80089fc <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f000 80b4 	beq.w	800886a <HAL_UART_IRQHandler+0x1c2>
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d105      	bne.n	8008718 <HAL_UART_IRQHandler+0x70>
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80a9 	beq.w	800886a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <HAL_UART_IRQHandler+0x90>
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008728:	2b00      	cmp	r3, #0
 800872a:	d005      	beq.n	8008738 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008730:	f043 0201 	orr.w	r2, r3, #1
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_UART_IRQHandler+0xb0>
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	f003 0301 	and.w	r3, r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008750:	f043 0202 	orr.w	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875a:	f003 0302 	and.w	r3, r3, #2
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <HAL_UART_IRQHandler+0xd0>
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008770:	f043 0204 	orr.w	r2, r3, #4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00f      	beq.n	80087a2 <HAL_UART_IRQHandler+0xfa>
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <HAL_UART_IRQHandler+0xee>
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879a:	f043 0208 	orr.w	r2, r3, #8
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 8123 	beq.w	80089f2 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <HAL_UART_IRQHandler+0x11e>
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f003 0320 	and.w	r3, r3, #32
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d002      	beq.n	80087c6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 facd 	bl	8008d60 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	695b      	ldr	r3, [r3, #20]
 80087cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	bf14      	ite	ne
 80087d4:	2301      	movne	r3, #1
 80087d6:	2300      	moveq	r3, #0
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d102      	bne.n	80087ee <HAL_UART_IRQHandler+0x146>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d033      	beq.n	8008856 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fa0d 	bl	8008c0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d024      	beq.n	800884c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008810:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	2b00      	cmp	r3, #0
 8008818:	d013      	beq.n	8008842 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881e:	4a79      	ldr	r2, [pc, #484]	; (8008a04 <HAL_UART_IRQHandler+0x35c>)
 8008820:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	4618      	mov	r0, r3
 8008828:	f7fb f8e6 	bl	80039f8 <HAL_DMA_Abort_IT>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d019      	beq.n	8008866 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800883c:	4610      	mov	r0, r2
 800883e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008840:	e011      	b.n	8008866 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884a:	e00c      	b.n	8008866 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008854:	e007      	b.n	8008866 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008864:	e0c5      	b.n	80089f2 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008866:	bf00      	nop
    return;
 8008868:	e0c3      	b.n	80089f2 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886e:	2b01      	cmp	r3, #1
 8008870:	f040 80a3 	bne.w	80089ba <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	f003 0310 	and.w	r3, r3, #16
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 809d 	beq.w	80089ba <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008880:	6a3b      	ldr	r3, [r7, #32]
 8008882:	f003 0310 	and.w	r3, r3, #16
 8008886:	2b00      	cmp	r3, #0
 8008888:	f000 8097 	beq.w	80089ba <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800888c:	2300      	movs	r3, #0
 800888e:	60fb      	str	r3, [r7, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d04f      	beq.n	8008950 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80088ba:	8a3b      	ldrh	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f000 809a 	beq.w	80089f6 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088c6:	8a3a      	ldrh	r2, [r7, #16]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	f080 8094 	bcs.w	80089f6 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	8a3a      	ldrh	r2, [r7, #16]
 80088d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	2b20      	cmp	r3, #32
 80088dc:	d02b      	beq.n	8008936 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68da      	ldr	r2, [r3, #12]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80088ec:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	695a      	ldr	r2, [r3, #20]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0201 	bic.w	r2, r2, #1
 80088fc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	695a      	ldr	r2, [r3, #20]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800890c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0210 	bic.w	r2, r2, #16
 800892a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008930:	4618      	mov	r0, r3
 8008932:	f7fb f827 	bl	8003984 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008942:	b292      	uxth	r2, r2
 8008944:	1a8a      	subs	r2, r1, r2
 8008946:	b292      	uxth	r2, r2
 8008948:	4611      	mov	r1, r2
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800894e:	e052      	b.n	80089f6 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008958:	b29b      	uxth	r3, r3
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d048      	beq.n	80089fa <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8008968:	8a7b      	ldrh	r3, [r7, #18]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d045      	beq.n	80089fa <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800897c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0201 	bic.w	r2, r2, #1
 800898c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0210 	bic.w	r2, r2, #16
 80089aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089b0:	8a7a      	ldrh	r2, [r7, #18]
 80089b2:	4611      	mov	r1, r2
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 80089b8:	e01f      	b.n	80089fa <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80089ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d008      	beq.n	80089d6 <HAL_UART_IRQHandler+0x32e>
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f95e 	bl	8008c90 <UART_Transmit_IT>
    return;
 80089d4:	e012      	b.n	80089fc <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00d      	beq.n	80089fc <HAL_UART_IRQHandler+0x354>
 80089e0:	6a3b      	ldr	r3, [r7, #32]
 80089e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d008      	beq.n	80089fc <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f99f 	bl	8008d2e <UART_EndTransmit_IT>
    return;
 80089f0:	e004      	b.n	80089fc <HAL_UART_IRQHandler+0x354>
    return;
 80089f2:	bf00      	nop
 80089f4:	e002      	b.n	80089fc <HAL_UART_IRQHandler+0x354>
      return;
 80089f6:	bf00      	nop
 80089f8:	e000      	b.n	80089fc <HAL_UART_IRQHandler+0x354>
      return;
 80089fa:	bf00      	nop
  }
}
 80089fc:	3728      	adds	r7, #40	; 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	08008c67 	.word	0x08008c67

08008a08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bc80      	pop	{r7}
 8008a18:	4770      	bx	lr

08008a1a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a1a:	b480      	push	{r7}
 8008a1c:	b083      	sub	sp, #12
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008a22:	bf00      	nop
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bc80      	pop	{r7}
 8008a2a:	4770      	bx	lr

08008a2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a34:	bf00      	nop
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bc80      	pop	{r7}
 8008a3c:	4770      	bx	lr

08008a3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bc80      	pop	{r7}
 8008a60:	4770      	bx	lr

08008a62 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bc80      	pop	{r7}
 8008a84:	4770      	bx	lr

08008a86 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	460b      	mov	r3, r1
 8008a90:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bc80      	pop	{r7}
 8008a9a:	4770      	bx	lr

08008a9c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a0f      	ldr	r2, [pc, #60]	; (8008ae4 <UART_InitCallbacksToDefault+0x48>)
 8008aa8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a0e      	ldr	r2, [pc, #56]	; (8008ae8 <UART_InitCallbacksToDefault+0x4c>)
 8008aae:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a0e      	ldr	r2, [pc, #56]	; (8008aec <UART_InitCallbacksToDefault+0x50>)
 8008ab4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a0d      	ldr	r2, [pc, #52]	; (8008af0 <UART_InitCallbacksToDefault+0x54>)
 8008aba:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a0d      	ldr	r2, [pc, #52]	; (8008af4 <UART_InitCallbacksToDefault+0x58>)
 8008ac0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a0c      	ldr	r2, [pc, #48]	; (8008af8 <UART_InitCallbacksToDefault+0x5c>)
 8008ac6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a0c      	ldr	r2, [pc, #48]	; (8008afc <UART_InitCallbacksToDefault+0x60>)
 8008acc:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a0b      	ldr	r2, [pc, #44]	; (8008b00 <UART_InitCallbacksToDefault+0x64>)
 8008ad2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <UART_InitCallbacksToDefault+0x68>)
 8008ad8:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008ada:	bf00      	nop
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bc80      	pop	{r7}
 8008ae2:	4770      	bx	lr
 8008ae4:	08008a1b 	.word	0x08008a1b
 8008ae8:	08008a09 	.word	0x08008a09
 8008aec:	08008a2d 	.word	0x08008a2d
 8008af0:	08002091 	.word	0x08002091
 8008af4:	08008a3f 	.word	0x08008a3f
 8008af8:	08008a51 	.word	0x08008a51
 8008afc:	08008a63 	.word	0x08008a63
 8008b00:	08008a75 	.word	0x08008a75
 8008b04:	08008a87 	.word	0x08008a87

08008b08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	603b      	str	r3, [r7, #0]
 8008b14:	4613      	mov	r3, r2
 8008b16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b18:	e02c      	b.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b20:	d028      	beq.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d007      	beq.n	8008b38 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b28:	f7f9 ffa8 	bl	8002a7c <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d21d      	bcs.n	8008b74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	695a      	ldr	r2, [r3, #20]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0201 	bic.w	r2, r2, #1
 8008b56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2220      	movs	r2, #32
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b70:	2303      	movs	r3, #3
 8008b72:	e00f      	b.n	8008b94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	bf0c      	ite	eq
 8008b84:	2301      	moveq	r3, #1
 8008b86:	2300      	movne	r3, #0
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	79fb      	ldrb	r3, [r7, #7]
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d0c3      	beq.n	8008b1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	88fa      	ldrh	r2, [r7, #6]
 8008bb4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	88fa      	ldrh	r2, [r7, #6]
 8008bba:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2222      	movs	r2, #34	; 0x22
 8008bc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008be0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	695a      	ldr	r2, [r3, #20]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f042 0201 	orr.w	r2, r2, #1
 8008bf0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68da      	ldr	r2, [r3, #12]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0220 	orr.w	r2, r2, #32
 8008c00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr

08008c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008c24:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	695a      	ldr	r2, [r3, #20]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f022 0201 	bic.w	r2, r2, #1
 8008c34:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d107      	bne.n	8008c4e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68da      	ldr	r2, [r3, #12]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0210 	bic.w	r2, r2, #16
 8008c4c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2220      	movs	r2, #32
 8008c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bc80      	pop	{r7}
 8008c64:	4770      	bx	lr

08008c66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2200      	movs	r2, #0
 8008c78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b21      	cmp	r3, #33	; 0x21
 8008ca2:	d13e      	bne.n	8008d22 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cac:	d114      	bne.n	8008cd8 <UART_Transmit_IT+0x48>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d110      	bne.n	8008cd8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008cca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	1c9a      	adds	r2, r3, #2
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	621a      	str	r2, [r3, #32]
 8008cd6:	e008      	b.n	8008cea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	1c59      	adds	r1, r3, #1
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	6211      	str	r1, [r2, #32]
 8008ce2:	781a      	ldrb	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10f      	bne.n	8008d1e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d0c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d1c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e000      	b.n	8008d24 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d22:	2302      	movs	r3, #2
  }
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc80      	pop	{r7}
 8008d2c:	4770      	bx	lr

08008d2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	68da      	ldr	r2, [r3, #12]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2220      	movs	r2, #32
 8008d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008d56:	2300      	movs	r3, #0
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b22      	cmp	r3, #34	; 0x22
 8008d72:	f040 809b 	bne.w	8008eac <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d7e:	d117      	bne.n	8008db0 <UART_Receive_IT+0x50>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d113      	bne.n	8008db0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d90:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da8:	1c9a      	adds	r2, r3, #2
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	629a      	str	r2, [r3, #40]	; 0x28
 8008dae:	e026      	b.n	8008dfe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008db6:	2300      	movs	r3, #0
 8008db8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dc2:	d007      	beq.n	8008dd4 <UART_Receive_IT+0x74>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10a      	bne.n	8008de2 <UART_Receive_IT+0x82>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d106      	bne.n	8008de2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	701a      	strb	r2, [r3, #0]
 8008de0:	e008      	b.n	8008df4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dee:	b2da      	uxtb	r2, r3
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d14a      	bne.n	8008ea8 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68da      	ldr	r2, [r3, #12]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0220 	bic.w	r2, r2, #32
 8008e20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68da      	ldr	r2, [r3, #12]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008e30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	695a      	ldr	r2, [r3, #20]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f022 0201 	bic.w	r2, r2, #1
 8008e40:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2220      	movs	r2, #32
 8008e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d124      	bne.n	8008e9c <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	68da      	ldr	r2, [r3, #12]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0210 	bic.w	r2, r2, #16
 8008e66:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0310 	and.w	r3, r3, #16
 8008e72:	2b10      	cmp	r3, #16
 8008e74:	d10a      	bne.n	8008e8c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008e94:	4611      	mov	r1, r2
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
 8008e9a:	e003      	b.n	8008ea4 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	e002      	b.n	8008eae <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	e000      	b.n	8008eae <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008eac:	2302      	movs	r3, #2
  }
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3718      	adds	r7, #24
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
	...

08008eb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a5f      	ldr	r2, [pc, #380]	; (8009044 <UART_SetConfig+0x18c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d904      	bls.n	8008ed4 <UART_SetConfig+0x1c>
 8008eca:	f640 6153 	movw	r1, #3667	; 0xe53
 8008ece:	485e      	ldr	r0, [pc, #376]	; (8009048 <UART_SetConfig+0x190>)
 8008ed0:	f7f9 f904 	bl	80020dc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <UART_SetConfig+0x38>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ee4:	d004      	beq.n	8008ef0 <UART_SetConfig+0x38>
 8008ee6:	f640 6154 	movw	r1, #3668	; 0xe54
 8008eea:	4857      	ldr	r0, [pc, #348]	; (8009048 <UART_SetConfig+0x190>)
 8008eec:	f7f9 f8f6 	bl	80020dc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00e      	beq.n	8008f16 <UART_SetConfig+0x5e>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	691b      	ldr	r3, [r3, #16]
 8008efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f00:	d009      	beq.n	8008f16 <UART_SetConfig+0x5e>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	691b      	ldr	r3, [r3, #16]
 8008f06:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008f0a:	d004      	beq.n	8008f16 <UART_SetConfig+0x5e>
 8008f0c:	f640 6155 	movw	r1, #3669	; 0xe55
 8008f10:	484d      	ldr	r0, [pc, #308]	; (8009048 <UART_SetConfig+0x190>)
 8008f12:	f7f9 f8e3 	bl	80020dc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695a      	ldr	r2, [r3, #20]
 8008f1a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d103      	bne.n	8008f2c <UART_SetConfig+0x74>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <UART_SetConfig+0x7e>
 8008f2c:	f640 6156 	movw	r1, #3670	; 0xe56
 8008f30:	4845      	ldr	r0, [pc, #276]	; (8009048 <UART_SetConfig+0x190>)
 8008f32:	f7f9 f8d3 	bl	80020dc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	430a      	orrs	r2, r1
 8008f4a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f68:	f023 030c 	bic.w	r3, r3, #12
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	6812      	ldr	r2, [r2, #0]
 8008f70:	68b9      	ldr	r1, [r7, #8]
 8008f72:	430b      	orrs	r3, r1
 8008f74:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699a      	ldr	r2, [r3, #24]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a2e      	ldr	r2, [pc, #184]	; (800904c <UART_SetConfig+0x194>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d103      	bne.n	8008f9e <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f96:	f7fb feaf 	bl	8004cf8 <HAL_RCC_GetPCLK2Freq>
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	e002      	b.n	8008fa4 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f9e:	f7fb fe97 	bl	8004cd0 <HAL_RCC_GetPCLK1Freq>
 8008fa2:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fa4:	68fa      	ldr	r2, [r7, #12]
 8008fa6:	4613      	mov	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	009a      	lsls	r2, r3, #2
 8008fae:	441a      	add	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fba:	4a25      	ldr	r2, [pc, #148]	; (8009050 <UART_SetConfig+0x198>)
 8008fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	0119      	lsls	r1, r3, #4
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4613      	mov	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4413      	add	r3, r2
 8008fcc:	009a      	lsls	r2, r3, #2
 8008fce:	441a      	add	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fda:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <UART_SetConfig+0x198>)
 8008fdc:	fba3 0302 	umull	r0, r3, r3, r2
 8008fe0:	095b      	lsrs	r3, r3, #5
 8008fe2:	2064      	movs	r0, #100	; 0x64
 8008fe4:	fb00 f303 	mul.w	r3, r0, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	3332      	adds	r3, #50	; 0x32
 8008fee:	4a18      	ldr	r2, [pc, #96]	; (8009050 <UART_SetConfig+0x198>)
 8008ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff4:	095b      	lsrs	r3, r3, #5
 8008ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ffa:	4419      	add	r1, r3
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009a      	lsls	r2, r3, #2
 8009006:	441a      	add	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009012:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <UART_SetConfig+0x198>)
 8009014:	fba3 0302 	umull	r0, r3, r3, r2
 8009018:	095b      	lsrs	r3, r3, #5
 800901a:	2064      	movs	r0, #100	; 0x64
 800901c:	fb00 f303 	mul.w	r3, r0, r3
 8009020:	1ad3      	subs	r3, r2, r3
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	3332      	adds	r3, #50	; 0x32
 8009026:	4a0a      	ldr	r2, [pc, #40]	; (8009050 <UART_SetConfig+0x198>)
 8009028:	fba2 2303 	umull	r2, r3, r2, r3
 800902c:	095b      	lsrs	r3, r3, #5
 800902e:	f003 020f 	and.w	r2, r3, #15
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	440a      	add	r2, r1
 8009038:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800903a:	bf00      	nop
 800903c:	3710      	adds	r7, #16
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	0044aa20 	.word	0x0044aa20
 8009048:	0800f140 	.word	0x0800f140
 800904c:	40013800 	.word	0x40013800
 8009050:	51eb851f 	.word	0x51eb851f

08009054 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 800905e:	491e      	ldr	r1, [pc, #120]	; (80090d8 <BAT_init+0x84>)
 8009060:	2001      	movs	r0, #1
 8009062:	f001 fed5 	bl	800ae10 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8009066:	4a1d      	ldr	r2, [pc, #116]	; (80090dc <BAT_init+0x88>)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 800906c:	4a1c      	ldr	r2, [pc, #112]	; (80090e0 <BAT_init+0x8c>)
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009072:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <BAT_init+0x8c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f107 010c 	add.w	r1, r7, #12
 800907a:	2201      	movs	r2, #1
 800907c:	4618      	mov	r0, r3
 800907e:	f7fc fa39 	bl	80054f4 <HAL_RTC_GetTime>
 8009082:	4603      	mov	r3, r0
 8009084:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 800908c:	7bfb      	ldrb	r3, [r7, #15]
 800908e:	461a      	mov	r2, r3
 8009090:	4914      	ldr	r1, [pc, #80]	; (80090e4 <BAT_init+0x90>)
 8009092:	2003      	movs	r0, #3
 8009094:	f001 febc 	bl	800ae10 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009098:	4b11      	ldr	r3, [pc, #68]	; (80090e0 <BAT_init+0x8c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f107 0108 	add.w	r1, r7, #8
 80090a0:	2201      	movs	r2, #1
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fc fc2a 	bl	80058fc <HAL_RTC_GetDate>
 80090a8:	4603      	mov	r3, r0
 80090aa:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80090b2:	7bfb      	ldrb	r3, [r7, #15]
 80090b4:	461a      	mov	r2, r3
 80090b6:	490c      	ldr	r1, [pc, #48]	; (80090e8 <BAT_init+0x94>)
 80090b8:	2003      	movs	r0, #3
 80090ba:	f001 fea9 	bl	800ae10 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <BAT_init+0x98>)
 80090c0:	f107 020c 	add.w	r2, r7, #12
 80090c4:	6812      	ldr	r2, [r2, #0]
 80090c6:	4611      	mov	r1, r2
 80090c8:	8019      	strh	r1, [r3, #0]
 80090ca:	3302      	adds	r3, #2
 80090cc:	0c12      	lsrs	r2, r2, #16
 80090ce:	701a      	strb	r2, [r3, #0]

  return;
 80090d0:	bf00      	nop
}
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	0800f17c 	.word	0x0800f17c
 80090dc:	2000021c 	.word	0x2000021c
 80090e0:	20000220 	.word	0x20000220
 80090e4:	0800f198 	.word	0x0800f198
 80090e8:	0800f1c8 	.word	0x0800f1c8
 80090ec:	20000224 	.word	0x20000224

080090f0 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 80090f0:	b590      	push	{r4, r7, lr}
 80090f2:	b089      	sub	sp, #36	; 0x24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80090f8:	4b48      	ldr	r3, [pc, #288]	; (800921c <BAT_update+0x12c>)
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f107 0110 	add.w	r1, r7, #16
 8009100:	2201      	movs	r2, #1
 8009102:	4618      	mov	r0, r3
 8009104:	f7fc f9f6 	bl	80054f4 <HAL_RTC_GetTime>
 8009108:	4603      	mov	r3, r0
 800910a:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 800910c:	7ffb      	ldrb	r3, [r7, #31]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d005      	beq.n	800911e <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 8009112:	7ffb      	ldrb	r3, [r7, #31]
 8009114:	461a      	mov	r2, r3
 8009116:	4942      	ldr	r1, [pc, #264]	; (8009220 <BAT_update+0x130>)
 8009118:	2003      	movs	r0, #3
 800911a:	f001 fe79 	bl	800ae10 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800911e:	4b3f      	ldr	r3, [pc, #252]	; (800921c <BAT_update+0x12c>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f107 010c 	add.w	r1, r7, #12
 8009126:	2201      	movs	r2, #1
 8009128:	4618      	mov	r0, r3
 800912a:	f7fc fbe7 	bl	80058fc <HAL_RTC_GetDate>
 800912e:	4603      	mov	r3, r0
 8009130:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 8009132:	7ffb      	ldrb	r3, [r7, #31]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d005      	beq.n	8009144 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 8009138:	7ffb      	ldrb	r3, [r7, #31]
 800913a:	461a      	mov	r2, r3
 800913c:	4939      	ldr	r1, [pc, #228]	; (8009224 <BAT_update+0x134>)
 800913e:	2003      	movs	r0, #3
 8009140:	f001 fe66 	bl	800ae10 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 8009144:	f107 0310 	add.w	r3, r7, #16
 8009148:	4618      	mov	r0, r3
 800914a:	f002 fba4 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 800914e:	4604      	mov	r4, r0
 8009150:	4835      	ldr	r0, [pc, #212]	; (8009228 <BAT_update+0x138>)
 8009152:	f002 fba0 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 8009156:	4603      	mov	r3, r0
 8009158:	1ae3      	subs	r3, r4, r3
 800915a:	2b09      	cmp	r3, #9
 800915c:	d959      	bls.n	8009212 <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 800915e:	4b32      	ldr	r3, [pc, #200]	; (8009228 <BAT_update+0x138>)
 8009160:	f107 0210 	add.w	r2, r7, #16
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	4611      	mov	r1, r2
 8009168:	8019      	strh	r1, [r3, #0]
 800916a:	3302      	adds	r3, #2
 800916c:	0c12      	lsrs	r2, r2, #16
 800916e:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 8009170:	4b2e      	ldr	r3, [pc, #184]	; (800922c <BAT_update+0x13c>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4618      	mov	r0, r3
 8009176:	f7f9 fe51 	bl	8002e1c <HAL_ADC_Start>
 800917a:	4603      	mov	r3, r0
 800917c:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 800917e:	7ffb      	ldrb	r3, [r7, #31]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 8009184:	7ffb      	ldrb	r3, [r7, #31]
 8009186:	461a      	mov	r2, r3
 8009188:	4929      	ldr	r1, [pc, #164]	; (8009230 <BAT_update+0x140>)
 800918a:	2003      	movs	r0, #3
 800918c:	f001 fe40 	bl	800ae10 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 8009190:	4b26      	ldr	r3, [pc, #152]	; (800922c <BAT_update+0x13c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f04f 31ff 	mov.w	r1, #4294967295
 8009198:	4618      	mov	r0, r3
 800919a:	f7f9 ff05 	bl	8002fa8 <HAL_ADC_PollForConversion>
 800919e:	4603      	mov	r3, r0
 80091a0:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80091a2:	7ffb      	ldrb	r3, [r7, #31]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d005      	beq.n	80091b4 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 80091a8:	7ffb      	ldrb	r3, [r7, #31]
 80091aa:	461a      	mov	r2, r3
 80091ac:	4921      	ldr	r1, [pc, #132]	; (8009234 <BAT_update+0x144>)
 80091ae:	2003      	movs	r0, #3
 80091b0:	f001 fe2e 	bl	800ae10 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 80091b4:	4b1d      	ldr	r3, [pc, #116]	; (800922c <BAT_update+0x13c>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fa f817 	bl	80031ec <HAL_ADC_GetValue>
 80091be:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 80091c0:	69b8      	ldr	r0, [r7, #24]
 80091c2:	f7f7 fd83 	bl	8000ccc <__aeabi_ui2f>
 80091c6:	4603      	mov	r3, r0
 80091c8:	491b      	ldr	r1, [pc, #108]	; (8009238 <BAT_update+0x148>)
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7f7 fdd6 	bl	8000d7c <__aeabi_fmul>
 80091d0:	4603      	mov	r3, r0
 80091d2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 fe84 	bl	8000ee4 <__aeabi_fdiv>
 80091dc:	4603      	mov	r3, r0
 80091de:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 80091e0:	4916      	ldr	r1, [pc, #88]	; (800923c <BAT_update+0x14c>)
 80091e2:	6978      	ldr	r0, [r7, #20]
 80091e4:	f7f7 fdca 	bl	8000d7c <__aeabi_fmul>
 80091e8:	4603      	mov	r3, r0
 80091ea:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 80091ec:	4914      	ldr	r1, [pc, #80]	; (8009240 <BAT_update+0x150>)
 80091ee:	6978      	ldr	r0, [r7, #20]
 80091f0:	f7f7 fdc4 	bl	8000d7c <__aeabi_fmul>
 80091f4:	4603      	mov	r3, r0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f7 ff36 	bl	8001068 <__aeabi_f2uiz>
 80091fc:	4602      	mov	r2, r0
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	490e      	ldr	r1, [pc, #56]	; (8009244 <BAT_update+0x154>)
 800920a:	2000      	movs	r0, #0
 800920c:	f001 fe00 	bl	800ae10 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009210:	bf00      	nop
 8009212:	bf00      	nop
}
 8009214:	3724      	adds	r7, #36	; 0x24
 8009216:	46bd      	mov	sp, r7
 8009218:	bd90      	pop	{r4, r7, pc}
 800921a:	bf00      	nop
 800921c:	20000220 	.word	0x20000220
 8009220:	0800f198 	.word	0x0800f198
 8009224:	0800f1c8 	.word	0x0800f1c8
 8009228:	20000224 	.word	0x20000224
 800922c:	2000021c 	.word	0x2000021c
 8009230:	0800f1f8 	.word	0x0800f1f8
 8009234:	0800f224 	.word	0x0800f224
 8009238:	40533333 	.word	0x40533333
 800923c:	41300000 	.word	0x41300000
 8009240:	447a0000 	.word	0x447a0000
 8009244:	0800f25c 	.word	0x0800f25c

08009248 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	4603      	mov	r3, r0
 8009250:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8009252:	2301      	movs	r3, #1
 8009254:	81fb      	strh	r3, [r7, #14]
 8009256:	e030      	b.n	80092ba <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8009258:	89fb      	ldrh	r3, [r7, #14]
 800925a:	b29b      	uxth	r3, r3
 800925c:	461a      	mov	r2, r3
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	4013      	ands	r3, r2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d006      	beq.n	8009274 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8009266:	4b1a      	ldr	r3, [pc, #104]	; (80092d0 <BLU_sendCommand+0x88>)
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	4a19      	ldr	r2, [pc, #100]	; (80092d0 <BLU_sendCommand+0x88>)
 800926c:	f043 0302 	orr.w	r3, r3, #2
 8009270:	60d3      	str	r3, [r2, #12]
 8009272:	e005      	b.n	8009280 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8009274:	4b16      	ldr	r3, [pc, #88]	; (80092d0 <BLU_sendCommand+0x88>)
 8009276:	68db      	ldr	r3, [r3, #12]
 8009278:	4a15      	ldr	r2, [pc, #84]	; (80092d0 <BLU_sendCommand+0x88>)
 800927a:	f023 0302 	bic.w	r3, r3, #2
 800927e:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <BLU_sendCommand+0x8c>)
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	4a13      	ldr	r2, [pc, #76]	; (80092d4 <BLU_sendCommand+0x8c>)
 8009286:	f043 0310 	orr.w	r3, r3, #16
 800928a:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800928c:	2005      	movs	r0, #5
 800928e:	f002 fac1 	bl	800b814 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8009292:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <BLU_sendCommand+0x8c>)
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	4a0f      	ldr	r2, [pc, #60]	; (80092d4 <BLU_sendCommand+0x8c>)
 8009298:	f023 0310 	bic.w	r3, r3, #16
 800929c:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800929e:	2005      	movs	r0, #5
 80092a0:	f002 fab8 	bl	800b814 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <BLU_sendCommand+0x8c>)
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	4a0a      	ldr	r2, [pc, #40]	; (80092d4 <BLU_sendCommand+0x8c>)
 80092aa:	f043 0310 	orr.w	r3, r3, #16
 80092ae:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80092b0:	89fb      	ldrh	r3, [r7, #14]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	005b      	lsls	r3, r3, #1
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	81fb      	strh	r3, [r7, #14]
 80092ba:	89fb      	ldrh	r3, [r7, #14]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2bff      	cmp	r3, #255	; 0xff
 80092c0:	d9ca      	bls.n	8009258 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 80092c2:	2010      	movs	r0, #16
 80092c4:	f002 faa6 	bl	800b814 <UTI_delayUs>

  return;
 80092c8:	bf00      	nop
}
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	40011000 	.word	0x40011000
 80092d4:	40010800 	.word	0x40010800

080092d8 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
 80092e4:	e00b      	b.n	80092fe <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	461a      	mov	r2, r3
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4413      	add	r3, r2
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80092f4:	7bfb      	ldrb	r3, [r7, #15]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	3301      	adds	r3, #1
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	73fb      	strb	r3, [r7, #15]
 80092fe:	7bfb      	ldrb	r3, [r7, #15]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b06      	cmp	r3, #6
 8009304:	d9ef      	bls.n	80092e6 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8009306:	4b2e      	ldr	r3, [pc, #184]	; (80093c0 <BLU_readData+0xe8>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	4a2d      	ldr	r2, [pc, #180]	; (80093c0 <BLU_readData+0xe8>)
 800930c:	f023 0308 	bic.w	r3, r3, #8
 8009310:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8009312:	2001      	movs	r0, #1
 8009314:	f7ff ff98 	bl	8009248 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8009318:	2042      	movs	r0, #66	; 0x42
 800931a:	f7ff ff95 	bl	8009248 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]
 8009322:	e03f      	b.n	80093a4 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8009324:	2301      	movs	r3, #1
 8009326:	81bb      	strh	r3, [r7, #12]
 8009328:	e030      	b.n	800938c <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800932a:	4b26      	ldr	r3, [pc, #152]	; (80093c4 <BLU_readData+0xec>)
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	4a25      	ldr	r2, [pc, #148]	; (80093c4 <BLU_readData+0xec>)
 8009330:	f043 0310 	orr.w	r3, r3, #16
 8009334:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8009336:	2005      	movs	r0, #5
 8009338:	f002 fa6c 	bl	800b814 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 800933c:	4b21      	ldr	r3, [pc, #132]	; (80093c4 <BLU_readData+0xec>)
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	4a20      	ldr	r2, [pc, #128]	; (80093c4 <BLU_readData+0xec>)
 8009342:	f023 0310 	bic.w	r3, r3, #16
 8009346:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8009348:	2005      	movs	r0, #5
 800934a:	f002 fa63 	bl	800b814 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800934e:	4b1d      	ldr	r3, [pc, #116]	; (80093c4 <BLU_readData+0xec>)
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	4a1c      	ldr	r2, [pc, #112]	; (80093c4 <BLU_readData+0xec>)
 8009354:	f043 0310 	orr.w	r3, r3, #16
 8009358:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800935a:	4b19      	ldr	r3, [pc, #100]	; (80093c0 <BLU_readData+0xe8>)
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	f003 0304 	and.w	r3, r3, #4
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8009366:	89bb      	ldrh	r3, [r7, #12]
 8009368:	b29a      	uxth	r2, r3
 800936a:	7bfb      	ldrb	r3, [r7, #15]
 800936c:	b2d8      	uxtb	r0, r3
 800936e:	4601      	mov	r1, r0
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	440b      	add	r3, r1
 8009374:	7819      	ldrb	r1, [r3, #0]
 8009376:	b2d2      	uxtb	r2, r2
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4403      	add	r3, r0
 800937c:	430a      	orrs	r2, r1
 800937e:	b2d2      	uxtb	r2, r2
 8009380:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8009382:	89bb      	ldrh	r3, [r7, #12]
 8009384:	b29b      	uxth	r3, r3
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	b29b      	uxth	r3, r3
 800938a:	81bb      	strh	r3, [r7, #12]
 800938c:	89bb      	ldrh	r3, [r7, #12]
 800938e:	b29b      	uxth	r3, r3
 8009390:	2bff      	cmp	r3, #255	; 0xff
 8009392:	d9ca      	bls.n	800932a <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8009394:	2010      	movs	r0, #16
 8009396:	f002 fa3d 	bl	800b814 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	b2db      	uxtb	r3, r3
 800939e:	3301      	adds	r3, #1
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	73fb      	strb	r3, [r7, #15]
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b06      	cmp	r3, #6
 80093aa:	d9bb      	bls.n	8009324 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80093ac:	4b04      	ldr	r3, [pc, #16]	; (80093c0 <BLU_readData+0xe8>)
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4a03      	ldr	r2, [pc, #12]	; (80093c0 <BLU_readData+0xe8>)
 80093b2:	f043 0308 	orr.w	r3, r3, #8
 80093b6:	60d3      	str	r3, [r2, #12]

  return;
 80093b8:	bf00      	nop
}
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	40011000 	.word	0x40011000
 80093c4:	40010800 	.word	0x40010800

080093c8 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	3302      	adds	r3, #2
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	021b      	lsls	r3, r3, #8
 80093d8:	b21a      	sxth	r2, r3
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	3301      	adds	r3, #1
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	b21b      	sxth	r3, r3
 80093e2:	4313      	orrs	r3, r2
 80093e4:	b21b      	sxth	r3, r3
 80093e6:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 80093e8:	2301      	movs	r3, #1
 80093ea:	73fb      	strb	r3, [r7, #15]
 80093ec:	e00d      	b.n	800940a <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 80093ee:	89ba      	ldrh	r2, [r7, #12]
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	fa42 f303 	asr.w	r3, r2, r3
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <BLU_getButton+0x3c>
    {
      return l_index;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
 8009402:	e006      	b.n	8009412 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009404:	7bfb      	ldrb	r3, [r7, #15]
 8009406:	3301      	adds	r3, #1
 8009408:	73fb      	strb	r3, [r7, #15]
 800940a:	7bfb      	ldrb	r3, [r7, #15]
 800940c:	2b10      	cmp	r3, #16
 800940e:	d9ee      	bls.n	80093ee <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	bc80      	pop	{r7}
 800941a:	4770      	bx	lr

0800941c <BLU_init>:

void BLU_init(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8009420:	4904      	ldr	r1, [pc, #16]	; (8009434 <BLU_init+0x18>)
 8009422:	2001      	movs	r0, #1
 8009424:	f001 fcf4 	bl	800ae10 <LOG_log>

  BLU_initData(&g_BLU_lastData);
 8009428:	4803      	ldr	r0, [pc, #12]	; (8009438 <BLU_init+0x1c>)
 800942a:	f000 f807 	bl	800943c <BLU_initData>

  return;
 800942e:	bf00      	nop
}
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	0800f274 	.word	0x0800f274
 8009438:	20000228 	.word	0x20000228

0800943c <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2280      	movs	r2, #128	; 0x80
 8009448:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2280      	movs	r2, #128	; 0x80
 800944e:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2280      	movs	r2, #128	; 0x80
 8009454:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2280      	movs	r2, #128	; 0x80
 800945a:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	741a      	strb	r2, [r3, #16]

  return;
 8009462:	bf00      	nop
}
 8009464:	370c      	adds	r7, #12
 8009466:	46bd      	mov	sp, r7
 8009468:	bc80      	pop	{r7}
 800946a:	4770      	bx	lr

0800946c <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b08c      	sub	sp, #48	; 0x30
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8009474:	f107 0320 	add.w	r3, r7, #32
 8009478:	4618      	mov	r0, r3
 800947a:	f7ff ff2d 	bl	80092d8 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 800947e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009482:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8009484:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009488:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 800948a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800948e:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8009490:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009494:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8009496:	f107 0320 	add.w	r3, r7, #32
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff ff94 	bl	80093c8 <BLU_getButton>
 80094a0:	4603      	mov	r3, r0
 80094a2:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2bff      	cmp	r3, #255	; 0xff
 80094a8:	d108      	bne.n	80094bc <BLU_receiveData+0x50>
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	2bff      	cmp	r3, #255	; 0xff
 80094ae:	d105      	bne.n	80094bc <BLU_receiveData+0x50>
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	2bff      	cmp	r3, #255	; 0xff
 80094b4:	d102      	bne.n	80094bc <BLU_receiveData+0x50>
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2bff      	cmp	r3, #255	; 0xff
 80094ba:	d00b      	beq.n	80094d4 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10e      	bne.n	80094e0 <BLU_receiveData+0x74>
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d10b      	bne.n	80094e0 <BLU_receiveData+0x74>
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d108      	bne.n	80094e0 <BLU_receiveData+0x74>
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 80094d4:	f107 030c 	add.w	r3, r7, #12
 80094d8:	4618      	mov	r0, r3
 80094da:	f7ff ffaf 	bl	800943c <BLU_initData>
 80094de:	e053      	b.n	8009588 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	4b33      	ldr	r3, [pc, #204]	; (80095b0 <BLU_receiveData+0x144>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d14e      	bne.n	8009588 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	4b30      	ldr	r3, [pc, #192]	; (80095b0 <BLU_receiveData+0x144>)
 80094ee:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d149      	bne.n	8009588 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	4b2e      	ldr	r3, [pc, #184]	; (80095b0 <BLU_receiveData+0x144>)
 80094f8:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d144      	bne.n	8009588 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	4b2b      	ldr	r3, [pc, #172]	; (80095b0 <BLU_receiveData+0x144>)
 8009502:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8009504:	429a      	cmp	r2, r3
 8009506:	d13f      	bne.n	8009588 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 8009508:	7f3a      	ldrb	r2, [r7, #28]
 800950a:	4b29      	ldr	r3, [pc, #164]	; (80095b0 <BLU_receiveData+0x144>)
 800950c:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 800950e:	429a      	cmp	r2, r3
 8009510:	d13a      	bne.n	8009588 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	2300      	movs	r3, #0
 8009516:	9301      	str	r3, [sp, #4]
 8009518:	2328      	movs	r3, #40	; 0x28
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009520:	22ff      	movs	r2, #255	; 0xff
 8009522:	2100      	movs	r1, #0
 8009524:	f002 f9fb 	bl	800b91e <UTI_normalizeIntValue>
 8009528:	4602      	mov	r2, r0
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 800952e:	6938      	ldr	r0, [r7, #16]
 8009530:	2301      	movs	r3, #1
 8009532:	9301      	str	r3, [sp, #4]
 8009534:	2328      	movs	r3, #40	; 0x28
 8009536:	9300      	str	r3, [sp, #0]
 8009538:	f06f 0327 	mvn.w	r3, #39	; 0x27
 800953c:	22ff      	movs	r2, #255	; 0xff
 800953e:	2100      	movs	r1, #0
 8009540:	f002 f9ed 	bl	800b91e <UTI_normalizeIntValue>
 8009544:	4602      	mov	r2, r0
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 800954a:	6978      	ldr	r0, [r7, #20]
 800954c:	2300      	movs	r3, #0
 800954e:	9301      	str	r3, [sp, #4]
 8009550:	2328      	movs	r3, #40	; 0x28
 8009552:	9300      	str	r3, [sp, #0]
 8009554:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009558:	22ff      	movs	r2, #255	; 0xff
 800955a:	2100      	movs	r1, #0
 800955c:	f002 f9df 	bl	800b91e <UTI_normalizeIntValue>
 8009560:	4602      	mov	r2, r0
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8009566:	69b8      	ldr	r0, [r7, #24]
 8009568:	2301      	movs	r3, #1
 800956a:	9301      	str	r3, [sp, #4]
 800956c:	2328      	movs	r3, #40	; 0x28
 800956e:	9300      	str	r3, [sp, #0]
 8009570:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009574:	22ff      	movs	r2, #255	; 0xff
 8009576:	2100      	movs	r1, #0
 8009578:	f002 f9d1 	bl	800b91e <UTI_normalizeIntValue>
 800957c:	4602      	mov	r2, r0
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8009582:	7f3a      	ldrb	r2, [r7, #28]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	4a09      	ldr	r2, [pc, #36]	; (80095b0 <BLU_receiveData+0x144>)
 800958c:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	4a07      	ldr	r2, [pc, #28]	; (80095b0 <BLU_receiveData+0x144>)
 8009592:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	4a06      	ldr	r2, [pc, #24]	; (80095b0 <BLU_receiveData+0x144>)
 8009598:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	4a04      	ldr	r2, [pc, #16]	; (80095b0 <BLU_receiveData+0x144>)
 800959e:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 80095a0:	7f3a      	ldrb	r2, [r7, #28]
 80095a2:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <BLU_receiveData+0x144>)
 80095a4:	741a      	strb	r2, [r3, #16]

  return;
 80095a6:	bf00      	nop
}
 80095a8:	3728      	adds	r7, #40	; 0x28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000228 	.word	0x20000228

080095b4 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Context *p_buffer)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing Circular buffer");
 80095bc:	490e      	ldr	r1, [pc, #56]	; (80095f8 <CBU_init+0x44>)
 80095be:	2000      	movs	r0, #0
 80095c0:	f001 fc26 	bl	800ae10 <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80095c4:	2300      	movs	r3, #0
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	e008      	b.n	80095dc <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	f04f 0100 	mov.w	r1, #0
 80095d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2b09      	cmp	r3, #9
 80095e0:	d9f3      	bls.n	80095ca <CBU_init+0x16>
  }

  p_buffer->count = 0;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 80095ee:	bf00      	nop
}
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
 80095f6:	bf00      	nop
 80095f8:	0800f294 	.word	0x0800f294

080095fc <CBU_push>:

void CBU_push(T_CBU_Context *p_buffer, float p_element)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960a:	2b09      	cmp	r3, #9
 800960c:	d103      	bne.n	8009616 <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2200      	movs	r2, #0
 8009612:	629a      	str	r2, [r3, #40]	; 0x28
 8009614:	e004      	b.n	8009620 <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	2b09      	cmp	r3, #9
 8009632:	d805      	bhi.n	8009640 <CBU_push+0x44>
  {
    p_buffer->count++;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 800963e:	bf00      	nop
 8009640:	bf00      	nop
}
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	bc80      	pop	{r7}
 8009648:	4770      	bx	lr

0800964a <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Context *p_buffer)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b086      	sub	sp, #24
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009656:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 800965c:	f04f 0300 	mov.w	r3, #0
 8009660:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 8009662:	e015      	b.n	8009690 <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	697a      	ldr	r2, [r7, #20]
 8009668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966c:	4619      	mov	r1, r3
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f7f7 fa7c 	bl	8000b6c <__addsf3>
 8009674:	4603      	mov	r3, r0
 8009676:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2b09      	cmp	r3, #9
 800967c:	d102      	bne.n	8009684 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e002      	b.n	800968a <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	3301      	adds	r3, #1
 8009688:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	3301      	adds	r3, #1
 800968e:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	429a      	cmp	r2, r3
 8009698:	d3e4      	bcc.n	8009664 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800969e:	4618      	mov	r0, r3
 80096a0:	f7f7 fb14 	bl	8000ccc <__aeabi_ui2f>
 80096a4:	4603      	mov	r3, r0
 80096a6:	4619      	mov	r1, r3
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7f7 fc1b 	bl	8000ee4 <__aeabi_fdiv>
 80096ae:	4603      	mov	r3, r0
 80096b0:	60fb      	str	r3, [r7, #12]

  return l_average;
 80096b2:	68fb      	ldr	r3, [r7, #12]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3718      	adds	r7, #24
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 80096c4:	490d      	ldr	r1, [pc, #52]	; (80096fc <CON_init+0x40>)
 80096c6:	2001      	movs	r0, #1
 80096c8:	f001 fba2 	bl	800ae10 <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 80096cc:	4a0c      	ldr	r2, [pc, #48]	; (8009700 <CON_init+0x44>)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 80096d2:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <CON_init+0x48>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 80096d8:	4b0b      	ldr	r3, [pc, #44]	; (8009708 <CON_init+0x4c>)
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 80096de:	480b      	ldr	r0, [pc, #44]	; (800970c <CON_init+0x50>)
 80096e0:	f001 ff76 	bl	800b5d0 <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 80096e4:	4b06      	ldr	r3, [pc, #24]	; (8009700 <CON_init+0x44>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2201      	movs	r2, #1
 80096ea:	4909      	ldr	r1, [pc, #36]	; (8009710 <CON_init+0x54>)
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fe ffab 	bl	8008648 <HAL_UART_Receive_IT>

  return;
 80096f2:	bf00      	nop
}
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	0800f2f8 	.word	0x0800f2f8
 8009700:	2000023c 	.word	0x2000023c
 8009704:	20000254 	.word	0x20000254
 8009708:	20000258 	.word	0x20000258
 800970c:	20000244 	.word	0x20000244
 8009710:	20000240 	.word	0x20000240

08009714 <CON_receiveData>:

void CON_receiveData(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 8009718:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <CON_receiveData+0x44>)
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d112      	bne.n	8009746 <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8009720:	4b0e      	ldr	r3, [pc, #56]	; (800975c <CON_receiveData+0x48>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b0d      	cmp	r3, #13
 8009726:	d103      	bne.n	8009730 <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 8009728:	4b0b      	ldr	r3, [pc, #44]	; (8009758 <CON_receiveData+0x44>)
 800972a:	2201      	movs	r2, #1
 800972c:	701a      	strb	r2, [r3, #0]
 800972e:	e00a      	b.n	8009746 <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8009730:	4b0b      	ldr	r3, [pc, #44]	; (8009760 <CON_receiveData+0x4c>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a09      	ldr	r2, [pc, #36]	; (800975c <CON_receiveData+0x48>)
 8009736:	7811      	ldrb	r1, [r2, #0]
 8009738:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <CON_receiveData+0x50>)
 800973a:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 800973c:	4b08      	ldr	r3, [pc, #32]	; (8009760 <CON_receiveData+0x4c>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a07      	ldr	r2, [pc, #28]	; (8009760 <CON_receiveData+0x4c>)
 8009744:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8009746:	4b08      	ldr	r3, [pc, #32]	; (8009768 <CON_receiveData+0x54>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2201      	movs	r2, #1
 800974c:	4903      	ldr	r1, [pc, #12]	; (800975c <CON_receiveData+0x48>)
 800974e:	4618      	mov	r0, r3
 8009750:	f7fe ff7a 	bl	8008648 <HAL_UART_Receive_IT>

  return;
 8009754:	bf00      	nop
}
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000258 	.word	0x20000258
 800975c:	20000240 	.word	0x20000240
 8009760:	20000254 	.word	0x20000254
 8009764:	20000244 	.word	0x20000244
 8009768:	2000023c 	.word	0x2000023c

0800976c <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8009774:	4b0c      	ldr	r3, [pc, #48]	; (80097a8 <CON_updateFifo+0x3c>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	f083 0301 	eor.w	r3, r3, #1
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10d      	bne.n	800979e <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8009782:	490a      	ldr	r1, [pc, #40]	; (80097ac <CON_updateFifo+0x40>)
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f001 ff49 	bl	800b61c <SFO_push>
    SFO_initData(&g_CON_data);
 800978a:	4808      	ldr	r0, [pc, #32]	; (80097ac <CON_updateFifo+0x40>)
 800978c:	f001 ff20 	bl	800b5d0 <SFO_initData>

    g_CON_dataSize       = 0;
 8009790:	4b07      	ldr	r3, [pc, #28]	; (80097b0 <CON_updateFifo+0x44>)
 8009792:	2200      	movs	r2, #0
 8009794:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8009796:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <CON_updateFifo+0x3c>)
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
  }

  return;
 800979c:	bf00      	nop
 800979e:	bf00      	nop
}
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20000258 	.word	0x20000258
 80097ac:	20000244 	.word	0x20000244
 80097b0:	20000254 	.word	0x20000254

080097b4 <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_uartHandle,
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <CON_sendString+0x24>)
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80097ca:	6879      	ldr	r1, [r7, #4]
 80097cc:	f7fe feaa 	bl	8008524 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 80097d0:	bf00      	nop
}
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	2000023c 	.word	0x2000023c

080097dc <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af04      	add	r7, sp, #16
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 80097ea:	495d      	ldr	r1, [pc, #372]	; (8009960 <DRV_init+0x184>)
 80097ec:	2001      	movs	r0, #1
 80097ee:	f001 fb0f 	bl	800ae10 <LOG_log>

  /* Setup PIDs with a target speed to 0 */
  PID_init(&g_DRV_pidFrontRight, STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 80097f2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	4b5a      	ldr	r3, [pc, #360]	; (8009964 <DRV_init+0x188>)
 80097fa:	9302      	str	r3, [sp, #8]
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	9301      	str	r3, [sp, #4]
 8009802:	f04f 0300 	mov.w	r3, #0
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	f04f 0300 	mov.w	r3, #0
 800980c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009810:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009814:	4854      	ldr	r0, [pc, #336]	; (8009968 <DRV_init+0x18c>)
 8009816:	f001 fd0f 	bl	800b238 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800981a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800981e:	9303      	str	r3, [sp, #12]
 8009820:	4b50      	ldr	r3, [pc, #320]	; (8009964 <DRV_init+0x188>)
 8009822:	9302      	str	r3, [sp, #8]
 8009824:	f04f 0300 	mov.w	r3, #0
 8009828:	9301      	str	r3, [sp, #4]
 800982a:	f04f 0300 	mov.w	r3, #0
 800982e:	9300      	str	r3, [sp, #0]
 8009830:	f04f 0300 	mov.w	r3, #0
 8009834:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009838:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800983c:	484b      	ldr	r0, [pc, #300]	; (800996c <DRV_init+0x190>)
 800983e:	f001 fcfb 	bl	800b238 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 8009842:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009846:	9303      	str	r3, [sp, #12]
 8009848:	4b46      	ldr	r3, [pc, #280]	; (8009964 <DRV_init+0x188>)
 800984a:	9302      	str	r3, [sp, #8]
 800984c:	f04f 0300 	mov.w	r3, #0
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	f04f 0300 	mov.w	r3, #0
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009860:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009864:	4842      	ldr	r0, [pc, #264]	; (8009970 <DRV_init+0x194>)
 8009866:	f001 fce7 	bl	800b238 <PID_init>
  PID_init(&g_DRV_pidRearRight , STD_DRIVE_PID_P_FACTOR, STD_DRIVE_PID_I_FACTOR, STD_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STD_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800986a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800986e:	9303      	str	r3, [sp, #12]
 8009870:	4b3c      	ldr	r3, [pc, #240]	; (8009964 <DRV_init+0x188>)
 8009872:	9302      	str	r3, [sp, #8]
 8009874:	f04f 0300 	mov.w	r3, #0
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	f04f 0300 	mov.w	r3, #0
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	f04f 0300 	mov.w	r3, #0
 8009884:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009888:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800988c:	4839      	ldr	r0, [pc, #228]	; (8009974 <DRV_init+0x198>)
 800988e:	f001 fcd3 	bl	800b238 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8009892:	2304      	movs	r3, #4
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	9302      	str	r3, [sp, #8]
 800989a:	2320      	movs	r3, #32
 800989c:	9301      	str	r3, [sp, #4]
 800989e:	4b36      	ldr	r3, [pc, #216]	; (8009978 <DRV_init+0x19c>)
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	2310      	movs	r3, #16
 80098a4:	4a34      	ldr	r2, [pc, #208]	; (8009978 <DRV_init+0x19c>)
 80098a6:	4935      	ldr	r1, [pc, #212]	; (800997c <DRV_init+0x1a0>)
 80098a8:	4835      	ldr	r0, [pc, #212]	; (8009980 <DRV_init+0x1a4>)
 80098aa:	f001 fbd3 	bl	800b054 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 80098ae:	2300      	movs	r3, #0
 80098b0:	9303      	str	r3, [sp, #12]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	9302      	str	r3, [sp, #8]
 80098b6:	2302      	movs	r3, #2
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	4b32      	ldr	r3, [pc, #200]	; (8009984 <DRV_init+0x1a8>)
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	2301      	movs	r3, #1
 80098c0:	4a30      	ldr	r2, [pc, #192]	; (8009984 <DRV_init+0x1a8>)
 80098c2:	4931      	ldr	r1, [pc, #196]	; (8009988 <DRV_init+0x1ac>)
 80098c4:	4831      	ldr	r0, [pc, #196]	; (800998c <DRV_init+0x1b0>)
 80098c6:	f001 fbc5 	bl	800b054 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 80098ca:	230c      	movs	r3, #12
 80098cc:	9303      	str	r3, [sp, #12]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	9302      	str	r3, [sp, #8]
 80098d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	4b27      	ldr	r3, [pc, #156]	; (8009978 <DRV_init+0x19c>)
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	2304      	movs	r3, #4
 80098de:	4a2c      	ldr	r2, [pc, #176]	; (8009990 <DRV_init+0x1b4>)
 80098e0:	492c      	ldr	r1, [pc, #176]	; (8009994 <DRV_init+0x1b8>)
 80098e2:	482d      	ldr	r0, [pc, #180]	; (8009998 <DRV_init+0x1bc>)
 80098e4:	f001 fbb6 	bl	800b054 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 80098e8:	2308      	movs	r3, #8
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	9302      	str	r3, [sp, #8]
 80098f0:	2310      	movs	r3, #16
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	4b23      	ldr	r3, [pc, #140]	; (8009984 <DRV_init+0x1a8>)
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	2320      	movs	r3, #32
 80098fa:	4a22      	ldr	r2, [pc, #136]	; (8009984 <DRV_init+0x1a8>)
 80098fc:	4927      	ldr	r1, [pc, #156]	; (800999c <DRV_init+0x1c0>)
 80098fe:	4828      	ldr	r0, [pc, #160]	; (80099a0 <DRV_init+0x1c4>)
 8009900:	f001 fba8 	bl	800b054 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	491c      	ldr	r1, [pc, #112]	; (800997c <DRV_init+0x1a0>)
 800990a:	4826      	ldr	r0, [pc, #152]	; (80099a4 <DRV_init+0x1c8>)
 800990c:	f001 f902 	bl	800ab14 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	2200      	movs	r2, #0
 8009914:	491c      	ldr	r1, [pc, #112]	; (8009988 <DRV_init+0x1ac>)
 8009916:	4824      	ldr	r0, [pc, #144]	; (80099a8 <DRV_init+0x1cc>)
 8009918:	f001 f8fc 	bl	800ab14 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2200      	movs	r2, #0
 8009920:	491c      	ldr	r1, [pc, #112]	; (8009994 <DRV_init+0x1b8>)
 8009922:	4822      	ldr	r0, [pc, #136]	; (80099ac <DRV_init+0x1d0>)
 8009924:	f001 f8f6 	bl	800ab14 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	491b      	ldr	r1, [pc, #108]	; (800999c <DRV_init+0x1c0>)
 800992e:	4820      	ldr	r0, [pc, #128]	; (80099b0 <DRV_init+0x1d4>)
 8009930:	f001 f8f0 	bl	800ab14 <ENC_init>

  /* Setup speed buffers */
  CBU_init(&g_DRV_speedBufferFrontRight);
 8009934:	481f      	ldr	r0, [pc, #124]	; (80099b4 <DRV_init+0x1d8>)
 8009936:	f7ff fe3d 	bl	80095b4 <CBU_init>
  CBU_init(&g_DRV_speedBufferFrontLeft );
 800993a:	481f      	ldr	r0, [pc, #124]	; (80099b8 <DRV_init+0x1dc>)
 800993c:	f7ff fe3a 	bl	80095b4 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearLeft  );
 8009940:	481e      	ldr	r0, [pc, #120]	; (80099bc <DRV_init+0x1e0>)
 8009942:	f7ff fe37 	bl	80095b4 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearRight );
 8009946:	481e      	ldr	r0, [pc, #120]	; (80099c0 <DRV_init+0x1e4>)
 8009948:	f7ff fe34 	bl	80095b4 <CBU_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 800994c:	4b1d      	ldr	r3, [pc, #116]	; (80099c4 <DRV_init+0x1e8>)
 800994e:	2201      	movs	r2, #1
 8009950:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009952:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <DRV_init+0x1ec>)
 8009954:	2202      	movs	r2, #2
 8009956:	701a      	strb	r2, [r3, #0]

  return;
 8009958:	bf00      	nop
}
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}
 8009960:	0800f310 	.word	0x0800f310
 8009964:	42200000 	.word	0x42200000
 8009968:	2000025c 	.word	0x2000025c
 800996c:	2000028c 	.word	0x2000028c
 8009970:	200002bc 	.word	0x200002bc
 8009974:	200002ec 	.word	0x200002ec
 8009978:	40011000 	.word	0x40011000
 800997c:	0800f32c 	.word	0x0800f32c
 8009980:	2000031c 	.word	0x2000031c
 8009984:	40010c00 	.word	0x40010c00
 8009988:	0800f338 	.word	0x0800f338
 800998c:	20000340 	.word	0x20000340
 8009990:	40011400 	.word	0x40011400
 8009994:	0800f344 	.word	0x0800f344
 8009998:	20000364 	.word	0x20000364
 800999c:	0800f350 	.word	0x0800f350
 80099a0:	20000388 	.word	0x20000388
 80099a4:	200003ac 	.word	0x200003ac
 80099a8:	200003b8 	.word	0x200003b8
 80099ac:	200003c4 	.word	0x200003c4
 80099b0:	200003d0 	.word	0x200003d0
 80099b4:	200003dc 	.word	0x200003dc
 80099b8:	2000040c 	.word	0x2000040c
 80099bc:	2000043c 	.word	0x2000043c
 80099c0:	2000046c 	.word	0x2000046c
 80099c4:	20000259 	.word	0x20000259
 80099c8:	2000025a 	.word	0x2000025a

080099cc <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099da:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 80099dc:	4b19      	ldr	r3, [pc, #100]	; (8009a44 <DRV_updateEncoder+0x78>)
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d106      	bne.n	80099f4 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 80099e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80099ea:	4619      	mov	r1, r3
 80099ec:	4815      	ldr	r0, [pc, #84]	; (8009a44 <DRV_updateEncoder+0x78>)
 80099ee:	f001 f8c2 	bl	800ab76 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80099f2:	e023      	b.n	8009a3c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 80099f4:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <DRV_updateEncoder+0x7c>)
 80099f6:	689b      	ldr	r3, [r3, #8]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d106      	bne.n	8009a0c <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 80099fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a02:	4619      	mov	r1, r3
 8009a04:	4810      	ldr	r0, [pc, #64]	; (8009a48 <DRV_updateEncoder+0x7c>)
 8009a06:	f001 f8b6 	bl	800ab76 <ENC_update>
  return;
 8009a0a:	e017      	b.n	8009a3c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8009a0c:	4b0f      	ldr	r3, [pc, #60]	; (8009a4c <DRV_updateEncoder+0x80>)
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d106      	bne.n	8009a24 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8009a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	480b      	ldr	r0, [pc, #44]	; (8009a4c <DRV_updateEncoder+0x80>)
 8009a1e:	f001 f8aa 	bl	800ab76 <ENC_update>
  return;
 8009a22:	e00b      	b.n	8009a3c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8009a24:	4b0a      	ldr	r3, [pc, #40]	; (8009a50 <DRV_updateEncoder+0x84>)
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d106      	bne.n	8009a3c <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8009a2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a32:	4619      	mov	r1, r3
 8009a34:	4806      	ldr	r0, [pc, #24]	; (8009a50 <DRV_updateEncoder+0x84>)
 8009a36:	f001 f89e 	bl	800ab76 <ENC_update>
  return;
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
}
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	200003c4 	.word	0x200003c4
 8009a48:	200003d0 	.word	0x200003d0
 8009a4c:	200003ac 	.word	0x200003ac
 8009a50:	200003b8 	.word	0x200003b8

08009a54 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	7c1b      	ldrb	r3, [r3, #16]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	2b0f      	cmp	r3, #15
 8009a64:	d861      	bhi.n	8009b2a <DRV_updateFromBluetooth+0xd6>
 8009a66:	a201      	add	r2, pc, #4	; (adr r2, 8009a6c <DRV_updateFromBluetooth+0x18>)
 8009a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a6c:	08009af5 	.word	0x08009af5
 8009a70:	08009b2b 	.word	0x08009b2b
 8009a74:	08009b2b 	.word	0x08009b2b
 8009a78:	08009b0d 	.word	0x08009b0d
 8009a7c:	08009b2b 	.word	0x08009b2b
 8009a80:	08009b2b 	.word	0x08009b2b
 8009a84:	08009b2b 	.word	0x08009b2b
 8009a88:	08009b2b 	.word	0x08009b2b
 8009a8c:	08009b2b 	.word	0x08009b2b
 8009a90:	08009b2b 	.word	0x08009b2b
 8009a94:	08009b2b 	.word	0x08009b2b
 8009a98:	08009b2b 	.word	0x08009b2b
 8009a9c:	08009b2b 	.word	0x08009b2b
 8009aa0:	08009add 	.word	0x08009add
 8009aa4:	08009ac5 	.word	0x08009ac5
 8009aa8:	08009aad 	.word	0x08009aad
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8009aac:	4b82      	ldr	r3, [pc, #520]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d03c      	beq.n	8009b2e <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8009ab4:	4981      	ldr	r1, [pc, #516]	; (8009cbc <DRV_updateFromBluetooth+0x268>)
 8009ab6:	2001      	movs	r0, #1
 8009ab8:	f001 f9aa 	bl	800ae10 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8009abc:	4b7e      	ldr	r3, [pc, #504]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009abe:	2200      	movs	r2, #0
 8009ac0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009ac2:	e034      	b.n	8009b2e <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009ac4:	4b7c      	ldr	r3, [pc, #496]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d032      	beq.n	8009b32 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8009acc:	497c      	ldr	r1, [pc, #496]	; (8009cc0 <DRV_updateFromBluetooth+0x26c>)
 8009ace:	2001      	movs	r0, #1
 8009ad0:	f001 f99e 	bl	800ae10 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8009ad4:	4b78      	ldr	r3, [pc, #480]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009ada:	e02a      	b.n	8009b32 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009adc:	4b76      	ldr	r3, [pc, #472]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009ade:	781b      	ldrb	r3, [r3, #0]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d028      	beq.n	8009b36 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8009ae4:	4977      	ldr	r1, [pc, #476]	; (8009cc4 <DRV_updateFromBluetooth+0x270>)
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	f001 f992 	bl	800ae10 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009aec:	4b72      	ldr	r3, [pc, #456]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009aee:	2202      	movs	r2, #2
 8009af0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009af2:	e020      	b.n	8009b36 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8009af4:	4b74      	ldr	r3, [pc, #464]	; (8009cc8 <DRV_updateFromBluetooth+0x274>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d01e      	beq.n	8009b3a <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8009afc:	4973      	ldr	r1, [pc, #460]	; (8009ccc <DRV_updateFromBluetooth+0x278>)
 8009afe:	2001      	movs	r0, #1
 8009b00:	f001 f986 	bl	800ae10 <LOG_log>
        g_DRV_areMotorsOn = false;
 8009b04:	4b70      	ldr	r3, [pc, #448]	; (8009cc8 <DRV_updateFromBluetooth+0x274>)
 8009b06:	2200      	movs	r2, #0
 8009b08:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009b0a:	e016      	b.n	8009b3a <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8009b0c:	4b6e      	ldr	r3, [pc, #440]	; (8009cc8 <DRV_updateFromBluetooth+0x274>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f083 0301 	eor.w	r3, r3, #1
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d011      	beq.n	8009b3e <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8009b1a:	496d      	ldr	r1, [pc, #436]	; (8009cd0 <DRV_updateFromBluetooth+0x27c>)
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	f001 f977 	bl	800ae10 <LOG_log>
        g_DRV_areMotorsOn = true;
 8009b22:	4b69      	ldr	r3, [pc, #420]	; (8009cc8 <DRV_updateFromBluetooth+0x274>)
 8009b24:	2201      	movs	r2, #1
 8009b26:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009b28:	e009      	b.n	8009b3e <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 8009b2a:	bf00      	nop
 8009b2c:	e008      	b.n	8009b40 <DRV_updateFromBluetooth+0xec>
      break;
 8009b2e:	bf00      	nop
 8009b30:	e006      	b.n	8009b40 <DRV_updateFromBluetooth+0xec>
      break;
 8009b32:	bf00      	nop
 8009b34:	e004      	b.n	8009b40 <DRV_updateFromBluetooth+0xec>
      break;
 8009b36:	bf00      	nop
 8009b38:	e002      	b.n	8009b40 <DRV_updateFromBluetooth+0xec>
      break;
 8009b3a:	bf00      	nop
 8009b3c:	e000      	b.n	8009b40 <DRV_updateFromBluetooth+0xec>
      break;
 8009b3e:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009b40:	4b5d      	ldr	r3, [pc, #372]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	f000 80b3 	beq.w	8009cb0 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b0a      	cmp	r3, #10
 8009b50:	dd0c      	ble.n	8009b6c <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009b52:	4b59      	ldr	r3, [pc, #356]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d002      	beq.n	8009b60 <DRV_updateFromBluetooth+0x10c>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	e000      	b.n	8009b62 <DRV_updateFromBluetooth+0x10e>
 8009b60:	2314      	movs	r3, #20
 8009b62:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 fdb9 	bl	800a6dc <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_stop();
    }
  }

  return;
 8009b6a:	e0a1      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	2b0a      	cmp	r3, #10
 8009b72:	dd0c      	ble.n	8009b8e <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009b74:	4b50      	ldr	r3, [pc, #320]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d002      	beq.n	8009b82 <DRV_updateFromBluetooth+0x12e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	68db      	ldr	r3, [r3, #12]
 8009b80:	e000      	b.n	8009b84 <DRV_updateFromBluetooth+0x130>
 8009b82:	2314      	movs	r3, #20
 8009b84:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8009b86:	68f8      	ldr	r0, [r7, #12]
 8009b88:	f000 fda8 	bl	800a6dc <DRV_moveForward>
  return;
 8009b8c:	e090      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	f113 0f0a 	cmn.w	r3, #10
 8009b96:	da0d      	bge.n	8009bb4 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8009b98:	4b47      	ldr	r3, [pc, #284]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <DRV_updateFromBluetooth+0x154>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	425b      	negs	r3, r3
 8009ba6:	e000      	b.n	8009baa <DRV_updateFromBluetooth+0x156>
 8009ba8:	2314      	movs	r3, #20
 8009baa:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 fdcb 	bl	800a748 <DRV_moveBackward>
  return;
 8009bb2:	e07d      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f113 0f0a 	cmn.w	r3, #10
 8009bbc:	da0d      	bge.n	8009bda <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8009bbe:	4b3e      	ldr	r3, [pc, #248]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d003      	beq.n	8009bce <DRV_updateFromBluetooth+0x17a>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	425b      	negs	r3, r3
 8009bcc:	e000      	b.n	8009bd0 <DRV_updateFromBluetooth+0x17c>
 8009bce:	2314      	movs	r3, #20
 8009bd0:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 fdb8 	bl	800a748 <DRV_moveBackward>
  return;
 8009bd8:	e06a      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f113 0f0a 	cmn.w	r3, #10
 8009be2:	da0d      	bge.n	8009c00 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009be4:	4b34      	ldr	r3, [pc, #208]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d003      	beq.n	8009bf4 <DRV_updateFromBluetooth+0x1a0>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	425b      	negs	r3, r3
 8009bf2:	e000      	b.n	8009bf6 <DRV_updateFromBluetooth+0x1a2>
 8009bf4:	2314      	movs	r3, #20
 8009bf6:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 feb3 	bl	800a964 <DRV_turnLeft>
  return;
 8009bfe:	e057      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b0a      	cmp	r3, #10
 8009c06:	dd0c      	ble.n	8009c22 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009c08:	4b2b      	ldr	r3, [pc, #172]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <DRV_updateFromBluetooth+0x1c2>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	e000      	b.n	8009c18 <DRV_updateFromBluetooth+0x1c4>
 8009c16:	2314      	movs	r3, #20
 8009c18:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 fed8 	bl	800a9d0 <DRV_turnRight>
  return;
 8009c20:	e046      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	f113 0f0a 	cmn.w	r3, #10
 8009c2a:	da0d      	bge.n	8009c48 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009c2c:	4b22      	ldr	r3, [pc, #136]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <DRV_updateFromBluetooth+0x1e8>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	689b      	ldr	r3, [r3, #8]
 8009c38:	425b      	negs	r3, r3
 8009c3a:	e000      	b.n	8009c3e <DRV_updateFromBluetooth+0x1ea>
 8009c3c:	2314      	movs	r3, #20
 8009c3e:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fefb 	bl	800aa3c <DRV_translateLeft>
  return;
 8009c46:	e033      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	2b0a      	cmp	r3, #10
 8009c4e:	dd0c      	ble.n	8009c6a <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009c50:	4b19      	ldr	r3, [pc, #100]	; (8009cb8 <DRV_updateFromBluetooth+0x264>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <DRV_updateFromBluetooth+0x20a>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	e000      	b.n	8009c60 <DRV_updateFromBluetooth+0x20c>
 8009c5e:	2314      	movs	r3, #20
 8009c60:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 ff20 	bl	800aaa8 <DRV_translateRight>
  return;
 8009c68:	e022      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	7c1b      	ldrb	r3, [r3, #16]
 8009c6e:	2b0b      	cmp	r3, #11
 8009c70:	d103      	bne.n	8009c7a <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009c72:	2028      	movs	r0, #40	; 0x28
 8009c74:	f000 fdd4 	bl	800a820 <DRV_moveForwardLeft>
  return;
 8009c78:	e01a      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	7c1b      	ldrb	r3, [r3, #16]
 8009c7e:	2b09      	cmp	r3, #9
 8009c80:	d103      	bne.n	8009c8a <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009c82:	2028      	movs	r0, #40	; 0x28
 8009c84:	f000 fe02 	bl	800a88c <DRV_moveBackwardRight>
  return;
 8009c88:	e012      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	7c1b      	ldrb	r3, [r3, #16]
 8009c8e:	2b0c      	cmp	r3, #12
 8009c90:	d103      	bne.n	8009c9a <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009c92:	2028      	movs	r0, #40	; 0x28
 8009c94:	f000 fd8e 	bl	800a7b4 <DRV_moveForwardRight>
  return;
 8009c98:	e00a      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	7c1b      	ldrb	r3, [r3, #16]
 8009c9e:	2b0a      	cmp	r3, #10
 8009ca0:	d103      	bne.n	8009caa <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009ca2:	2028      	movs	r0, #40	; 0x28
 8009ca4:	f000 fe28 	bl	800a8f8 <DRV_moveBackwardLeft>
  return;
 8009ca8:	e002      	b.n	8009cb0 <DRV_updateFromBluetooth+0x25c>
      DRV_stop();
 8009caa:	f000 fcf9 	bl	800a6a0 <DRV_stop>
  return;
 8009cae:	bf00      	nop
 8009cb0:	bf00      	nop
}
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	2000025a 	.word	0x2000025a
 8009cbc:	0800f35c 	.word	0x0800f35c
 8009cc0:	0800f388 	.word	0x0800f388
 8009cc4:	0800f3b8 	.word	0x0800f3b8
 8009cc8:	20000259 	.word	0x20000259
 8009ccc:	0800f3e8 	.word	0x0800f3e8
 8009cd0:	0800f400 	.word	0x0800f400

08009cd4 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 8009cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cd6:	b099      	sub	sp, #100	; 0x64
 8009cd8:	af02      	add	r7, sp, #8
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	807b      	strh	r3, [r7, #2]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  static RTC_TimeTypeDef   l_lastTime;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009ce0:	4ba6      	ldr	r3, [pc, #664]	; (8009f7c <DRV_updateFromMaster+0x2a8>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	f040 82fd 	bne.w	800a2e4 <DRV_updateFromMaster+0x610>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 fd14 	bl	800b718 <SFO_getCount>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 81eb 	beq.w	800a0ce <DRV_updateFromMaster+0x3fa>
    {
      SFO_logInfo(p_commandsFifo);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 fd19 	bl	800b730 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 8009cfe:	f107 0314 	add.w	r3, r7, #20
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fcc7 	bl	800b698 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 8009d0a:	f107 0314 	add.w	r3, r7, #20
 8009d0e:	461a      	mov	r2, r3
 8009d10:	499b      	ldr	r1, [pc, #620]	; (8009f80 <DRV_updateFromMaster+0x2ac>)
 8009d12:	2001      	movs	r0, #1
 8009d14:	f001 f87c 	bl	800ae10 <LOG_log>

      l_speed = atoi(&l_command[2]);
 8009d18:	f107 0314 	add.w	r3, r7, #20
 8009d1c:	3302      	adds	r3, #2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f001 fe4c 	bl	800b9bc <atoi>
 8009d24:	6578      	str	r0, [r7, #84]	; 0x54

      /* Check that speed is in allowed range */
      if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 8009d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	db02      	blt.n	8009d32 <DRV_updateFromMaster+0x5e>
 8009d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d2e:	2b64      	cmp	r3, #100	; 0x64
 8009d30:	dd05      	ble.n	8009d3e <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 8009d32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009d34:	4993      	ldr	r1, [pc, #588]	; (8009f84 <DRV_updateFromMaster+0x2b0>)
 8009d36:	2003      	movs	r0, #3
 8009d38:	f001 f86a 	bl	800ae10 <LOG_log>
 8009d3c:	e1c7      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 8009d3e:	2300      	movs	r3, #0
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	2328      	movs	r3, #40	; 0x28
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	2300      	movs	r3, #0
 8009d48:	2264      	movs	r2, #100	; 0x64
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009d4e:	f001 fde6 	bl	800b91e <UTI_normalizeIntValue>
 8009d52:	6578      	str	r0, [r7, #84]	; 0x54
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Stop */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009d54:	7d3b      	ldrb	r3, [r7, #20]
 8009d56:	2b53      	cmp	r3, #83	; 0x53
 8009d58:	d119      	bne.n	8009d8e <DRV_updateFromMaster+0xba>
 8009d5a:	7d7b      	ldrb	r3, [r7, #21]
 8009d5c:	2b54      	cmp	r3, #84	; 0x54
 8009d5e:	d116      	bne.n	8009d8e <DRV_updateFromMaster+0xba>
        {
          DRV_setDirectionsStop();
 8009d60:	f000 fb9a 	bl	800a498 <DRV_setDirectionsStop>

          PID_setTargetValue(&g_DRV_pidFrontRight, 0);
 8009d64:	f04f 0100 	mov.w	r1, #0
 8009d68:	4887      	ldr	r0, [pc, #540]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009d6a:	f001 fae4 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , 0);
 8009d6e:	f04f 0100 	mov.w	r1, #0
 8009d72:	4886      	ldr	r0, [pc, #536]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009d74:	f001 fadf 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , 0);
 8009d78:	f04f 0100 	mov.w	r1, #0
 8009d7c:	4884      	ldr	r0, [pc, #528]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009d7e:	f001 fada 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , 0);
 8009d82:	f04f 0100 	mov.w	r1, #0
 8009d86:	4883      	ldr	r0, [pc, #524]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009d88:	f001 fad5 	bl	800b336 <PID_setTargetValue>
 8009d8c:	e19f      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Straight */
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009d8e:	7d3b      	ldrb	r3, [r7, #20]
 8009d90:	2b46      	cmp	r3, #70	; 0x46
 8009d92:	d125      	bne.n	8009de0 <DRV_updateFromMaster+0x10c>
 8009d94:	7d7b      	ldrb	r3, [r7, #21]
 8009d96:	2b53      	cmp	r3, #83	; 0x53
 8009d98:	d122      	bne.n	8009de0 <DRV_updateFromMaster+0x10c>
        {
          DRV_setDirectionsForward();
 8009d9a:	f000 fb99 	bl	800a4d0 <DRV_setDirectionsForward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009d9e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009da0:	f7f6 ff98 	bl	8000cd4 <__aeabi_i2f>
 8009da4:	4603      	mov	r3, r0
 8009da6:	4619      	mov	r1, r3
 8009da8:	4877      	ldr	r0, [pc, #476]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009daa:	f001 fac4 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009dae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009db0:	f7f6 ff90 	bl	8000cd4 <__aeabi_i2f>
 8009db4:	4603      	mov	r3, r0
 8009db6:	4619      	mov	r1, r3
 8009db8:	4874      	ldr	r0, [pc, #464]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009dba:	f001 fabc 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009dbe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dc0:	f7f6 ff88 	bl	8000cd4 <__aeabi_i2f>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4871      	ldr	r0, [pc, #452]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009dca:	f001 fab4 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009dce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009dd0:	f7f6 ff80 	bl	8000cd4 <__aeabi_i2f>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	486e      	ldr	r0, [pc, #440]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009dda:	f001 faac 	bl	800b336 <PID_setTargetValue>
 8009dde:	e176      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 8009de0:	7d3b      	ldrb	r3, [r7, #20]
 8009de2:	2b42      	cmp	r3, #66	; 0x42
 8009de4:	d125      	bne.n	8009e32 <DRV_updateFromMaster+0x15e>
 8009de6:	7d7b      	ldrb	r3, [r7, #21]
 8009de8:	2b53      	cmp	r3, #83	; 0x53
 8009dea:	d122      	bne.n	8009e32 <DRV_updateFromMaster+0x15e>
        {
          DRV_setDirectionsBackward();
 8009dec:	f000 fb8c 	bl	800a508 <DRV_setDirectionsBackward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009df0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009df2:	f7f6 ff6f 	bl	8000cd4 <__aeabi_i2f>
 8009df6:	4603      	mov	r3, r0
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4863      	ldr	r0, [pc, #396]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009dfc:	f001 fa9b 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009e00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e02:	f7f6 ff67 	bl	8000cd4 <__aeabi_i2f>
 8009e06:	4603      	mov	r3, r0
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4860      	ldr	r0, [pc, #384]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009e0c:	f001 fa93 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009e10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e12:	f7f6 ff5f 	bl	8000cd4 <__aeabi_i2f>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4619      	mov	r1, r3
 8009e1a:	485d      	ldr	r0, [pc, #372]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009e1c:	f001 fa8b 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009e20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e22:	f7f6 ff57 	bl	8000cd4 <__aeabi_i2f>
 8009e26:	4603      	mov	r3, r0
 8009e28:	4619      	mov	r1, r3
 8009e2a:	485a      	ldr	r0, [pc, #360]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009e2c:	f001 fa83 	bl	800b336 <PID_setTargetValue>
 8009e30:	e14d      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009e32:	7d3b      	ldrb	r3, [r7, #20]
 8009e34:	2b52      	cmp	r3, #82	; 0x52
 8009e36:	d125      	bne.n	8009e84 <DRV_updateFromMaster+0x1b0>
 8009e38:	7d7b      	ldrb	r3, [r7, #21]
 8009e3a:	2b4c      	cmp	r3, #76	; 0x4c
 8009e3c:	d122      	bne.n	8009e84 <DRV_updateFromMaster+0x1b0>
        {
          DRV_setDirectionsTurnLeft();
 8009e3e:	f000 fbbf 	bl	800a5c0 <DRV_setDirectionsTurnLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009e42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e44:	f7f6 ff46 	bl	8000cd4 <__aeabi_i2f>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	484e      	ldr	r0, [pc, #312]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009e4e:	f001 fa72 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009e52:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e54:	f7f6 ff3e 	bl	8000cd4 <__aeabi_i2f>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	484b      	ldr	r0, [pc, #300]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009e5e:	f001 fa6a 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009e62:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e64:	f7f6 ff36 	bl	8000cd4 <__aeabi_i2f>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4848      	ldr	r0, [pc, #288]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009e6e:	f001 fa62 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009e72:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e74:	f7f6 ff2e 	bl	8000cd4 <__aeabi_i2f>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	4845      	ldr	r0, [pc, #276]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009e7e:	f001 fa5a 	bl	800b336 <PID_setTargetValue>
 8009e82:	e124      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009e84:	7d3b      	ldrb	r3, [r7, #20]
 8009e86:	2b52      	cmp	r3, #82	; 0x52
 8009e88:	d125      	bne.n	8009ed6 <DRV_updateFromMaster+0x202>
 8009e8a:	7d7b      	ldrb	r3, [r7, #21]
 8009e8c:	2b52      	cmp	r3, #82	; 0x52
 8009e8e:	d122      	bne.n	8009ed6 <DRV_updateFromMaster+0x202>
        {
          DRV_setDirectionsTurnRight();
 8009e90:	f000 fbb2 	bl	800a5f8 <DRV_setDirectionsTurnRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009e94:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009e96:	f7f6 ff1d 	bl	8000cd4 <__aeabi_i2f>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	4619      	mov	r1, r3
 8009e9e:	483a      	ldr	r0, [pc, #232]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009ea0:	f001 fa49 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009ea4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ea6:	f7f6 ff15 	bl	8000cd4 <__aeabi_i2f>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	4619      	mov	r1, r3
 8009eae:	4837      	ldr	r0, [pc, #220]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009eb0:	f001 fa41 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009eb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009eb6:	f7f6 ff0d 	bl	8000cd4 <__aeabi_i2f>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	4834      	ldr	r0, [pc, #208]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009ec0:	f001 fa39 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009ec4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ec6:	f7f6 ff05 	bl	8000cd4 <__aeabi_i2f>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	4619      	mov	r1, r3
 8009ece:	4831      	ldr	r0, [pc, #196]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009ed0:	f001 fa31 	bl	800b336 <PID_setTargetValue>
 8009ed4:	e0fb      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 8009ed6:	7d3b      	ldrb	r3, [r7, #20]
 8009ed8:	2b54      	cmp	r3, #84	; 0x54
 8009eda:	d125      	bne.n	8009f28 <DRV_updateFromMaster+0x254>
 8009edc:	7d7b      	ldrb	r3, [r7, #21]
 8009ede:	2b4c      	cmp	r3, #76	; 0x4c
 8009ee0:	d122      	bne.n	8009f28 <DRV_updateFromMaster+0x254>
        {
          DRV_setDirectionsTranslateLeft();
 8009ee2:	f000 fba5 	bl	800a630 <DRV_setDirectionsTranslateLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009ee6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ee8:	f7f6 fef4 	bl	8000cd4 <__aeabi_i2f>
 8009eec:	4603      	mov	r3, r0
 8009eee:	4619      	mov	r1, r3
 8009ef0:	4825      	ldr	r0, [pc, #148]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009ef2:	f001 fa20 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009ef6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ef8:	f7f6 feec 	bl	8000cd4 <__aeabi_i2f>
 8009efc:	4603      	mov	r3, r0
 8009efe:	4619      	mov	r1, r3
 8009f00:	4822      	ldr	r0, [pc, #136]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009f02:	f001 fa18 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009f06:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f08:	f7f6 fee4 	bl	8000cd4 <__aeabi_i2f>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	4619      	mov	r1, r3
 8009f10:	481f      	ldr	r0, [pc, #124]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009f12:	f001 fa10 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009f16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f18:	f7f6 fedc 	bl	8000cd4 <__aeabi_i2f>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	4619      	mov	r1, r3
 8009f20:	481c      	ldr	r0, [pc, #112]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009f22:	f001 fa08 	bl	800b336 <PID_setTargetValue>
 8009f26:	e0d2      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009f28:	7d3b      	ldrb	r3, [r7, #20]
 8009f2a:	2b54      	cmp	r3, #84	; 0x54
 8009f2c:	d134      	bne.n	8009f98 <DRV_updateFromMaster+0x2c4>
 8009f2e:	7d7b      	ldrb	r3, [r7, #21]
 8009f30:	2b52      	cmp	r3, #82	; 0x52
 8009f32:	d131      	bne.n	8009f98 <DRV_updateFromMaster+0x2c4>
        {
          DRV_setDirectionsTranslateRight();
 8009f34:	f000 fb98 	bl	800a668 <DRV_setDirectionsTranslateRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009f38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f3a:	f7f6 fecb 	bl	8000cd4 <__aeabi_i2f>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	4619      	mov	r1, r3
 8009f42:	4811      	ldr	r0, [pc, #68]	; (8009f88 <DRV_updateFromMaster+0x2b4>)
 8009f44:	f001 f9f7 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009f48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f4a:	f7f6 fec3 	bl	8000cd4 <__aeabi_i2f>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	4619      	mov	r1, r3
 8009f52:	480e      	ldr	r0, [pc, #56]	; (8009f8c <DRV_updateFromMaster+0x2b8>)
 8009f54:	f001 f9ef 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009f58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f5a:	f7f6 febb 	bl	8000cd4 <__aeabi_i2f>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	4619      	mov	r1, r3
 8009f62:	480b      	ldr	r0, [pc, #44]	; (8009f90 <DRV_updateFromMaster+0x2bc>)
 8009f64:	f001 f9e7 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009f68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009f6a:	f7f6 feb3 	bl	8000cd4 <__aeabi_i2f>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	4619      	mov	r1, r3
 8009f72:	4808      	ldr	r0, [pc, #32]	; (8009f94 <DRV_updateFromMaster+0x2c0>)
 8009f74:	f001 f9df 	bl	800b336 <PID_setTargetValue>
 8009f78:	e0a9      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
 8009f7a:	bf00      	nop
 8009f7c:	2000025a 	.word	0x2000025a
 8009f80:	0800f418 	.word	0x0800f418
 8009f84:	0800f430 	.word	0x0800f430
 8009f88:	2000025c 	.word	0x2000025c
 8009f8c:	2000028c 	.word	0x2000028c
 8009f90:	200002ec 	.word	0x200002ec
 8009f94:	200002bc 	.word	0x200002bc
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009f98:	7d3b      	ldrb	r3, [r7, #20]
 8009f9a:	2b46      	cmp	r3, #70	; 0x46
 8009f9c:	d11f      	bne.n	8009fde <DRV_updateFromMaster+0x30a>
 8009f9e:	7d7b      	ldrb	r3, [r7, #21]
 8009fa0:	2b4c      	cmp	r3, #76	; 0x4c
 8009fa2:	d11c      	bne.n	8009fde <DRV_updateFromMaster+0x30a>
        {
          DRV_setDirectionsForwardLeft();
 8009fa4:	f000 fadc 	bl	800a560 <DRV_setDirectionsForwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009fa8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009faa:	f7f6 fe93 	bl	8000cd4 <__aeabi_i2f>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	483f      	ldr	r0, [pc, #252]	; (800a0b0 <DRV_updateFromMaster+0x3dc>)
 8009fb4:	f001 f9bf 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 8009fb8:	f04f 0100 	mov.w	r1, #0
 8009fbc:	483d      	ldr	r0, [pc, #244]	; (800a0b4 <DRV_updateFromMaster+0x3e0>)
 8009fbe:	f001 f9ba 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 8009fc2:	f04f 0100 	mov.w	r1, #0
 8009fc6:	483c      	ldr	r0, [pc, #240]	; (800a0b8 <DRV_updateFromMaster+0x3e4>)
 8009fc8:	f001 f9b5 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009fcc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009fce:	f7f6 fe81 	bl	8000cd4 <__aeabi_i2f>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4839      	ldr	r0, [pc, #228]	; (800a0bc <DRV_updateFromMaster+0x3e8>)
 8009fd8:	f001 f9ad 	bl	800b336 <PID_setTargetValue>
 8009fdc:	e077      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009fde:	7d3b      	ldrb	r3, [r7, #20]
 8009fe0:	2b46      	cmp	r3, #70	; 0x46
 8009fe2:	d11f      	bne.n	800a024 <DRV_updateFromMaster+0x350>
 8009fe4:	7d7b      	ldrb	r3, [r7, #21]
 8009fe6:	2b52      	cmp	r3, #82	; 0x52
 8009fe8:	d11c      	bne.n	800a024 <DRV_updateFromMaster+0x350>
        {
          DRV_setDirectionsForwardRight();
 8009fea:	f000 faa9 	bl	800a540 <DRV_setDirectionsForwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009fee:	f04f 0100 	mov.w	r1, #0
 8009ff2:	482f      	ldr	r0, [pc, #188]	; (800a0b0 <DRV_updateFromMaster+0x3dc>)
 8009ff4:	f001 f99f 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009ff8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ffa:	f7f6 fe6b 	bl	8000cd4 <__aeabi_i2f>
 8009ffe:	4603      	mov	r3, r0
 800a000:	4619      	mov	r1, r3
 800a002:	482c      	ldr	r0, [pc, #176]	; (800a0b4 <DRV_updateFromMaster+0x3e0>)
 800a004:	f001 f997 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 800a008:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a00a:	f7f6 fe63 	bl	8000cd4 <__aeabi_i2f>
 800a00e:	4603      	mov	r3, r0
 800a010:	4619      	mov	r1, r3
 800a012:	4829      	ldr	r0, [pc, #164]	; (800a0b8 <DRV_updateFromMaster+0x3e4>)
 800a014:	f001 f98f 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 800a018:	f04f 0100 	mov.w	r1, #0
 800a01c:	4827      	ldr	r0, [pc, #156]	; (800a0bc <DRV_updateFromMaster+0x3e8>)
 800a01e:	f001 f98a 	bl	800b336 <PID_setTargetValue>
 800a022:	e054      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 800a024:	7d3b      	ldrb	r3, [r7, #20]
 800a026:	2b42      	cmp	r3, #66	; 0x42
 800a028:	d11f      	bne.n	800a06a <DRV_updateFromMaster+0x396>
 800a02a:	7d7b      	ldrb	r3, [r7, #21]
 800a02c:	2b4c      	cmp	r3, #76	; 0x4c
 800a02e:	d11c      	bne.n	800a06a <DRV_updateFromMaster+0x396>
        {
          DRV_setDirectionsBackwardLeft();
 800a030:	f000 fab6 	bl	800a5a0 <DRV_setDirectionsBackwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 800a034:	f04f 0100 	mov.w	r1, #0
 800a038:	481d      	ldr	r0, [pc, #116]	; (800a0b0 <DRV_updateFromMaster+0x3dc>)
 800a03a:	f001 f97c 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 800a03e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a040:	f7f6 fe48 	bl	8000cd4 <__aeabi_i2f>
 800a044:	4603      	mov	r3, r0
 800a046:	4619      	mov	r1, r3
 800a048:	481a      	ldr	r0, [pc, #104]	; (800a0b4 <DRV_updateFromMaster+0x3e0>)
 800a04a:	f001 f974 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 800a04e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a050:	f7f6 fe40 	bl	8000cd4 <__aeabi_i2f>
 800a054:	4603      	mov	r3, r0
 800a056:	4619      	mov	r1, r3
 800a058:	4817      	ldr	r0, [pc, #92]	; (800a0b8 <DRV_updateFromMaster+0x3e4>)
 800a05a:	f001 f96c 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 800a05e:	f04f 0100 	mov.w	r1, #0
 800a062:	4816      	ldr	r0, [pc, #88]	; (800a0bc <DRV_updateFromMaster+0x3e8>)
 800a064:	f001 f967 	bl	800b336 <PID_setTargetValue>
 800a068:	e031      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 800a06a:	7d3b      	ldrb	r3, [r7, #20]
 800a06c:	2b42      	cmp	r3, #66	; 0x42
 800a06e:	d127      	bne.n	800a0c0 <DRV_updateFromMaster+0x3ec>
 800a070:	7d7b      	ldrb	r3, [r7, #21]
 800a072:	2b52      	cmp	r3, #82	; 0x52
 800a074:	d124      	bne.n	800a0c0 <DRV_updateFromMaster+0x3ec>
        {
          DRV_setDirectionsBackwardRight();
 800a076:	f000 fa83 	bl	800a580 <DRV_setDirectionsBackwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 800a07a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a07c:	f7f6 fe2a 	bl	8000cd4 <__aeabi_i2f>
 800a080:	4603      	mov	r3, r0
 800a082:	4619      	mov	r1, r3
 800a084:	480a      	ldr	r0, [pc, #40]	; (800a0b0 <DRV_updateFromMaster+0x3dc>)
 800a086:	f001 f956 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 800a08a:	f04f 0100 	mov.w	r1, #0
 800a08e:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <DRV_updateFromMaster+0x3e0>)
 800a090:	f001 f951 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 800a094:	f04f 0100 	mov.w	r1, #0
 800a098:	4807      	ldr	r0, [pc, #28]	; (800a0b8 <DRV_updateFromMaster+0x3e4>)
 800a09a:	f001 f94c 	bl	800b336 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 800a09e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a0a0:	f7f6 fe18 	bl	8000cd4 <__aeabi_i2f>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	4804      	ldr	r0, [pc, #16]	; (800a0bc <DRV_updateFromMaster+0x3e8>)
 800a0aa:	f001 f944 	bl	800b336 <PID_setTargetValue>
 800a0ae:	e00e      	b.n	800a0ce <DRV_updateFromMaster+0x3fa>
 800a0b0:	2000025c 	.word	0x2000025c
 800a0b4:	2000028c 	.word	0x2000028c
 800a0b8:	200002ec 	.word	0x200002ec
 800a0bc:	200002bc 	.word	0x200002bc
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 800a0c0:	f107 0314 	add.w	r3, r7, #20
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	4989      	ldr	r1, [pc, #548]	; (800a2ec <DRV_updateFromMaster+0x618>)
 800a0c8:	2003      	movs	r0, #3
 800a0ca:	f000 fea1 	bl	800ae10 <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = fabs((float)ENC_getCount(&g_DRV_encoderFrontRight) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a0ce:	4888      	ldr	r0, [pc, #544]	; (800a2f0 <DRV_updateFromMaster+0x61c>)
 800a0d0:	f000 fd6d 	bl	800abae <ENC_getCount>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7f6 fdfc 	bl	8000cd4 <__aeabi_i2f>
 800a0dc:	4604      	mov	r4, r0
 800a0de:	887b      	ldrh	r3, [r7, #2]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7f6 fdf3 	bl	8000ccc <__aeabi_ui2f>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	f7f6 fefa 	bl	8000ee4 <__aeabi_fdiv>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	4980      	ldr	r1, [pc, #512]	; (800a2f4 <DRV_updateFromMaster+0x620>)
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7f6 fe41 	bl	8000d7c <__aeabi_fmul>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a100:	653b      	str	r3, [r7, #80]	; 0x50
    l_measuredSpeedFrontLeft  = fabs((float)ENC_getCount(&g_DRV_encoderFrontLeft ) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a102:	487d      	ldr	r0, [pc, #500]	; (800a2f8 <DRV_updateFromMaster+0x624>)
 800a104:	f000 fd53 	bl	800abae <ENC_getCount>
 800a108:	4603      	mov	r3, r0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7f6 fde2 	bl	8000cd4 <__aeabi_i2f>
 800a110:	4604      	mov	r4, r0
 800a112:	887b      	ldrh	r3, [r7, #2]
 800a114:	4618      	mov	r0, r3
 800a116:	f7f6 fdd9 	bl	8000ccc <__aeabi_ui2f>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4619      	mov	r1, r3
 800a11e:	4620      	mov	r0, r4
 800a120:	f7f6 fee0 	bl	8000ee4 <__aeabi_fdiv>
 800a124:	4603      	mov	r3, r0
 800a126:	4973      	ldr	r1, [pc, #460]	; (800a2f4 <DRV_updateFromMaster+0x620>)
 800a128:	4618      	mov	r0, r3
 800a12a:	f7f6 fe27 	bl	8000d7c <__aeabi_fmul>
 800a12e:	4603      	mov	r3, r0
 800a130:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a134:	64fb      	str	r3, [r7, #76]	; 0x4c
    l_measuredSpeedRearRight  = fabs((float)ENC_getCount(&g_DRV_encoderRearRight ) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a136:	4871      	ldr	r0, [pc, #452]	; (800a2fc <DRV_updateFromMaster+0x628>)
 800a138:	f000 fd39 	bl	800abae <ENC_getCount>
 800a13c:	4603      	mov	r3, r0
 800a13e:	4618      	mov	r0, r3
 800a140:	f7f6 fdc8 	bl	8000cd4 <__aeabi_i2f>
 800a144:	4604      	mov	r4, r0
 800a146:	887b      	ldrh	r3, [r7, #2]
 800a148:	4618      	mov	r0, r3
 800a14a:	f7f6 fdbf 	bl	8000ccc <__aeabi_ui2f>
 800a14e:	4603      	mov	r3, r0
 800a150:	4619      	mov	r1, r3
 800a152:	4620      	mov	r0, r4
 800a154:	f7f6 fec6 	bl	8000ee4 <__aeabi_fdiv>
 800a158:	4603      	mov	r3, r0
 800a15a:	4966      	ldr	r1, [pc, #408]	; (800a2f4 <DRV_updateFromMaster+0x620>)
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7f6 fe0d 	bl	8000d7c <__aeabi_fmul>
 800a162:	4603      	mov	r3, r0
 800a164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a168:	64bb      	str	r3, [r7, #72]	; 0x48
    l_measuredSpeedRearLeft   = fabs((float)ENC_getCount(&g_DRV_encoderRearLeft  ) / (float)p_deltaTime * STD_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 800a16a:	4865      	ldr	r0, [pc, #404]	; (800a300 <DRV_updateFromMaster+0x62c>)
 800a16c:	f000 fd1f 	bl	800abae <ENC_getCount>
 800a170:	4603      	mov	r3, r0
 800a172:	4618      	mov	r0, r3
 800a174:	f7f6 fdae 	bl	8000cd4 <__aeabi_i2f>
 800a178:	4604      	mov	r4, r0
 800a17a:	887b      	ldrh	r3, [r7, #2]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7f6 fda5 	bl	8000ccc <__aeabi_ui2f>
 800a182:	4603      	mov	r3, r0
 800a184:	4619      	mov	r1, r3
 800a186:	4620      	mov	r0, r4
 800a188:	f7f6 feac 	bl	8000ee4 <__aeabi_fdiv>
 800a18c:	4603      	mov	r3, r0
 800a18e:	4959      	ldr	r1, [pc, #356]	; (800a2f4 <DRV_updateFromMaster+0x620>)
 800a190:	4618      	mov	r0, r3
 800a192:	f7f6 fdf3 	bl	8000d7c <__aeabi_fmul>
 800a196:	4603      	mov	r3, r0
 800a198:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a19c:	647b      	str	r3, [r7, #68]	; 0x44

    CBU_push(&g_DRV_speedBufferFrontRight, l_measuredSpeedFrontRight);
 800a19e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1a0:	4858      	ldr	r0, [pc, #352]	; (800a304 <DRV_updateFromMaster+0x630>)
 800a1a2:	f7ff fa2b 	bl	80095fc <CBU_push>
    CBU_push(&g_DRV_speedBufferFrontLeft , l_measuredSpeedFrontLeft );
 800a1a6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a1a8:	4857      	ldr	r0, [pc, #348]	; (800a308 <DRV_updateFromMaster+0x634>)
 800a1aa:	f7ff fa27 	bl	80095fc <CBU_push>
    CBU_push(&g_DRV_speedBufferRearRight , l_measuredSpeedRearRight );
 800a1ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a1b0:	4856      	ldr	r0, [pc, #344]	; (800a30c <DRV_updateFromMaster+0x638>)
 800a1b2:	f7ff fa23 	bl	80095fc <CBU_push>
    CBU_push(&g_DRV_speedBufferRearLeft  , l_measuredSpeedRearLeft  );
 800a1b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1b8:	4855      	ldr	r0, [pc, #340]	; (800a310 <DRV_updateFromMaster+0x63c>)
 800a1ba:	f7ff fa1f 	bl	80095fc <CBU_push>

    l_averageSpeedFrontRight = CBU_getAverage(&g_DRV_speedBufferFrontRight);
 800a1be:	4851      	ldr	r0, [pc, #324]	; (800a304 <DRV_updateFromMaster+0x630>)
 800a1c0:	f7ff fa43 	bl	800964a <CBU_getAverage>
 800a1c4:	6438      	str	r0, [r7, #64]	; 0x40
    l_averageSpeedFrontLeft  = CBU_getAverage(&g_DRV_speedBufferFrontLeft );
 800a1c6:	4850      	ldr	r0, [pc, #320]	; (800a308 <DRV_updateFromMaster+0x634>)
 800a1c8:	f7ff fa3f 	bl	800964a <CBU_getAverage>
 800a1cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    l_averageSpeedRearRight  = CBU_getAverage(&g_DRV_speedBufferRearRight );
 800a1ce:	484f      	ldr	r0, [pc, #316]	; (800a30c <DRV_updateFromMaster+0x638>)
 800a1d0:	f7ff fa3b 	bl	800964a <CBU_getAverage>
 800a1d4:	63b8      	str	r0, [r7, #56]	; 0x38
    l_averageSpeedRearLeft   = CBU_getAverage(&g_DRV_speedBufferRearLeft  );
 800a1d6:	484e      	ldr	r0, [pc, #312]	; (800a310 <DRV_updateFromMaster+0x63c>)
 800a1d8:	f7ff fa37 	bl	800964a <CBU_getAverage>
 800a1dc:	6378      	str	r0, [r7, #52]	; 0x34

    HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 800a1de:	f107 0310 	add.w	r3, r7, #16
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	484b      	ldr	r0, [pc, #300]	; (800a314 <DRV_updateFromMaster+0x640>)
 800a1e8:	f7fb f984 	bl	80054f4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 800a1ec:	f107 030c 	add.w	r3, r7, #12
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4847      	ldr	r0, [pc, #284]	; (800a314 <DRV_updateFromMaster+0x640>)
 800a1f6:	f7fb fb81 	bl	80058fc <HAL_RTC_GetDate>

    if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&l_lastTime) >= 3)
 800a1fa:	f107 0310 	add.w	r3, r7, #16
 800a1fe:	4618      	mov	r0, r3
 800a200:	f001 fb49 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 800a204:	4604      	mov	r4, r0
 800a206:	4844      	ldr	r0, [pc, #272]	; (800a318 <DRV_updateFromMaster+0x644>)
 800a208:	f001 fb45 	bl	800b896 <UTI_turnRtcTimeToSeconds>
 800a20c:	4603      	mov	r3, r0
 800a20e:	1ae3      	subs	r3, r4, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d923      	bls.n	800a25c <DRV_updateFromMaster+0x588>
    {
      l_lastTime = l_time;
 800a214:	4b40      	ldr	r3, [pc, #256]	; (800a318 <DRV_updateFromMaster+0x644>)
 800a216:	f107 0210 	add.w	r2, r7, #16
 800a21a:	6812      	ldr	r2, [r2, #0]
 800a21c:	4611      	mov	r1, r2
 800a21e:	8019      	strh	r1, [r3, #0]
 800a220:	3302      	adds	r3, #2
 800a222:	0c12      	lsrs	r2, r2, #16
 800a224:	701a      	strb	r2, [r3, #0]
      PID_logInfo(&g_DRV_pidFrontRight);
 800a226:	483d      	ldr	r0, [pc, #244]	; (800a31c <DRV_updateFromMaster+0x648>)
 800a228:	f001 f94c 	bl	800b4c4 <PID_logInfo>
      LOG_info("%d, %d, %d, %d",
 800a22c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a22e:	f7f6 fef5 	bl	800101c <__aeabi_f2iz>
 800a232:	4605      	mov	r5, r0
 800a234:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a236:	f7f6 fef1 	bl	800101c <__aeabi_f2iz>
 800a23a:	4606      	mov	r6, r0
 800a23c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a23e:	f7f6 feed 	bl	800101c <__aeabi_f2iz>
 800a242:	4604      	mov	r4, r0
 800a244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a246:	f7f6 fee9 	bl	800101c <__aeabi_f2iz>
 800a24a:	4603      	mov	r3, r0
 800a24c:	9301      	str	r3, [sp, #4]
 800a24e:	9400      	str	r4, [sp, #0]
 800a250:	4633      	mov	r3, r6
 800a252:	462a      	mov	r2, r5
 800a254:	4932      	ldr	r1, [pc, #200]	; (800a320 <DRV_updateFromMaster+0x64c>)
 800a256:	2001      	movs	r0, #1
 800a258:	f000 fdda 	bl	800ae10 <LOG_log>
               (int32_t)l_averageSpeedRearRight,
               (int32_t)l_averageSpeedRearLeft);
    }

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_averageSpeedFrontRight, p_deltaTime);
 800a25c:	887b      	ldrh	r3, [r7, #2]
 800a25e:	461a      	mov	r2, r3
 800a260:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a262:	482e      	ldr	r0, [pc, #184]	; (800a31c <DRV_updateFromMaster+0x648>)
 800a264:	f001 f874 	bl	800b350 <PID_update>
 800a268:	6338      	str	r0, [r7, #48]	; 0x30
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_averageSpeedFrontLeft , p_deltaTime);
 800a26a:	887b      	ldrh	r3, [r7, #2]
 800a26c:	461a      	mov	r2, r3
 800a26e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a270:	482c      	ldr	r0, [pc, #176]	; (800a324 <DRV_updateFromMaster+0x650>)
 800a272:	f001 f86d 	bl	800b350 <PID_update>
 800a276:	62f8      	str	r0, [r7, #44]	; 0x2c
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_averageSpeedRearRight , p_deltaTime);
 800a278:	887b      	ldrh	r3, [r7, #2]
 800a27a:	461a      	mov	r2, r3
 800a27c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a27e:	482a      	ldr	r0, [pc, #168]	; (800a328 <DRV_updateFromMaster+0x654>)
 800a280:	f001 f866 	bl	800b350 <PID_update>
 800a284:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_averageSpeedRearLeft  , p_deltaTime);
 800a286:	887b      	ldrh	r3, [r7, #2]
 800a288:	461a      	mov	r2, r3
 800a28a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a28c:	4827      	ldr	r0, [pc, #156]	; (800a32c <DRV_updateFromMaster+0x658>)
 800a28e:	f001 f85f 	bl	800b350 <PID_update>
 800a292:	6278      	str	r0, [r7, #36]	; 0x24

    if (g_DRV_areMotorsOn == false)
 800a294:	4b26      	ldr	r3, [pc, #152]	; (800a330 <DRV_updateFromMaster+0x65c>)
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	f083 0301 	eor.w	r3, r3, #1
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d120      	bne.n	800a2e4 <DRV_updateFromMaster+0x610>
      ; /* Nothing to do */
    }
    else
    {
      /* Update motors */
      MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 800a2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2a4:	f7f6 fee0 	bl	8001068 <__aeabi_f2uiz>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	4821      	ldr	r0, [pc, #132]	; (800a334 <DRV_updateFromMaster+0x660>)
 800a2ae:	f000 ff79 	bl	800b1a4 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 800a2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a2b4:	f7f6 fed8 	bl	8001068 <__aeabi_f2uiz>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	481e      	ldr	r0, [pc, #120]	; (800a338 <DRV_updateFromMaster+0x664>)
 800a2be:	f000 ff71 	bl	800b1a4 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 800a2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2c4:	f7f6 fed0 	bl	8001068 <__aeabi_f2uiz>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	481b      	ldr	r0, [pc, #108]	; (800a33c <DRV_updateFromMaster+0x668>)
 800a2ce:	f000 ff69 	bl	800b1a4 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 800a2d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2d4:	f7f6 fec8 	bl	8001068 <__aeabi_f2uiz>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	4619      	mov	r1, r3
 800a2dc:	4818      	ldr	r0, [pc, #96]	; (800a340 <DRV_updateFromMaster+0x66c>)
 800a2de:	f000 ff61 	bl	800b1a4 <MTR_setSpeed>
    }
  }

  return;
 800a2e2:	bf00      	nop
 800a2e4:	bf00      	nop
}
 800a2e6:	375c      	adds	r7, #92	; 0x5c
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ec:	0800f454 	.word	0x0800f454
 800a2f0:	200003ac 	.word	0x200003ac
 800a2f4:	47927c00 	.word	0x47927c00
 800a2f8:	200003b8 	.word	0x200003b8
 800a2fc:	200003d0 	.word	0x200003d0
 800a300:	200003c4 	.word	0x200003c4
 800a304:	200003dc 	.word	0x200003dc
 800a308:	2000040c 	.word	0x2000040c
 800a30c:	2000046c 	.word	0x2000046c
 800a310:	2000043c 	.word	0x2000043c
 800a314:	2000084c 	.word	0x2000084c
 800a318:	2000049c 	.word	0x2000049c
 800a31c:	2000025c 	.word	0x2000025c
 800a320:	0800f478 	.word	0x0800f478
 800a324:	2000028c 	.word	0x2000028c
 800a328:	200002ec 	.word	0x200002ec
 800a32c:	200002bc 	.word	0x200002bc
 800a330:	20000259 	.word	0x20000259
 800a334:	2000031c 	.word	0x2000031c
 800a338:	20000340 	.word	0x20000340
 800a33c:	20000388 	.word	0x20000388
 800a340:	20000364 	.word	0x20000364

0800a344 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 800a348:	4b02      	ldr	r3, [pc, #8]	; (800a354 <DRV_getMode+0x10>)
 800a34a:	781b      	ldrb	r3, [r3, #0]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	46bd      	mov	sp, r7
 800a350:	bc80      	pop	{r7}
 800a352:	4770      	bx	lr
 800a354:	2000025a 	.word	0x2000025a

0800a358 <DRV_logInfo>:

void DRV_logInfo(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 800a35e:	4b3d      	ldr	r3, [pc, #244]	; (800a454 <DRV_logInfo+0xfc>)
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d104      	bne.n	800a370 <DRV_logInfo+0x18>
  {
    LOG_info("Mode  : MANUAL FIXED SPEED");
 800a366:	493c      	ldr	r1, [pc, #240]	; (800a458 <DRV_logInfo+0x100>)
 800a368:	2001      	movs	r0, #1
 800a36a:	f000 fd51 	bl	800ae10 <LOG_log>
 800a36e:	e018      	b.n	800a3a2 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 800a370:	4b38      	ldr	r3, [pc, #224]	; (800a454 <DRV_logInfo+0xfc>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d104      	bne.n	800a382 <DRV_logInfo+0x2a>
  {
    LOG_info("Mode  : MANUAL VARIABLE SPEED");
 800a378:	4938      	ldr	r1, [pc, #224]	; (800a45c <DRV_logInfo+0x104>)
 800a37a:	2001      	movs	r0, #1
 800a37c:	f000 fd48 	bl	800ae10 <LOG_log>
 800a380:	e00f      	b.n	800a3a2 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 800a382:	4b34      	ldr	r3, [pc, #208]	; (800a454 <DRV_logInfo+0xfc>)
 800a384:	781b      	ldrb	r3, [r3, #0]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d104      	bne.n	800a394 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode  : MASTER BOARD CONTROL");
 800a38a:	4935      	ldr	r1, [pc, #212]	; (800a460 <DRV_logInfo+0x108>)
 800a38c:	2001      	movs	r0, #1
 800a38e:	f000 fd3f 	bl	800ae10 <LOG_log>
 800a392:	e006      	b.n	800a3a2 <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 800a394:	4b2f      	ldr	r3, [pc, #188]	; (800a454 <DRV_logInfo+0xfc>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	461a      	mov	r2, r3
 800a39a:	4932      	ldr	r1, [pc, #200]	; (800a464 <DRV_logInfo+0x10c>)
 800a39c:	2003      	movs	r0, #3
 800a39e:	f000 fd37 	bl	800ae10 <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 800a3a2:	4b31      	ldr	r3, [pc, #196]	; (800a468 <DRV_logInfo+0x110>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <DRV_logInfo+0x5c>
  {
    LOG_info("Motors: ON");
 800a3aa:	4930      	ldr	r1, [pc, #192]	; (800a46c <DRV_logInfo+0x114>)
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	f000 fd2f 	bl	800ae10 <LOG_log>
 800a3b2:	e003      	b.n	800a3bc <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Motors: OFF");
 800a3b4:	492e      	ldr	r1, [pc, #184]	; (800a470 <DRV_logInfo+0x118>)
 800a3b6:	2001      	movs	r0, #1
 800a3b8:	f000 fd2a 	bl	800ae10 <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 800a3bc:	482d      	ldr	r0, [pc, #180]	; (800a474 <DRV_logInfo+0x11c>)
 800a3be:	f000 fee5 	bl	800b18c <MTR_getDirection>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 800a3c6:	482b      	ldr	r0, [pc, #172]	; (800a474 <DRV_logInfo+0x11c>)
 800a3c8:	f000 ff2a 	bl	800b220 <MTR_getSpeed>
 800a3cc:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 800a3ce:	79fa      	ldrb	r2, [r7, #7]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	4a28      	ldr	r2, [pc, #160]	; (800a478 <DRV_logInfo+0x120>)
 800a3d8:	4928      	ldr	r1, [pc, #160]	; (800a47c <DRV_logInfo+0x124>)
 800a3da:	2001      	movs	r0, #1
 800a3dc:	f000 fd18 	bl	800ae10 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 800a3e0:	4827      	ldr	r0, [pc, #156]	; (800a480 <DRV_logInfo+0x128>)
 800a3e2:	f000 fed3 	bl	800b18c <MTR_getDirection>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 800a3ea:	4825      	ldr	r0, [pc, #148]	; (800a480 <DRV_logInfo+0x128>)
 800a3ec:	f000 ff18 	bl	800b220 <MTR_getSpeed>
 800a3f0:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 800a3f2:	79fa      	ldrb	r2, [r7, #7]
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	4a22      	ldr	r2, [pc, #136]	; (800a484 <DRV_logInfo+0x12c>)
 800a3fc:	491f      	ldr	r1, [pc, #124]	; (800a47c <DRV_logInfo+0x124>)
 800a3fe:	2001      	movs	r0, #1
 800a400:	f000 fd06 	bl	800ae10 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 800a404:	4820      	ldr	r0, [pc, #128]	; (800a488 <DRV_logInfo+0x130>)
 800a406:	f000 fec1 	bl	800b18c <MTR_getDirection>
 800a40a:	4603      	mov	r3, r0
 800a40c:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 800a40e:	481e      	ldr	r0, [pc, #120]	; (800a488 <DRV_logInfo+0x130>)
 800a410:	f000 ff06 	bl	800b220 <MTR_getSpeed>
 800a414:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 800a416:	79fa      	ldrb	r2, [r7, #7]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	4613      	mov	r3, r2
 800a41e:	4a1b      	ldr	r2, [pc, #108]	; (800a48c <DRV_logInfo+0x134>)
 800a420:	4916      	ldr	r1, [pc, #88]	; (800a47c <DRV_logInfo+0x124>)
 800a422:	2001      	movs	r0, #1
 800a424:	f000 fcf4 	bl	800ae10 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 800a428:	4819      	ldr	r0, [pc, #100]	; (800a490 <DRV_logInfo+0x138>)
 800a42a:	f000 feaf 	bl	800b18c <MTR_getDirection>
 800a42e:	4603      	mov	r3, r0
 800a430:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 800a432:	4817      	ldr	r0, [pc, #92]	; (800a490 <DRV_logInfo+0x138>)
 800a434:	f000 fef4 	bl	800b220 <MTR_getSpeed>
 800a438:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 800a43a:	79fa      	ldrb	r2, [r7, #7]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	4613      	mov	r3, r2
 800a442:	4a14      	ldr	r2, [pc, #80]	; (800a494 <DRV_logInfo+0x13c>)
 800a444:	490d      	ldr	r1, [pc, #52]	; (800a47c <DRV_logInfo+0x124>)
 800a446:	2001      	movs	r0, #1
 800a448:	f000 fce2 	bl	800ae10 <LOG_log>

  return;
 800a44c:	bf00      	nop
}
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	2000025a 	.word	0x2000025a
 800a458:	0800f488 	.word	0x0800f488
 800a45c:	0800f4a4 	.word	0x0800f4a4
 800a460:	0800f4c4 	.word	0x0800f4c4
 800a464:	0800f4e4 	.word	0x0800f4e4
 800a468:	20000259 	.word	0x20000259
 800a46c:	0800f500 	.word	0x0800f500
 800a470:	0800f50c 	.word	0x0800f50c
 800a474:	20000340 	.word	0x20000340
 800a478:	0800f338 	.word	0x0800f338
 800a47c:	0800f518 	.word	0x0800f518
 800a480:	2000031c 	.word	0x2000031c
 800a484:	0800f32c 	.word	0x0800f32c
 800a488:	20000364 	.word	0x20000364
 800a48c:	0800f344 	.word	0x0800f344
 800a490:	20000388 	.word	0x20000388
 800a494:	0800f350 	.word	0x0800f350

0800a498 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_STOP);
 800a49c:	2100      	movs	r1, #0
 800a49e:	4808      	ldr	r0, [pc, #32]	; (800a4c0 <DRV_setDirectionsStop+0x28>)
 800a4a0:	f000 fe08 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_STOP);
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	4807      	ldr	r0, [pc, #28]	; (800a4c4 <DRV_setDirectionsStop+0x2c>)
 800a4a8:	f000 fe04 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_STOP);
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	4806      	ldr	r0, [pc, #24]	; (800a4c8 <DRV_setDirectionsStop+0x30>)
 800a4b0:	f000 fe00 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_STOP);
 800a4b4:	2100      	movs	r1, #0
 800a4b6:	4805      	ldr	r0, [pc, #20]	; (800a4cc <DRV_setDirectionsStop+0x34>)
 800a4b8:	f000 fdfc 	bl	800b0b4 <MTR_setDirection>

  return;
 800a4bc:	bf00      	nop
}
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	2000031c 	.word	0x2000031c
 800a4c4:	20000340 	.word	0x20000340
 800a4c8:	20000388 	.word	0x20000388
 800a4cc:	20000364 	.word	0x20000364

0800a4d0 <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a4d4:	2101      	movs	r1, #1
 800a4d6:	4808      	ldr	r0, [pc, #32]	; (800a4f8 <DRV_setDirectionsForward+0x28>)
 800a4d8:	f000 fdec 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800a4dc:	2101      	movs	r1, #1
 800a4de:	4807      	ldr	r0, [pc, #28]	; (800a4fc <DRV_setDirectionsForward+0x2c>)
 800a4e0:	f000 fde8 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 800a4e4:	2101      	movs	r1, #1
 800a4e6:	4806      	ldr	r0, [pc, #24]	; (800a500 <DRV_setDirectionsForward+0x30>)
 800a4e8:	f000 fde4 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a4ec:	2101      	movs	r1, #1
 800a4ee:	4805      	ldr	r0, [pc, #20]	; (800a504 <DRV_setDirectionsForward+0x34>)
 800a4f0:	f000 fde0 	bl	800b0b4 <MTR_setDirection>

  return;
 800a4f4:	bf00      	nop
}
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	2000031c 	.word	0x2000031c
 800a4fc:	20000340 	.word	0x20000340
 800a500:	20000388 	.word	0x20000388
 800a504:	20000364 	.word	0x20000364

0800a508 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a50c:	2102      	movs	r1, #2
 800a50e:	4808      	ldr	r0, [pc, #32]	; (800a530 <DRV_setDirectionsBackward+0x28>)
 800a510:	f000 fdd0 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a514:	2102      	movs	r1, #2
 800a516:	4807      	ldr	r0, [pc, #28]	; (800a534 <DRV_setDirectionsBackward+0x2c>)
 800a518:	f000 fdcc 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a51c:	2102      	movs	r1, #2
 800a51e:	4806      	ldr	r0, [pc, #24]	; (800a538 <DRV_setDirectionsBackward+0x30>)
 800a520:	f000 fdc8 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a524:	2102      	movs	r1, #2
 800a526:	4805      	ldr	r0, [pc, #20]	; (800a53c <DRV_setDirectionsBackward+0x34>)
 800a528:	f000 fdc4 	bl	800b0b4 <MTR_setDirection>

  return;
 800a52c:	bf00      	nop
}
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	2000031c 	.word	0x2000031c
 800a534:	20000340 	.word	0x20000340
 800a538:	20000388 	.word	0x20000388
 800a53c:	20000364 	.word	0x20000364

0800a540 <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 800a544:	2101      	movs	r1, #1
 800a546:	4804      	ldr	r0, [pc, #16]	; (800a558 <DRV_setDirectionsForwardRight+0x18>)
 800a548:	f000 fdb4 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800a54c:	2101      	movs	r1, #1
 800a54e:	4803      	ldr	r0, [pc, #12]	; (800a55c <DRV_setDirectionsForwardRight+0x1c>)
 800a550:	f000 fdb0 	bl	800b0b4 <MTR_setDirection>

  return;
 800a554:	bf00      	nop
}
 800a556:	bd80      	pop	{r7, pc}
 800a558:	20000340 	.word	0x20000340
 800a55c:	20000388 	.word	0x20000388

0800a560 <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a564:	2101      	movs	r1, #1
 800a566:	4804      	ldr	r0, [pc, #16]	; (800a578 <DRV_setDirectionsForwardLeft+0x18>)
 800a568:	f000 fda4 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a56c:	2101      	movs	r1, #1
 800a56e:	4803      	ldr	r0, [pc, #12]	; (800a57c <DRV_setDirectionsForwardLeft+0x1c>)
 800a570:	f000 fda0 	bl	800b0b4 <MTR_setDirection>

  return;
 800a574:	bf00      	nop
}
 800a576:	bd80      	pop	{r7, pc}
 800a578:	2000031c 	.word	0x2000031c
 800a57c:	20000364 	.word	0x20000364

0800a580 <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a584:	2102      	movs	r1, #2
 800a586:	4804      	ldr	r0, [pc, #16]	; (800a598 <DRV_setDirectionsBackwardRight+0x18>)
 800a588:	f000 fd94 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a58c:	2102      	movs	r1, #2
 800a58e:	4803      	ldr	r0, [pc, #12]	; (800a59c <DRV_setDirectionsBackwardRight+0x1c>)
 800a590:	f000 fd90 	bl	800b0b4 <MTR_setDirection>

  return;
 800a594:	bf00      	nop
}
 800a596:	bd80      	pop	{r7, pc}
 800a598:	2000031c 	.word	0x2000031c
 800a59c:	20000364 	.word	0x20000364

0800a5a0 <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 800a5a4:	2102      	movs	r1, #2
 800a5a6:	4804      	ldr	r0, [pc, #16]	; (800a5b8 <DRV_setDirectionsBackwardLeft+0x18>)
 800a5a8:	f000 fd84 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 800a5ac:	2102      	movs	r1, #2
 800a5ae:	4803      	ldr	r0, [pc, #12]	; (800a5bc <DRV_setDirectionsBackwardLeft+0x1c>)
 800a5b0:	f000 fd80 	bl	800b0b4 <MTR_setDirection>

  return;
 800a5b4:	bf00      	nop
}
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	20000340 	.word	0x20000340
 800a5bc:	20000388 	.word	0x20000388

0800a5c0 <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a5c4:	2101      	movs	r1, #1
 800a5c6:	4808      	ldr	r0, [pc, #32]	; (800a5e8 <DRV_setDirectionsTurnLeft+0x28>)
 800a5c8:	f000 fd74 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a5cc:	2102      	movs	r1, #2
 800a5ce:	4807      	ldr	r0, [pc, #28]	; (800a5ec <DRV_setDirectionsTurnLeft+0x2c>)
 800a5d0:	f000 fd70 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a5d4:	2101      	movs	r1, #1
 800a5d6:	4806      	ldr	r0, [pc, #24]	; (800a5f0 <DRV_setDirectionsTurnLeft+0x30>)
 800a5d8:	f000 fd6c 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a5dc:	2102      	movs	r1, #2
 800a5de:	4805      	ldr	r0, [pc, #20]	; (800a5f4 <DRV_setDirectionsTurnLeft+0x34>)
 800a5e0:	f000 fd68 	bl	800b0b4 <MTR_setDirection>

  return;
 800a5e4:	bf00      	nop
}
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	2000031c 	.word	0x2000031c
 800a5ec:	20000340 	.word	0x20000340
 800a5f0:	20000388 	.word	0x20000388
 800a5f4:	20000364 	.word	0x20000364

0800a5f8 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a5fc:	2102      	movs	r1, #2
 800a5fe:	4808      	ldr	r0, [pc, #32]	; (800a620 <DRV_setDirectionsTurnRight+0x28>)
 800a600:	f000 fd58 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a604:	2101      	movs	r1, #1
 800a606:	4807      	ldr	r0, [pc, #28]	; (800a624 <DRV_setDirectionsTurnRight+0x2c>)
 800a608:	f000 fd54 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a60c:	2102      	movs	r1, #2
 800a60e:	4806      	ldr	r0, [pc, #24]	; (800a628 <DRV_setDirectionsTurnRight+0x30>)
 800a610:	f000 fd50 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a614:	2101      	movs	r1, #1
 800a616:	4805      	ldr	r0, [pc, #20]	; (800a62c <DRV_setDirectionsTurnRight+0x34>)
 800a618:	f000 fd4c 	bl	800b0b4 <MTR_setDirection>

  return;
 800a61c:	bf00      	nop
}
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	2000031c 	.word	0x2000031c
 800a624:	20000340 	.word	0x20000340
 800a628:	20000388 	.word	0x20000388
 800a62c:	20000364 	.word	0x20000364

0800a630 <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a634:	2101      	movs	r1, #1
 800a636:	4808      	ldr	r0, [pc, #32]	; (800a658 <DRV_setDirectionsTranslateLeft+0x28>)
 800a638:	f000 fd3c 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a63c:	2102      	movs	r1, #2
 800a63e:	4807      	ldr	r0, [pc, #28]	; (800a65c <DRV_setDirectionsTranslateLeft+0x2c>)
 800a640:	f000 fd38 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a644:	2102      	movs	r1, #2
 800a646:	4806      	ldr	r0, [pc, #24]	; (800a660 <DRV_setDirectionsTranslateLeft+0x30>)
 800a648:	f000 fd34 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a64c:	2101      	movs	r1, #1
 800a64e:	4805      	ldr	r0, [pc, #20]	; (800a664 <DRV_setDirectionsTranslateLeft+0x34>)
 800a650:	f000 fd30 	bl	800b0b4 <MTR_setDirection>

  return;
 800a654:	bf00      	nop
}
 800a656:	bd80      	pop	{r7, pc}
 800a658:	2000031c 	.word	0x2000031c
 800a65c:	20000340 	.word	0x20000340
 800a660:	20000388 	.word	0x20000388
 800a664:	20000364 	.word	0x20000364

0800a668 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a66c:	2102      	movs	r1, #2
 800a66e:	4808      	ldr	r0, [pc, #32]	; (800a690 <DRV_setDirectionsTranslateRight+0x28>)
 800a670:	f000 fd20 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a674:	2101      	movs	r1, #1
 800a676:	4807      	ldr	r0, [pc, #28]	; (800a694 <DRV_setDirectionsTranslateRight+0x2c>)
 800a678:	f000 fd1c 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a67c:	2101      	movs	r1, #1
 800a67e:	4806      	ldr	r0, [pc, #24]	; (800a698 <DRV_setDirectionsTranslateRight+0x30>)
 800a680:	f000 fd18 	bl	800b0b4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a684:	2102      	movs	r1, #2
 800a686:	4805      	ldr	r0, [pc, #20]	; (800a69c <DRV_setDirectionsTranslateRight+0x34>)
 800a688:	f000 fd14 	bl	800b0b4 <MTR_setDirection>

  return;
 800a68c:	bf00      	nop
}
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	2000031c 	.word	0x2000031c
 800a694:	20000340 	.word	0x20000340
 800a698:	20000388 	.word	0x20000388
 800a69c:	20000364 	.word	0x20000364

0800a6a0 <DRV_stop>:

static void DRV_stop(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a6a4:	f7ff fef8 	bl	800a498 <DRV_setDirectionsStop>

  MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	4808      	ldr	r0, [pc, #32]	; (800a6cc <DRV_stop+0x2c>)
 800a6ac:	f000 fd7a 	bl	800b1a4 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	4807      	ldr	r0, [pc, #28]	; (800a6d0 <DRV_stop+0x30>)
 800a6b4:	f000 fd76 	bl	800b1a4 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearRight , 0);
 800a6b8:	2100      	movs	r1, #0
 800a6ba:	4806      	ldr	r0, [pc, #24]	; (800a6d4 <DRV_stop+0x34>)
 800a6bc:	f000 fd72 	bl	800b1a4 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4805      	ldr	r0, [pc, #20]	; (800a6d8 <DRV_stop+0x38>)
 800a6c4:	f000 fd6e 	bl	800b1a4 <MTR_setSpeed>

  return;
 800a6c8:	bf00      	nop
}
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	2000031c 	.word	0x2000031c
 800a6d0:	20000340 	.word	0x20000340
 800a6d4:	20000388 	.word	0x20000388
 800a6d8:	20000364 	.word	0x20000364

0800a6dc <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	4911      	ldr	r1, [pc, #68]	; (800a730 <DRV_moveForward+0x54>)
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f000 fb8f 	bl	800ae10 <LOG_log>

  DRV_setDirectionsForward();
 800a6f2:	f7ff feed 	bl	800a4d0 <DRV_setDirectionsForward>

  if (g_DRV_areMotorsOn == false)
 800a6f6:	4b0f      	ldr	r3, [pc, #60]	; (800a734 <DRV_moveForward+0x58>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	f083 0301 	eor.w	r3, r3, #1
 800a6fe:	b2db      	uxtb	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d110      	bne.n	800a726 <DRV_moveForward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	480c      	ldr	r0, [pc, #48]	; (800a738 <DRV_moveForward+0x5c>)
 800a708:	f000 fd4c 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a70c:	68f9      	ldr	r1, [r7, #12]
 800a70e:	480b      	ldr	r0, [pc, #44]	; (800a73c <DRV_moveForward+0x60>)
 800a710:	f000 fd48 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a714:	68f9      	ldr	r1, [r7, #12]
 800a716:	480a      	ldr	r0, [pc, #40]	; (800a740 <DRV_moveForward+0x64>)
 800a718:	f000 fd44 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a71c:	68f9      	ldr	r1, [r7, #12]
 800a71e:	4809      	ldr	r0, [pc, #36]	; (800a744 <DRV_moveForward+0x68>)
 800a720:	f000 fd40 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a724:	bf00      	nop
 800a726:	bf00      	nop
}
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	0800f538 	.word	0x0800f538
 800a734:	20000259 	.word	0x20000259
 800a738:	2000031c 	.word	0x2000031c
 800a73c:	20000340 	.word	0x20000340
 800a740:	20000388 	.word	0x20000388
 800a744:	20000364 	.word	0x20000364

0800a748 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	4911      	ldr	r1, [pc, #68]	; (800a79c <DRV_moveBackward+0x54>)
 800a758:	2000      	movs	r0, #0
 800a75a:	f000 fb59 	bl	800ae10 <LOG_log>

  DRV_setDirectionsBackward();
 800a75e:	f7ff fed3 	bl	800a508 <DRV_setDirectionsBackward>

  if (g_DRV_areMotorsOn == false)
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <DRV_moveBackward+0x58>)
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	f083 0301 	eor.w	r3, r3, #1
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d110      	bne.n	800a792 <DRV_moveBackward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a770:	68f9      	ldr	r1, [r7, #12]
 800a772:	480c      	ldr	r0, [pc, #48]	; (800a7a4 <DRV_moveBackward+0x5c>)
 800a774:	f000 fd16 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a778:	68f9      	ldr	r1, [r7, #12]
 800a77a:	480b      	ldr	r0, [pc, #44]	; (800a7a8 <DRV_moveBackward+0x60>)
 800a77c:	f000 fd12 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	480a      	ldr	r0, [pc, #40]	; (800a7ac <DRV_moveBackward+0x64>)
 800a784:	f000 fd0e 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a788:	68f9      	ldr	r1, [r7, #12]
 800a78a:	4809      	ldr	r0, [pc, #36]	; (800a7b0 <DRV_moveBackward+0x68>)
 800a78c:	f000 fd0a 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a790:	bf00      	nop
 800a792:	bf00      	nop
}
 800a794:	3710      	adds	r7, #16
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	0800f54c 	.word	0x0800f54c
 800a7a0:	20000259 	.word	0x20000259
 800a7a4:	2000031c 	.word	0x2000031c
 800a7a8:	20000340 	.word	0x20000340
 800a7ac:	20000388 	.word	0x20000388
 800a7b0:	20000364 	.word	0x20000364

0800a7b4 <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 800a7c0:	68fa      	ldr	r2, [r7, #12]
 800a7c2:	4911      	ldr	r1, [pc, #68]	; (800a808 <DRV_moveForwardRight+0x54>)
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f000 fb23 	bl	800ae10 <LOG_log>

  DRV_setDirectionsForwardRight();
 800a7ca:	f7ff feb9 	bl	800a540 <DRV_setDirectionsForwardRight>

  if (g_DRV_areMotorsOn == false)
 800a7ce:	4b0f      	ldr	r3, [pc, #60]	; (800a80c <DRV_moveForwardRight+0x58>)
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	f083 0301 	eor.w	r3, r3, #1
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d110      	bne.n	800a7fe <DRV_moveForwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	480c      	ldr	r0, [pc, #48]	; (800a810 <DRV_moveForwardRight+0x5c>)
 800a7e0:	f000 fce0 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a7e4:	68f9      	ldr	r1, [r7, #12]
 800a7e6:	480b      	ldr	r0, [pc, #44]	; (800a814 <DRV_moveForwardRight+0x60>)
 800a7e8:	f000 fcdc 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a7ec:	68f9      	ldr	r1, [r7, #12]
 800a7ee:	480a      	ldr	r0, [pc, #40]	; (800a818 <DRV_moveForwardRight+0x64>)
 800a7f0:	f000 fcd8 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a7f4:	2100      	movs	r1, #0
 800a7f6:	4809      	ldr	r0, [pc, #36]	; (800a81c <DRV_moveForwardRight+0x68>)
 800a7f8:	f000 fcd4 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
}
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	0800f560 	.word	0x0800f560
 800a80c:	20000259 	.word	0x20000259
 800a810:	2000031c 	.word	0x2000031c
 800a814:	20000340 	.word	0x20000340
 800a818:	20000388 	.word	0x20000388
 800a81c:	20000364 	.word	0x20000364

0800a820 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4911      	ldr	r1, [pc, #68]	; (800a874 <DRV_moveForwardLeft+0x54>)
 800a830:	2000      	movs	r0, #0
 800a832:	f000 faed 	bl	800ae10 <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a836:	f7ff fe93 	bl	800a560 <DRV_setDirectionsForwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a83a:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <DRV_moveForwardLeft+0x58>)
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	f083 0301 	eor.w	r3, r3, #1
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b00      	cmp	r3, #0
 800a846:	d110      	bne.n	800a86a <DRV_moveForwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a848:	68f9      	ldr	r1, [r7, #12]
 800a84a:	480c      	ldr	r0, [pc, #48]	; (800a87c <DRV_moveForwardLeft+0x5c>)
 800a84c:	f000 fcaa 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a850:	2100      	movs	r1, #0
 800a852:	480b      	ldr	r0, [pc, #44]	; (800a880 <DRV_moveForwardLeft+0x60>)
 800a854:	f000 fca6 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a858:	2100      	movs	r1, #0
 800a85a:	480a      	ldr	r0, [pc, #40]	; (800a884 <DRV_moveForwardLeft+0x64>)
 800a85c:	f000 fca2 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	4809      	ldr	r0, [pc, #36]	; (800a888 <DRV_moveForwardLeft+0x68>)
 800a864:	f000 fc9e 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
}
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	0800f57c 	.word	0x0800f57c
 800a878:	20000259 	.word	0x20000259
 800a87c:	2000031c 	.word	0x2000031c
 800a880:	20000340 	.word	0x20000340
 800a884:	20000388 	.word	0x20000388
 800a888:	20000364 	.word	0x20000364

0800a88c <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b084      	sub	sp, #16
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	4911      	ldr	r1, [pc, #68]	; (800a8e0 <DRV_moveBackwardRight+0x54>)
 800a89c:	2000      	movs	r0, #0
 800a89e:	f000 fab7 	bl	800ae10 <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a8a2:	f7ff fe6d 	bl	800a580 <DRV_setDirectionsBackwardRight>

  if (g_DRV_areMotorsOn == false)
 800a8a6:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <DRV_moveBackwardRight+0x58>)
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	f083 0301 	eor.w	r3, r3, #1
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d110      	bne.n	800a8d6 <DRV_moveBackwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a8b4:	68f9      	ldr	r1, [r7, #12]
 800a8b6:	480c      	ldr	r0, [pc, #48]	; (800a8e8 <DRV_moveBackwardRight+0x5c>)
 800a8b8:	f000 fc74 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a8bc:	2100      	movs	r1, #0
 800a8be:	480b      	ldr	r0, [pc, #44]	; (800a8ec <DRV_moveBackwardRight+0x60>)
 800a8c0:	f000 fc70 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	480a      	ldr	r0, [pc, #40]	; (800a8f0 <DRV_moveBackwardRight+0x64>)
 800a8c8:	f000 fc6c 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a8cc:	68f9      	ldr	r1, [r7, #12]
 800a8ce:	4809      	ldr	r0, [pc, #36]	; (800a8f4 <DRV_moveBackwardRight+0x68>)
 800a8d0:	f000 fc68 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop
}
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	0800f594 	.word	0x0800f594
 800a8e4:	20000259 	.word	0x20000259
 800a8e8:	2000031c 	.word	0x2000031c
 800a8ec:	20000340 	.word	0x20000340
 800a8f0:	20000388 	.word	0x20000388
 800a8f4:	20000364 	.word	0x20000364

0800a8f8 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b084      	sub	sp, #16
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	4911      	ldr	r1, [pc, #68]	; (800a94c <DRV_moveBackwardLeft+0x54>)
 800a908:	2000      	movs	r0, #0
 800a90a:	f000 fa81 	bl	800ae10 <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a90e:	f7ff fe47 	bl	800a5a0 <DRV_setDirectionsBackwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a912:	4b0f      	ldr	r3, [pc, #60]	; (800a950 <DRV_moveBackwardLeft+0x58>)
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	f083 0301 	eor.w	r3, r3, #1
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d110      	bne.n	800a942 <DRV_moveBackwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a920:	2100      	movs	r1, #0
 800a922:	480c      	ldr	r0, [pc, #48]	; (800a954 <DRV_moveBackwardLeft+0x5c>)
 800a924:	f000 fc3e 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a928:	68f9      	ldr	r1, [r7, #12]
 800a92a:	480b      	ldr	r0, [pc, #44]	; (800a958 <DRV_moveBackwardLeft+0x60>)
 800a92c:	f000 fc3a 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a930:	68f9      	ldr	r1, [r7, #12]
 800a932:	480a      	ldr	r0, [pc, #40]	; (800a95c <DRV_moveBackwardLeft+0x64>)
 800a934:	f000 fc36 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a938:	2100      	movs	r1, #0
 800a93a:	4809      	ldr	r0, [pc, #36]	; (800a960 <DRV_moveBackwardLeft+0x68>)
 800a93c:	f000 fc32 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a940:	bf00      	nop
 800a942:	bf00      	nop
}
 800a944:	3710      	adds	r7, #16
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	0800f5b0 	.word	0x0800f5b0
 800a950:	20000259 	.word	0x20000259
 800a954:	2000031c 	.word	0x2000031c
 800a958:	20000340 	.word	0x20000340
 800a95c:	20000388 	.word	0x20000388
 800a960:	20000364 	.word	0x20000364

0800a964 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	4911      	ldr	r1, [pc, #68]	; (800a9b8 <DRV_turnLeft+0x54>)
 800a974:	2000      	movs	r0, #0
 800a976:	f000 fa4b 	bl	800ae10 <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a97a:	f7ff fe21 	bl	800a5c0 <DRV_setDirectionsTurnLeft>

  if (g_DRV_areMotorsOn == false)
 800a97e:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <DRV_turnLeft+0x58>)
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	f083 0301 	eor.w	r3, r3, #1
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d110      	bne.n	800a9ae <DRV_turnLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a98c:	68f9      	ldr	r1, [r7, #12]
 800a98e:	480c      	ldr	r0, [pc, #48]	; (800a9c0 <DRV_turnLeft+0x5c>)
 800a990:	f000 fc08 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a994:	68f9      	ldr	r1, [r7, #12]
 800a996:	480b      	ldr	r0, [pc, #44]	; (800a9c4 <DRV_turnLeft+0x60>)
 800a998:	f000 fc04 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a99c:	68f9      	ldr	r1, [r7, #12]
 800a99e:	480a      	ldr	r0, [pc, #40]	; (800a9c8 <DRV_turnLeft+0x64>)
 800a9a0:	f000 fc00 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a9a4:	68f9      	ldr	r1, [r7, #12]
 800a9a6:	4809      	ldr	r0, [pc, #36]	; (800a9cc <DRV_turnLeft+0x68>)
 800a9a8:	f000 fbfc 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800a9ac:	bf00      	nop
 800a9ae:	bf00      	nop
}
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	0800f5cc 	.word	0x0800f5cc
 800a9bc:	20000259 	.word	0x20000259
 800a9c0:	2000031c 	.word	0x2000031c
 800a9c4:	20000340 	.word	0x20000340
 800a9c8:	20000388 	.word	0x20000388
 800a9cc:	20000364 	.word	0x20000364

0800a9d0 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 800a9dc:	68fa      	ldr	r2, [r7, #12]
 800a9de:	4911      	ldr	r1, [pc, #68]	; (800aa24 <DRV_turnRight+0x54>)
 800a9e0:	2000      	movs	r0, #0
 800a9e2:	f000 fa15 	bl	800ae10 <LOG_log>

  DRV_setDirectionsTurnRight();
 800a9e6:	f7ff fe07 	bl	800a5f8 <DRV_setDirectionsTurnRight>

  if (g_DRV_areMotorsOn == false)
 800a9ea:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <DRV_turnRight+0x58>)
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	f083 0301 	eor.w	r3, r3, #1
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d110      	bne.n	800aa1a <DRV_turnRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a9f8:	68f9      	ldr	r1, [r7, #12]
 800a9fa:	480c      	ldr	r0, [pc, #48]	; (800aa2c <DRV_turnRight+0x5c>)
 800a9fc:	f000 fbd2 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800aa00:	68f9      	ldr	r1, [r7, #12]
 800aa02:	480b      	ldr	r0, [pc, #44]	; (800aa30 <DRV_turnRight+0x60>)
 800aa04:	f000 fbce 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800aa08:	68f9      	ldr	r1, [r7, #12]
 800aa0a:	480a      	ldr	r0, [pc, #40]	; (800aa34 <DRV_turnRight+0x64>)
 800aa0c:	f000 fbca 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800aa10:	68f9      	ldr	r1, [r7, #12]
 800aa12:	4809      	ldr	r0, [pc, #36]	; (800aa38 <DRV_turnRight+0x68>)
 800aa14:	f000 fbc6 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
}
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	0800f5e0 	.word	0x0800f5e0
 800aa28:	20000259 	.word	0x20000259
 800aa2c:	2000031c 	.word	0x2000031c
 800aa30:	20000340 	.word	0x20000340
 800aa34:	20000388 	.word	0x20000388
 800aa38:	20000364 	.word	0x20000364

0800aa3c <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	4911      	ldr	r1, [pc, #68]	; (800aa90 <DRV_translateLeft+0x54>)
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f000 f9df 	bl	800ae10 <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800aa52:	f7ff fded 	bl	800a630 <DRV_setDirectionsTranslateLeft>

  if (g_DRV_areMotorsOn == false)
 800aa56:	4b0f      	ldr	r3, [pc, #60]	; (800aa94 <DRV_translateLeft+0x58>)
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	f083 0301 	eor.w	r3, r3, #1
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d110      	bne.n	800aa86 <DRV_translateLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800aa64:	68f9      	ldr	r1, [r7, #12]
 800aa66:	480c      	ldr	r0, [pc, #48]	; (800aa98 <DRV_translateLeft+0x5c>)
 800aa68:	f000 fb9c 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800aa6c:	68f9      	ldr	r1, [r7, #12]
 800aa6e:	480b      	ldr	r0, [pc, #44]	; (800aa9c <DRV_translateLeft+0x60>)
 800aa70:	f000 fb98 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800aa74:	68f9      	ldr	r1, [r7, #12]
 800aa76:	480a      	ldr	r0, [pc, #40]	; (800aaa0 <DRV_translateLeft+0x64>)
 800aa78:	f000 fb94 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	4809      	ldr	r0, [pc, #36]	; (800aaa4 <DRV_translateLeft+0x68>)
 800aa80:	f000 fb90 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800aa84:	bf00      	nop
 800aa86:	bf00      	nop
}
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	0800f5f4 	.word	0x0800f5f4
 800aa94:	20000259 	.word	0x20000259
 800aa98:	2000031c 	.word	0x2000031c
 800aa9c:	20000340 	.word	0x20000340
 800aaa0:	20000388 	.word	0x20000388
 800aaa4:	20000364 	.word	0x20000364

0800aaa8 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	4911      	ldr	r1, [pc, #68]	; (800aafc <DRV_translateRight+0x54>)
 800aab8:	2000      	movs	r0, #0
 800aaba:	f000 f9a9 	bl	800ae10 <LOG_log>

  DRV_setDirectionsTranslateRight();
 800aabe:	f7ff fdd3 	bl	800a668 <DRV_setDirectionsTranslateRight>

  if (g_DRV_areMotorsOn == false)
 800aac2:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <DRV_translateRight+0x58>)
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	f083 0301 	eor.w	r3, r3, #1
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d110      	bne.n	800aaf2 <DRV_translateRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800aad0:	68f9      	ldr	r1, [r7, #12]
 800aad2:	480c      	ldr	r0, [pc, #48]	; (800ab04 <DRV_translateRight+0x5c>)
 800aad4:	f000 fb66 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800aad8:	68f9      	ldr	r1, [r7, #12]
 800aada:	480b      	ldr	r0, [pc, #44]	; (800ab08 <DRV_translateRight+0x60>)
 800aadc:	f000 fb62 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800aae0:	68f9      	ldr	r1, [r7, #12]
 800aae2:	480a      	ldr	r0, [pc, #40]	; (800ab0c <DRV_translateRight+0x64>)
 800aae4:	f000 fb5e 	bl	800b1a4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800aae8:	68f9      	ldr	r1, [r7, #12]
 800aaea:	4809      	ldr	r0, [pc, #36]	; (800ab10 <DRV_translateRight+0x68>)
 800aaec:	f000 fb5a 	bl	800b1a4 <MTR_setSpeed>
  }

  return;
 800aaf0:	bf00      	nop
 800aaf2:	bf00      	nop
}
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	0800f60c 	.word	0x0800f60c
 800ab00:	20000259 	.word	0x20000259
 800ab04:	2000031c 	.word	0x2000031c
 800ab08:	20000340 	.word	0x20000340
 800ab0c:	20000388 	.word	0x20000388
 800ab10:	20000364 	.word	0x20000364

0800ab14 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	603b      	str	r3, [r7, #0]
 800ab20:	4613      	mov	r3, r2
 800ab22:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800ab24:	68ba      	ldr	r2, [r7, #8]
 800ab26:	490a      	ldr	r1, [pc, #40]	; (800ab50 <ENC_init+0x3c>)
 800ab28:	2001      	movs	r0, #1
 800ab2a:	f000 f971 	bl	800ae10 <LOG_log>

  p_handle->name           = p_name;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	79fa      	ldrb	r2, [r7, #7]
 800ab38:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 f807 	bl	800ab54 <ENC_reset>

  return;
 800ab46:	bf00      	nop
}
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	0800f624 	.word	0x0800f624

0800ab54 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	809a      	strh	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	689b      	ldr	r3, [r3, #8]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800ab6c:	bf00      	nop
}
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr

0800ab76 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	799b      	ldrb	r3, [r3, #6]
 800ab86:	f083 0301 	eor.w	r3, r3, #1
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	887a      	ldrh	r2, [r7, #2]
 800ab94:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800ab96:	e006      	b.n	800aba6 <ENC_update+0x30>
    p_handle->value = -p_value;
 800ab98:	887b      	ldrh	r3, [r7, #2]
 800ab9a:	425b      	negs	r3, r3
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	b21a      	sxth	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	809a      	strh	r2, [r3, #4]
  return;
 800aba4:	bf00      	nop
}
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bc80      	pop	{r7}
 800abac:	4770      	bx	lr

0800abae <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = p_handle->value;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	889b      	ldrh	r3, [r3, #4]
 800abba:	81fb      	strh	r3, [r7, #14]

  ENC_reset(p_handle);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f7ff ffc9 	bl	800ab54 <ENC_reset>

  return l_count;
 800abc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	4603      	mov	r3, r0
 800abd8:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800abda:	4b1b      	ldr	r3, [pc, #108]	; (800ac48 <LED_setMode+0x78>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	79fa      	ldrb	r2, [r7, #7]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d02d      	beq.n	800ac40 <LED_setMode+0x70>
  {
    switch (p_mode)
 800abe4:	79fb      	ldrb	r3, [r7, #7]
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d825      	bhi.n	800ac36 <LED_setMode+0x66>
 800abea:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <LED_setMode+0x20>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac05 	.word	0x0800ac05
 800abf4:	0800ac0f 	.word	0x0800ac0f
 800abf8:	0800ac19 	.word	0x0800ac19
 800abfc:	0800ac23 	.word	0x0800ac23
 800ac00:	0800ac2d 	.word	0x0800ac2d
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800ac04:	4911      	ldr	r1, [pc, #68]	; (800ac4c <LED_setMode+0x7c>)
 800ac06:	2001      	movs	r0, #1
 800ac08:	f000 f902 	bl	800ae10 <LOG_log>
        break;
 800ac0c:	e014      	b.n	800ac38 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800ac0e:	4910      	ldr	r1, [pc, #64]	; (800ac50 <LED_setMode+0x80>)
 800ac10:	2001      	movs	r0, #1
 800ac12:	f000 f8fd 	bl	800ae10 <LOG_log>
        break;
 800ac16:	e00f      	b.n	800ac38 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800ac18:	490e      	ldr	r1, [pc, #56]	; (800ac54 <LED_setMode+0x84>)
 800ac1a:	2001      	movs	r0, #1
 800ac1c:	f000 f8f8 	bl	800ae10 <LOG_log>
        break;
 800ac20:	e00a      	b.n	800ac38 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800ac22:	490d      	ldr	r1, [pc, #52]	; (800ac58 <LED_setMode+0x88>)
 800ac24:	2001      	movs	r0, #1
 800ac26:	f000 f8f3 	bl	800ae10 <LOG_log>
        break;
 800ac2a:	e005      	b.n	800ac38 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800ac2c:	490b      	ldr	r1, [pc, #44]	; (800ac5c <LED_setMode+0x8c>)
 800ac2e:	2001      	movs	r0, #1
 800ac30:	f000 f8ee 	bl	800ae10 <LOG_log>
        break;
 800ac34:	e000      	b.n	800ac38 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800ac36:	bf00      	nop
    }

    g_LED_mode = p_mode;
 800ac38:	4a03      	ldr	r2, [pc, #12]	; (800ac48 <LED_setMode+0x78>)
 800ac3a:	79fb      	ldrb	r3, [r7, #7]
 800ac3c:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800ac3e:	bf00      	nop
 800ac40:	bf00      	nop
}
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	20000009 	.word	0x20000009
 800ac4c:	0800f648 	.word	0x0800f648
 800ac50:	0800f658 	.word	0x0800f658
 800ac54:	0800f668 	.word	0x0800f668
 800ac58:	0800f684 	.word	0x0800f684
 800ac5c:	0800f6a0 	.word	0x0800f6a0

0800ac60 <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 800ac64:	4b2a      	ldr	r3, [pc, #168]	; (800ad10 <LED_update+0xb0>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b04      	cmp	r3, #4
 800ac6a:	d849      	bhi.n	800ad00 <LED_update+0xa0>
 800ac6c:	a201      	add	r2, pc, #4	; (adr r2, 800ac74 <LED_update+0x14>)
 800ac6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac72:	bf00      	nop
 800ac74:	0800ac89 	.word	0x0800ac89
 800ac78:	0800ac97 	.word	0x0800ac97
 800ac7c:	0800aca5 	.word	0x0800aca5
 800ac80:	0800acd3 	.word	0x0800acd3
 800ac84:	0800acf5 	.word	0x0800acf5
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac8e:	4821      	ldr	r0, [pc, #132]	; (800ad14 <LED_update+0xb4>)
 800ac90:	f7f9 fa4e 	bl	8004130 <HAL_GPIO_WritePin>
      break;
 800ac94:	e039      	b.n	800ad0a <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800ac96:	2200      	movs	r2, #0
 800ac98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ac9c:	481d      	ldr	r0, [pc, #116]	; (800ad14 <LED_update+0xb4>)
 800ac9e:	f7f9 fa47 	bl	8004130 <HAL_GPIO_WritePin>
      break;
 800aca2:	e032      	b.n	800ad0a <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800aca4:	4b1c      	ldr	r3, [pc, #112]	; (800ad18 <LED_update+0xb8>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3301      	adds	r3, #1
 800acaa:	4a1b      	ldr	r2, [pc, #108]	; (800ad18 <LED_update+0xb8>)
 800acac:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800acae:	4b1a      	ldr	r3, [pc, #104]	; (800ad18 <LED_update+0xb8>)
 800acb0:	6819      	ldr	r1, [r3, #0]
 800acb2:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <LED_update+0xbc>)
 800acb4:	fba3 2301 	umull	r2, r3, r3, r1
 800acb8:	089a      	lsrs	r2, r3, #2
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	1aca      	subs	r2, r1, r3
 800acc2:	2a00      	cmp	r2, #0
 800acc4:	d11e      	bne.n	800ad04 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800acc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800acca:	4812      	ldr	r0, [pc, #72]	; (800ad14 <LED_update+0xb4>)
 800accc:	f7f9 fa62 	bl	8004194 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800acd0:	e018      	b.n	800ad04 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800acd2:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <LED_update+0xb8>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3301      	adds	r3, #1
 800acd8:	4a0f      	ldr	r2, [pc, #60]	; (800ad18 <LED_update+0xb8>)
 800acda:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800acdc:	4b0e      	ldr	r3, [pc, #56]	; (800ad18 <LED_update+0xb8>)
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10f      	bne.n	800ad08 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800ace8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800acec:	4809      	ldr	r0, [pc, #36]	; (800ad14 <LED_update+0xb4>)
 800acee:	f7f9 fa51 	bl	8004194 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800acf2:	e009      	b.n	800ad08 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800acf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800acf8:	4806      	ldr	r0, [pc, #24]	; (800ad14 <LED_update+0xb4>)
 800acfa:	f7f9 fa4b 	bl	8004194 <HAL_GPIO_TogglePin>
      break;
 800acfe:	e004      	b.n	800ad0a <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800ad00:	bf00      	nop
 800ad02:	e002      	b.n	800ad0a <LED_update+0xaa>
      break;
 800ad04:	bf00      	nop
 800ad06:	e000      	b.n	800ad0a <LED_update+0xaa>
      break;
 800ad08:	bf00      	nop
  }

  return;
 800ad0a:	bf00      	nop
}
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000009 	.word	0x20000009
 800ad14:	40011000 	.word	0x40011000
 800ad18:	200004a0 	.word	0x200004a0
 800ad1c:	cccccccd 	.word	0xcccccccd

0800ad20 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b082      	sub	sp, #8
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	70fb      	strb	r3, [r7, #3]
  g_LOG_isOn      = p_isLogOn;
 800ad2c:	4a06      	ldr	r2, [pc, #24]	; (800ad48 <LOG_init+0x28>)
 800ad2e:	78fb      	ldrb	r3, [r7, #3]
 800ad30:	7013      	strb	r3, [r2, #0]
  g_LOG_rtcHandle = p_rctHandle;
 800ad32:	4a06      	ldr	r2, [pc, #24]	; (800ad4c <LOG_init+0x2c>)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6013      	str	r3, [r2, #0]

  LOG_info("LOG initialized");
 800ad38:	4905      	ldr	r1, [pc, #20]	; (800ad50 <LOG_init+0x30>)
 800ad3a:	2001      	movs	r0, #1
 800ad3c:	f000 f868 	bl	800ae10 <LOG_log>

  return;
 800ad40:	bf00      	nop
}
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	200004a4 	.word	0x200004a4
 800ad4c:	200004a8 	.word	0x200004a8
 800ad50:	0800f6dc 	.word	0x0800f6dc

0800ad54 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 800ad58:	4b0a      	ldr	r3, [pc, #40]	; (800ad84 <LOG_toggleOnOff+0x30>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800ad60:	4909      	ldr	r1, [pc, #36]	; (800ad88 <LOG_toggleOnOff+0x34>)
 800ad62:	2001      	movs	r0, #1
 800ad64:	f000 f854 	bl	800ae10 <LOG_log>

    g_LOG_isOn = false;
 800ad68:	4b06      	ldr	r3, [pc, #24]	; (800ad84 <LOG_toggleOnOff+0x30>)
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	701a      	strb	r2, [r3, #0]
    g_LOG_isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800ad6e:	e007      	b.n	800ad80 <LOG_toggleOnOff+0x2c>
    g_LOG_isOn = true;
 800ad70:	4b04      	ldr	r3, [pc, #16]	; (800ad84 <LOG_toggleOnOff+0x30>)
 800ad72:	2201      	movs	r2, #1
 800ad74:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800ad76:	4905      	ldr	r1, [pc, #20]	; (800ad8c <LOG_toggleOnOff+0x38>)
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f000 f849 	bl	800ae10 <LOG_log>
  return;
 800ad7e:	bf00      	nop
}
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	200004a4 	.word	0x200004a4
 800ad88:	0800f6ec 	.word	0x0800f6ec
 800ad8c:	0800f6fc 	.word	0x0800f6fc

0800ad90 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4603      	mov	r3, r0
 800ad98:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 800ad9a:	4a04      	ldr	r2, [pc, #16]	; (800adac <LOG_setLevel+0x1c>)
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	7013      	strb	r3, [r2, #0]

  return;
 800ada0:	bf00      	nop
}
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bc80      	pop	{r7}
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	200004a5 	.word	0x200004a5

0800adb0 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 800adb4:	4b08      	ldr	r3, [pc, #32]	; (800add8 <LOG_increaseLevel+0x28>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00a      	beq.n	800add2 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800adbc:	4907      	ldr	r1, [pc, #28]	; (800addc <LOG_increaseLevel+0x2c>)
 800adbe:	2001      	movs	r0, #1
 800adc0:	f000 f826 	bl	800ae10 <LOG_log>

    g_LOG_level--;
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <LOG_increaseLevel+0x28>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	b2da      	uxtb	r2, r3
 800adcc:	4b02      	ldr	r3, [pc, #8]	; (800add8 <LOG_increaseLevel+0x28>)
 800adce:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800add0:	bf00      	nop
 800add2:	bf00      	nop
}
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	200004a5 	.word	0x200004a5
 800addc:	0800f70c 	.word	0x0800f70c

0800ade0 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 800ade4:	4b08      	ldr	r3, [pc, #32]	; (800ae08 <LOG_decreaseLevel+0x28>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d80a      	bhi.n	800ae02 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800adec:	4907      	ldr	r1, [pc, #28]	; (800ae0c <LOG_decreaseLevel+0x2c>)
 800adee:	2001      	movs	r0, #1
 800adf0:	f000 f80e 	bl	800ae10 <LOG_log>

    g_LOG_level++;
 800adf4:	4b04      	ldr	r3, [pc, #16]	; (800ae08 <LOG_decreaseLevel+0x28>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	3301      	adds	r3, #1
 800adfa:	b2da      	uxtb	r2, r3
 800adfc:	4b02      	ldr	r3, [pc, #8]	; (800ae08 <LOG_decreaseLevel+0x28>)
 800adfe:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800ae00:	bf00      	nop
 800ae02:	bf00      	nop
}
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop
 800ae08:	200004a5 	.word	0x200004a5
 800ae0c:	0800f724 	.word	0x0800f724

0800ae10 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800ae10:	b40e      	push	{r1, r2, r3}
 800ae12:	b590      	push	{r4, r7, lr}
 800ae14:	b0a8      	sub	sp, #160	; 0xa0
 800ae16:	af02      	add	r7, sp, #8
 800ae18:	4603      	mov	r3, r0
 800ae1a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 800ae1c:	4b3e      	ldr	r3, [pc, #248]	; (800af18 <LOG_log+0x108>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d071      	beq.n	800af08 <LOG_log+0xf8>
 800ae24:	4b3d      	ldr	r3, [pc, #244]	; (800af1c <LOG_log+0x10c>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	79fa      	ldrb	r2, [r7, #7]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d36c      	bcc.n	800af08 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800ae2e:	4b3c      	ldr	r3, [pc, #240]	; (800af20 <LOG_log+0x110>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f107 010c 	add.w	r1, r7, #12
 800ae36:	2201      	movs	r2, #1
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7fa fb5b 	bl	80054f4 <HAL_RTC_GetTime>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800ae44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d004      	beq.n	800ae56 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 800ae4c:	f107 030c 	add.w	r3, r7, #12
 800ae50:	4618      	mov	r0, r3
 800ae52:	f000 fd0e 	bl	800b872 <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800ae56:	4b32      	ldr	r3, [pc, #200]	; (800af20 <LOG_log+0x110>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f107 0108 	add.w	r1, r7, #8
 800ae5e:	2201      	movs	r2, #1
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7fa fd4b 	bl	80058fc <HAL_RTC_GetDate>
 800ae66:	4603      	mov	r3, r0
 800ae68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800ae6c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d004      	beq.n	800ae7e <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fce5 	bl	800b848 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 800ae7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ae82:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800ae84:	79fb      	ldrb	r3, [r7, #7]
 800ae86:	4a27      	ldr	r2, [pc, #156]	; (800af24 <LOG_log+0x114>)
 800ae88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ae8c:	7b3b      	ldrb	r3, [r7, #12]
 800ae8e:	461c      	mov	r4, r3
 800ae90:	7b7b      	ldrb	r3, [r7, #13]
 800ae92:	7bb9      	ldrb	r1, [r7, #14]
 800ae94:	f107 0014 	add.w	r0, r7, #20
 800ae98:	9101      	str	r1, [sp, #4]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	4623      	mov	r3, r4
 800ae9e:	4922      	ldr	r1, [pc, #136]	; (800af28 <LOG_log+0x118>)
 800aea0:	f001 fb00 	bl	800c4a4 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800aea4:	f107 0314 	add.w	r3, r7, #20
 800aea8:	f103 0015 	add.w	r0, r3, #21
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800aeb2:	2169      	movs	r1, #105	; 0x69
 800aeb4:	f001 fbf2 	bl	800c69c <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800aeb8:	f107 0314 	add.w	r3, r7, #20
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f5 f9b3 	bl	8000228 <strlen>
 800aec2:	4603      	mov	r3, r0
 800aec4:	461a      	mov	r2, r3
 800aec6:	f107 0314 	add.w	r3, r7, #20
 800aeca:	4413      	add	r3, r2
 800aecc:	4a17      	ldr	r2, [pc, #92]	; (800af2c <LOG_log+0x11c>)
 800aece:	8811      	ldrh	r1, [r2, #0]
 800aed0:	7892      	ldrb	r2, [r2, #2]
 800aed2:	8019      	strh	r1, [r3, #0]
 800aed4:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800aed6:	f107 0314 	add.w	r3, r7, #20
 800aeda:	2180      	movs	r1, #128	; 0x80
 800aedc:	4618      	mov	r0, r3
 800aede:	f001 fb14 	bl	800c50a <strnlen>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b7f      	cmp	r3, #127	; 0x7f
 800aee6:	d108      	bne.n	800aefa <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800aee8:	232e      	movs	r3, #46	; 0x2e
 800aeea:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800aeee:	232e      	movs	r3, #46	; 0x2e
 800aef0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800aef4:	232e      	movs	r3, #46	; 0x2e
 800aef6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800aefa:	f107 0314 	add.w	r3, r7, #20
 800aefe:	4619      	mov	r1, r3
 800af00:	480b      	ldr	r0, [pc, #44]	; (800af30 <LOG_log+0x120>)
 800af02:	f001 faa7 	bl	800c454 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800af06:	bf00      	nop
 800af08:	bf00      	nop
}
 800af0a:	3798      	adds	r7, #152	; 0x98
 800af0c:	46bd      	mov	sp, r7
 800af0e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800af12:	b003      	add	sp, #12
 800af14:	4770      	bx	lr
 800af16:	bf00      	nop
 800af18:	200004a4 	.word	0x200004a4
 800af1c:	200004a5 	.word	0x200004a5
 800af20:	200004a8 	.word	0x200004a8
 800af24:	2000000c 	.word	0x2000000c
 800af28:	0800f73c 	.word	0x0800f73c
 800af2c:	0800f758 	.word	0x0800f758
 800af30:	0800f75c 	.word	0x0800f75c

0800af34 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800af3c:	490d      	ldr	r1, [pc, #52]	; (800af74 <MAS_init+0x40>)
 800af3e:	2001      	movs	r0, #1
 800af40:	f7ff ff66 	bl	800ae10 <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 800af44:	4a0c      	ldr	r2, [pc, #48]	; (800af78 <MAS_init+0x44>)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 800af4a:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <MAS_init+0x48>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <MAS_init+0x4c>)
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 800af56:	480b      	ldr	r0, [pc, #44]	; (800af84 <MAS_init+0x50>)
 800af58:	f000 fb3a 	bl	800b5d0 <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800af5c:	4b06      	ldr	r3, [pc, #24]	; (800af78 <MAS_init+0x44>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2201      	movs	r2, #1
 800af62:	4909      	ldr	r1, [pc, #36]	; (800af88 <MAS_init+0x54>)
 800af64:	4618      	mov	r0, r3
 800af66:	f7fd fb6f 	bl	8008648 <HAL_UART_Receive_IT>

  return;
 800af6a:	bf00      	nop
}
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	0800f760 	.word	0x0800f760
 800af78:	200004ac 	.word	0x200004ac
 800af7c:	200004c4 	.word	0x200004c4
 800af80:	200004c8 	.word	0x200004c8
 800af84:	200004b4 	.word	0x200004b4
 800af88:	200004b0 	.word	0x200004b0

0800af8c <MAS_receiveData>:

void MAS_receiveData(void)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 800af90:	4b0f      	ldr	r3, [pc, #60]	; (800afd0 <MAS_receiveData+0x44>)
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d112      	bne.n	800afbe <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 800af98:	4b0e      	ldr	r3, [pc, #56]	; (800afd4 <MAS_receiveData+0x48>)
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	2b0d      	cmp	r3, #13
 800af9e:	d103      	bne.n	800afa8 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 800afa0:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <MAS_receiveData+0x44>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	701a      	strb	r2, [r3, #0]
 800afa6:	e00a      	b.n	800afbe <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 800afa8:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <MAS_receiveData+0x4c>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <MAS_receiveData+0x48>)
 800afae:	7811      	ldrb	r1, [r2, #0]
 800afb0:	4a0a      	ldr	r2, [pc, #40]	; (800afdc <MAS_receiveData+0x50>)
 800afb2:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 800afb4:	4b08      	ldr	r3, [pc, #32]	; (800afd8 <MAS_receiveData+0x4c>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	4a07      	ldr	r2, [pc, #28]	; (800afd8 <MAS_receiveData+0x4c>)
 800afbc:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800afbe:	4b08      	ldr	r3, [pc, #32]	; (800afe0 <MAS_receiveData+0x54>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2201      	movs	r2, #1
 800afc4:	4903      	ldr	r1, [pc, #12]	; (800afd4 <MAS_receiveData+0x48>)
 800afc6:	4618      	mov	r0, r3
 800afc8:	f7fd fb3e 	bl	8008648 <HAL_UART_Receive_IT>

  return;
 800afcc:	bf00      	nop
}
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	200004c8 	.word	0x200004c8
 800afd4:	200004b0 	.word	0x200004b0
 800afd8:	200004c4 	.word	0x200004c4
 800afdc:	200004b4 	.word	0x200004b4
 800afe0:	200004ac 	.word	0x200004ac

0800afe4 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 800afec:	4b0c      	ldr	r3, [pc, #48]	; (800b020 <MAS_updateFifo+0x3c>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	f083 0301 	eor.w	r3, r3, #1
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d10d      	bne.n	800b016 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 800affa:	490a      	ldr	r1, [pc, #40]	; (800b024 <MAS_updateFifo+0x40>)
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 fb0d 	bl	800b61c <SFO_push>
    SFO_initData(&g_MAS_data);
 800b002:	4808      	ldr	r0, [pc, #32]	; (800b024 <MAS_updateFifo+0x40>)
 800b004:	f000 fae4 	bl	800b5d0 <SFO_initData>

    g_MAS_dataSize       = 0;
 800b008:	4b07      	ldr	r3, [pc, #28]	; (800b028 <MAS_updateFifo+0x44>)
 800b00a:	2200      	movs	r2, #0
 800b00c:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 800b00e:	4b04      	ldr	r3, [pc, #16]	; (800b020 <MAS_updateFifo+0x3c>)
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
  }

  return;
 800b014:	bf00      	nop
 800b016:	bf00      	nop
}
 800b018:	3708      	adds	r7, #8
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	200004c8 	.word	0x200004c8
 800b024:	200004b4 	.word	0x200004b4
 800b028:	200004c4 	.word	0x200004c4

0800b02c <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_uartHandle,
 800b036:	4b06      	ldr	r3, [pc, #24]	; (800b050 <MAS_sendString+0x24>)
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b042:	6879      	ldr	r1, [r7, #4]
 800b044:	f7fd fa6e 	bl	8008524 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800b048:	bf00      	nop
}
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}
 800b050:	200004ac 	.word	0x200004ac

0800b054 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	4912      	ldr	r1, [pc, #72]	; (800b0b0 <MTR_init+0x5c>)
 800b066:	2001      	movs	r0, #1
 800b068:	f7ff fed2 	bl	800ae10 <LOG_log>

  p_handle->name           = p_name;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6a3a      	ldr	r2, [r7, #32]
 800b08e:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b094:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800b096:	2100      	movs	r1, #0
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f000 f80b 	bl	800b0b4 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800b09e:	2100      	movs	r1, #0
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 f87f 	bl	800b1a4 <MTR_setSpeed>

  return;
 800b0a6:	bf00      	nop
}
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	0800f780 	.word	0x0800f780

0800b0b4 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	7d1b      	ldrb	r3, [r3, #20]
 800b0c4:	78fa      	ldrb	r2, [r7, #3]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d056      	beq.n	800b178 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800b0ca:	78fb      	ldrb	r3, [r7, #3]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d119      	bne.n	800b104 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	492a      	ldr	r1, [pc, #168]	; (800b180 <MTR_setDirection+0xcc>)
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f7ff fe99 	bl	800ae10 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6858      	ldr	r0, [r3, #4]
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f7f9 f820 	bl	8004130 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68d8      	ldr	r0, [r3, #12]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	f7f9 f817 	bl	8004130 <HAL_GPIO_WritePin>
 800b102:	e035      	b.n	800b170 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800b104:	78fb      	ldrb	r3, [r7, #3]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d119      	bne.n	800b13e <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	491c      	ldr	r1, [pc, #112]	; (800b184 <MTR_setDirection+0xd0>)
 800b112:	2000      	movs	r0, #0
 800b114:	f7ff fe7c 	bl	800ae10 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6858      	ldr	r0, [r3, #4]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	689b      	ldr	r3, [r3, #8]
 800b120:	b29b      	uxth	r3, r3
 800b122:	2200      	movs	r2, #0
 800b124:	4619      	mov	r1, r3
 800b126:	f7f9 f803 	bl	8004130 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	68d8      	ldr	r0, [r3, #12]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	691b      	ldr	r3, [r3, #16]
 800b132:	b29b      	uxth	r3, r3
 800b134:	2201      	movs	r2, #1
 800b136:	4619      	mov	r1, r3
 800b138:	f7f8 fffa 	bl	8004130 <HAL_GPIO_WritePin>
 800b13c:	e018      	b.n	800b170 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	461a      	mov	r2, r3
 800b144:	4910      	ldr	r1, [pc, #64]	; (800b188 <MTR_setDirection+0xd4>)
 800b146:	2000      	movs	r0, #0
 800b148:	f7ff fe62 	bl	800ae10 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6858      	ldr	r0, [r3, #4]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	689b      	ldr	r3, [r3, #8]
 800b154:	b29b      	uxth	r3, r3
 800b156:	2201      	movs	r2, #1
 800b158:	4619      	mov	r1, r3
 800b15a:	f7f8 ffe9 	bl	8004130 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	68d8      	ldr	r0, [r3, #12]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	691b      	ldr	r3, [r3, #16]
 800b166:	b29b      	uxth	r3, r3
 800b168:	2200      	movs	r2, #0
 800b16a:	4619      	mov	r1, r3
 800b16c:	f7f8 ffe0 	bl	8004130 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	78fa      	ldrb	r2, [r7, #3]
 800b174:	751a      	strb	r2, [r3, #20]
  }

  return;
 800b176:	bf00      	nop
 800b178:	bf00      	nop
}
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}
 800b180:	0800f7a4 	.word	0x0800f7a4
 800b184:	0800f7b4 	.word	0x0800f7b4
 800b188:	0800f7c8 	.word	0x0800f7c8

0800b18c <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7d1b      	ldrb	r3, [r3, #20]
}
 800b198:	4618      	mov	r0, r3
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bc80      	pop	{r7}
 800b1a0:	4770      	bx	lr
	...

0800b1a4 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	683a      	ldr	r2, [r7, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d02d      	beq.n	800b214 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	4917      	ldr	r1, [pc, #92]	; (800b21c <MTR_setSpeed+0x78>)
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	f7ff fe25 	bl	800ae10 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6a1b      	ldr	r3, [r3, #32]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <MTR_setSpeed+0x36>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	69db      	ldr	r3, [r3, #28]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	635a      	str	r2, [r3, #52]	; 0x34
 800b1d8:	e018      	b.n	800b20c <MTR_setSpeed+0x68>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	2b04      	cmp	r3, #4
 800b1e0:	d105      	bne.n	800b1ee <MTR_setSpeed+0x4a>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	6393      	str	r3, [r2, #56]	; 0x38
 800b1ec:	e00e      	b.n	800b20c <MTR_setSpeed+0x68>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d105      	bne.n	800b202 <MTR_setSpeed+0x5e>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b200:	e004      	b.n	800b20c <MTR_setSpeed+0x68>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	69db      	ldr	r3, [r3, #28]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	619a      	str	r2, [r3, #24]
  }

  return;
 800b212:	bf00      	nop
 800b214:	bf00      	nop
}
 800b216:	3708      	adds	r7, #8
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	0800f7e0 	.word	0x0800f7e0

0800b220 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	699b      	ldr	r3, [r3, #24]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	bc80      	pop	{r7}
 800b234:	4770      	bx	lr
	...

0800b238 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, float p_kp, float p_ki, float p_kd, float p_targetValue, float p_minValue, float p_maxValue, float p_antiWindUpFactor)
{
 800b238:	b590      	push	{r4, r7, lr}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	607a      	str	r2, [r7, #4]
 800b244:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800b246:	492c      	ldr	r1, [pc, #176]	; (800b2f8 <PID_init+0xc0>)
 800b248:	2001      	movs	r0, #1
 800b24a:	f7ff fde1 	bl	800ae10 <LOG_log>

  p_handle->kp              = p_kp;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6a3a      	ldr	r2, [r7, #32]
 800b264:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b26a:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b270:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	4618      	mov	r0, r3
 800b278:	f7f5 fed0 	bl	800101c <__aeabi_f2iz>
 800b27c:	4603      	mov	r3, r0
 800b27e:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800b282:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	695b      	ldr	r3, [r3, #20]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f5 fec6 	bl	800101c <__aeabi_f2iz>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	bfb8      	it	lt
 800b296:	425b      	neglt	r3, r3
 800b298:	429c      	cmp	r4, r3
 800b29a:	dd0d      	ble.n	800b2b8 <PID_init+0x80>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7f5 febb 	bl	800101c <__aeabi_f2iz>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfb8      	it	lt
 800b2ac:	425b      	neglt	r3, r3
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f5 fd10 	bl	8000cd4 <__aeabi_i2f>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	e00c      	b.n	800b2d2 <PID_init+0x9a>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f7f5 fead 	bl	800101c <__aeabi_f2iz>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfb8      	it	lt
 800b2c8:	425b      	neglt	r3, r3
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f5 fd02 	bl	8000cd4 <__aeabi_i2f>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f5 fd51 	bl	8000d7c <__aeabi_fmul>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	461a      	mov	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	f000 f80a 	bl	800b2fc <PID_reset>
  PID_logInfo(p_handle);
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 f8eb 	bl	800b4c4 <PID_logInfo>

  return;
 800b2ee:	bf00      	nop
}
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd90      	pop	{r4, r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800f800 	.word	0x0800f800

0800b2fc <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b083      	sub	sp, #12
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f04f 0200 	mov.w	r2, #0
 800b30a:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0.0f;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f04f 0200 	mov.w	r2, #0
 800b312:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0.0f;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0.0f;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f04f 0200 	mov.w	r2, #0
 800b322:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0.0f;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f04f 0200 	mov.w	r2, #0
 800b32a:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800b32c:	bf00      	nop
}
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	bc80      	pop	{r7}
 800b334:	4770      	bx	lr

0800b336 <PID_setTargetValue>:

  return;
}

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
 800b33e:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	683a      	ldr	r2, [r7, #0]
 800b344:	60da      	str	r2, [r3, #12]

  return;
 800b346:	bf00      	nop
}
 800b348:	370c      	adds	r7, #12
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bc80      	pop	{r7}
 800b34e:	4770      	bx	lr

0800b350 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800b350:	b5b0      	push	{r4, r5, r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af02      	add	r7, sp, #8
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	68b9      	ldr	r1, [r7, #8]
 800b362:	4618      	mov	r0, r3
 800b364:	f7f5 fc00 	bl	8000b68 <__aeabi_fsub>
 800b368:	4603      	mov	r3, r0
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7f5 fe56 	bl	800101c <__aeabi_f2iz>
 800b370:	4603      	mov	r3, r0
 800b372:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800b374:	6978      	ldr	r0, [r7, #20]
 800b376:	f7f5 fcad 	bl	8000cd4 <__aeabi_i2f>
 800b37a:	4602      	mov	r2, r0
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	6a1c      	ldr	r4, [r3, #32]
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	687a      	ldr	r2, [r7, #4]
 800b388:	fb02 f303 	mul.w	r3, r2, r3
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7f5 fc9d 	bl	8000ccc <__aeabi_ui2f>
 800b392:	4603      	mov	r3, r0
 800b394:	4619      	mov	r1, r3
 800b396:	4620      	mov	r0, r4
 800b398:	f7f5 fbe8 	bl	8000b6c <__addsf3>
 800b39c:	4603      	mov	r3, r0
 800b39e:	461a      	mov	r2, r3
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6a1b      	ldr	r3, [r3, #32]
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	f7f5 fe37 	bl	800101c <__aeabi_f2iz>
 800b3ae:	4604      	mov	r4, r0
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	699b      	ldr	r3, [r3, #24]
 800b3b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f7f5 fe2f 	bl	800101c <__aeabi_f2iz>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	699b      	ldr	r3, [r3, #24]
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7f5 fe29 	bl	800101c <__aeabi_f2iz>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f000 fa79 	bl	800b8cc <UTI_clampIntValue>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7f5 fc79 	bl	8000cd4 <__aeabi_i2f>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800b3e8:	6978      	ldr	r0, [r7, #20]
 800b3ea:	f7f5 fc73 	bl	8000cd4 <__aeabi_i2f>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7f5 fbb6 	bl	8000b68 <__aeabi_fsub>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461c      	mov	r4, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f7f5 fc63 	bl	8000ccc <__aeabi_ui2f>
 800b406:	4603      	mov	r3, r0
 800b408:	4619      	mov	r1, r3
 800b40a:	4620      	mov	r0, r4
 800b40c:	f7f5 fd6a 	bl	8000ee4 <__aeabi_fdiv>
 800b410:	4603      	mov	r3, r0
 800b412:	461a      	mov	r2, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800b418:	6978      	ldr	r0, [r7, #20]
 800b41a:	f7f5 fc5b 	bl	8000cd4 <__aeabi_i2f>
 800b41e:	4602      	mov	r2, r0
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	69db      	ldr	r3, [r3, #28]
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7f5 fca4 	bl	8000d7c <__aeabi_fmul>
 800b434:	4603      	mov	r3, r0
 800b436:	461c      	mov	r4, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	685a      	ldr	r2, [r3, #4]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7f5 fc9a 	bl	8000d7c <__aeabi_fmul>
 800b448:	4603      	mov	r3, r0
 800b44a:	4619      	mov	r1, r3
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7f5 fb8d 	bl	8000b6c <__addsf3>
 800b452:	4603      	mov	r3, r0
 800b454:	461c      	mov	r4, r3
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	689a      	ldr	r2, [r3, #8]
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	4619      	mov	r1, r3
 800b460:	4610      	mov	r0, r2
 800b462:	f7f5 fc8b 	bl	8000d7c <__aeabi_fmul>
 800b466:	4603      	mov	r3, r0
 800b468:	4619      	mov	r1, r3
 800b46a:	4620      	mov	r0, r4
 800b46c:	f7f5 fb7e 	bl	8000b6c <__addsf3>
 800b470:	4603      	mov	r3, r0
 800b472:	461a      	mov	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47c:	4618      	mov	r0, r3
 800b47e:	f7f5 fdcd 	bl	800101c <__aeabi_f2iz>
 800b482:	4604      	mov	r4, r0
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	4618      	mov	r0, r3
 800b48a:	f7f5 fdc7 	bl	800101c <__aeabi_f2iz>
 800b48e:	4605      	mov	r5, r0
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	4618      	mov	r0, r3
 800b496:	f7f5 fdc1 	bl	800101c <__aeabi_f2iz>
 800b49a:	4602      	mov	r2, r0
 800b49c:	2300      	movs	r3, #0
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	4629      	mov	r1, r5
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	f000 fa11 	bl	800b8cc <UTI_clampIntValue>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7f5 fc11 	bl	8000cd4 <__aeabi_i2f>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	629a      	str	r2, [r3, #40]	; 0x28

  return p_handle->computedValue;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bdb0      	pop	{r4, r5, r7, pc}

0800b4c4 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800b4c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b4c8:	b086      	sub	sp, #24
 800b4ca:	af04      	add	r7, sp, #16
 800b4cc:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7f5 f814 	bl	8000500 <__aeabi_f2d>
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4689      	mov	r9, r1
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f5 f80d 	bl	8000500 <__aeabi_f2d>
 800b4e6:	4604      	mov	r4, r0
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f7f5 f806 	bl	8000500 <__aeabi_f2d>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4fc:	e9cd 4500 	strd	r4, r5, [sp]
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	492e      	ldr	r1, [pc, #184]	; (800b5c0 <PID_logInfo+0xfc>)
 800b506:	2001      	movs	r0, #1
 800b508:	f7ff fc82 	bl	800ae10 <LOG_log>
  LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	4618      	mov	r0, r3
 800b512:	f7f4 fff5 	bl	8000500 <__aeabi_f2d>
 800b516:	4680      	mov	r8, r0
 800b518:	4689      	mov	r9, r1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7f4 ffee 	bl	8000500 <__aeabi_f2d>
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f4 ffe7 	bl	8000500 <__aeabi_f2d>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b53a:	e9cd 4500 	strd	r4, r5, [sp]
 800b53e:	4642      	mov	r2, r8
 800b540:	464b      	mov	r3, r9
 800b542:	4920      	ldr	r1, [pc, #128]	; (800b5c4 <PID_logInfo+0x100>)
 800b544:	2001      	movs	r0, #1
 800b546:	f7ff fc63 	bl	800ae10 <LOG_log>
  LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	4618      	mov	r0, r3
 800b550:	f7f4 ffd6 	bl	8000500 <__aeabi_f2d>
 800b554:	4680      	mov	r8, r0
 800b556:	4689      	mov	r9, r1
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	695b      	ldr	r3, [r3, #20]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7f4 ffcf 	bl	8000500 <__aeabi_f2d>
 800b562:	4604      	mov	r4, r0
 800b564:	460d      	mov	r5, r1
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7f4 ffc8 	bl	8000500 <__aeabi_f2d>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b578:	e9cd 4500 	strd	r4, r5, [sp]
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	4911      	ldr	r1, [pc, #68]	; (800b5c8 <PID_logInfo+0x104>)
 800b582:	2001      	movs	r0, #1
 800b584:	f7ff fc44 	bl	800ae10 <LOG_log>
  LOG_info("  t = %6.2f - val = %6.2f               ", p_handle->targetValue, p_handle->computedValue                      );
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7f4 ffb7 	bl	8000500 <__aeabi_f2d>
 800b592:	4604      	mov	r4, r0
 800b594:	460d      	mov	r5, r1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7f4 ffb0 	bl	8000500 <__aeabi_f2d>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	460b      	mov	r3, r1
 800b5a4:	e9cd 2300 	strd	r2, r3, [sp]
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	462b      	mov	r3, r5
 800b5ac:	4907      	ldr	r1, [pc, #28]	; (800b5cc <PID_logInfo+0x108>)
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	f7ff fc2e 	bl	800ae10 <LOG_log>

  return;
 800b5b4:	bf00      	nop
}
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b5be:	bf00      	nop
 800b5c0:	0800f814 	.word	0x0800f814
 800b5c4:	0800f840 	.word	0x0800f840
 800b5c8:	0800f86c 	.word	0x0800f86c
 800b5cc:	0800f898 	.word	0x0800f898

0800b5d0 <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b5d8:	2210      	movs	r2, #16
 800b5da:	2100      	movs	r1, #0
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa2b 	bl	800ba38 <memset>

  return;
 800b5e2:	bf00      	nop
}
 800b5e4:	3708      	adds	r7, #8
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
	...

0800b5ec <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b082      	sub	sp, #8
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b5f4:	4908      	ldr	r1, [pc, #32]	; (800b618 <SFO_init+0x2c>)
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f7ff fc0a 	bl	800ae10 <LOG_log>

  p_fifo->head  = NULL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	609a      	str	r2, [r3, #8]

  return;
 800b60e:	bf00      	nop
}
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}
 800b616:	bf00      	nop
 800b618:	0800f8c4 	.word	0x0800f8c4

0800b61c <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	2b0a      	cmp	r3, #10
 800b62c:	d105      	bne.n	800b63a <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b62e:	220a      	movs	r2, #10
 800b630:	4917      	ldr	r1, [pc, #92]	; (800b690 <SFO_push+0x74>)
 800b632:	2003      	movs	r0, #3
 800b634:	f7ff fbec 	bl	800ae10 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b638:	e027      	b.n	800b68a <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b63a:	2014      	movs	r0, #20
 800b63c:	f000 f9ec 	bl	800ba18 <malloc>
 800b640:	4603      	mov	r3, r0
 800b642:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d104      	bne.n	800b654 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b64a:	4912      	ldr	r1, [pc, #72]	; (800b694 <SFO_push+0x78>)
 800b64c:	2003      	movs	r0, #3
 800b64e:	f7ff fbdf 	bl	800ae10 <LOG_log>
  return;
 800b652:	e01a      	b.n	800b68a <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2210      	movs	r2, #16
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 ff42 	bl	800c4e4 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d103      	bne.n	800b67e <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	609a      	str	r2, [r3, #8]
  return;
 800b688:	bf00      	nop
}
 800b68a:	3710      	adds	r7, #16
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	0800f8dc 	.word	0x0800f8dc
 800b694:	0800f914 	.word	0x0800f914

0800b698 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	689b      	ldr	r3, [r3, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d104      	bne.n	800b6b4 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b6aa:	491a      	ldr	r1, [pc, #104]	; (800b714 <SFO_pop+0x7c>)
 800b6ac:	2003      	movs	r0, #3
 800b6ae:	f7ff fbaf 	bl	800ae10 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b6b2:	e02c      	b.n	800b70e <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	2210      	movs	r2, #16
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6838      	ldr	r0, [r7, #0]
 800b6be:	f000 ff11 	bl	800c4e4 <strncpy>
    free(p_fifo->tail);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 f9ae 	bl	800ba28 <free>
    if (p_fifo->count > 1)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d918      	bls.n	800b706 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b6da:	e002      	b.n	800b6e2 <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	691a      	ldr	r2, [r3, #16]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	429a      	cmp	r2, r3
 800b6ec:	d1f6      	bne.n	800b6dc <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68fa      	ldr	r2, [r7, #12]
 800b6f8:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	1e5a      	subs	r2, r3, #1
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	609a      	str	r2, [r3, #8]
  return;
 800b704:	e003      	b.n	800b70e <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7ff ff70 	bl	800b5ec <SFO_init>
  return;
 800b70c:	bf00      	nop
}
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}
 800b714:	0800f948 	.word	0x0800f948

0800b718 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689b      	ldr	r3, [r3, #8]
}
 800b724:	4618      	mov	r0, r3
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	bc80      	pop	{r7}
 800b72c:	4770      	bx	lr
	...

0800b730 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d104      	bne.n	800b74a <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b740:	4924      	ldr	r1, [pc, #144]	; (800b7d4 <SFO_logInfo+0xa4>)
 800b742:	2001      	movs	r0, #1
 800b744:	f7ff fb64 	bl	800ae10 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b748:	e040      	b.n	800b7cc <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	461a      	mov	r2, r3
 800b750:	4921      	ldr	r1, [pc, #132]	; (800b7d8 <SFO_logInfo+0xa8>)
 800b752:	2001      	movs	r0, #1
 800b754:	f7ff fb5c 	bl	800ae10 <LOG_log>
    l_element = p_fifo->head;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b75e:	e031      	b.n	800b7c4 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	429a      	cmp	r2, r3
 800b768:	d10b      	bne.n	800b782 <SFO_logInfo+0x52>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	429a      	cmp	r2, r3
 800b772:	d106      	bne.n	800b782 <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	461a      	mov	r2, r3
 800b778:	4918      	ldr	r1, [pc, #96]	; (800b7dc <SFO_logInfo+0xac>)
 800b77a:	2001      	movs	r0, #1
 800b77c:	f7ff fb48 	bl	800ae10 <LOG_log>
 800b780:	e01d      	b.n	800b7be <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d106      	bne.n	800b79a <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	461a      	mov	r2, r3
 800b790:	4913      	ldr	r1, [pc, #76]	; (800b7e0 <SFO_logInfo+0xb0>)
 800b792:	2001      	movs	r0, #1
 800b794:	f7ff fb3c 	bl	800ae10 <LOG_log>
 800b798:	e011      	b.n	800b7be <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d106      	bne.n	800b7b2 <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	490e      	ldr	r1, [pc, #56]	; (800b7e4 <SFO_logInfo+0xb4>)
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	f7ff fb30 	bl	800ae10 <LOG_log>
 800b7b0:	e005      	b.n	800b7be <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	490c      	ldr	r1, [pc, #48]	; (800b7e8 <SFO_logInfo+0xb8>)
 800b7b8:	2001      	movs	r0, #1
 800b7ba:	f7ff fb29 	bl	800ae10 <LOG_log>
      l_element = l_element->nextElement;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	691b      	ldr	r3, [r3, #16]
 800b7c2:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1ca      	bne.n	800b760 <SFO_logInfo+0x30>
  return;
 800b7ca:	bf00      	nop
}
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800f974 	.word	0x0800f974
 800b7d8:	0800f98c 	.word	0x0800f98c
 800b7dc:	0800f9a8 	.word	0x0800f9a8
 800b7e0:	0800f9c0 	.word	0x0800f9c0
 800b7e4:	0800f9d0 	.word	0x0800f9d0
 800b7e8:	0800f9e0 	.word	0x0800f9e0

0800b7ec <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800b7f4:	4905      	ldr	r1, [pc, #20]	; (800b80c <UTI_init+0x20>)
 800b7f6:	2001      	movs	r0, #1
 800b7f8:	f7ff fb0a 	bl	800ae10 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800b7fc:	4a04      	ldr	r2, [pc, #16]	; (800b810 <UTI_init+0x24>)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6013      	str	r3, [r2, #0]

  return;
 800b802:	bf00      	nop
}
 800b804:	3708      	adds	r7, #8
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	bf00      	nop
 800b80c:	0800f9f0 	.word	0x0800f9f0
 800b810:	200004cc 	.word	0x200004cc

0800b814 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	4603      	mov	r3, r0
 800b81c:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800b81e:	4b09      	ldr	r3, [pc, #36]	; (800b844 <UTI_delayUs+0x30>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2200      	movs	r2, #0
 800b826:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800b828:	bf00      	nop
 800b82a:	4b06      	ldr	r3, [pc, #24]	; (800b844 <UTI_delayUs+0x30>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	429a      	cmp	r2, r3
 800b836:	d3f8      	bcc.n	800b82a <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b838:	bf00      	nop
}
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bc80      	pop	{r7}
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	200004cc 	.word	0x200004cc

0800b848 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	70da      	strb	r2, [r3, #3]

  return;
 800b868:	bf00      	nop
}
 800b86a:	370c      	adds	r7, #12
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bc80      	pop	{r7}
 800b870:	4770      	bx	lr

0800b872 <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	709a      	strb	r2, [r3, #2]

  return;
 800b88c:	bf00      	nop
}
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	bc80      	pop	{r7}
 800b894:	4770      	bx	lr

0800b896 <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b896:	b480      	push	{r7}
 800b898:	b083      	sub	sp, #12
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b8a8:	fb03 f202 	mul.w	r2, r3, r2
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	785b      	ldrb	r3, [r3, #1]
 800b8b0:	4619      	mov	r1, r3
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	011b      	lsls	r3, r3, #4
 800b8b6:	1a5b      	subs	r3, r3, r1
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	7892      	ldrb	r2, [r2, #2]
 800b8c0:	4413      	add	r3, r2
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc80      	pop	{r7}
 800b8ca:	4770      	bx	lr

0800b8cc <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	da08      	bge.n	800b8f4 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b8e2:	78fb      	ldrb	r3, [r7, #3]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d002      	beq.n	800b8ee <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e011      	b.n	800b912 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b8ee:	6a3b      	ldr	r3, [r7, #32]
 800b8f0:	617b      	str	r3, [r7, #20]
 800b8f2:	e00e      	b.n	800b912 <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	dd08      	ble.n	800b90e <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d002      	beq.n	800b908 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	e004      	b.n	800b912 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b908:	6a3b      	ldr	r3, [r7, #32]
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e001      	b.n	800b912 <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b912:	697b      	ldr	r3, [r7, #20]
}
 800b914:	4618      	mov	r0, r3
 800b916:	371c      	adds	r7, #28
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr

0800b91e <UTI_normalizeIntValue>:

  return l_returnValue;
}

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b91e:	b5b0      	push	{r4, r5, r7, lr}
 800b920:	b086      	sub	sp, #24
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	607a      	str	r2, [r7, #4]
 800b92a:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b92c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b92e:	f7f5 f9d1 	bl	8000cd4 <__aeabi_i2f>
 800b932:	4604      	mov	r4, r0
 800b934:	6838      	ldr	r0, [r7, #0]
 800b936:	f7f5 f9cd 	bl	8000cd4 <__aeabi_i2f>
 800b93a:	4603      	mov	r3, r0
 800b93c:	4619      	mov	r1, r3
 800b93e:	4620      	mov	r0, r4
 800b940:	f7f5 f912 	bl	8000b68 <__aeabi_fsub>
 800b944:	4603      	mov	r3, r0
 800b946:	461d      	mov	r5, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f7f5 f9c3 	bl	8000cd4 <__aeabi_i2f>
 800b94e:	4604      	mov	r4, r0
 800b950:	68b8      	ldr	r0, [r7, #8]
 800b952:	f7f5 f9bf 	bl	8000cd4 <__aeabi_i2f>
 800b956:	4603      	mov	r3, r0
 800b958:	4619      	mov	r1, r3
 800b95a:	4620      	mov	r0, r4
 800b95c:	f7f5 f904 	bl	8000b68 <__aeabi_fsub>
 800b960:	4603      	mov	r3, r0
 800b962:	4619      	mov	r1, r3
 800b964:	4628      	mov	r0, r5
 800b966:	f7f5 fabd 	bl	8000ee4 <__aeabi_fdiv>
 800b96a:	4603      	mov	r3, r0
 800b96c:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	4618      	mov	r0, r3
 800b976:	f7f5 f9ad 	bl	8000cd4 <__aeabi_i2f>
 800b97a:	4603      	mov	r3, r0
 800b97c:	6939      	ldr	r1, [r7, #16]
 800b97e:	4618      	mov	r0, r3
 800b980:	f7f5 f9fc 	bl	8000d7c <__aeabi_fmul>
 800b984:	4603      	mov	r3, r0
 800b986:	461c      	mov	r4, r3
 800b988:	6838      	ldr	r0, [r7, #0]
 800b98a:	f7f5 f9a3 	bl	8000cd4 <__aeabi_i2f>
 800b98e:	4603      	mov	r3, r0
 800b990:	4619      	mov	r1, r3
 800b992:	4620      	mov	r0, r4
 800b994:	f7f5 f8ea 	bl	8000b6c <__addsf3>
 800b998:	4603      	mov	r3, r0
 800b99a:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b99c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d003      	beq.n	800b9ac <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b9aa:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b9ac:	6978      	ldr	r0, [r7, #20]
 800b9ae:	f7f5 fb35 	bl	800101c <__aeabi_f2iz>
 800b9b2:	4603      	mov	r3, r0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3718      	adds	r7, #24
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bdb0      	pop	{r4, r5, r7, pc}

0800b9bc <atoi>:
 800b9bc:	220a      	movs	r2, #10
 800b9be:	2100      	movs	r1, #0
 800b9c0:	f000 be36 	b.w	800c630 <strtol>

0800b9c4 <__errno>:
 800b9c4:	4b01      	ldr	r3, [pc, #4]	; (800b9cc <__errno+0x8>)
 800b9c6:	6818      	ldr	r0, [r3, #0]
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	2000001c 	.word	0x2000001c

0800b9d0 <__libc_init_array>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	2600      	movs	r6, #0
 800b9d4:	4d0c      	ldr	r5, [pc, #48]	; (800ba08 <__libc_init_array+0x38>)
 800b9d6:	4c0d      	ldr	r4, [pc, #52]	; (800ba0c <__libc_init_array+0x3c>)
 800b9d8:	1b64      	subs	r4, r4, r5
 800b9da:	10a4      	asrs	r4, r4, #2
 800b9dc:	42a6      	cmp	r6, r4
 800b9de:	d109      	bne.n	800b9f4 <__libc_init_array+0x24>
 800b9e0:	f002 ffc6 	bl	800e970 <_init>
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	4d0a      	ldr	r5, [pc, #40]	; (800ba10 <__libc_init_array+0x40>)
 800b9e8:	4c0a      	ldr	r4, [pc, #40]	; (800ba14 <__libc_init_array+0x44>)
 800b9ea:	1b64      	subs	r4, r4, r5
 800b9ec:	10a4      	asrs	r4, r4, #2
 800b9ee:	42a6      	cmp	r6, r4
 800b9f0:	d105      	bne.n	800b9fe <__libc_init_array+0x2e>
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9f8:	4798      	blx	r3
 800b9fa:	3601      	adds	r6, #1
 800b9fc:	e7ee      	b.n	800b9dc <__libc_init_array+0xc>
 800b9fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba02:	4798      	blx	r3
 800ba04:	3601      	adds	r6, #1
 800ba06:	e7f2      	b.n	800b9ee <__libc_init_array+0x1e>
 800ba08:	0800fe04 	.word	0x0800fe04
 800ba0c:	0800fe04 	.word	0x0800fe04
 800ba10:	0800fe04 	.word	0x0800fe04
 800ba14:	0800fe08 	.word	0x0800fe08

0800ba18 <malloc>:
 800ba18:	4b02      	ldr	r3, [pc, #8]	; (800ba24 <malloc+0xc>)
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	6818      	ldr	r0, [r3, #0]
 800ba1e:	f000 b85f 	b.w	800bae0 <_malloc_r>
 800ba22:	bf00      	nop
 800ba24:	2000001c 	.word	0x2000001c

0800ba28 <free>:
 800ba28:	4b02      	ldr	r3, [pc, #8]	; (800ba34 <free+0xc>)
 800ba2a:	4601      	mov	r1, r0
 800ba2c:	6818      	ldr	r0, [r3, #0]
 800ba2e:	f000 b80b 	b.w	800ba48 <_free_r>
 800ba32:	bf00      	nop
 800ba34:	2000001c 	.word	0x2000001c

0800ba38 <memset>:
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4402      	add	r2, r0
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d100      	bne.n	800ba42 <memset+0xa>
 800ba40:	4770      	bx	lr
 800ba42:	f803 1b01 	strb.w	r1, [r3], #1
 800ba46:	e7f9      	b.n	800ba3c <memset+0x4>

0800ba48 <_free_r>:
 800ba48:	b538      	push	{r3, r4, r5, lr}
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	2900      	cmp	r1, #0
 800ba4e:	d043      	beq.n	800bad8 <_free_r+0x90>
 800ba50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba54:	1f0c      	subs	r4, r1, #4
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bfb8      	it	lt
 800ba5a:	18e4      	addlt	r4, r4, r3
 800ba5c:	f001 fdc4 	bl	800d5e8 <__malloc_lock>
 800ba60:	4a1e      	ldr	r2, [pc, #120]	; (800badc <_free_r+0x94>)
 800ba62:	6813      	ldr	r3, [r2, #0]
 800ba64:	4610      	mov	r0, r2
 800ba66:	b933      	cbnz	r3, 800ba76 <_free_r+0x2e>
 800ba68:	6063      	str	r3, [r4, #4]
 800ba6a:	6014      	str	r4, [r2, #0]
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba72:	f001 bdbf 	b.w	800d5f4 <__malloc_unlock>
 800ba76:	42a3      	cmp	r3, r4
 800ba78:	d90a      	bls.n	800ba90 <_free_r+0x48>
 800ba7a:	6821      	ldr	r1, [r4, #0]
 800ba7c:	1862      	adds	r2, r4, r1
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	bf01      	itttt	eq
 800ba82:	681a      	ldreq	r2, [r3, #0]
 800ba84:	685b      	ldreq	r3, [r3, #4]
 800ba86:	1852      	addeq	r2, r2, r1
 800ba88:	6022      	streq	r2, [r4, #0]
 800ba8a:	6063      	str	r3, [r4, #4]
 800ba8c:	6004      	str	r4, [r0, #0]
 800ba8e:	e7ed      	b.n	800ba6c <_free_r+0x24>
 800ba90:	461a      	mov	r2, r3
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	b10b      	cbz	r3, 800ba9a <_free_r+0x52>
 800ba96:	42a3      	cmp	r3, r4
 800ba98:	d9fa      	bls.n	800ba90 <_free_r+0x48>
 800ba9a:	6811      	ldr	r1, [r2, #0]
 800ba9c:	1850      	adds	r0, r2, r1
 800ba9e:	42a0      	cmp	r0, r4
 800baa0:	d10b      	bne.n	800baba <_free_r+0x72>
 800baa2:	6820      	ldr	r0, [r4, #0]
 800baa4:	4401      	add	r1, r0
 800baa6:	1850      	adds	r0, r2, r1
 800baa8:	4283      	cmp	r3, r0
 800baaa:	6011      	str	r1, [r2, #0]
 800baac:	d1de      	bne.n	800ba6c <_free_r+0x24>
 800baae:	6818      	ldr	r0, [r3, #0]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	4401      	add	r1, r0
 800bab4:	6011      	str	r1, [r2, #0]
 800bab6:	6053      	str	r3, [r2, #4]
 800bab8:	e7d8      	b.n	800ba6c <_free_r+0x24>
 800baba:	d902      	bls.n	800bac2 <_free_r+0x7a>
 800babc:	230c      	movs	r3, #12
 800babe:	602b      	str	r3, [r5, #0]
 800bac0:	e7d4      	b.n	800ba6c <_free_r+0x24>
 800bac2:	6820      	ldr	r0, [r4, #0]
 800bac4:	1821      	adds	r1, r4, r0
 800bac6:	428b      	cmp	r3, r1
 800bac8:	bf01      	itttt	eq
 800baca:	6819      	ldreq	r1, [r3, #0]
 800bacc:	685b      	ldreq	r3, [r3, #4]
 800bace:	1809      	addeq	r1, r1, r0
 800bad0:	6021      	streq	r1, [r4, #0]
 800bad2:	6063      	str	r3, [r4, #4]
 800bad4:	6054      	str	r4, [r2, #4]
 800bad6:	e7c9      	b.n	800ba6c <_free_r+0x24>
 800bad8:	bd38      	pop	{r3, r4, r5, pc}
 800bada:	bf00      	nop
 800badc:	200004d0 	.word	0x200004d0

0800bae0 <_malloc_r>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	1ccd      	adds	r5, r1, #3
 800bae4:	f025 0503 	bic.w	r5, r5, #3
 800bae8:	3508      	adds	r5, #8
 800baea:	2d0c      	cmp	r5, #12
 800baec:	bf38      	it	cc
 800baee:	250c      	movcc	r5, #12
 800baf0:	2d00      	cmp	r5, #0
 800baf2:	4606      	mov	r6, r0
 800baf4:	db01      	blt.n	800bafa <_malloc_r+0x1a>
 800baf6:	42a9      	cmp	r1, r5
 800baf8:	d903      	bls.n	800bb02 <_malloc_r+0x22>
 800bafa:	230c      	movs	r3, #12
 800bafc:	6033      	str	r3, [r6, #0]
 800bafe:	2000      	movs	r0, #0
 800bb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb02:	f001 fd71 	bl	800d5e8 <__malloc_lock>
 800bb06:	4921      	ldr	r1, [pc, #132]	; (800bb8c <_malloc_r+0xac>)
 800bb08:	680a      	ldr	r2, [r1, #0]
 800bb0a:	4614      	mov	r4, r2
 800bb0c:	b99c      	cbnz	r4, 800bb36 <_malloc_r+0x56>
 800bb0e:	4f20      	ldr	r7, [pc, #128]	; (800bb90 <_malloc_r+0xb0>)
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	b923      	cbnz	r3, 800bb1e <_malloc_r+0x3e>
 800bb14:	4621      	mov	r1, r4
 800bb16:	4630      	mov	r0, r6
 800bb18:	f000 fcb4 	bl	800c484 <_sbrk_r>
 800bb1c:	6038      	str	r0, [r7, #0]
 800bb1e:	4629      	mov	r1, r5
 800bb20:	4630      	mov	r0, r6
 800bb22:	f000 fcaf 	bl	800c484 <_sbrk_r>
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d123      	bne.n	800bb72 <_malloc_r+0x92>
 800bb2a:	230c      	movs	r3, #12
 800bb2c:	4630      	mov	r0, r6
 800bb2e:	6033      	str	r3, [r6, #0]
 800bb30:	f001 fd60 	bl	800d5f4 <__malloc_unlock>
 800bb34:	e7e3      	b.n	800bafe <_malloc_r+0x1e>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	1b5b      	subs	r3, r3, r5
 800bb3a:	d417      	bmi.n	800bb6c <_malloc_r+0x8c>
 800bb3c:	2b0b      	cmp	r3, #11
 800bb3e:	d903      	bls.n	800bb48 <_malloc_r+0x68>
 800bb40:	6023      	str	r3, [r4, #0]
 800bb42:	441c      	add	r4, r3
 800bb44:	6025      	str	r5, [r4, #0]
 800bb46:	e004      	b.n	800bb52 <_malloc_r+0x72>
 800bb48:	6863      	ldr	r3, [r4, #4]
 800bb4a:	42a2      	cmp	r2, r4
 800bb4c:	bf0c      	ite	eq
 800bb4e:	600b      	streq	r3, [r1, #0]
 800bb50:	6053      	strne	r3, [r2, #4]
 800bb52:	4630      	mov	r0, r6
 800bb54:	f001 fd4e 	bl	800d5f4 <__malloc_unlock>
 800bb58:	f104 000b 	add.w	r0, r4, #11
 800bb5c:	1d23      	adds	r3, r4, #4
 800bb5e:	f020 0007 	bic.w	r0, r0, #7
 800bb62:	1ac2      	subs	r2, r0, r3
 800bb64:	d0cc      	beq.n	800bb00 <_malloc_r+0x20>
 800bb66:	1a1b      	subs	r3, r3, r0
 800bb68:	50a3      	str	r3, [r4, r2]
 800bb6a:	e7c9      	b.n	800bb00 <_malloc_r+0x20>
 800bb6c:	4622      	mov	r2, r4
 800bb6e:	6864      	ldr	r4, [r4, #4]
 800bb70:	e7cc      	b.n	800bb0c <_malloc_r+0x2c>
 800bb72:	1cc4      	adds	r4, r0, #3
 800bb74:	f024 0403 	bic.w	r4, r4, #3
 800bb78:	42a0      	cmp	r0, r4
 800bb7a:	d0e3      	beq.n	800bb44 <_malloc_r+0x64>
 800bb7c:	1a21      	subs	r1, r4, r0
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f000 fc80 	bl	800c484 <_sbrk_r>
 800bb84:	3001      	adds	r0, #1
 800bb86:	d1dd      	bne.n	800bb44 <_malloc_r+0x64>
 800bb88:	e7cf      	b.n	800bb2a <_malloc_r+0x4a>
 800bb8a:	bf00      	nop
 800bb8c:	200004d0 	.word	0x200004d0
 800bb90:	200004d4 	.word	0x200004d4

0800bb94 <__cvt>:
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb9a:	461f      	mov	r7, r3
 800bb9c:	bfbb      	ittet	lt
 800bb9e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800bba2:	461f      	movlt	r7, r3
 800bba4:	2300      	movge	r3, #0
 800bba6:	232d      	movlt	r3, #45	; 0x2d
 800bba8:	b088      	sub	sp, #32
 800bbaa:	4614      	mov	r4, r2
 800bbac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bbae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800bbb0:	7013      	strb	r3, [r2, #0]
 800bbb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bbb4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800bbb8:	f023 0820 	bic.w	r8, r3, #32
 800bbbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbc0:	d005      	beq.n	800bbce <__cvt+0x3a>
 800bbc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bbc6:	d100      	bne.n	800bbca <__cvt+0x36>
 800bbc8:	3501      	adds	r5, #1
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e000      	b.n	800bbd0 <__cvt+0x3c>
 800bbce:	2303      	movs	r3, #3
 800bbd0:	aa07      	add	r2, sp, #28
 800bbd2:	9204      	str	r2, [sp, #16]
 800bbd4:	aa06      	add	r2, sp, #24
 800bbd6:	e9cd a202 	strd	sl, r2, [sp, #8]
 800bbda:	e9cd 3500 	strd	r3, r5, [sp]
 800bbde:	4622      	mov	r2, r4
 800bbe0:	463b      	mov	r3, r7
 800bbe2:	f000 fdf9 	bl	800c7d8 <_dtoa_r>
 800bbe6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bbea:	4606      	mov	r6, r0
 800bbec:	d102      	bne.n	800bbf4 <__cvt+0x60>
 800bbee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbf0:	07db      	lsls	r3, r3, #31
 800bbf2:	d522      	bpl.n	800bc3a <__cvt+0xa6>
 800bbf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bbf8:	eb06 0905 	add.w	r9, r6, r5
 800bbfc:	d110      	bne.n	800bc20 <__cvt+0x8c>
 800bbfe:	7833      	ldrb	r3, [r6, #0]
 800bc00:	2b30      	cmp	r3, #48	; 0x30
 800bc02:	d10a      	bne.n	800bc1a <__cvt+0x86>
 800bc04:	2200      	movs	r2, #0
 800bc06:	2300      	movs	r3, #0
 800bc08:	4620      	mov	r0, r4
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	f7f4 ff38 	bl	8000a80 <__aeabi_dcmpeq>
 800bc10:	b918      	cbnz	r0, 800bc1a <__cvt+0x86>
 800bc12:	f1c5 0501 	rsb	r5, r5, #1
 800bc16:	f8ca 5000 	str.w	r5, [sl]
 800bc1a:	f8da 3000 	ldr.w	r3, [sl]
 800bc1e:	4499      	add	r9, r3
 800bc20:	2200      	movs	r2, #0
 800bc22:	2300      	movs	r3, #0
 800bc24:	4620      	mov	r0, r4
 800bc26:	4639      	mov	r1, r7
 800bc28:	f7f4 ff2a 	bl	8000a80 <__aeabi_dcmpeq>
 800bc2c:	b108      	cbz	r0, 800bc32 <__cvt+0x9e>
 800bc2e:	f8cd 901c 	str.w	r9, [sp, #28]
 800bc32:	2230      	movs	r2, #48	; 0x30
 800bc34:	9b07      	ldr	r3, [sp, #28]
 800bc36:	454b      	cmp	r3, r9
 800bc38:	d307      	bcc.n	800bc4a <__cvt+0xb6>
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	9b07      	ldr	r3, [sp, #28]
 800bc3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bc40:	1b9b      	subs	r3, r3, r6
 800bc42:	6013      	str	r3, [r2, #0]
 800bc44:	b008      	add	sp, #32
 800bc46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc4a:	1c59      	adds	r1, r3, #1
 800bc4c:	9107      	str	r1, [sp, #28]
 800bc4e:	701a      	strb	r2, [r3, #0]
 800bc50:	e7f0      	b.n	800bc34 <__cvt+0xa0>

0800bc52 <__exponent>:
 800bc52:	4603      	mov	r3, r0
 800bc54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc56:	2900      	cmp	r1, #0
 800bc58:	f803 2b02 	strb.w	r2, [r3], #2
 800bc5c:	bfb6      	itet	lt
 800bc5e:	222d      	movlt	r2, #45	; 0x2d
 800bc60:	222b      	movge	r2, #43	; 0x2b
 800bc62:	4249      	neglt	r1, r1
 800bc64:	2909      	cmp	r1, #9
 800bc66:	7042      	strb	r2, [r0, #1]
 800bc68:	dd2b      	ble.n	800bcc2 <__exponent+0x70>
 800bc6a:	f10d 0407 	add.w	r4, sp, #7
 800bc6e:	46a4      	mov	ip, r4
 800bc70:	270a      	movs	r7, #10
 800bc72:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc76:	460a      	mov	r2, r1
 800bc78:	46a6      	mov	lr, r4
 800bc7a:	fb07 1516 	mls	r5, r7, r6, r1
 800bc7e:	2a63      	cmp	r2, #99	; 0x63
 800bc80:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800bc84:	4631      	mov	r1, r6
 800bc86:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc8e:	dcf0      	bgt.n	800bc72 <__exponent+0x20>
 800bc90:	3130      	adds	r1, #48	; 0x30
 800bc92:	f1ae 0502 	sub.w	r5, lr, #2
 800bc96:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	1c44      	adds	r4, r0, #1
 800bc9e:	4561      	cmp	r1, ip
 800bca0:	d30a      	bcc.n	800bcb8 <__exponent+0x66>
 800bca2:	f10d 0209 	add.w	r2, sp, #9
 800bca6:	eba2 020e 	sub.w	r2, r2, lr
 800bcaa:	4565      	cmp	r5, ip
 800bcac:	bf88      	it	hi
 800bcae:	2200      	movhi	r2, #0
 800bcb0:	4413      	add	r3, r2
 800bcb2:	1a18      	subs	r0, r3, r0
 800bcb4:	b003      	add	sp, #12
 800bcb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bcbc:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bcc0:	e7ed      	b.n	800bc9e <__exponent+0x4c>
 800bcc2:	2330      	movs	r3, #48	; 0x30
 800bcc4:	3130      	adds	r1, #48	; 0x30
 800bcc6:	7083      	strb	r3, [r0, #2]
 800bcc8:	70c1      	strb	r1, [r0, #3]
 800bcca:	1d03      	adds	r3, r0, #4
 800bccc:	e7f1      	b.n	800bcb2 <__exponent+0x60>
	...

0800bcd0 <_printf_float>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	b091      	sub	sp, #68	; 0x44
 800bcd6:	460c      	mov	r4, r1
 800bcd8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800bcdc:	4616      	mov	r6, r2
 800bcde:	461f      	mov	r7, r3
 800bce0:	4605      	mov	r5, r0
 800bce2:	f001 fc5d 	bl	800d5a0 <_localeconv_r>
 800bce6:	6803      	ldr	r3, [r0, #0]
 800bce8:	4618      	mov	r0, r3
 800bcea:	9309      	str	r3, [sp, #36]	; 0x24
 800bcec:	f7f4 fa9c 	bl	8000228 <strlen>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	930e      	str	r3, [sp, #56]	; 0x38
 800bcf4:	f8d8 3000 	ldr.w	r3, [r8]
 800bcf8:	900a      	str	r0, [sp, #40]	; 0x28
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	f023 0307 	bic.w	r3, r3, #7
 800bd00:	f103 0208 	add.w	r2, r3, #8
 800bd04:	f894 9018 	ldrb.w	r9, [r4, #24]
 800bd08:	f8d4 b000 	ldr.w	fp, [r4]
 800bd0c:	f8c8 2000 	str.w	r2, [r8]
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd18:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800bd1c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800bd20:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd22:	f04f 32ff 	mov.w	r2, #4294967295
 800bd26:	4640      	mov	r0, r8
 800bd28:	4b9c      	ldr	r3, [pc, #624]	; (800bf9c <_printf_float+0x2cc>)
 800bd2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd2c:	f7f4 feda 	bl	8000ae4 <__aeabi_dcmpun>
 800bd30:	bb70      	cbnz	r0, 800bd90 <_printf_float+0xc0>
 800bd32:	f04f 32ff 	mov.w	r2, #4294967295
 800bd36:	4640      	mov	r0, r8
 800bd38:	4b98      	ldr	r3, [pc, #608]	; (800bf9c <_printf_float+0x2cc>)
 800bd3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd3c:	f7f4 feb4 	bl	8000aa8 <__aeabi_dcmple>
 800bd40:	bb30      	cbnz	r0, 800bd90 <_printf_float+0xc0>
 800bd42:	2200      	movs	r2, #0
 800bd44:	2300      	movs	r3, #0
 800bd46:	4640      	mov	r0, r8
 800bd48:	4651      	mov	r1, sl
 800bd4a:	f7f4 fea3 	bl	8000a94 <__aeabi_dcmplt>
 800bd4e:	b110      	cbz	r0, 800bd56 <_printf_float+0x86>
 800bd50:	232d      	movs	r3, #45	; 0x2d
 800bd52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd56:	4b92      	ldr	r3, [pc, #584]	; (800bfa0 <_printf_float+0x2d0>)
 800bd58:	4892      	ldr	r0, [pc, #584]	; (800bfa4 <_printf_float+0x2d4>)
 800bd5a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bd5e:	bf94      	ite	ls
 800bd60:	4698      	movls	r8, r3
 800bd62:	4680      	movhi	r8, r0
 800bd64:	2303      	movs	r3, #3
 800bd66:	f04f 0a00 	mov.w	sl, #0
 800bd6a:	6123      	str	r3, [r4, #16]
 800bd6c:	f02b 0304 	bic.w	r3, fp, #4
 800bd70:	6023      	str	r3, [r4, #0]
 800bd72:	4633      	mov	r3, r6
 800bd74:	4621      	mov	r1, r4
 800bd76:	4628      	mov	r0, r5
 800bd78:	9700      	str	r7, [sp, #0]
 800bd7a:	aa0f      	add	r2, sp, #60	; 0x3c
 800bd7c:	f000 f9d4 	bl	800c128 <_printf_common>
 800bd80:	3001      	adds	r0, #1
 800bd82:	f040 8090 	bne.w	800bea6 <_printf_float+0x1d6>
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	b011      	add	sp, #68	; 0x44
 800bd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd90:	4642      	mov	r2, r8
 800bd92:	4653      	mov	r3, sl
 800bd94:	4640      	mov	r0, r8
 800bd96:	4651      	mov	r1, sl
 800bd98:	f7f4 fea4 	bl	8000ae4 <__aeabi_dcmpun>
 800bd9c:	b148      	cbz	r0, 800bdb2 <_printf_float+0xe2>
 800bd9e:	f1ba 0f00 	cmp.w	sl, #0
 800bda2:	bfb8      	it	lt
 800bda4:	232d      	movlt	r3, #45	; 0x2d
 800bda6:	4880      	ldr	r0, [pc, #512]	; (800bfa8 <_printf_float+0x2d8>)
 800bda8:	bfb8      	it	lt
 800bdaa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bdae:	4b7f      	ldr	r3, [pc, #508]	; (800bfac <_printf_float+0x2dc>)
 800bdb0:	e7d3      	b.n	800bd5a <_printf_float+0x8a>
 800bdb2:	6863      	ldr	r3, [r4, #4]
 800bdb4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bdb8:	1c5a      	adds	r2, r3, #1
 800bdba:	d142      	bne.n	800be42 <_printf_float+0x172>
 800bdbc:	2306      	movs	r3, #6
 800bdbe:	6063      	str	r3, [r4, #4]
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	9206      	str	r2, [sp, #24]
 800bdc4:	aa0e      	add	r2, sp, #56	; 0x38
 800bdc6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bdca:	aa0d      	add	r2, sp, #52	; 0x34
 800bdcc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bdd0:	9203      	str	r2, [sp, #12]
 800bdd2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bdd6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	6863      	ldr	r3, [r4, #4]
 800bdde:	4642      	mov	r2, r8
 800bde0:	9300      	str	r3, [sp, #0]
 800bde2:	4628      	mov	r0, r5
 800bde4:	4653      	mov	r3, sl
 800bde6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bde8:	f7ff fed4 	bl	800bb94 <__cvt>
 800bdec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdee:	4680      	mov	r8, r0
 800bdf0:	2947      	cmp	r1, #71	; 0x47
 800bdf2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bdf4:	d108      	bne.n	800be08 <_printf_float+0x138>
 800bdf6:	1cc8      	adds	r0, r1, #3
 800bdf8:	db02      	blt.n	800be00 <_printf_float+0x130>
 800bdfa:	6863      	ldr	r3, [r4, #4]
 800bdfc:	4299      	cmp	r1, r3
 800bdfe:	dd40      	ble.n	800be82 <_printf_float+0x1b2>
 800be00:	f1a9 0902 	sub.w	r9, r9, #2
 800be04:	fa5f f989 	uxtb.w	r9, r9
 800be08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800be0c:	d81f      	bhi.n	800be4e <_printf_float+0x17e>
 800be0e:	464a      	mov	r2, r9
 800be10:	3901      	subs	r1, #1
 800be12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be16:	910d      	str	r1, [sp, #52]	; 0x34
 800be18:	f7ff ff1b 	bl	800bc52 <__exponent>
 800be1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be1e:	4682      	mov	sl, r0
 800be20:	1813      	adds	r3, r2, r0
 800be22:	2a01      	cmp	r2, #1
 800be24:	6123      	str	r3, [r4, #16]
 800be26:	dc02      	bgt.n	800be2e <_printf_float+0x15e>
 800be28:	6822      	ldr	r2, [r4, #0]
 800be2a:	07d2      	lsls	r2, r2, #31
 800be2c:	d501      	bpl.n	800be32 <_printf_float+0x162>
 800be2e:	3301      	adds	r3, #1
 800be30:	6123      	str	r3, [r4, #16]
 800be32:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800be36:	2b00      	cmp	r3, #0
 800be38:	d09b      	beq.n	800bd72 <_printf_float+0xa2>
 800be3a:	232d      	movs	r3, #45	; 0x2d
 800be3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be40:	e797      	b.n	800bd72 <_printf_float+0xa2>
 800be42:	2947      	cmp	r1, #71	; 0x47
 800be44:	d1bc      	bne.n	800bdc0 <_printf_float+0xf0>
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1ba      	bne.n	800bdc0 <_printf_float+0xf0>
 800be4a:	2301      	movs	r3, #1
 800be4c:	e7b7      	b.n	800bdbe <_printf_float+0xee>
 800be4e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800be52:	d118      	bne.n	800be86 <_printf_float+0x1b6>
 800be54:	2900      	cmp	r1, #0
 800be56:	6863      	ldr	r3, [r4, #4]
 800be58:	dd0b      	ble.n	800be72 <_printf_float+0x1a2>
 800be5a:	6121      	str	r1, [r4, #16]
 800be5c:	b913      	cbnz	r3, 800be64 <_printf_float+0x194>
 800be5e:	6822      	ldr	r2, [r4, #0]
 800be60:	07d0      	lsls	r0, r2, #31
 800be62:	d502      	bpl.n	800be6a <_printf_float+0x19a>
 800be64:	3301      	adds	r3, #1
 800be66:	440b      	add	r3, r1
 800be68:	6123      	str	r3, [r4, #16]
 800be6a:	f04f 0a00 	mov.w	sl, #0
 800be6e:	65a1      	str	r1, [r4, #88]	; 0x58
 800be70:	e7df      	b.n	800be32 <_printf_float+0x162>
 800be72:	b913      	cbnz	r3, 800be7a <_printf_float+0x1aa>
 800be74:	6822      	ldr	r2, [r4, #0]
 800be76:	07d2      	lsls	r2, r2, #31
 800be78:	d501      	bpl.n	800be7e <_printf_float+0x1ae>
 800be7a:	3302      	adds	r3, #2
 800be7c:	e7f4      	b.n	800be68 <_printf_float+0x198>
 800be7e:	2301      	movs	r3, #1
 800be80:	e7f2      	b.n	800be68 <_printf_float+0x198>
 800be82:	f04f 0967 	mov.w	r9, #103	; 0x67
 800be86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be88:	4299      	cmp	r1, r3
 800be8a:	db05      	blt.n	800be98 <_printf_float+0x1c8>
 800be8c:	6823      	ldr	r3, [r4, #0]
 800be8e:	6121      	str	r1, [r4, #16]
 800be90:	07d8      	lsls	r0, r3, #31
 800be92:	d5ea      	bpl.n	800be6a <_printf_float+0x19a>
 800be94:	1c4b      	adds	r3, r1, #1
 800be96:	e7e7      	b.n	800be68 <_printf_float+0x198>
 800be98:	2900      	cmp	r1, #0
 800be9a:	bfcc      	ite	gt
 800be9c:	2201      	movgt	r2, #1
 800be9e:	f1c1 0202 	rsble	r2, r1, #2
 800bea2:	4413      	add	r3, r2
 800bea4:	e7e0      	b.n	800be68 <_printf_float+0x198>
 800bea6:	6823      	ldr	r3, [r4, #0]
 800bea8:	055a      	lsls	r2, r3, #21
 800beaa:	d407      	bmi.n	800bebc <_printf_float+0x1ec>
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	4642      	mov	r2, r8
 800beb0:	4631      	mov	r1, r6
 800beb2:	4628      	mov	r0, r5
 800beb4:	47b8      	blx	r7
 800beb6:	3001      	adds	r0, #1
 800beb8:	d12b      	bne.n	800bf12 <_printf_float+0x242>
 800beba:	e764      	b.n	800bd86 <_printf_float+0xb6>
 800bebc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bec0:	f240 80dd 	bls.w	800c07e <_printf_float+0x3ae>
 800bec4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bec8:	2200      	movs	r2, #0
 800beca:	2300      	movs	r3, #0
 800becc:	f7f4 fdd8 	bl	8000a80 <__aeabi_dcmpeq>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d033      	beq.n	800bf3c <_printf_float+0x26c>
 800bed4:	2301      	movs	r3, #1
 800bed6:	4631      	mov	r1, r6
 800bed8:	4628      	mov	r0, r5
 800beda:	4a35      	ldr	r2, [pc, #212]	; (800bfb0 <_printf_float+0x2e0>)
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f af51 	beq.w	800bd86 <_printf_float+0xb6>
 800bee4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bee8:	429a      	cmp	r2, r3
 800beea:	db02      	blt.n	800bef2 <_printf_float+0x222>
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	07d8      	lsls	r0, r3, #31
 800bef0:	d50f      	bpl.n	800bf12 <_printf_float+0x242>
 800bef2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bef6:	4631      	mov	r1, r6
 800bef8:	4628      	mov	r0, r5
 800befa:	47b8      	blx	r7
 800befc:	3001      	adds	r0, #1
 800befe:	f43f af42 	beq.w	800bd86 <_printf_float+0xb6>
 800bf02:	f04f 0800 	mov.w	r8, #0
 800bf06:	f104 091a 	add.w	r9, r4, #26
 800bf0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	4543      	cmp	r3, r8
 800bf10:	dc09      	bgt.n	800bf26 <_printf_float+0x256>
 800bf12:	6823      	ldr	r3, [r4, #0]
 800bf14:	079b      	lsls	r3, r3, #30
 800bf16:	f100 8102 	bmi.w	800c11e <_printf_float+0x44e>
 800bf1a:	68e0      	ldr	r0, [r4, #12]
 800bf1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf1e:	4298      	cmp	r0, r3
 800bf20:	bfb8      	it	lt
 800bf22:	4618      	movlt	r0, r3
 800bf24:	e731      	b.n	800bd8a <_printf_float+0xba>
 800bf26:	2301      	movs	r3, #1
 800bf28:	464a      	mov	r2, r9
 800bf2a:	4631      	mov	r1, r6
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	47b8      	blx	r7
 800bf30:	3001      	adds	r0, #1
 800bf32:	f43f af28 	beq.w	800bd86 <_printf_float+0xb6>
 800bf36:	f108 0801 	add.w	r8, r8, #1
 800bf3a:	e7e6      	b.n	800bf0a <_printf_float+0x23a>
 800bf3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dc38      	bgt.n	800bfb4 <_printf_float+0x2e4>
 800bf42:	2301      	movs	r3, #1
 800bf44:	4631      	mov	r1, r6
 800bf46:	4628      	mov	r0, r5
 800bf48:	4a19      	ldr	r2, [pc, #100]	; (800bfb0 <_printf_float+0x2e0>)
 800bf4a:	47b8      	blx	r7
 800bf4c:	3001      	adds	r0, #1
 800bf4e:	f43f af1a 	beq.w	800bd86 <_printf_float+0xb6>
 800bf52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bf56:	4313      	orrs	r3, r2
 800bf58:	d102      	bne.n	800bf60 <_printf_float+0x290>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	07d9      	lsls	r1, r3, #31
 800bf5e:	d5d8      	bpl.n	800bf12 <_printf_float+0x242>
 800bf60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf64:	4631      	mov	r1, r6
 800bf66:	4628      	mov	r0, r5
 800bf68:	47b8      	blx	r7
 800bf6a:	3001      	adds	r0, #1
 800bf6c:	f43f af0b 	beq.w	800bd86 <_printf_float+0xb6>
 800bf70:	f04f 0900 	mov.w	r9, #0
 800bf74:	f104 0a1a 	add.w	sl, r4, #26
 800bf78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf7a:	425b      	negs	r3, r3
 800bf7c:	454b      	cmp	r3, r9
 800bf7e:	dc01      	bgt.n	800bf84 <_printf_float+0x2b4>
 800bf80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf82:	e794      	b.n	800beae <_printf_float+0x1de>
 800bf84:	2301      	movs	r3, #1
 800bf86:	4652      	mov	r2, sl
 800bf88:	4631      	mov	r1, r6
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	47b8      	blx	r7
 800bf8e:	3001      	adds	r0, #1
 800bf90:	f43f aef9 	beq.w	800bd86 <_printf_float+0xb6>
 800bf94:	f109 0901 	add.w	r9, r9, #1
 800bf98:	e7ee      	b.n	800bf78 <_printf_float+0x2a8>
 800bf9a:	bf00      	nop
 800bf9c:	7fefffff 	.word	0x7fefffff
 800bfa0:	0800fa24 	.word	0x0800fa24
 800bfa4:	0800fa28 	.word	0x0800fa28
 800bfa8:	0800fa30 	.word	0x0800fa30
 800bfac:	0800fa2c 	.word	0x0800fa2c
 800bfb0:	0800fa34 	.word	0x0800fa34
 800bfb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	bfa8      	it	ge
 800bfbc:	461a      	movge	r2, r3
 800bfbe:	2a00      	cmp	r2, #0
 800bfc0:	4691      	mov	r9, r2
 800bfc2:	dc37      	bgt.n	800c034 <_printf_float+0x364>
 800bfc4:	f04f 0b00 	mov.w	fp, #0
 800bfc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfcc:	f104 021a 	add.w	r2, r4, #26
 800bfd0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bfd4:	ebaa 0309 	sub.w	r3, sl, r9
 800bfd8:	455b      	cmp	r3, fp
 800bfda:	dc33      	bgt.n	800c044 <_printf_float+0x374>
 800bfdc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	db3b      	blt.n	800c05c <_printf_float+0x38c>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	07da      	lsls	r2, r3, #31
 800bfe8:	d438      	bmi.n	800c05c <_printf_float+0x38c>
 800bfea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfec:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bfee:	eba2 030a 	sub.w	r3, r2, sl
 800bff2:	eba2 0901 	sub.w	r9, r2, r1
 800bff6:	4599      	cmp	r9, r3
 800bff8:	bfa8      	it	ge
 800bffa:	4699      	movge	r9, r3
 800bffc:	f1b9 0f00 	cmp.w	r9, #0
 800c000:	dc34      	bgt.n	800c06c <_printf_float+0x39c>
 800c002:	f04f 0800 	mov.w	r8, #0
 800c006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c00a:	f104 0a1a 	add.w	sl, r4, #26
 800c00e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c012:	1a9b      	subs	r3, r3, r2
 800c014:	eba3 0309 	sub.w	r3, r3, r9
 800c018:	4543      	cmp	r3, r8
 800c01a:	f77f af7a 	ble.w	800bf12 <_printf_float+0x242>
 800c01e:	2301      	movs	r3, #1
 800c020:	4652      	mov	r2, sl
 800c022:	4631      	mov	r1, r6
 800c024:	4628      	mov	r0, r5
 800c026:	47b8      	blx	r7
 800c028:	3001      	adds	r0, #1
 800c02a:	f43f aeac 	beq.w	800bd86 <_printf_float+0xb6>
 800c02e:	f108 0801 	add.w	r8, r8, #1
 800c032:	e7ec      	b.n	800c00e <_printf_float+0x33e>
 800c034:	4613      	mov	r3, r2
 800c036:	4631      	mov	r1, r6
 800c038:	4642      	mov	r2, r8
 800c03a:	4628      	mov	r0, r5
 800c03c:	47b8      	blx	r7
 800c03e:	3001      	adds	r0, #1
 800c040:	d1c0      	bne.n	800bfc4 <_printf_float+0x2f4>
 800c042:	e6a0      	b.n	800bd86 <_printf_float+0xb6>
 800c044:	2301      	movs	r3, #1
 800c046:	4631      	mov	r1, r6
 800c048:	4628      	mov	r0, r5
 800c04a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c04c:	47b8      	blx	r7
 800c04e:	3001      	adds	r0, #1
 800c050:	f43f ae99 	beq.w	800bd86 <_printf_float+0xb6>
 800c054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c056:	f10b 0b01 	add.w	fp, fp, #1
 800c05a:	e7b9      	b.n	800bfd0 <_printf_float+0x300>
 800c05c:	4631      	mov	r1, r6
 800c05e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c062:	4628      	mov	r0, r5
 800c064:	47b8      	blx	r7
 800c066:	3001      	adds	r0, #1
 800c068:	d1bf      	bne.n	800bfea <_printf_float+0x31a>
 800c06a:	e68c      	b.n	800bd86 <_printf_float+0xb6>
 800c06c:	464b      	mov	r3, r9
 800c06e:	4631      	mov	r1, r6
 800c070:	4628      	mov	r0, r5
 800c072:	eb08 020a 	add.w	r2, r8, sl
 800c076:	47b8      	blx	r7
 800c078:	3001      	adds	r0, #1
 800c07a:	d1c2      	bne.n	800c002 <_printf_float+0x332>
 800c07c:	e683      	b.n	800bd86 <_printf_float+0xb6>
 800c07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c080:	2a01      	cmp	r2, #1
 800c082:	dc01      	bgt.n	800c088 <_printf_float+0x3b8>
 800c084:	07db      	lsls	r3, r3, #31
 800c086:	d537      	bpl.n	800c0f8 <_printf_float+0x428>
 800c088:	2301      	movs	r3, #1
 800c08a:	4642      	mov	r2, r8
 800c08c:	4631      	mov	r1, r6
 800c08e:	4628      	mov	r0, r5
 800c090:	47b8      	blx	r7
 800c092:	3001      	adds	r0, #1
 800c094:	f43f ae77 	beq.w	800bd86 <_printf_float+0xb6>
 800c098:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c09c:	4631      	mov	r1, r6
 800c09e:	4628      	mov	r0, r5
 800c0a0:	47b8      	blx	r7
 800c0a2:	3001      	adds	r0, #1
 800c0a4:	f43f ae6f 	beq.w	800bd86 <_printf_float+0xb6>
 800c0a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	f7f4 fce6 	bl	8000a80 <__aeabi_dcmpeq>
 800c0b4:	b9d8      	cbnz	r0, 800c0ee <_printf_float+0x41e>
 800c0b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0b8:	f108 0201 	add.w	r2, r8, #1
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	47b8      	blx	r7
 800c0c4:	3001      	adds	r0, #1
 800c0c6:	d10e      	bne.n	800c0e6 <_printf_float+0x416>
 800c0c8:	e65d      	b.n	800bd86 <_printf_float+0xb6>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	464a      	mov	r2, r9
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	47b8      	blx	r7
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	f43f ae56 	beq.w	800bd86 <_printf_float+0xb6>
 800c0da:	f108 0801 	add.w	r8, r8, #1
 800c0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	4543      	cmp	r3, r8
 800c0e4:	dcf1      	bgt.n	800c0ca <_printf_float+0x3fa>
 800c0e6:	4653      	mov	r3, sl
 800c0e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0ec:	e6e0      	b.n	800beb0 <_printf_float+0x1e0>
 800c0ee:	f04f 0800 	mov.w	r8, #0
 800c0f2:	f104 091a 	add.w	r9, r4, #26
 800c0f6:	e7f2      	b.n	800c0de <_printf_float+0x40e>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	4642      	mov	r2, r8
 800c0fc:	e7df      	b.n	800c0be <_printf_float+0x3ee>
 800c0fe:	2301      	movs	r3, #1
 800c100:	464a      	mov	r2, r9
 800c102:	4631      	mov	r1, r6
 800c104:	4628      	mov	r0, r5
 800c106:	47b8      	blx	r7
 800c108:	3001      	adds	r0, #1
 800c10a:	f43f ae3c 	beq.w	800bd86 <_printf_float+0xb6>
 800c10e:	f108 0801 	add.w	r8, r8, #1
 800c112:	68e3      	ldr	r3, [r4, #12]
 800c114:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c116:	1a5b      	subs	r3, r3, r1
 800c118:	4543      	cmp	r3, r8
 800c11a:	dcf0      	bgt.n	800c0fe <_printf_float+0x42e>
 800c11c:	e6fd      	b.n	800bf1a <_printf_float+0x24a>
 800c11e:	f04f 0800 	mov.w	r8, #0
 800c122:	f104 0919 	add.w	r9, r4, #25
 800c126:	e7f4      	b.n	800c112 <_printf_float+0x442>

0800c128 <_printf_common>:
 800c128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c12c:	4616      	mov	r6, r2
 800c12e:	4699      	mov	r9, r3
 800c130:	688a      	ldr	r2, [r1, #8]
 800c132:	690b      	ldr	r3, [r1, #16]
 800c134:	4607      	mov	r7, r0
 800c136:	4293      	cmp	r3, r2
 800c138:	bfb8      	it	lt
 800c13a:	4613      	movlt	r3, r2
 800c13c:	6033      	str	r3, [r6, #0]
 800c13e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c142:	460c      	mov	r4, r1
 800c144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c148:	b10a      	cbz	r2, 800c14e <_printf_common+0x26>
 800c14a:	3301      	adds	r3, #1
 800c14c:	6033      	str	r3, [r6, #0]
 800c14e:	6823      	ldr	r3, [r4, #0]
 800c150:	0699      	lsls	r1, r3, #26
 800c152:	bf42      	ittt	mi
 800c154:	6833      	ldrmi	r3, [r6, #0]
 800c156:	3302      	addmi	r3, #2
 800c158:	6033      	strmi	r3, [r6, #0]
 800c15a:	6825      	ldr	r5, [r4, #0]
 800c15c:	f015 0506 	ands.w	r5, r5, #6
 800c160:	d106      	bne.n	800c170 <_printf_common+0x48>
 800c162:	f104 0a19 	add.w	sl, r4, #25
 800c166:	68e3      	ldr	r3, [r4, #12]
 800c168:	6832      	ldr	r2, [r6, #0]
 800c16a:	1a9b      	subs	r3, r3, r2
 800c16c:	42ab      	cmp	r3, r5
 800c16e:	dc28      	bgt.n	800c1c2 <_printf_common+0x9a>
 800c170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c174:	1e13      	subs	r3, r2, #0
 800c176:	6822      	ldr	r2, [r4, #0]
 800c178:	bf18      	it	ne
 800c17a:	2301      	movne	r3, #1
 800c17c:	0692      	lsls	r2, r2, #26
 800c17e:	d42d      	bmi.n	800c1dc <_printf_common+0xb4>
 800c180:	4649      	mov	r1, r9
 800c182:	4638      	mov	r0, r7
 800c184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c188:	47c0      	blx	r8
 800c18a:	3001      	adds	r0, #1
 800c18c:	d020      	beq.n	800c1d0 <_printf_common+0xa8>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	68e5      	ldr	r5, [r4, #12]
 800c192:	f003 0306 	and.w	r3, r3, #6
 800c196:	2b04      	cmp	r3, #4
 800c198:	bf18      	it	ne
 800c19a:	2500      	movne	r5, #0
 800c19c:	6832      	ldr	r2, [r6, #0]
 800c19e:	f04f 0600 	mov.w	r6, #0
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	bf08      	it	eq
 800c1a6:	1aad      	subeq	r5, r5, r2
 800c1a8:	6922      	ldr	r2, [r4, #16]
 800c1aa:	bf08      	it	eq
 800c1ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	bfc4      	itt	gt
 800c1b4:	1a9b      	subgt	r3, r3, r2
 800c1b6:	18ed      	addgt	r5, r5, r3
 800c1b8:	341a      	adds	r4, #26
 800c1ba:	42b5      	cmp	r5, r6
 800c1bc:	d11a      	bne.n	800c1f4 <_printf_common+0xcc>
 800c1be:	2000      	movs	r0, #0
 800c1c0:	e008      	b.n	800c1d4 <_printf_common+0xac>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	4652      	mov	r2, sl
 800c1c6:	4649      	mov	r1, r9
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	47c0      	blx	r8
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	d103      	bne.n	800c1d8 <_printf_common+0xb0>
 800c1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d8:	3501      	adds	r5, #1
 800c1da:	e7c4      	b.n	800c166 <_printf_common+0x3e>
 800c1dc:	2030      	movs	r0, #48	; 0x30
 800c1de:	18e1      	adds	r1, r4, r3
 800c1e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1e4:	1c5a      	adds	r2, r3, #1
 800c1e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1ea:	4422      	add	r2, r4
 800c1ec:	3302      	adds	r3, #2
 800c1ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1f2:	e7c5      	b.n	800c180 <_printf_common+0x58>
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	4622      	mov	r2, r4
 800c1f8:	4649      	mov	r1, r9
 800c1fa:	4638      	mov	r0, r7
 800c1fc:	47c0      	blx	r8
 800c1fe:	3001      	adds	r0, #1
 800c200:	d0e6      	beq.n	800c1d0 <_printf_common+0xa8>
 800c202:	3601      	adds	r6, #1
 800c204:	e7d9      	b.n	800c1ba <_printf_common+0x92>
	...

0800c208 <_printf_i>:
 800c208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	460c      	mov	r4, r1
 800c20e:	7e27      	ldrb	r7, [r4, #24]
 800c210:	4691      	mov	r9, r2
 800c212:	2f78      	cmp	r7, #120	; 0x78
 800c214:	4680      	mov	r8, r0
 800c216:	469a      	mov	sl, r3
 800c218:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c21a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c21e:	d807      	bhi.n	800c230 <_printf_i+0x28>
 800c220:	2f62      	cmp	r7, #98	; 0x62
 800c222:	d80a      	bhi.n	800c23a <_printf_i+0x32>
 800c224:	2f00      	cmp	r7, #0
 800c226:	f000 80d9 	beq.w	800c3dc <_printf_i+0x1d4>
 800c22a:	2f58      	cmp	r7, #88	; 0x58
 800c22c:	f000 80a4 	beq.w	800c378 <_printf_i+0x170>
 800c230:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c238:	e03a      	b.n	800c2b0 <_printf_i+0xa8>
 800c23a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c23e:	2b15      	cmp	r3, #21
 800c240:	d8f6      	bhi.n	800c230 <_printf_i+0x28>
 800c242:	a001      	add	r0, pc, #4	; (adr r0, 800c248 <_printf_i+0x40>)
 800c244:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c248:	0800c2a1 	.word	0x0800c2a1
 800c24c:	0800c2b5 	.word	0x0800c2b5
 800c250:	0800c231 	.word	0x0800c231
 800c254:	0800c231 	.word	0x0800c231
 800c258:	0800c231 	.word	0x0800c231
 800c25c:	0800c231 	.word	0x0800c231
 800c260:	0800c2b5 	.word	0x0800c2b5
 800c264:	0800c231 	.word	0x0800c231
 800c268:	0800c231 	.word	0x0800c231
 800c26c:	0800c231 	.word	0x0800c231
 800c270:	0800c231 	.word	0x0800c231
 800c274:	0800c3c3 	.word	0x0800c3c3
 800c278:	0800c2e5 	.word	0x0800c2e5
 800c27c:	0800c3a5 	.word	0x0800c3a5
 800c280:	0800c231 	.word	0x0800c231
 800c284:	0800c231 	.word	0x0800c231
 800c288:	0800c3e5 	.word	0x0800c3e5
 800c28c:	0800c231 	.word	0x0800c231
 800c290:	0800c2e5 	.word	0x0800c2e5
 800c294:	0800c231 	.word	0x0800c231
 800c298:	0800c231 	.word	0x0800c231
 800c29c:	0800c3ad 	.word	0x0800c3ad
 800c2a0:	680b      	ldr	r3, [r1, #0]
 800c2a2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c2a6:	1d1a      	adds	r2, r3, #4
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	600a      	str	r2, [r1, #0]
 800c2ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e0a4      	b.n	800c3fe <_printf_i+0x1f6>
 800c2b4:	6825      	ldr	r5, [r4, #0]
 800c2b6:	6808      	ldr	r0, [r1, #0]
 800c2b8:	062e      	lsls	r6, r5, #24
 800c2ba:	f100 0304 	add.w	r3, r0, #4
 800c2be:	d50a      	bpl.n	800c2d6 <_printf_i+0xce>
 800c2c0:	6805      	ldr	r5, [r0, #0]
 800c2c2:	600b      	str	r3, [r1, #0]
 800c2c4:	2d00      	cmp	r5, #0
 800c2c6:	da03      	bge.n	800c2d0 <_printf_i+0xc8>
 800c2c8:	232d      	movs	r3, #45	; 0x2d
 800c2ca:	426d      	negs	r5, r5
 800c2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2d0:	230a      	movs	r3, #10
 800c2d2:	485e      	ldr	r0, [pc, #376]	; (800c44c <_printf_i+0x244>)
 800c2d4:	e019      	b.n	800c30a <_printf_i+0x102>
 800c2d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c2da:	6805      	ldr	r5, [r0, #0]
 800c2dc:	600b      	str	r3, [r1, #0]
 800c2de:	bf18      	it	ne
 800c2e0:	b22d      	sxthne	r5, r5
 800c2e2:	e7ef      	b.n	800c2c4 <_printf_i+0xbc>
 800c2e4:	680b      	ldr	r3, [r1, #0]
 800c2e6:	6825      	ldr	r5, [r4, #0]
 800c2e8:	1d18      	adds	r0, r3, #4
 800c2ea:	6008      	str	r0, [r1, #0]
 800c2ec:	0628      	lsls	r0, r5, #24
 800c2ee:	d501      	bpl.n	800c2f4 <_printf_i+0xec>
 800c2f0:	681d      	ldr	r5, [r3, #0]
 800c2f2:	e002      	b.n	800c2fa <_printf_i+0xf2>
 800c2f4:	0669      	lsls	r1, r5, #25
 800c2f6:	d5fb      	bpl.n	800c2f0 <_printf_i+0xe8>
 800c2f8:	881d      	ldrh	r5, [r3, #0]
 800c2fa:	2f6f      	cmp	r7, #111	; 0x6f
 800c2fc:	bf0c      	ite	eq
 800c2fe:	2308      	moveq	r3, #8
 800c300:	230a      	movne	r3, #10
 800c302:	4852      	ldr	r0, [pc, #328]	; (800c44c <_printf_i+0x244>)
 800c304:	2100      	movs	r1, #0
 800c306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c30a:	6866      	ldr	r6, [r4, #4]
 800c30c:	2e00      	cmp	r6, #0
 800c30e:	bfa8      	it	ge
 800c310:	6821      	ldrge	r1, [r4, #0]
 800c312:	60a6      	str	r6, [r4, #8]
 800c314:	bfa4      	itt	ge
 800c316:	f021 0104 	bicge.w	r1, r1, #4
 800c31a:	6021      	strge	r1, [r4, #0]
 800c31c:	b90d      	cbnz	r5, 800c322 <_printf_i+0x11a>
 800c31e:	2e00      	cmp	r6, #0
 800c320:	d04d      	beq.n	800c3be <_printf_i+0x1b6>
 800c322:	4616      	mov	r6, r2
 800c324:	fbb5 f1f3 	udiv	r1, r5, r3
 800c328:	fb03 5711 	mls	r7, r3, r1, r5
 800c32c:	5dc7      	ldrb	r7, [r0, r7]
 800c32e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c332:	462f      	mov	r7, r5
 800c334:	42bb      	cmp	r3, r7
 800c336:	460d      	mov	r5, r1
 800c338:	d9f4      	bls.n	800c324 <_printf_i+0x11c>
 800c33a:	2b08      	cmp	r3, #8
 800c33c:	d10b      	bne.n	800c356 <_printf_i+0x14e>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	07df      	lsls	r7, r3, #31
 800c342:	d508      	bpl.n	800c356 <_printf_i+0x14e>
 800c344:	6923      	ldr	r3, [r4, #16]
 800c346:	6861      	ldr	r1, [r4, #4]
 800c348:	4299      	cmp	r1, r3
 800c34a:	bfde      	ittt	le
 800c34c:	2330      	movle	r3, #48	; 0x30
 800c34e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c352:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c356:	1b92      	subs	r2, r2, r6
 800c358:	6122      	str	r2, [r4, #16]
 800c35a:	464b      	mov	r3, r9
 800c35c:	4621      	mov	r1, r4
 800c35e:	4640      	mov	r0, r8
 800c360:	f8cd a000 	str.w	sl, [sp]
 800c364:	aa03      	add	r2, sp, #12
 800c366:	f7ff fedf 	bl	800c128 <_printf_common>
 800c36a:	3001      	adds	r0, #1
 800c36c:	d14c      	bne.n	800c408 <_printf_i+0x200>
 800c36e:	f04f 30ff 	mov.w	r0, #4294967295
 800c372:	b004      	add	sp, #16
 800c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c378:	4834      	ldr	r0, [pc, #208]	; (800c44c <_printf_i+0x244>)
 800c37a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c37e:	680e      	ldr	r6, [r1, #0]
 800c380:	6823      	ldr	r3, [r4, #0]
 800c382:	f856 5b04 	ldr.w	r5, [r6], #4
 800c386:	061f      	lsls	r7, r3, #24
 800c388:	600e      	str	r6, [r1, #0]
 800c38a:	d514      	bpl.n	800c3b6 <_printf_i+0x1ae>
 800c38c:	07d9      	lsls	r1, r3, #31
 800c38e:	bf44      	itt	mi
 800c390:	f043 0320 	orrmi.w	r3, r3, #32
 800c394:	6023      	strmi	r3, [r4, #0]
 800c396:	b91d      	cbnz	r5, 800c3a0 <_printf_i+0x198>
 800c398:	6823      	ldr	r3, [r4, #0]
 800c39a:	f023 0320 	bic.w	r3, r3, #32
 800c39e:	6023      	str	r3, [r4, #0]
 800c3a0:	2310      	movs	r3, #16
 800c3a2:	e7af      	b.n	800c304 <_printf_i+0xfc>
 800c3a4:	6823      	ldr	r3, [r4, #0]
 800c3a6:	f043 0320 	orr.w	r3, r3, #32
 800c3aa:	6023      	str	r3, [r4, #0]
 800c3ac:	2378      	movs	r3, #120	; 0x78
 800c3ae:	4828      	ldr	r0, [pc, #160]	; (800c450 <_printf_i+0x248>)
 800c3b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c3b4:	e7e3      	b.n	800c37e <_printf_i+0x176>
 800c3b6:	065e      	lsls	r6, r3, #25
 800c3b8:	bf48      	it	mi
 800c3ba:	b2ad      	uxthmi	r5, r5
 800c3bc:	e7e6      	b.n	800c38c <_printf_i+0x184>
 800c3be:	4616      	mov	r6, r2
 800c3c0:	e7bb      	b.n	800c33a <_printf_i+0x132>
 800c3c2:	680b      	ldr	r3, [r1, #0]
 800c3c4:	6826      	ldr	r6, [r4, #0]
 800c3c6:	1d1d      	adds	r5, r3, #4
 800c3c8:	6960      	ldr	r0, [r4, #20]
 800c3ca:	600d      	str	r5, [r1, #0]
 800c3cc:	0635      	lsls	r5, r6, #24
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	d501      	bpl.n	800c3d6 <_printf_i+0x1ce>
 800c3d2:	6018      	str	r0, [r3, #0]
 800c3d4:	e002      	b.n	800c3dc <_printf_i+0x1d4>
 800c3d6:	0671      	lsls	r1, r6, #25
 800c3d8:	d5fb      	bpl.n	800c3d2 <_printf_i+0x1ca>
 800c3da:	8018      	strh	r0, [r3, #0]
 800c3dc:	2300      	movs	r3, #0
 800c3de:	4616      	mov	r6, r2
 800c3e0:	6123      	str	r3, [r4, #16]
 800c3e2:	e7ba      	b.n	800c35a <_printf_i+0x152>
 800c3e4:	680b      	ldr	r3, [r1, #0]
 800c3e6:	1d1a      	adds	r2, r3, #4
 800c3e8:	600a      	str	r2, [r1, #0]
 800c3ea:	681e      	ldr	r6, [r3, #0]
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	4630      	mov	r0, r6
 800c3f0:	6862      	ldr	r2, [r4, #4]
 800c3f2:	f001 f8dc 	bl	800d5ae <memchr>
 800c3f6:	b108      	cbz	r0, 800c3fc <_printf_i+0x1f4>
 800c3f8:	1b80      	subs	r0, r0, r6
 800c3fa:	6060      	str	r0, [r4, #4]
 800c3fc:	6863      	ldr	r3, [r4, #4]
 800c3fe:	6123      	str	r3, [r4, #16]
 800c400:	2300      	movs	r3, #0
 800c402:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c406:	e7a8      	b.n	800c35a <_printf_i+0x152>
 800c408:	4632      	mov	r2, r6
 800c40a:	4649      	mov	r1, r9
 800c40c:	4640      	mov	r0, r8
 800c40e:	6923      	ldr	r3, [r4, #16]
 800c410:	47d0      	blx	sl
 800c412:	3001      	adds	r0, #1
 800c414:	d0ab      	beq.n	800c36e <_printf_i+0x166>
 800c416:	6823      	ldr	r3, [r4, #0]
 800c418:	079b      	lsls	r3, r3, #30
 800c41a:	d413      	bmi.n	800c444 <_printf_i+0x23c>
 800c41c:	68e0      	ldr	r0, [r4, #12]
 800c41e:	9b03      	ldr	r3, [sp, #12]
 800c420:	4298      	cmp	r0, r3
 800c422:	bfb8      	it	lt
 800c424:	4618      	movlt	r0, r3
 800c426:	e7a4      	b.n	800c372 <_printf_i+0x16a>
 800c428:	2301      	movs	r3, #1
 800c42a:	4632      	mov	r2, r6
 800c42c:	4649      	mov	r1, r9
 800c42e:	4640      	mov	r0, r8
 800c430:	47d0      	blx	sl
 800c432:	3001      	adds	r0, #1
 800c434:	d09b      	beq.n	800c36e <_printf_i+0x166>
 800c436:	3501      	adds	r5, #1
 800c438:	68e3      	ldr	r3, [r4, #12]
 800c43a:	9903      	ldr	r1, [sp, #12]
 800c43c:	1a5b      	subs	r3, r3, r1
 800c43e:	42ab      	cmp	r3, r5
 800c440:	dcf2      	bgt.n	800c428 <_printf_i+0x220>
 800c442:	e7eb      	b.n	800c41c <_printf_i+0x214>
 800c444:	2500      	movs	r5, #0
 800c446:	f104 0619 	add.w	r6, r4, #25
 800c44a:	e7f5      	b.n	800c438 <_printf_i+0x230>
 800c44c:	0800fa36 	.word	0x0800fa36
 800c450:	0800fa47 	.word	0x0800fa47

0800c454 <iprintf>:
 800c454:	b40f      	push	{r0, r1, r2, r3}
 800c456:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <iprintf+0x2c>)
 800c458:	b513      	push	{r0, r1, r4, lr}
 800c45a:	681c      	ldr	r4, [r3, #0]
 800c45c:	b124      	cbz	r4, 800c468 <iprintf+0x14>
 800c45e:	69a3      	ldr	r3, [r4, #24]
 800c460:	b913      	cbnz	r3, 800c468 <iprintf+0x14>
 800c462:	4620      	mov	r0, r4
 800c464:	f000 fffe 	bl	800d464 <__sinit>
 800c468:	ab05      	add	r3, sp, #20
 800c46a:	4620      	mov	r0, r4
 800c46c:	9a04      	ldr	r2, [sp, #16]
 800c46e:	68a1      	ldr	r1, [r4, #8]
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	f001 fdd9 	bl	800e028 <_vfiprintf_r>
 800c476:	b002      	add	sp, #8
 800c478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c47c:	b004      	add	sp, #16
 800c47e:	4770      	bx	lr
 800c480:	2000001c 	.word	0x2000001c

0800c484 <_sbrk_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	2300      	movs	r3, #0
 800c488:	4d05      	ldr	r5, [pc, #20]	; (800c4a0 <_sbrk_r+0x1c>)
 800c48a:	4604      	mov	r4, r0
 800c48c:	4608      	mov	r0, r1
 800c48e:	602b      	str	r3, [r5, #0]
 800c490:	f7f6 fa3a 	bl	8002908 <_sbrk>
 800c494:	1c43      	adds	r3, r0, #1
 800c496:	d102      	bne.n	800c49e <_sbrk_r+0x1a>
 800c498:	682b      	ldr	r3, [r5, #0]
 800c49a:	b103      	cbz	r3, 800c49e <_sbrk_r+0x1a>
 800c49c:	6023      	str	r3, [r4, #0]
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	20000bb8 	.word	0x20000bb8

0800c4a4 <siprintf>:
 800c4a4:	b40e      	push	{r1, r2, r3}
 800c4a6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4aa:	b500      	push	{lr}
 800c4ac:	b09c      	sub	sp, #112	; 0x70
 800c4ae:	ab1d      	add	r3, sp, #116	; 0x74
 800c4b0:	9002      	str	r0, [sp, #8]
 800c4b2:	9006      	str	r0, [sp, #24]
 800c4b4:	9107      	str	r1, [sp, #28]
 800c4b6:	9104      	str	r1, [sp, #16]
 800c4b8:	4808      	ldr	r0, [pc, #32]	; (800c4dc <siprintf+0x38>)
 800c4ba:	4909      	ldr	r1, [pc, #36]	; (800c4e0 <siprintf+0x3c>)
 800c4bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	6800      	ldr	r0, [r0, #0]
 800c4c4:	a902      	add	r1, sp, #8
 800c4c6:	9301      	str	r3, [sp, #4]
 800c4c8:	f001 fc86 	bl	800ddd8 <_svfiprintf_r>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	9b02      	ldr	r3, [sp, #8]
 800c4d0:	701a      	strb	r2, [r3, #0]
 800c4d2:	b01c      	add	sp, #112	; 0x70
 800c4d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d8:	b003      	add	sp, #12
 800c4da:	4770      	bx	lr
 800c4dc:	2000001c 	.word	0x2000001c
 800c4e0:	ffff0208 	.word	0xffff0208

0800c4e4 <strncpy>:
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	3901      	subs	r1, #1
 800c4ea:	b132      	cbz	r2, 800c4fa <strncpy+0x16>
 800c4ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c4f0:	3a01      	subs	r2, #1
 800c4f2:	f803 4b01 	strb.w	r4, [r3], #1
 800c4f6:	2c00      	cmp	r4, #0
 800c4f8:	d1f7      	bne.n	800c4ea <strncpy+0x6>
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	441a      	add	r2, r3
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d100      	bne.n	800c504 <strncpy+0x20>
 800c502:	bd10      	pop	{r4, pc}
 800c504:	f803 1b01 	strb.w	r1, [r3], #1
 800c508:	e7f9      	b.n	800c4fe <strncpy+0x1a>

0800c50a <strnlen>:
 800c50a:	4602      	mov	r2, r0
 800c50c:	b510      	push	{r4, lr}
 800c50e:	4401      	add	r1, r0
 800c510:	428a      	cmp	r2, r1
 800c512:	4613      	mov	r3, r2
 800c514:	d101      	bne.n	800c51a <strnlen+0x10>
 800c516:	1a18      	subs	r0, r3, r0
 800c518:	bd10      	pop	{r4, pc}
 800c51a:	781c      	ldrb	r4, [r3, #0]
 800c51c:	3201      	adds	r2, #1
 800c51e:	2c00      	cmp	r4, #0
 800c520:	d1f6      	bne.n	800c510 <strnlen+0x6>
 800c522:	e7f8      	b.n	800c516 <strnlen+0xc>

0800c524 <_strtol_l.isra.0>:
 800c524:	2b01      	cmp	r3, #1
 800c526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c52a:	4686      	mov	lr, r0
 800c52c:	d001      	beq.n	800c532 <_strtol_l.isra.0+0xe>
 800c52e:	2b24      	cmp	r3, #36	; 0x24
 800c530:	d906      	bls.n	800c540 <_strtol_l.isra.0+0x1c>
 800c532:	f7ff fa47 	bl	800b9c4 <__errno>
 800c536:	2316      	movs	r3, #22
 800c538:	6003      	str	r3, [r0, #0]
 800c53a:	2000      	movs	r0, #0
 800c53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c540:	468c      	mov	ip, r1
 800c542:	4e3a      	ldr	r6, [pc, #232]	; (800c62c <_strtol_l.isra.0+0x108>)
 800c544:	4660      	mov	r0, ip
 800c546:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c54a:	5da5      	ldrb	r5, [r4, r6]
 800c54c:	f015 0508 	ands.w	r5, r5, #8
 800c550:	d1f8      	bne.n	800c544 <_strtol_l.isra.0+0x20>
 800c552:	2c2d      	cmp	r4, #45	; 0x2d
 800c554:	d133      	bne.n	800c5be <_strtol_l.isra.0+0x9a>
 800c556:	f04f 0801 	mov.w	r8, #1
 800c55a:	f89c 4000 	ldrb.w	r4, [ip]
 800c55e:	f100 0c02 	add.w	ip, r0, #2
 800c562:	2b00      	cmp	r3, #0
 800c564:	d05d      	beq.n	800c622 <_strtol_l.isra.0+0xfe>
 800c566:	2b10      	cmp	r3, #16
 800c568:	d10c      	bne.n	800c584 <_strtol_l.isra.0+0x60>
 800c56a:	2c30      	cmp	r4, #48	; 0x30
 800c56c:	d10a      	bne.n	800c584 <_strtol_l.isra.0+0x60>
 800c56e:	f89c 0000 	ldrb.w	r0, [ip]
 800c572:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c576:	2858      	cmp	r0, #88	; 0x58
 800c578:	d14e      	bne.n	800c618 <_strtol_l.isra.0+0xf4>
 800c57a:	2310      	movs	r3, #16
 800c57c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c580:	f10c 0c02 	add.w	ip, ip, #2
 800c584:	2500      	movs	r5, #0
 800c586:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800c58a:	3f01      	subs	r7, #1
 800c58c:	fbb7 f9f3 	udiv	r9, r7, r3
 800c590:	4628      	mov	r0, r5
 800c592:	fb03 7a19 	mls	sl, r3, r9, r7
 800c596:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c59a:	2e09      	cmp	r6, #9
 800c59c:	d818      	bhi.n	800c5d0 <_strtol_l.isra.0+0xac>
 800c59e:	4634      	mov	r4, r6
 800c5a0:	42a3      	cmp	r3, r4
 800c5a2:	dd24      	ble.n	800c5ee <_strtol_l.isra.0+0xca>
 800c5a4:	2d00      	cmp	r5, #0
 800c5a6:	db1f      	blt.n	800c5e8 <_strtol_l.isra.0+0xc4>
 800c5a8:	4581      	cmp	r9, r0
 800c5aa:	d31d      	bcc.n	800c5e8 <_strtol_l.isra.0+0xc4>
 800c5ac:	d101      	bne.n	800c5b2 <_strtol_l.isra.0+0x8e>
 800c5ae:	45a2      	cmp	sl, r4
 800c5b0:	db1a      	blt.n	800c5e8 <_strtol_l.isra.0+0xc4>
 800c5b2:	2501      	movs	r5, #1
 800c5b4:	fb00 4003 	mla	r0, r0, r3, r4
 800c5b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c5bc:	e7eb      	b.n	800c596 <_strtol_l.isra.0+0x72>
 800c5be:	2c2b      	cmp	r4, #43	; 0x2b
 800c5c0:	bf08      	it	eq
 800c5c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c5c6:	46a8      	mov	r8, r5
 800c5c8:	bf08      	it	eq
 800c5ca:	f100 0c02 	addeq.w	ip, r0, #2
 800c5ce:	e7c8      	b.n	800c562 <_strtol_l.isra.0+0x3e>
 800c5d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c5d4:	2e19      	cmp	r6, #25
 800c5d6:	d801      	bhi.n	800c5dc <_strtol_l.isra.0+0xb8>
 800c5d8:	3c37      	subs	r4, #55	; 0x37
 800c5da:	e7e1      	b.n	800c5a0 <_strtol_l.isra.0+0x7c>
 800c5dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c5e0:	2e19      	cmp	r6, #25
 800c5e2:	d804      	bhi.n	800c5ee <_strtol_l.isra.0+0xca>
 800c5e4:	3c57      	subs	r4, #87	; 0x57
 800c5e6:	e7db      	b.n	800c5a0 <_strtol_l.isra.0+0x7c>
 800c5e8:	f04f 35ff 	mov.w	r5, #4294967295
 800c5ec:	e7e4      	b.n	800c5b8 <_strtol_l.isra.0+0x94>
 800c5ee:	2d00      	cmp	r5, #0
 800c5f0:	da08      	bge.n	800c604 <_strtol_l.isra.0+0xe0>
 800c5f2:	2322      	movs	r3, #34	; 0x22
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f8ce 3000 	str.w	r3, [lr]
 800c5fa:	2a00      	cmp	r2, #0
 800c5fc:	d09e      	beq.n	800c53c <_strtol_l.isra.0+0x18>
 800c5fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c602:	e007      	b.n	800c614 <_strtol_l.isra.0+0xf0>
 800c604:	f1b8 0f00 	cmp.w	r8, #0
 800c608:	d000      	beq.n	800c60c <_strtol_l.isra.0+0xe8>
 800c60a:	4240      	negs	r0, r0
 800c60c:	2a00      	cmp	r2, #0
 800c60e:	d095      	beq.n	800c53c <_strtol_l.isra.0+0x18>
 800c610:	2d00      	cmp	r5, #0
 800c612:	d1f4      	bne.n	800c5fe <_strtol_l.isra.0+0xda>
 800c614:	6011      	str	r1, [r2, #0]
 800c616:	e791      	b.n	800c53c <_strtol_l.isra.0+0x18>
 800c618:	2430      	movs	r4, #48	; 0x30
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1b2      	bne.n	800c584 <_strtol_l.isra.0+0x60>
 800c61e:	2308      	movs	r3, #8
 800c620:	e7b0      	b.n	800c584 <_strtol_l.isra.0+0x60>
 800c622:	2c30      	cmp	r4, #48	; 0x30
 800c624:	d0a3      	beq.n	800c56e <_strtol_l.isra.0+0x4a>
 800c626:	230a      	movs	r3, #10
 800c628:	e7ac      	b.n	800c584 <_strtol_l.isra.0+0x60>
 800c62a:	bf00      	nop
 800c62c:	0800fa59 	.word	0x0800fa59

0800c630 <strtol>:
 800c630:	4613      	mov	r3, r2
 800c632:	460a      	mov	r2, r1
 800c634:	4601      	mov	r1, r0
 800c636:	4802      	ldr	r0, [pc, #8]	; (800c640 <strtol+0x10>)
 800c638:	6800      	ldr	r0, [r0, #0]
 800c63a:	f7ff bf73 	b.w	800c524 <_strtol_l.isra.0>
 800c63e:	bf00      	nop
 800c640:	2000001c 	.word	0x2000001c

0800c644 <_vsniprintf_r>:
 800c644:	b530      	push	{r4, r5, lr}
 800c646:	1e14      	subs	r4, r2, #0
 800c648:	4605      	mov	r5, r0
 800c64a:	b09b      	sub	sp, #108	; 0x6c
 800c64c:	4618      	mov	r0, r3
 800c64e:	da05      	bge.n	800c65c <_vsniprintf_r+0x18>
 800c650:	238b      	movs	r3, #139	; 0x8b
 800c652:	f04f 30ff 	mov.w	r0, #4294967295
 800c656:	602b      	str	r3, [r5, #0]
 800c658:	b01b      	add	sp, #108	; 0x6c
 800c65a:	bd30      	pop	{r4, r5, pc}
 800c65c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c660:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c664:	bf0c      	ite	eq
 800c666:	4623      	moveq	r3, r4
 800c668:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c66c:	9302      	str	r3, [sp, #8]
 800c66e:	9305      	str	r3, [sp, #20]
 800c670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c674:	4602      	mov	r2, r0
 800c676:	9100      	str	r1, [sp, #0]
 800c678:	9104      	str	r1, [sp, #16]
 800c67a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c67e:	4669      	mov	r1, sp
 800c680:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c682:	4628      	mov	r0, r5
 800c684:	f001 fba8 	bl	800ddd8 <_svfiprintf_r>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	bfbc      	itt	lt
 800c68c:	238b      	movlt	r3, #139	; 0x8b
 800c68e:	602b      	strlt	r3, [r5, #0]
 800c690:	2c00      	cmp	r4, #0
 800c692:	d0e1      	beq.n	800c658 <_vsniprintf_r+0x14>
 800c694:	2200      	movs	r2, #0
 800c696:	9b00      	ldr	r3, [sp, #0]
 800c698:	701a      	strb	r2, [r3, #0]
 800c69a:	e7dd      	b.n	800c658 <_vsniprintf_r+0x14>

0800c69c <vsniprintf>:
 800c69c:	b507      	push	{r0, r1, r2, lr}
 800c69e:	9300      	str	r3, [sp, #0]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	460a      	mov	r2, r1
 800c6a4:	4601      	mov	r1, r0
 800c6a6:	4803      	ldr	r0, [pc, #12]	; (800c6b4 <vsniprintf+0x18>)
 800c6a8:	6800      	ldr	r0, [r0, #0]
 800c6aa:	f7ff ffcb 	bl	800c644 <_vsniprintf_r>
 800c6ae:	b003      	add	sp, #12
 800c6b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6b4:	2000001c 	.word	0x2000001c

0800c6b8 <quorem>:
 800c6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6bc:	6903      	ldr	r3, [r0, #16]
 800c6be:	690c      	ldr	r4, [r1, #16]
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	42a3      	cmp	r3, r4
 800c6c4:	f2c0 8083 	blt.w	800c7ce <quorem+0x116>
 800c6c8:	3c01      	subs	r4, #1
 800c6ca:	f100 0514 	add.w	r5, r0, #20
 800c6ce:	f101 0814 	add.w	r8, r1, #20
 800c6d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6d6:	9301      	str	r3, [sp, #4]
 800c6d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6f0:	d332      	bcc.n	800c758 <quorem+0xa0>
 800c6f2:	f04f 0e00 	mov.w	lr, #0
 800c6f6:	4640      	mov	r0, r8
 800c6f8:	46ac      	mov	ip, r5
 800c6fa:	46f2      	mov	sl, lr
 800c6fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800c700:	b293      	uxth	r3, r2
 800c702:	fb06 e303 	mla	r3, r6, r3, lr
 800c706:	0c12      	lsrs	r2, r2, #16
 800c708:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c70c:	fb06 e202 	mla	r2, r6, r2, lr
 800c710:	b29b      	uxth	r3, r3
 800c712:	ebaa 0303 	sub.w	r3, sl, r3
 800c716:	f8dc a000 	ldr.w	sl, [ip]
 800c71a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c71e:	fa1f fa8a 	uxth.w	sl, sl
 800c722:	4453      	add	r3, sl
 800c724:	fa1f fa82 	uxth.w	sl, r2
 800c728:	f8dc 2000 	ldr.w	r2, [ip]
 800c72c:	4581      	cmp	r9, r0
 800c72e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c732:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c736:	b29b      	uxth	r3, r3
 800c738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c73c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c740:	f84c 3b04 	str.w	r3, [ip], #4
 800c744:	d2da      	bcs.n	800c6fc <quorem+0x44>
 800c746:	f855 300b 	ldr.w	r3, [r5, fp]
 800c74a:	b92b      	cbnz	r3, 800c758 <quorem+0xa0>
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	3b04      	subs	r3, #4
 800c750:	429d      	cmp	r5, r3
 800c752:	461a      	mov	r2, r3
 800c754:	d32f      	bcc.n	800c7b6 <quorem+0xfe>
 800c756:	613c      	str	r4, [r7, #16]
 800c758:	4638      	mov	r0, r7
 800c75a:	f001 f9cb 	bl	800daf4 <__mcmp>
 800c75e:	2800      	cmp	r0, #0
 800c760:	db25      	blt.n	800c7ae <quorem+0xf6>
 800c762:	4628      	mov	r0, r5
 800c764:	f04f 0c00 	mov.w	ip, #0
 800c768:	3601      	adds	r6, #1
 800c76a:	f858 1b04 	ldr.w	r1, [r8], #4
 800c76e:	f8d0 e000 	ldr.w	lr, [r0]
 800c772:	b28b      	uxth	r3, r1
 800c774:	ebac 0303 	sub.w	r3, ip, r3
 800c778:	fa1f f28e 	uxth.w	r2, lr
 800c77c:	4413      	add	r3, r2
 800c77e:	0c0a      	lsrs	r2, r1, #16
 800c780:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c788:	b29b      	uxth	r3, r3
 800c78a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c78e:	45c1      	cmp	r9, r8
 800c790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c794:	f840 3b04 	str.w	r3, [r0], #4
 800c798:	d2e7      	bcs.n	800c76a <quorem+0xb2>
 800c79a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c79e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c7a2:	b922      	cbnz	r2, 800c7ae <quorem+0xf6>
 800c7a4:	3b04      	subs	r3, #4
 800c7a6:	429d      	cmp	r5, r3
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	d30a      	bcc.n	800c7c2 <quorem+0x10a>
 800c7ac:	613c      	str	r4, [r7, #16]
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	b003      	add	sp, #12
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b6:	6812      	ldr	r2, [r2, #0]
 800c7b8:	3b04      	subs	r3, #4
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	d1cb      	bne.n	800c756 <quorem+0x9e>
 800c7be:	3c01      	subs	r4, #1
 800c7c0:	e7c6      	b.n	800c750 <quorem+0x98>
 800c7c2:	6812      	ldr	r2, [r2, #0]
 800c7c4:	3b04      	subs	r3, #4
 800c7c6:	2a00      	cmp	r2, #0
 800c7c8:	d1f0      	bne.n	800c7ac <quorem+0xf4>
 800c7ca:	3c01      	subs	r4, #1
 800c7cc:	e7eb      	b.n	800c7a6 <quorem+0xee>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	e7ee      	b.n	800c7b0 <quorem+0xf8>
 800c7d2:	0000      	movs	r0, r0
 800c7d4:	0000      	movs	r0, r0
	...

0800c7d8 <_dtoa_r>:
 800c7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7dc:	4616      	mov	r6, r2
 800c7de:	461f      	mov	r7, r3
 800c7e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c7e2:	b099      	sub	sp, #100	; 0x64
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c7ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c7ee:	b974      	cbnz	r4, 800c80e <_dtoa_r+0x36>
 800c7f0:	2010      	movs	r0, #16
 800c7f2:	f7ff f911 	bl	800ba18 <malloc>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	6268      	str	r0, [r5, #36]	; 0x24
 800c7fa:	b920      	cbnz	r0, 800c806 <_dtoa_r+0x2e>
 800c7fc:	21ea      	movs	r1, #234	; 0xea
 800c7fe:	4bae      	ldr	r3, [pc, #696]	; (800cab8 <_dtoa_r+0x2e0>)
 800c800:	48ae      	ldr	r0, [pc, #696]	; (800cabc <_dtoa_r+0x2e4>)
 800c802:	f001 fe57 	bl	800e4b4 <__assert_func>
 800c806:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c80a:	6004      	str	r4, [r0, #0]
 800c80c:	60c4      	str	r4, [r0, #12]
 800c80e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c810:	6819      	ldr	r1, [r3, #0]
 800c812:	b151      	cbz	r1, 800c82a <_dtoa_r+0x52>
 800c814:	685a      	ldr	r2, [r3, #4]
 800c816:	2301      	movs	r3, #1
 800c818:	4093      	lsls	r3, r2
 800c81a:	604a      	str	r2, [r1, #4]
 800c81c:	608b      	str	r3, [r1, #8]
 800c81e:	4628      	mov	r0, r5
 800c820:	f000 ff2e 	bl	800d680 <_Bfree>
 800c824:	2200      	movs	r2, #0
 800c826:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	1e3b      	subs	r3, r7, #0
 800c82c:	bfaf      	iteee	ge
 800c82e:	2300      	movge	r3, #0
 800c830:	2201      	movlt	r2, #1
 800c832:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c836:	9305      	strlt	r3, [sp, #20]
 800c838:	bfa8      	it	ge
 800c83a:	f8c8 3000 	strge.w	r3, [r8]
 800c83e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c842:	4b9f      	ldr	r3, [pc, #636]	; (800cac0 <_dtoa_r+0x2e8>)
 800c844:	bfb8      	it	lt
 800c846:	f8c8 2000 	strlt.w	r2, [r8]
 800c84a:	ea33 0309 	bics.w	r3, r3, r9
 800c84e:	d119      	bne.n	800c884 <_dtoa_r+0xac>
 800c850:	f242 730f 	movw	r3, #9999	; 0x270f
 800c854:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c856:	6013      	str	r3, [r2, #0]
 800c858:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c85c:	4333      	orrs	r3, r6
 800c85e:	f000 8580 	beq.w	800d362 <_dtoa_r+0xb8a>
 800c862:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c864:	b953      	cbnz	r3, 800c87c <_dtoa_r+0xa4>
 800c866:	4b97      	ldr	r3, [pc, #604]	; (800cac4 <_dtoa_r+0x2ec>)
 800c868:	e022      	b.n	800c8b0 <_dtoa_r+0xd8>
 800c86a:	4b97      	ldr	r3, [pc, #604]	; (800cac8 <_dtoa_r+0x2f0>)
 800c86c:	9308      	str	r3, [sp, #32]
 800c86e:	3308      	adds	r3, #8
 800c870:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c872:	6013      	str	r3, [r2, #0]
 800c874:	9808      	ldr	r0, [sp, #32]
 800c876:	b019      	add	sp, #100	; 0x64
 800c878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87c:	4b91      	ldr	r3, [pc, #580]	; (800cac4 <_dtoa_r+0x2ec>)
 800c87e:	9308      	str	r3, [sp, #32]
 800c880:	3303      	adds	r3, #3
 800c882:	e7f5      	b.n	800c870 <_dtoa_r+0x98>
 800c884:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c888:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c88c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c890:	2200      	movs	r2, #0
 800c892:	2300      	movs	r3, #0
 800c894:	f7f4 f8f4 	bl	8000a80 <__aeabi_dcmpeq>
 800c898:	4680      	mov	r8, r0
 800c89a:	b158      	cbz	r0, 800c8b4 <_dtoa_r+0xdc>
 800c89c:	2301      	movs	r3, #1
 800c89e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c8a0:	6013      	str	r3, [r2, #0]
 800c8a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	f000 8559 	beq.w	800d35c <_dtoa_r+0xb84>
 800c8aa:	4888      	ldr	r0, [pc, #544]	; (800cacc <_dtoa_r+0x2f4>)
 800c8ac:	6018      	str	r0, [r3, #0]
 800c8ae:	1e43      	subs	r3, r0, #1
 800c8b0:	9308      	str	r3, [sp, #32]
 800c8b2:	e7df      	b.n	800c874 <_dtoa_r+0x9c>
 800c8b4:	ab16      	add	r3, sp, #88	; 0x58
 800c8b6:	9301      	str	r3, [sp, #4]
 800c8b8:	ab17      	add	r3, sp, #92	; 0x5c
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	4628      	mov	r0, r5
 800c8be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c8c2:	f001 f9c3 	bl	800dc4c <__d2b>
 800c8c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c8ca:	4682      	mov	sl, r0
 800c8cc:	2c00      	cmp	r4, #0
 800c8ce:	d07e      	beq.n	800c9ce <_dtoa_r+0x1f6>
 800c8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c8da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c8e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c8e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	4b78      	ldr	r3, [pc, #480]	; (800cad0 <_dtoa_r+0x2f8>)
 800c8ee:	f7f3 fca7 	bl	8000240 <__aeabi_dsub>
 800c8f2:	a36b      	add	r3, pc, #428	; (adr r3, 800caa0 <_dtoa_r+0x2c8>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f7f3 fe5a 	bl	80005b0 <__aeabi_dmul>
 800c8fc:	a36a      	add	r3, pc, #424	; (adr r3, 800caa8 <_dtoa_r+0x2d0>)
 800c8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c902:	f7f3 fc9f 	bl	8000244 <__adddf3>
 800c906:	4606      	mov	r6, r0
 800c908:	4620      	mov	r0, r4
 800c90a:	460f      	mov	r7, r1
 800c90c:	f7f3 fde6 	bl	80004dc <__aeabi_i2d>
 800c910:	a367      	add	r3, pc, #412	; (adr r3, 800cab0 <_dtoa_r+0x2d8>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	f7f3 fe4b 	bl	80005b0 <__aeabi_dmul>
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4630      	mov	r0, r6
 800c920:	4639      	mov	r1, r7
 800c922:	f7f3 fc8f 	bl	8000244 <__adddf3>
 800c926:	4606      	mov	r6, r0
 800c928:	460f      	mov	r7, r1
 800c92a:	f7f4 f8f1 	bl	8000b10 <__aeabi_d2iz>
 800c92e:	2200      	movs	r2, #0
 800c930:	4681      	mov	r9, r0
 800c932:	2300      	movs	r3, #0
 800c934:	4630      	mov	r0, r6
 800c936:	4639      	mov	r1, r7
 800c938:	f7f4 f8ac 	bl	8000a94 <__aeabi_dcmplt>
 800c93c:	b148      	cbz	r0, 800c952 <_dtoa_r+0x17a>
 800c93e:	4648      	mov	r0, r9
 800c940:	f7f3 fdcc 	bl	80004dc <__aeabi_i2d>
 800c944:	4632      	mov	r2, r6
 800c946:	463b      	mov	r3, r7
 800c948:	f7f4 f89a 	bl	8000a80 <__aeabi_dcmpeq>
 800c94c:	b908      	cbnz	r0, 800c952 <_dtoa_r+0x17a>
 800c94e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c952:	f1b9 0f16 	cmp.w	r9, #22
 800c956:	d857      	bhi.n	800ca08 <_dtoa_r+0x230>
 800c958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c95c:	4b5d      	ldr	r3, [pc, #372]	; (800cad4 <_dtoa_r+0x2fc>)
 800c95e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c966:	f7f4 f895 	bl	8000a94 <__aeabi_dcmplt>
 800c96a:	2800      	cmp	r0, #0
 800c96c:	d04e      	beq.n	800ca0c <_dtoa_r+0x234>
 800c96e:	2300      	movs	r3, #0
 800c970:	f109 39ff 	add.w	r9, r9, #4294967295
 800c974:	930f      	str	r3, [sp, #60]	; 0x3c
 800c976:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c978:	1b1c      	subs	r4, r3, r4
 800c97a:	1e63      	subs	r3, r4, #1
 800c97c:	9309      	str	r3, [sp, #36]	; 0x24
 800c97e:	bf49      	itett	mi
 800c980:	f1c4 0301 	rsbmi	r3, r4, #1
 800c984:	2300      	movpl	r3, #0
 800c986:	9306      	strmi	r3, [sp, #24]
 800c988:	2300      	movmi	r3, #0
 800c98a:	bf54      	ite	pl
 800c98c:	9306      	strpl	r3, [sp, #24]
 800c98e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c990:	f1b9 0f00 	cmp.w	r9, #0
 800c994:	db3c      	blt.n	800ca10 <_dtoa_r+0x238>
 800c996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c998:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c99c:	444b      	add	r3, r9
 800c99e:	9309      	str	r3, [sp, #36]	; 0x24
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	930a      	str	r3, [sp, #40]	; 0x28
 800c9a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9a6:	2b09      	cmp	r3, #9
 800c9a8:	d86c      	bhi.n	800ca84 <_dtoa_r+0x2ac>
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	bfc4      	itt	gt
 800c9ae:	3b04      	subgt	r3, #4
 800c9b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c9b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c9b4:	bfc8      	it	gt
 800c9b6:	2400      	movgt	r4, #0
 800c9b8:	f1a3 0302 	sub.w	r3, r3, #2
 800c9bc:	bfd8      	it	le
 800c9be:	2401      	movle	r4, #1
 800c9c0:	2b03      	cmp	r3, #3
 800c9c2:	f200 808b 	bhi.w	800cadc <_dtoa_r+0x304>
 800c9c6:	e8df f003 	tbb	[pc, r3]
 800c9ca:	4f2d      	.short	0x4f2d
 800c9cc:	5b4d      	.short	0x5b4d
 800c9ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c9d2:	441c      	add	r4, r3
 800c9d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c9d8:	2b20      	cmp	r3, #32
 800c9da:	bfc3      	ittte	gt
 800c9dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c9e4:	fa09 f303 	lslgt.w	r3, r9, r3
 800c9e8:	f1c3 0320 	rsble	r3, r3, #32
 800c9ec:	bfc6      	itte	gt
 800c9ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c9f2:	4318      	orrgt	r0, r3
 800c9f4:	fa06 f003 	lslle.w	r0, r6, r3
 800c9f8:	f7f3 fd60 	bl	80004bc <__aeabi_ui2d>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ca02:	3c01      	subs	r4, #1
 800ca04:	9313      	str	r3, [sp, #76]	; 0x4c
 800ca06:	e770      	b.n	800c8ea <_dtoa_r+0x112>
 800ca08:	2301      	movs	r3, #1
 800ca0a:	e7b3      	b.n	800c974 <_dtoa_r+0x19c>
 800ca0c:	900f      	str	r0, [sp, #60]	; 0x3c
 800ca0e:	e7b2      	b.n	800c976 <_dtoa_r+0x19e>
 800ca10:	9b06      	ldr	r3, [sp, #24]
 800ca12:	eba3 0309 	sub.w	r3, r3, r9
 800ca16:	9306      	str	r3, [sp, #24]
 800ca18:	f1c9 0300 	rsb	r3, r9, #0
 800ca1c:	930a      	str	r3, [sp, #40]	; 0x28
 800ca1e:	2300      	movs	r3, #0
 800ca20:	930e      	str	r3, [sp, #56]	; 0x38
 800ca22:	e7bf      	b.n	800c9a4 <_dtoa_r+0x1cc>
 800ca24:	2300      	movs	r3, #0
 800ca26:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	dc59      	bgt.n	800cae2 <_dtoa_r+0x30a>
 800ca2e:	f04f 0b01 	mov.w	fp, #1
 800ca32:	465b      	mov	r3, fp
 800ca34:	f8cd b008 	str.w	fp, [sp, #8]
 800ca38:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ca40:	6042      	str	r2, [r0, #4]
 800ca42:	2204      	movs	r2, #4
 800ca44:	f102 0614 	add.w	r6, r2, #20
 800ca48:	429e      	cmp	r6, r3
 800ca4a:	6841      	ldr	r1, [r0, #4]
 800ca4c:	d94f      	bls.n	800caee <_dtoa_r+0x316>
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f000 fdd6 	bl	800d600 <_Balloc>
 800ca54:	9008      	str	r0, [sp, #32]
 800ca56:	2800      	cmp	r0, #0
 800ca58:	d14d      	bne.n	800caf6 <_dtoa_r+0x31e>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ca60:	4b1d      	ldr	r3, [pc, #116]	; (800cad8 <_dtoa_r+0x300>)
 800ca62:	e6cd      	b.n	800c800 <_dtoa_r+0x28>
 800ca64:	2301      	movs	r3, #1
 800ca66:	e7de      	b.n	800ca26 <_dtoa_r+0x24e>
 800ca68:	2300      	movs	r3, #0
 800ca6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca6c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ca6e:	eb09 0b03 	add.w	fp, r9, r3
 800ca72:	f10b 0301 	add.w	r3, fp, #1
 800ca76:	2b01      	cmp	r3, #1
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	bfb8      	it	lt
 800ca7c:	2301      	movlt	r3, #1
 800ca7e:	e7dd      	b.n	800ca3c <_dtoa_r+0x264>
 800ca80:	2301      	movs	r3, #1
 800ca82:	e7f2      	b.n	800ca6a <_dtoa_r+0x292>
 800ca84:	2401      	movs	r4, #1
 800ca86:	2300      	movs	r3, #0
 800ca88:	940b      	str	r4, [sp, #44]	; 0x2c
 800ca8a:	9322      	str	r3, [sp, #136]	; 0x88
 800ca8c:	f04f 3bff 	mov.w	fp, #4294967295
 800ca90:	2200      	movs	r2, #0
 800ca92:	2312      	movs	r3, #18
 800ca94:	f8cd b008 	str.w	fp, [sp, #8]
 800ca98:	9223      	str	r2, [sp, #140]	; 0x8c
 800ca9a:	e7cf      	b.n	800ca3c <_dtoa_r+0x264>
 800ca9c:	f3af 8000 	nop.w
 800caa0:	636f4361 	.word	0x636f4361
 800caa4:	3fd287a7 	.word	0x3fd287a7
 800caa8:	8b60c8b3 	.word	0x8b60c8b3
 800caac:	3fc68a28 	.word	0x3fc68a28
 800cab0:	509f79fb 	.word	0x509f79fb
 800cab4:	3fd34413 	.word	0x3fd34413
 800cab8:	0800fb66 	.word	0x0800fb66
 800cabc:	0800fb7d 	.word	0x0800fb7d
 800cac0:	7ff00000 	.word	0x7ff00000
 800cac4:	0800fb62 	.word	0x0800fb62
 800cac8:	0800fb59 	.word	0x0800fb59
 800cacc:	0800fa35 	.word	0x0800fa35
 800cad0:	3ff80000 	.word	0x3ff80000
 800cad4:	0800fcd8 	.word	0x0800fcd8
 800cad8:	0800fbdc 	.word	0x0800fbdc
 800cadc:	2301      	movs	r3, #1
 800cade:	930b      	str	r3, [sp, #44]	; 0x2c
 800cae0:	e7d4      	b.n	800ca8c <_dtoa_r+0x2b4>
 800cae2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800cae6:	465b      	mov	r3, fp
 800cae8:	f8cd b008 	str.w	fp, [sp, #8]
 800caec:	e7a6      	b.n	800ca3c <_dtoa_r+0x264>
 800caee:	3101      	adds	r1, #1
 800caf0:	6041      	str	r1, [r0, #4]
 800caf2:	0052      	lsls	r2, r2, #1
 800caf4:	e7a6      	b.n	800ca44 <_dtoa_r+0x26c>
 800caf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800caf8:	9a08      	ldr	r2, [sp, #32]
 800cafa:	601a      	str	r2, [r3, #0]
 800cafc:	9b02      	ldr	r3, [sp, #8]
 800cafe:	2b0e      	cmp	r3, #14
 800cb00:	f200 80a8 	bhi.w	800cc54 <_dtoa_r+0x47c>
 800cb04:	2c00      	cmp	r4, #0
 800cb06:	f000 80a5 	beq.w	800cc54 <_dtoa_r+0x47c>
 800cb0a:	f1b9 0f00 	cmp.w	r9, #0
 800cb0e:	dd34      	ble.n	800cb7a <_dtoa_r+0x3a2>
 800cb10:	4a9a      	ldr	r2, [pc, #616]	; (800cd7c <_dtoa_r+0x5a4>)
 800cb12:	f009 030f 	and.w	r3, r9, #15
 800cb16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb1a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800cb1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb22:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cb26:	ea4f 1429 	mov.w	r4, r9, asr #4
 800cb2a:	d016      	beq.n	800cb5a <_dtoa_r+0x382>
 800cb2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb30:	4b93      	ldr	r3, [pc, #588]	; (800cd80 <_dtoa_r+0x5a8>)
 800cb32:	2703      	movs	r7, #3
 800cb34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb38:	f7f3 fe64 	bl	8000804 <__aeabi_ddiv>
 800cb3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb40:	f004 040f 	and.w	r4, r4, #15
 800cb44:	4e8e      	ldr	r6, [pc, #568]	; (800cd80 <_dtoa_r+0x5a8>)
 800cb46:	b954      	cbnz	r4, 800cb5e <_dtoa_r+0x386>
 800cb48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cb4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cb50:	f7f3 fe58 	bl	8000804 <__aeabi_ddiv>
 800cb54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cb58:	e029      	b.n	800cbae <_dtoa_r+0x3d6>
 800cb5a:	2702      	movs	r7, #2
 800cb5c:	e7f2      	b.n	800cb44 <_dtoa_r+0x36c>
 800cb5e:	07e1      	lsls	r1, r4, #31
 800cb60:	d508      	bpl.n	800cb74 <_dtoa_r+0x39c>
 800cb62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cb66:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cb6a:	f7f3 fd21 	bl	80005b0 <__aeabi_dmul>
 800cb6e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cb72:	3701      	adds	r7, #1
 800cb74:	1064      	asrs	r4, r4, #1
 800cb76:	3608      	adds	r6, #8
 800cb78:	e7e5      	b.n	800cb46 <_dtoa_r+0x36e>
 800cb7a:	f000 80a5 	beq.w	800ccc8 <_dtoa_r+0x4f0>
 800cb7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb82:	f1c9 0400 	rsb	r4, r9, #0
 800cb86:	4b7d      	ldr	r3, [pc, #500]	; (800cd7c <_dtoa_r+0x5a4>)
 800cb88:	f004 020f 	and.w	r2, r4, #15
 800cb8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f7f3 fd0c 	bl	80005b0 <__aeabi_dmul>
 800cb98:	2702      	movs	r7, #2
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cba0:	4e77      	ldr	r6, [pc, #476]	; (800cd80 <_dtoa_r+0x5a8>)
 800cba2:	1124      	asrs	r4, r4, #4
 800cba4:	2c00      	cmp	r4, #0
 800cba6:	f040 8084 	bne.w	800ccb2 <_dtoa_r+0x4da>
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1d2      	bne.n	800cb54 <_dtoa_r+0x37c>
 800cbae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 808b 	beq.w	800cccc <_dtoa_r+0x4f4>
 800cbb6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cbba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800cbbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	4b6f      	ldr	r3, [pc, #444]	; (800cd84 <_dtoa_r+0x5ac>)
 800cbc6:	f7f3 ff65 	bl	8000a94 <__aeabi_dcmplt>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d07e      	beq.n	800cccc <_dtoa_r+0x4f4>
 800cbce:	9b02      	ldr	r3, [sp, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d07b      	beq.n	800cccc <_dtoa_r+0x4f4>
 800cbd4:	f1bb 0f00 	cmp.w	fp, #0
 800cbd8:	dd38      	ble.n	800cc4c <_dtoa_r+0x474>
 800cbda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cbde:	2200      	movs	r2, #0
 800cbe0:	4b69      	ldr	r3, [pc, #420]	; (800cd88 <_dtoa_r+0x5b0>)
 800cbe2:	f7f3 fce5 	bl	80005b0 <__aeabi_dmul>
 800cbe6:	465c      	mov	r4, fp
 800cbe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cbec:	f109 38ff 	add.w	r8, r9, #4294967295
 800cbf0:	3701      	adds	r7, #1
 800cbf2:	4638      	mov	r0, r7
 800cbf4:	f7f3 fc72 	bl	80004dc <__aeabi_i2d>
 800cbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbfc:	f7f3 fcd8 	bl	80005b0 <__aeabi_dmul>
 800cc00:	2200      	movs	r2, #0
 800cc02:	4b62      	ldr	r3, [pc, #392]	; (800cd8c <_dtoa_r+0x5b4>)
 800cc04:	f7f3 fb1e 	bl	8000244 <__adddf3>
 800cc08:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cc0c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cc10:	9611      	str	r6, [sp, #68]	; 0x44
 800cc12:	2c00      	cmp	r4, #0
 800cc14:	d15d      	bne.n	800ccd2 <_dtoa_r+0x4fa>
 800cc16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	4b5c      	ldr	r3, [pc, #368]	; (800cd90 <_dtoa_r+0x5b8>)
 800cc1e:	f7f3 fb0f 	bl	8000240 <__aeabi_dsub>
 800cc22:	4602      	mov	r2, r0
 800cc24:	460b      	mov	r3, r1
 800cc26:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cc2a:	4633      	mov	r3, r6
 800cc2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc2e:	f7f3 ff4f 	bl	8000ad0 <__aeabi_dcmpgt>
 800cc32:	2800      	cmp	r0, #0
 800cc34:	f040 829e 	bne.w	800d174 <_dtoa_r+0x99c>
 800cc38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cc3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cc42:	f7f3 ff27 	bl	8000a94 <__aeabi_dcmplt>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	f040 8292 	bne.w	800d170 <_dtoa_r+0x998>
 800cc4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800cc50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cc54:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	f2c0 8153 	blt.w	800cf02 <_dtoa_r+0x72a>
 800cc5c:	f1b9 0f0e 	cmp.w	r9, #14
 800cc60:	f300 814f 	bgt.w	800cf02 <_dtoa_r+0x72a>
 800cc64:	4b45      	ldr	r3, [pc, #276]	; (800cd7c <_dtoa_r+0x5a4>)
 800cc66:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cc6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cc6e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800cc72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f280 80db 	bge.w	800ce30 <_dtoa_r+0x658>
 800cc7a:	9b02      	ldr	r3, [sp, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f300 80d7 	bgt.w	800ce30 <_dtoa_r+0x658>
 800cc82:	f040 8274 	bne.w	800d16e <_dtoa_r+0x996>
 800cc86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	4b40      	ldr	r3, [pc, #256]	; (800cd90 <_dtoa_r+0x5b8>)
 800cc8e:	f7f3 fc8f 	bl	80005b0 <__aeabi_dmul>
 800cc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc96:	f7f3 ff11 	bl	8000abc <__aeabi_dcmpge>
 800cc9a:	9c02      	ldr	r4, [sp, #8]
 800cc9c:	4626      	mov	r6, r4
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f040 824a 	bne.w	800d138 <_dtoa_r+0x960>
 800cca4:	2331      	movs	r3, #49	; 0x31
 800cca6:	9f08      	ldr	r7, [sp, #32]
 800cca8:	f109 0901 	add.w	r9, r9, #1
 800ccac:	f807 3b01 	strb.w	r3, [r7], #1
 800ccb0:	e246      	b.n	800d140 <_dtoa_r+0x968>
 800ccb2:	07e2      	lsls	r2, r4, #31
 800ccb4:	d505      	bpl.n	800ccc2 <_dtoa_r+0x4ea>
 800ccb6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ccba:	f7f3 fc79 	bl	80005b0 <__aeabi_dmul>
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	3701      	adds	r7, #1
 800ccc2:	1064      	asrs	r4, r4, #1
 800ccc4:	3608      	adds	r6, #8
 800ccc6:	e76d      	b.n	800cba4 <_dtoa_r+0x3cc>
 800ccc8:	2702      	movs	r7, #2
 800ccca:	e770      	b.n	800cbae <_dtoa_r+0x3d6>
 800cccc:	46c8      	mov	r8, r9
 800ccce:	9c02      	ldr	r4, [sp, #8]
 800ccd0:	e78f      	b.n	800cbf2 <_dtoa_r+0x41a>
 800ccd2:	9908      	ldr	r1, [sp, #32]
 800ccd4:	4b29      	ldr	r3, [pc, #164]	; (800cd7c <_dtoa_r+0x5a4>)
 800ccd6:	4421      	add	r1, r4
 800ccd8:	9112      	str	r1, [sp, #72]	; 0x48
 800ccda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cce0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800cce4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cce8:	2900      	cmp	r1, #0
 800ccea:	d055      	beq.n	800cd98 <_dtoa_r+0x5c0>
 800ccec:	2000      	movs	r0, #0
 800ccee:	4929      	ldr	r1, [pc, #164]	; (800cd94 <_dtoa_r+0x5bc>)
 800ccf0:	f7f3 fd88 	bl	8000804 <__aeabi_ddiv>
 800ccf4:	463b      	mov	r3, r7
 800ccf6:	4632      	mov	r2, r6
 800ccf8:	f7f3 faa2 	bl	8000240 <__aeabi_dsub>
 800ccfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cd00:	9f08      	ldr	r7, [sp, #32]
 800cd02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd06:	f7f3 ff03 	bl	8000b10 <__aeabi_d2iz>
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	f7f3 fbe6 	bl	80004dc <__aeabi_i2d>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd18:	f7f3 fa92 	bl	8000240 <__aeabi_dsub>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	3430      	adds	r4, #48	; 0x30
 800cd22:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cd26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd2a:	f807 4b01 	strb.w	r4, [r7], #1
 800cd2e:	f7f3 feb1 	bl	8000a94 <__aeabi_dcmplt>
 800cd32:	2800      	cmp	r0, #0
 800cd34:	d174      	bne.n	800ce20 <_dtoa_r+0x648>
 800cd36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd3a:	2000      	movs	r0, #0
 800cd3c:	4911      	ldr	r1, [pc, #68]	; (800cd84 <_dtoa_r+0x5ac>)
 800cd3e:	f7f3 fa7f 	bl	8000240 <__aeabi_dsub>
 800cd42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cd46:	f7f3 fea5 	bl	8000a94 <__aeabi_dcmplt>
 800cd4a:	2800      	cmp	r0, #0
 800cd4c:	f040 80b6 	bne.w	800cebc <_dtoa_r+0x6e4>
 800cd50:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cd52:	429f      	cmp	r7, r3
 800cd54:	f43f af7a 	beq.w	800cc4c <_dtoa_r+0x474>
 800cd58:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	4b0a      	ldr	r3, [pc, #40]	; (800cd88 <_dtoa_r+0x5b0>)
 800cd60:	f7f3 fc26 	bl	80005b0 <__aeabi_dmul>
 800cd64:	2200      	movs	r2, #0
 800cd66:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cd6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd6e:	4b06      	ldr	r3, [pc, #24]	; (800cd88 <_dtoa_r+0x5b0>)
 800cd70:	f7f3 fc1e 	bl	80005b0 <__aeabi_dmul>
 800cd74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd78:	e7c3      	b.n	800cd02 <_dtoa_r+0x52a>
 800cd7a:	bf00      	nop
 800cd7c:	0800fcd8 	.word	0x0800fcd8
 800cd80:	0800fcb0 	.word	0x0800fcb0
 800cd84:	3ff00000 	.word	0x3ff00000
 800cd88:	40240000 	.word	0x40240000
 800cd8c:	401c0000 	.word	0x401c0000
 800cd90:	40140000 	.word	0x40140000
 800cd94:	3fe00000 	.word	0x3fe00000
 800cd98:	4630      	mov	r0, r6
 800cd9a:	4639      	mov	r1, r7
 800cd9c:	f7f3 fc08 	bl	80005b0 <__aeabi_dmul>
 800cda0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cda2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800cda6:	9c08      	ldr	r4, [sp, #32]
 800cda8:	9314      	str	r3, [sp, #80]	; 0x50
 800cdaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdae:	f7f3 feaf 	bl	8000b10 <__aeabi_d2iz>
 800cdb2:	9015      	str	r0, [sp, #84]	; 0x54
 800cdb4:	f7f3 fb92 	bl	80004dc <__aeabi_i2d>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	460b      	mov	r3, r1
 800cdbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cdc0:	f7f3 fa3e 	bl	8000240 <__aeabi_dsub>
 800cdc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	3330      	adds	r3, #48	; 0x30
 800cdca:	f804 3b01 	strb.w	r3, [r4], #1
 800cdce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cdd0:	460f      	mov	r7, r1
 800cdd2:	429c      	cmp	r4, r3
 800cdd4:	f04f 0200 	mov.w	r2, #0
 800cdd8:	d124      	bne.n	800ce24 <_dtoa_r+0x64c>
 800cdda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cdde:	4bb3      	ldr	r3, [pc, #716]	; (800d0ac <_dtoa_r+0x8d4>)
 800cde0:	f7f3 fa30 	bl	8000244 <__adddf3>
 800cde4:	4602      	mov	r2, r0
 800cde6:	460b      	mov	r3, r1
 800cde8:	4630      	mov	r0, r6
 800cdea:	4639      	mov	r1, r7
 800cdec:	f7f3 fe70 	bl	8000ad0 <__aeabi_dcmpgt>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d162      	bne.n	800ceba <_dtoa_r+0x6e2>
 800cdf4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cdf8:	2000      	movs	r0, #0
 800cdfa:	49ac      	ldr	r1, [pc, #688]	; (800d0ac <_dtoa_r+0x8d4>)
 800cdfc:	f7f3 fa20 	bl	8000240 <__aeabi_dsub>
 800ce00:	4602      	mov	r2, r0
 800ce02:	460b      	mov	r3, r1
 800ce04:	4630      	mov	r0, r6
 800ce06:	4639      	mov	r1, r7
 800ce08:	f7f3 fe44 	bl	8000a94 <__aeabi_dcmplt>
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f43f af1d 	beq.w	800cc4c <_dtoa_r+0x474>
 800ce12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ce14:	1e7b      	subs	r3, r7, #1
 800ce16:	9314      	str	r3, [sp, #80]	; 0x50
 800ce18:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ce1c:	2b30      	cmp	r3, #48	; 0x30
 800ce1e:	d0f8      	beq.n	800ce12 <_dtoa_r+0x63a>
 800ce20:	46c1      	mov	r9, r8
 800ce22:	e03a      	b.n	800ce9a <_dtoa_r+0x6c2>
 800ce24:	4ba2      	ldr	r3, [pc, #648]	; (800d0b0 <_dtoa_r+0x8d8>)
 800ce26:	f7f3 fbc3 	bl	80005b0 <__aeabi_dmul>
 800ce2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce2e:	e7bc      	b.n	800cdaa <_dtoa_r+0x5d2>
 800ce30:	9f08      	ldr	r7, [sp, #32]
 800ce32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce3a:	f7f3 fce3 	bl	8000804 <__aeabi_ddiv>
 800ce3e:	f7f3 fe67 	bl	8000b10 <__aeabi_d2iz>
 800ce42:	4604      	mov	r4, r0
 800ce44:	f7f3 fb4a 	bl	80004dc <__aeabi_i2d>
 800ce48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce4c:	f7f3 fbb0 	bl	80005b0 <__aeabi_dmul>
 800ce50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ce54:	460b      	mov	r3, r1
 800ce56:	4602      	mov	r2, r0
 800ce58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce5c:	f7f3 f9f0 	bl	8000240 <__aeabi_dsub>
 800ce60:	f807 6b01 	strb.w	r6, [r7], #1
 800ce64:	9e08      	ldr	r6, [sp, #32]
 800ce66:	9b02      	ldr	r3, [sp, #8]
 800ce68:	1bbe      	subs	r6, r7, r6
 800ce6a:	42b3      	cmp	r3, r6
 800ce6c:	d13a      	bne.n	800cee4 <_dtoa_r+0x70c>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	f7f3 f9e7 	bl	8000244 <__adddf3>
 800ce76:	4602      	mov	r2, r0
 800ce78:	460b      	mov	r3, r1
 800ce7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce82:	f7f3 fe25 	bl	8000ad0 <__aeabi_dcmpgt>
 800ce86:	bb58      	cbnz	r0, 800cee0 <_dtoa_r+0x708>
 800ce88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ce8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce90:	f7f3 fdf6 	bl	8000a80 <__aeabi_dcmpeq>
 800ce94:	b108      	cbz	r0, 800ce9a <_dtoa_r+0x6c2>
 800ce96:	07e1      	lsls	r1, r4, #31
 800ce98:	d422      	bmi.n	800cee0 <_dtoa_r+0x708>
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	4651      	mov	r1, sl
 800ce9e:	f000 fbef 	bl	800d680 <_Bfree>
 800cea2:	2300      	movs	r3, #0
 800cea4:	703b      	strb	r3, [r7, #0]
 800cea6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800cea8:	f109 0001 	add.w	r0, r9, #1
 800ceac:	6018      	str	r0, [r3, #0]
 800ceae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f43f acdf 	beq.w	800c874 <_dtoa_r+0x9c>
 800ceb6:	601f      	str	r7, [r3, #0]
 800ceb8:	e4dc      	b.n	800c874 <_dtoa_r+0x9c>
 800ceba:	4627      	mov	r7, r4
 800cebc:	463b      	mov	r3, r7
 800cebe:	461f      	mov	r7, r3
 800cec0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cec4:	2a39      	cmp	r2, #57	; 0x39
 800cec6:	d107      	bne.n	800ced8 <_dtoa_r+0x700>
 800cec8:	9a08      	ldr	r2, [sp, #32]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d1f7      	bne.n	800cebe <_dtoa_r+0x6e6>
 800cece:	2230      	movs	r2, #48	; 0x30
 800ced0:	9908      	ldr	r1, [sp, #32]
 800ced2:	f108 0801 	add.w	r8, r8, #1
 800ced6:	700a      	strb	r2, [r1, #0]
 800ced8:	781a      	ldrb	r2, [r3, #0]
 800ceda:	3201      	adds	r2, #1
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	e79f      	b.n	800ce20 <_dtoa_r+0x648>
 800cee0:	46c8      	mov	r8, r9
 800cee2:	e7eb      	b.n	800cebc <_dtoa_r+0x6e4>
 800cee4:	2200      	movs	r2, #0
 800cee6:	4b72      	ldr	r3, [pc, #456]	; (800d0b0 <_dtoa_r+0x8d8>)
 800cee8:	f7f3 fb62 	bl	80005b0 <__aeabi_dmul>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cef4:	2200      	movs	r2, #0
 800cef6:	2300      	movs	r3, #0
 800cef8:	f7f3 fdc2 	bl	8000a80 <__aeabi_dcmpeq>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d098      	beq.n	800ce32 <_dtoa_r+0x65a>
 800cf00:	e7cb      	b.n	800ce9a <_dtoa_r+0x6c2>
 800cf02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cf04:	2a00      	cmp	r2, #0
 800cf06:	f000 80cd 	beq.w	800d0a4 <_dtoa_r+0x8cc>
 800cf0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800cf0c:	2a01      	cmp	r2, #1
 800cf0e:	f300 80af 	bgt.w	800d070 <_dtoa_r+0x898>
 800cf12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf14:	2a00      	cmp	r2, #0
 800cf16:	f000 80a7 	beq.w	800d068 <_dtoa_r+0x890>
 800cf1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cf1e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cf20:	9f06      	ldr	r7, [sp, #24]
 800cf22:	9a06      	ldr	r2, [sp, #24]
 800cf24:	2101      	movs	r1, #1
 800cf26:	441a      	add	r2, r3
 800cf28:	9206      	str	r2, [sp, #24]
 800cf2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf2c:	4628      	mov	r0, r5
 800cf2e:	441a      	add	r2, r3
 800cf30:	9209      	str	r2, [sp, #36]	; 0x24
 800cf32:	f000 fc5f 	bl	800d7f4 <__i2b>
 800cf36:	4606      	mov	r6, r0
 800cf38:	2f00      	cmp	r7, #0
 800cf3a:	dd0c      	ble.n	800cf56 <_dtoa_r+0x77e>
 800cf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	dd09      	ble.n	800cf56 <_dtoa_r+0x77e>
 800cf42:	42bb      	cmp	r3, r7
 800cf44:	bfa8      	it	ge
 800cf46:	463b      	movge	r3, r7
 800cf48:	9a06      	ldr	r2, [sp, #24]
 800cf4a:	1aff      	subs	r7, r7, r3
 800cf4c:	1ad2      	subs	r2, r2, r3
 800cf4e:	9206      	str	r2, [sp, #24]
 800cf50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	9309      	str	r3, [sp, #36]	; 0x24
 800cf56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf58:	b1f3      	cbz	r3, 800cf98 <_dtoa_r+0x7c0>
 800cf5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 80a9 	beq.w	800d0b4 <_dtoa_r+0x8dc>
 800cf62:	2c00      	cmp	r4, #0
 800cf64:	dd10      	ble.n	800cf88 <_dtoa_r+0x7b0>
 800cf66:	4631      	mov	r1, r6
 800cf68:	4622      	mov	r2, r4
 800cf6a:	4628      	mov	r0, r5
 800cf6c:	f000 fcfc 	bl	800d968 <__pow5mult>
 800cf70:	4652      	mov	r2, sl
 800cf72:	4601      	mov	r1, r0
 800cf74:	4606      	mov	r6, r0
 800cf76:	4628      	mov	r0, r5
 800cf78:	f000 fc52 	bl	800d820 <__multiply>
 800cf7c:	4680      	mov	r8, r0
 800cf7e:	4651      	mov	r1, sl
 800cf80:	4628      	mov	r0, r5
 800cf82:	f000 fb7d 	bl	800d680 <_Bfree>
 800cf86:	46c2      	mov	sl, r8
 800cf88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8a:	1b1a      	subs	r2, r3, r4
 800cf8c:	d004      	beq.n	800cf98 <_dtoa_r+0x7c0>
 800cf8e:	4651      	mov	r1, sl
 800cf90:	4628      	mov	r0, r5
 800cf92:	f000 fce9 	bl	800d968 <__pow5mult>
 800cf96:	4682      	mov	sl, r0
 800cf98:	2101      	movs	r1, #1
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	f000 fc2a 	bl	800d7f4 <__i2b>
 800cfa0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cfa2:	4604      	mov	r4, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	f340 8087 	ble.w	800d0b8 <_dtoa_r+0x8e0>
 800cfaa:	461a      	mov	r2, r3
 800cfac:	4601      	mov	r1, r0
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f000 fcda 	bl	800d968 <__pow5mult>
 800cfb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cfb6:	4604      	mov	r4, r0
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	f340 8080 	ble.w	800d0be <_dtoa_r+0x8e6>
 800cfbe:	f04f 0800 	mov.w	r8, #0
 800cfc2:	6923      	ldr	r3, [r4, #16]
 800cfc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cfc8:	6918      	ldr	r0, [r3, #16]
 800cfca:	f000 fbc5 	bl	800d758 <__hi0bits>
 800cfce:	f1c0 0020 	rsb	r0, r0, #32
 800cfd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfd4:	4418      	add	r0, r3
 800cfd6:	f010 001f 	ands.w	r0, r0, #31
 800cfda:	f000 8092 	beq.w	800d102 <_dtoa_r+0x92a>
 800cfde:	f1c0 0320 	rsb	r3, r0, #32
 800cfe2:	2b04      	cmp	r3, #4
 800cfe4:	f340 808a 	ble.w	800d0fc <_dtoa_r+0x924>
 800cfe8:	f1c0 001c 	rsb	r0, r0, #28
 800cfec:	9b06      	ldr	r3, [sp, #24]
 800cfee:	4407      	add	r7, r0
 800cff0:	4403      	add	r3, r0
 800cff2:	9306      	str	r3, [sp, #24]
 800cff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff6:	4403      	add	r3, r0
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	9b06      	ldr	r3, [sp, #24]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	dd05      	ble.n	800d00c <_dtoa_r+0x834>
 800d000:	4651      	mov	r1, sl
 800d002:	461a      	mov	r2, r3
 800d004:	4628      	mov	r0, r5
 800d006:	f000 fd09 	bl	800da1c <__lshift>
 800d00a:	4682      	mov	sl, r0
 800d00c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d00e:	2b00      	cmp	r3, #0
 800d010:	dd05      	ble.n	800d01e <_dtoa_r+0x846>
 800d012:	4621      	mov	r1, r4
 800d014:	461a      	mov	r2, r3
 800d016:	4628      	mov	r0, r5
 800d018:	f000 fd00 	bl	800da1c <__lshift>
 800d01c:	4604      	mov	r4, r0
 800d01e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d020:	2b00      	cmp	r3, #0
 800d022:	d070      	beq.n	800d106 <_dtoa_r+0x92e>
 800d024:	4621      	mov	r1, r4
 800d026:	4650      	mov	r0, sl
 800d028:	f000 fd64 	bl	800daf4 <__mcmp>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	da6a      	bge.n	800d106 <_dtoa_r+0x92e>
 800d030:	2300      	movs	r3, #0
 800d032:	4651      	mov	r1, sl
 800d034:	220a      	movs	r2, #10
 800d036:	4628      	mov	r0, r5
 800d038:	f000 fb44 	bl	800d6c4 <__multadd>
 800d03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d03e:	4682      	mov	sl, r0
 800d040:	f109 39ff 	add.w	r9, r9, #4294967295
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 8193 	beq.w	800d370 <_dtoa_r+0xb98>
 800d04a:	4631      	mov	r1, r6
 800d04c:	2300      	movs	r3, #0
 800d04e:	220a      	movs	r2, #10
 800d050:	4628      	mov	r0, r5
 800d052:	f000 fb37 	bl	800d6c4 <__multadd>
 800d056:	f1bb 0f00 	cmp.w	fp, #0
 800d05a:	4606      	mov	r6, r0
 800d05c:	f300 8093 	bgt.w	800d186 <_dtoa_r+0x9ae>
 800d060:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d062:	2b02      	cmp	r3, #2
 800d064:	dc57      	bgt.n	800d116 <_dtoa_r+0x93e>
 800d066:	e08e      	b.n	800d186 <_dtoa_r+0x9ae>
 800d068:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d06a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d06e:	e756      	b.n	800cf1e <_dtoa_r+0x746>
 800d070:	9b02      	ldr	r3, [sp, #8]
 800d072:	1e5c      	subs	r4, r3, #1
 800d074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d076:	42a3      	cmp	r3, r4
 800d078:	bfb7      	itett	lt
 800d07a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d07c:	1b1c      	subge	r4, r3, r4
 800d07e:	1ae2      	sublt	r2, r4, r3
 800d080:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d082:	bfbe      	ittt	lt
 800d084:	940a      	strlt	r4, [sp, #40]	; 0x28
 800d086:	189b      	addlt	r3, r3, r2
 800d088:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d08a:	9b02      	ldr	r3, [sp, #8]
 800d08c:	bfb8      	it	lt
 800d08e:	2400      	movlt	r4, #0
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfbb      	ittet	lt
 800d094:	9b06      	ldrlt	r3, [sp, #24]
 800d096:	9a02      	ldrlt	r2, [sp, #8]
 800d098:	9f06      	ldrge	r7, [sp, #24]
 800d09a:	1a9f      	sublt	r7, r3, r2
 800d09c:	bfac      	ite	ge
 800d09e:	9b02      	ldrge	r3, [sp, #8]
 800d0a0:	2300      	movlt	r3, #0
 800d0a2:	e73e      	b.n	800cf22 <_dtoa_r+0x74a>
 800d0a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d0a6:	9f06      	ldr	r7, [sp, #24]
 800d0a8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800d0aa:	e745      	b.n	800cf38 <_dtoa_r+0x760>
 800d0ac:	3fe00000 	.word	0x3fe00000
 800d0b0:	40240000 	.word	0x40240000
 800d0b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d0b6:	e76a      	b.n	800cf8e <_dtoa_r+0x7b6>
 800d0b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	dc19      	bgt.n	800d0f2 <_dtoa_r+0x91a>
 800d0be:	9b04      	ldr	r3, [sp, #16]
 800d0c0:	b9bb      	cbnz	r3, 800d0f2 <_dtoa_r+0x91a>
 800d0c2:	9b05      	ldr	r3, [sp, #20]
 800d0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0c8:	b99b      	cbnz	r3, 800d0f2 <_dtoa_r+0x91a>
 800d0ca:	9b05      	ldr	r3, [sp, #20]
 800d0cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d0d0:	0d1b      	lsrs	r3, r3, #20
 800d0d2:	051b      	lsls	r3, r3, #20
 800d0d4:	b183      	cbz	r3, 800d0f8 <_dtoa_r+0x920>
 800d0d6:	f04f 0801 	mov.w	r8, #1
 800d0da:	9b06      	ldr	r3, [sp, #24]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	9306      	str	r3, [sp, #24]
 800d0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d0e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f47f af6a 	bne.w	800cfc2 <_dtoa_r+0x7ea>
 800d0ee:	2001      	movs	r0, #1
 800d0f0:	e76f      	b.n	800cfd2 <_dtoa_r+0x7fa>
 800d0f2:	f04f 0800 	mov.w	r8, #0
 800d0f6:	e7f6      	b.n	800d0e6 <_dtoa_r+0x90e>
 800d0f8:	4698      	mov	r8, r3
 800d0fa:	e7f4      	b.n	800d0e6 <_dtoa_r+0x90e>
 800d0fc:	f43f af7d 	beq.w	800cffa <_dtoa_r+0x822>
 800d100:	4618      	mov	r0, r3
 800d102:	301c      	adds	r0, #28
 800d104:	e772      	b.n	800cfec <_dtoa_r+0x814>
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	dc36      	bgt.n	800d17a <_dtoa_r+0x9a2>
 800d10c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d10e:	2b02      	cmp	r3, #2
 800d110:	dd33      	ble.n	800d17a <_dtoa_r+0x9a2>
 800d112:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d116:	f1bb 0f00 	cmp.w	fp, #0
 800d11a:	d10d      	bne.n	800d138 <_dtoa_r+0x960>
 800d11c:	4621      	mov	r1, r4
 800d11e:	465b      	mov	r3, fp
 800d120:	2205      	movs	r2, #5
 800d122:	4628      	mov	r0, r5
 800d124:	f000 face 	bl	800d6c4 <__multadd>
 800d128:	4601      	mov	r1, r0
 800d12a:	4604      	mov	r4, r0
 800d12c:	4650      	mov	r0, sl
 800d12e:	f000 fce1 	bl	800daf4 <__mcmp>
 800d132:	2800      	cmp	r0, #0
 800d134:	f73f adb6 	bgt.w	800cca4 <_dtoa_r+0x4cc>
 800d138:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d13a:	9f08      	ldr	r7, [sp, #32]
 800d13c:	ea6f 0903 	mvn.w	r9, r3
 800d140:	f04f 0800 	mov.w	r8, #0
 800d144:	4621      	mov	r1, r4
 800d146:	4628      	mov	r0, r5
 800d148:	f000 fa9a 	bl	800d680 <_Bfree>
 800d14c:	2e00      	cmp	r6, #0
 800d14e:	f43f aea4 	beq.w	800ce9a <_dtoa_r+0x6c2>
 800d152:	f1b8 0f00 	cmp.w	r8, #0
 800d156:	d005      	beq.n	800d164 <_dtoa_r+0x98c>
 800d158:	45b0      	cmp	r8, r6
 800d15a:	d003      	beq.n	800d164 <_dtoa_r+0x98c>
 800d15c:	4641      	mov	r1, r8
 800d15e:	4628      	mov	r0, r5
 800d160:	f000 fa8e 	bl	800d680 <_Bfree>
 800d164:	4631      	mov	r1, r6
 800d166:	4628      	mov	r0, r5
 800d168:	f000 fa8a 	bl	800d680 <_Bfree>
 800d16c:	e695      	b.n	800ce9a <_dtoa_r+0x6c2>
 800d16e:	2400      	movs	r4, #0
 800d170:	4626      	mov	r6, r4
 800d172:	e7e1      	b.n	800d138 <_dtoa_r+0x960>
 800d174:	46c1      	mov	r9, r8
 800d176:	4626      	mov	r6, r4
 800d178:	e594      	b.n	800cca4 <_dtoa_r+0x4cc>
 800d17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d17c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 80fc 	beq.w	800d37e <_dtoa_r+0xba6>
 800d186:	2f00      	cmp	r7, #0
 800d188:	dd05      	ble.n	800d196 <_dtoa_r+0x9be>
 800d18a:	4631      	mov	r1, r6
 800d18c:	463a      	mov	r2, r7
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 fc44 	bl	800da1c <__lshift>
 800d194:	4606      	mov	r6, r0
 800d196:	f1b8 0f00 	cmp.w	r8, #0
 800d19a:	d05c      	beq.n	800d256 <_dtoa_r+0xa7e>
 800d19c:	4628      	mov	r0, r5
 800d19e:	6871      	ldr	r1, [r6, #4]
 800d1a0:	f000 fa2e 	bl	800d600 <_Balloc>
 800d1a4:	4607      	mov	r7, r0
 800d1a6:	b928      	cbnz	r0, 800d1b4 <_dtoa_r+0x9dc>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d1ae:	4b7e      	ldr	r3, [pc, #504]	; (800d3a8 <_dtoa_r+0xbd0>)
 800d1b0:	f7ff bb26 	b.w	800c800 <_dtoa_r+0x28>
 800d1b4:	6932      	ldr	r2, [r6, #16]
 800d1b6:	f106 010c 	add.w	r1, r6, #12
 800d1ba:	3202      	adds	r2, #2
 800d1bc:	0092      	lsls	r2, r2, #2
 800d1be:	300c      	adds	r0, #12
 800d1c0:	f000 fa03 	bl	800d5ca <memcpy>
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	4639      	mov	r1, r7
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	f000 fc27 	bl	800da1c <__lshift>
 800d1ce:	46b0      	mov	r8, r6
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	9b08      	ldr	r3, [sp, #32]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	9302      	str	r3, [sp, #8]
 800d1d8:	9b08      	ldr	r3, [sp, #32]
 800d1da:	445b      	add	r3, fp
 800d1dc:	930a      	str	r3, [sp, #40]	; 0x28
 800d1de:	9b04      	ldr	r3, [sp, #16]
 800d1e0:	f003 0301 	and.w	r3, r3, #1
 800d1e4:	9309      	str	r3, [sp, #36]	; 0x24
 800d1e6:	9b02      	ldr	r3, [sp, #8]
 800d1e8:	4621      	mov	r1, r4
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	f103 3bff 	add.w	fp, r3, #4294967295
 800d1f0:	f7ff fa62 	bl	800c6b8 <quorem>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	4641      	mov	r1, r8
 800d1f8:	3330      	adds	r3, #48	; 0x30
 800d1fa:	9004      	str	r0, [sp, #16]
 800d1fc:	4650      	mov	r0, sl
 800d1fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800d200:	f000 fc78 	bl	800daf4 <__mcmp>
 800d204:	4632      	mov	r2, r6
 800d206:	9006      	str	r0, [sp, #24]
 800d208:	4621      	mov	r1, r4
 800d20a:	4628      	mov	r0, r5
 800d20c:	f000 fc8e 	bl	800db2c <__mdiff>
 800d210:	68c2      	ldr	r2, [r0, #12]
 800d212:	4607      	mov	r7, r0
 800d214:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d216:	bb02      	cbnz	r2, 800d25a <_dtoa_r+0xa82>
 800d218:	4601      	mov	r1, r0
 800d21a:	4650      	mov	r0, sl
 800d21c:	f000 fc6a 	bl	800daf4 <__mcmp>
 800d220:	4602      	mov	r2, r0
 800d222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d224:	4639      	mov	r1, r7
 800d226:	4628      	mov	r0, r5
 800d228:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d22c:	f000 fa28 	bl	800d680 <_Bfree>
 800d230:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d232:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d234:	9f02      	ldr	r7, [sp, #8]
 800d236:	ea43 0102 	orr.w	r1, r3, r2
 800d23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d23c:	430b      	orrs	r3, r1
 800d23e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d240:	d10d      	bne.n	800d25e <_dtoa_r+0xa86>
 800d242:	2b39      	cmp	r3, #57	; 0x39
 800d244:	d027      	beq.n	800d296 <_dtoa_r+0xabe>
 800d246:	9a06      	ldr	r2, [sp, #24]
 800d248:	2a00      	cmp	r2, #0
 800d24a:	dd01      	ble.n	800d250 <_dtoa_r+0xa78>
 800d24c:	9b04      	ldr	r3, [sp, #16]
 800d24e:	3331      	adds	r3, #49	; 0x31
 800d250:	f88b 3000 	strb.w	r3, [fp]
 800d254:	e776      	b.n	800d144 <_dtoa_r+0x96c>
 800d256:	4630      	mov	r0, r6
 800d258:	e7b9      	b.n	800d1ce <_dtoa_r+0x9f6>
 800d25a:	2201      	movs	r2, #1
 800d25c:	e7e2      	b.n	800d224 <_dtoa_r+0xa4c>
 800d25e:	9906      	ldr	r1, [sp, #24]
 800d260:	2900      	cmp	r1, #0
 800d262:	db04      	blt.n	800d26e <_dtoa_r+0xa96>
 800d264:	9822      	ldr	r0, [sp, #136]	; 0x88
 800d266:	4301      	orrs	r1, r0
 800d268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d26a:	4301      	orrs	r1, r0
 800d26c:	d120      	bne.n	800d2b0 <_dtoa_r+0xad8>
 800d26e:	2a00      	cmp	r2, #0
 800d270:	ddee      	ble.n	800d250 <_dtoa_r+0xa78>
 800d272:	4651      	mov	r1, sl
 800d274:	2201      	movs	r2, #1
 800d276:	4628      	mov	r0, r5
 800d278:	9302      	str	r3, [sp, #8]
 800d27a:	f000 fbcf 	bl	800da1c <__lshift>
 800d27e:	4621      	mov	r1, r4
 800d280:	4682      	mov	sl, r0
 800d282:	f000 fc37 	bl	800daf4 <__mcmp>
 800d286:	2800      	cmp	r0, #0
 800d288:	9b02      	ldr	r3, [sp, #8]
 800d28a:	dc02      	bgt.n	800d292 <_dtoa_r+0xaba>
 800d28c:	d1e0      	bne.n	800d250 <_dtoa_r+0xa78>
 800d28e:	07da      	lsls	r2, r3, #31
 800d290:	d5de      	bpl.n	800d250 <_dtoa_r+0xa78>
 800d292:	2b39      	cmp	r3, #57	; 0x39
 800d294:	d1da      	bne.n	800d24c <_dtoa_r+0xa74>
 800d296:	2339      	movs	r3, #57	; 0x39
 800d298:	f88b 3000 	strb.w	r3, [fp]
 800d29c:	463b      	mov	r3, r7
 800d29e:	461f      	mov	r7, r3
 800d2a0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	2a39      	cmp	r2, #57	; 0x39
 800d2a8:	d050      	beq.n	800d34c <_dtoa_r+0xb74>
 800d2aa:	3201      	adds	r2, #1
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	e749      	b.n	800d144 <_dtoa_r+0x96c>
 800d2b0:	2a00      	cmp	r2, #0
 800d2b2:	dd03      	ble.n	800d2bc <_dtoa_r+0xae4>
 800d2b4:	2b39      	cmp	r3, #57	; 0x39
 800d2b6:	d0ee      	beq.n	800d296 <_dtoa_r+0xabe>
 800d2b8:	3301      	adds	r3, #1
 800d2ba:	e7c9      	b.n	800d250 <_dtoa_r+0xa78>
 800d2bc:	9a02      	ldr	r2, [sp, #8]
 800d2be:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d2c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d2c4:	428a      	cmp	r2, r1
 800d2c6:	d02a      	beq.n	800d31e <_dtoa_r+0xb46>
 800d2c8:	4651      	mov	r1, sl
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	220a      	movs	r2, #10
 800d2ce:	4628      	mov	r0, r5
 800d2d0:	f000 f9f8 	bl	800d6c4 <__multadd>
 800d2d4:	45b0      	cmp	r8, r6
 800d2d6:	4682      	mov	sl, r0
 800d2d8:	f04f 0300 	mov.w	r3, #0
 800d2dc:	f04f 020a 	mov.w	r2, #10
 800d2e0:	4641      	mov	r1, r8
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	d107      	bne.n	800d2f6 <_dtoa_r+0xb1e>
 800d2e6:	f000 f9ed 	bl	800d6c4 <__multadd>
 800d2ea:	4680      	mov	r8, r0
 800d2ec:	4606      	mov	r6, r0
 800d2ee:	9b02      	ldr	r3, [sp, #8]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	9302      	str	r3, [sp, #8]
 800d2f4:	e777      	b.n	800d1e6 <_dtoa_r+0xa0e>
 800d2f6:	f000 f9e5 	bl	800d6c4 <__multadd>
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4680      	mov	r8, r0
 800d2fe:	2300      	movs	r3, #0
 800d300:	220a      	movs	r2, #10
 800d302:	4628      	mov	r0, r5
 800d304:	f000 f9de 	bl	800d6c4 <__multadd>
 800d308:	4606      	mov	r6, r0
 800d30a:	e7f0      	b.n	800d2ee <_dtoa_r+0xb16>
 800d30c:	f1bb 0f00 	cmp.w	fp, #0
 800d310:	bfcc      	ite	gt
 800d312:	465f      	movgt	r7, fp
 800d314:	2701      	movle	r7, #1
 800d316:	f04f 0800 	mov.w	r8, #0
 800d31a:	9a08      	ldr	r2, [sp, #32]
 800d31c:	4417      	add	r7, r2
 800d31e:	4651      	mov	r1, sl
 800d320:	2201      	movs	r2, #1
 800d322:	4628      	mov	r0, r5
 800d324:	9302      	str	r3, [sp, #8]
 800d326:	f000 fb79 	bl	800da1c <__lshift>
 800d32a:	4621      	mov	r1, r4
 800d32c:	4682      	mov	sl, r0
 800d32e:	f000 fbe1 	bl	800daf4 <__mcmp>
 800d332:	2800      	cmp	r0, #0
 800d334:	dcb2      	bgt.n	800d29c <_dtoa_r+0xac4>
 800d336:	d102      	bne.n	800d33e <_dtoa_r+0xb66>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	07db      	lsls	r3, r3, #31
 800d33c:	d4ae      	bmi.n	800d29c <_dtoa_r+0xac4>
 800d33e:	463b      	mov	r3, r7
 800d340:	461f      	mov	r7, r3
 800d342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d346:	2a30      	cmp	r2, #48	; 0x30
 800d348:	d0fa      	beq.n	800d340 <_dtoa_r+0xb68>
 800d34a:	e6fb      	b.n	800d144 <_dtoa_r+0x96c>
 800d34c:	9a08      	ldr	r2, [sp, #32]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d1a5      	bne.n	800d29e <_dtoa_r+0xac6>
 800d352:	2331      	movs	r3, #49	; 0x31
 800d354:	f109 0901 	add.w	r9, r9, #1
 800d358:	7013      	strb	r3, [r2, #0]
 800d35a:	e6f3      	b.n	800d144 <_dtoa_r+0x96c>
 800d35c:	4b13      	ldr	r3, [pc, #76]	; (800d3ac <_dtoa_r+0xbd4>)
 800d35e:	f7ff baa7 	b.w	800c8b0 <_dtoa_r+0xd8>
 800d362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d364:	2b00      	cmp	r3, #0
 800d366:	f47f aa80 	bne.w	800c86a <_dtoa_r+0x92>
 800d36a:	4b11      	ldr	r3, [pc, #68]	; (800d3b0 <_dtoa_r+0xbd8>)
 800d36c:	f7ff baa0 	b.w	800c8b0 <_dtoa_r+0xd8>
 800d370:	f1bb 0f00 	cmp.w	fp, #0
 800d374:	dc03      	bgt.n	800d37e <_dtoa_r+0xba6>
 800d376:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d378:	2b02      	cmp	r3, #2
 800d37a:	f73f aecc 	bgt.w	800d116 <_dtoa_r+0x93e>
 800d37e:	9f08      	ldr	r7, [sp, #32]
 800d380:	4621      	mov	r1, r4
 800d382:	4650      	mov	r0, sl
 800d384:	f7ff f998 	bl	800c6b8 <quorem>
 800d388:	9a08      	ldr	r2, [sp, #32]
 800d38a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d38e:	f807 3b01 	strb.w	r3, [r7], #1
 800d392:	1aba      	subs	r2, r7, r2
 800d394:	4593      	cmp	fp, r2
 800d396:	ddb9      	ble.n	800d30c <_dtoa_r+0xb34>
 800d398:	4651      	mov	r1, sl
 800d39a:	2300      	movs	r3, #0
 800d39c:	220a      	movs	r2, #10
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f000 f990 	bl	800d6c4 <__multadd>
 800d3a4:	4682      	mov	sl, r0
 800d3a6:	e7eb      	b.n	800d380 <_dtoa_r+0xba8>
 800d3a8:	0800fbdc 	.word	0x0800fbdc
 800d3ac:	0800fa34 	.word	0x0800fa34
 800d3b0:	0800fb59 	.word	0x0800fb59

0800d3b4 <std>:
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	b510      	push	{r4, lr}
 800d3b8:	4604      	mov	r4, r0
 800d3ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d3be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d3c2:	6083      	str	r3, [r0, #8]
 800d3c4:	8181      	strh	r1, [r0, #12]
 800d3c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d3c8:	81c2      	strh	r2, [r0, #14]
 800d3ca:	6183      	str	r3, [r0, #24]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	2208      	movs	r2, #8
 800d3d0:	305c      	adds	r0, #92	; 0x5c
 800d3d2:	f7fe fb31 	bl	800ba38 <memset>
 800d3d6:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <std+0x38>)
 800d3d8:	6224      	str	r4, [r4, #32]
 800d3da:	6263      	str	r3, [r4, #36]	; 0x24
 800d3dc:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <std+0x3c>)
 800d3de:	62a3      	str	r3, [r4, #40]	; 0x28
 800d3e0:	4b04      	ldr	r3, [pc, #16]	; (800d3f4 <std+0x40>)
 800d3e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d3e4:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <std+0x44>)
 800d3e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	bf00      	nop
 800d3ec:	0800e289 	.word	0x0800e289
 800d3f0:	0800e2ab 	.word	0x0800e2ab
 800d3f4:	0800e2e3 	.word	0x0800e2e3
 800d3f8:	0800e307 	.word	0x0800e307

0800d3fc <_cleanup_r>:
 800d3fc:	4901      	ldr	r1, [pc, #4]	; (800d404 <_cleanup_r+0x8>)
 800d3fe:	f000 b8af 	b.w	800d560 <_fwalk_reent>
 800d402:	bf00      	nop
 800d404:	0800e61d 	.word	0x0800e61d

0800d408 <__sfmoreglue>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	2568      	movs	r5, #104	; 0x68
 800d40c:	1e4a      	subs	r2, r1, #1
 800d40e:	4355      	muls	r5, r2
 800d410:	460e      	mov	r6, r1
 800d412:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d416:	f7fe fb63 	bl	800bae0 <_malloc_r>
 800d41a:	4604      	mov	r4, r0
 800d41c:	b140      	cbz	r0, 800d430 <__sfmoreglue+0x28>
 800d41e:	2100      	movs	r1, #0
 800d420:	e9c0 1600 	strd	r1, r6, [r0]
 800d424:	300c      	adds	r0, #12
 800d426:	60a0      	str	r0, [r4, #8]
 800d428:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d42c:	f7fe fb04 	bl	800ba38 <memset>
 800d430:	4620      	mov	r0, r4
 800d432:	bd70      	pop	{r4, r5, r6, pc}

0800d434 <__sfp_lock_acquire>:
 800d434:	4801      	ldr	r0, [pc, #4]	; (800d43c <__sfp_lock_acquire+0x8>)
 800d436:	f000 b8b8 	b.w	800d5aa <__retarget_lock_acquire_recursive>
 800d43a:	bf00      	nop
 800d43c:	20000bb4 	.word	0x20000bb4

0800d440 <__sfp_lock_release>:
 800d440:	4801      	ldr	r0, [pc, #4]	; (800d448 <__sfp_lock_release+0x8>)
 800d442:	f000 b8b3 	b.w	800d5ac <__retarget_lock_release_recursive>
 800d446:	bf00      	nop
 800d448:	20000bb4 	.word	0x20000bb4

0800d44c <__sinit_lock_acquire>:
 800d44c:	4801      	ldr	r0, [pc, #4]	; (800d454 <__sinit_lock_acquire+0x8>)
 800d44e:	f000 b8ac 	b.w	800d5aa <__retarget_lock_acquire_recursive>
 800d452:	bf00      	nop
 800d454:	20000baf 	.word	0x20000baf

0800d458 <__sinit_lock_release>:
 800d458:	4801      	ldr	r0, [pc, #4]	; (800d460 <__sinit_lock_release+0x8>)
 800d45a:	f000 b8a7 	b.w	800d5ac <__retarget_lock_release_recursive>
 800d45e:	bf00      	nop
 800d460:	20000baf 	.word	0x20000baf

0800d464 <__sinit>:
 800d464:	b510      	push	{r4, lr}
 800d466:	4604      	mov	r4, r0
 800d468:	f7ff fff0 	bl	800d44c <__sinit_lock_acquire>
 800d46c:	69a3      	ldr	r3, [r4, #24]
 800d46e:	b11b      	cbz	r3, 800d478 <__sinit+0x14>
 800d470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d474:	f7ff bff0 	b.w	800d458 <__sinit_lock_release>
 800d478:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d47c:	6523      	str	r3, [r4, #80]	; 0x50
 800d47e:	4b13      	ldr	r3, [pc, #76]	; (800d4cc <__sinit+0x68>)
 800d480:	4a13      	ldr	r2, [pc, #76]	; (800d4d0 <__sinit+0x6c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	62a2      	str	r2, [r4, #40]	; 0x28
 800d486:	42a3      	cmp	r3, r4
 800d488:	bf08      	it	eq
 800d48a:	2301      	moveq	r3, #1
 800d48c:	4620      	mov	r0, r4
 800d48e:	bf08      	it	eq
 800d490:	61a3      	streq	r3, [r4, #24]
 800d492:	f000 f81f 	bl	800d4d4 <__sfp>
 800d496:	6060      	str	r0, [r4, #4]
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 f81b 	bl	800d4d4 <__sfp>
 800d49e:	60a0      	str	r0, [r4, #8]
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f000 f817 	bl	800d4d4 <__sfp>
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	2104      	movs	r1, #4
 800d4aa:	60e0      	str	r0, [r4, #12]
 800d4ac:	6860      	ldr	r0, [r4, #4]
 800d4ae:	f7ff ff81 	bl	800d3b4 <std>
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	2109      	movs	r1, #9
 800d4b6:	68a0      	ldr	r0, [r4, #8]
 800d4b8:	f7ff ff7c 	bl	800d3b4 <std>
 800d4bc:	2202      	movs	r2, #2
 800d4be:	2112      	movs	r1, #18
 800d4c0:	68e0      	ldr	r0, [r4, #12]
 800d4c2:	f7ff ff77 	bl	800d3b4 <std>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	61a3      	str	r3, [r4, #24]
 800d4ca:	e7d1      	b.n	800d470 <__sinit+0xc>
 800d4cc:	0800fa20 	.word	0x0800fa20
 800d4d0:	0800d3fd 	.word	0x0800d3fd

0800d4d4 <__sfp>:
 800d4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	f7ff ffac 	bl	800d434 <__sfp_lock_acquire>
 800d4dc:	4b1e      	ldr	r3, [pc, #120]	; (800d558 <__sfp+0x84>)
 800d4de:	681e      	ldr	r6, [r3, #0]
 800d4e0:	69b3      	ldr	r3, [r6, #24]
 800d4e2:	b913      	cbnz	r3, 800d4ea <__sfp+0x16>
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7ff ffbd 	bl	800d464 <__sinit>
 800d4ea:	3648      	adds	r6, #72	; 0x48
 800d4ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	d503      	bpl.n	800d4fc <__sfp+0x28>
 800d4f4:	6833      	ldr	r3, [r6, #0]
 800d4f6:	b30b      	cbz	r3, 800d53c <__sfp+0x68>
 800d4f8:	6836      	ldr	r6, [r6, #0]
 800d4fa:	e7f7      	b.n	800d4ec <__sfp+0x18>
 800d4fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d500:	b9d5      	cbnz	r5, 800d538 <__sfp+0x64>
 800d502:	4b16      	ldr	r3, [pc, #88]	; (800d55c <__sfp+0x88>)
 800d504:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d508:	60e3      	str	r3, [r4, #12]
 800d50a:	6665      	str	r5, [r4, #100]	; 0x64
 800d50c:	f000 f84c 	bl	800d5a8 <__retarget_lock_init_recursive>
 800d510:	f7ff ff96 	bl	800d440 <__sfp_lock_release>
 800d514:	2208      	movs	r2, #8
 800d516:	4629      	mov	r1, r5
 800d518:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d51c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d520:	6025      	str	r5, [r4, #0]
 800d522:	61a5      	str	r5, [r4, #24]
 800d524:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d528:	f7fe fa86 	bl	800ba38 <memset>
 800d52c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d530:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d534:	4620      	mov	r0, r4
 800d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d538:	3468      	adds	r4, #104	; 0x68
 800d53a:	e7d9      	b.n	800d4f0 <__sfp+0x1c>
 800d53c:	2104      	movs	r1, #4
 800d53e:	4638      	mov	r0, r7
 800d540:	f7ff ff62 	bl	800d408 <__sfmoreglue>
 800d544:	4604      	mov	r4, r0
 800d546:	6030      	str	r0, [r6, #0]
 800d548:	2800      	cmp	r0, #0
 800d54a:	d1d5      	bne.n	800d4f8 <__sfp+0x24>
 800d54c:	f7ff ff78 	bl	800d440 <__sfp_lock_release>
 800d550:	230c      	movs	r3, #12
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	e7ee      	b.n	800d534 <__sfp+0x60>
 800d556:	bf00      	nop
 800d558:	0800fa20 	.word	0x0800fa20
 800d55c:	ffff0001 	.word	0xffff0001

0800d560 <_fwalk_reent>:
 800d560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d564:	4606      	mov	r6, r0
 800d566:	4688      	mov	r8, r1
 800d568:	2700      	movs	r7, #0
 800d56a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d56e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d572:	f1b9 0901 	subs.w	r9, r9, #1
 800d576:	d505      	bpl.n	800d584 <_fwalk_reent+0x24>
 800d578:	6824      	ldr	r4, [r4, #0]
 800d57a:	2c00      	cmp	r4, #0
 800d57c:	d1f7      	bne.n	800d56e <_fwalk_reent+0xe>
 800d57e:	4638      	mov	r0, r7
 800d580:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d584:	89ab      	ldrh	r3, [r5, #12]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d907      	bls.n	800d59a <_fwalk_reent+0x3a>
 800d58a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d58e:	3301      	adds	r3, #1
 800d590:	d003      	beq.n	800d59a <_fwalk_reent+0x3a>
 800d592:	4629      	mov	r1, r5
 800d594:	4630      	mov	r0, r6
 800d596:	47c0      	blx	r8
 800d598:	4307      	orrs	r7, r0
 800d59a:	3568      	adds	r5, #104	; 0x68
 800d59c:	e7e9      	b.n	800d572 <_fwalk_reent+0x12>
	...

0800d5a0 <_localeconv_r>:
 800d5a0:	4800      	ldr	r0, [pc, #0]	; (800d5a4 <_localeconv_r+0x4>)
 800d5a2:	4770      	bx	lr
 800d5a4:	20000170 	.word	0x20000170

0800d5a8 <__retarget_lock_init_recursive>:
 800d5a8:	4770      	bx	lr

0800d5aa <__retarget_lock_acquire_recursive>:
 800d5aa:	4770      	bx	lr

0800d5ac <__retarget_lock_release_recursive>:
 800d5ac:	4770      	bx	lr

0800d5ae <memchr>:
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	b510      	push	{r4, lr}
 800d5b2:	b2c9      	uxtb	r1, r1
 800d5b4:	4402      	add	r2, r0
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	d101      	bne.n	800d5c0 <memchr+0x12>
 800d5bc:	2000      	movs	r0, #0
 800d5be:	e003      	b.n	800d5c8 <memchr+0x1a>
 800d5c0:	7804      	ldrb	r4, [r0, #0]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	428c      	cmp	r4, r1
 800d5c6:	d1f6      	bne.n	800d5b6 <memchr+0x8>
 800d5c8:	bd10      	pop	{r4, pc}

0800d5ca <memcpy>:
 800d5ca:	440a      	add	r2, r1
 800d5cc:	4291      	cmp	r1, r2
 800d5ce:	f100 33ff 	add.w	r3, r0, #4294967295
 800d5d2:	d100      	bne.n	800d5d6 <memcpy+0xc>
 800d5d4:	4770      	bx	lr
 800d5d6:	b510      	push	{r4, lr}
 800d5d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5dc:	4291      	cmp	r1, r2
 800d5de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5e2:	d1f9      	bne.n	800d5d8 <memcpy+0xe>
 800d5e4:	bd10      	pop	{r4, pc}
	...

0800d5e8 <__malloc_lock>:
 800d5e8:	4801      	ldr	r0, [pc, #4]	; (800d5f0 <__malloc_lock+0x8>)
 800d5ea:	f7ff bfde 	b.w	800d5aa <__retarget_lock_acquire_recursive>
 800d5ee:	bf00      	nop
 800d5f0:	20000bb0 	.word	0x20000bb0

0800d5f4 <__malloc_unlock>:
 800d5f4:	4801      	ldr	r0, [pc, #4]	; (800d5fc <__malloc_unlock+0x8>)
 800d5f6:	f7ff bfd9 	b.w	800d5ac <__retarget_lock_release_recursive>
 800d5fa:	bf00      	nop
 800d5fc:	20000bb0 	.word	0x20000bb0

0800d600 <_Balloc>:
 800d600:	b570      	push	{r4, r5, r6, lr}
 800d602:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d604:	4604      	mov	r4, r0
 800d606:	460d      	mov	r5, r1
 800d608:	b976      	cbnz	r6, 800d628 <_Balloc+0x28>
 800d60a:	2010      	movs	r0, #16
 800d60c:	f7fe fa04 	bl	800ba18 <malloc>
 800d610:	4602      	mov	r2, r0
 800d612:	6260      	str	r0, [r4, #36]	; 0x24
 800d614:	b920      	cbnz	r0, 800d620 <_Balloc+0x20>
 800d616:	2166      	movs	r1, #102	; 0x66
 800d618:	4b17      	ldr	r3, [pc, #92]	; (800d678 <_Balloc+0x78>)
 800d61a:	4818      	ldr	r0, [pc, #96]	; (800d67c <_Balloc+0x7c>)
 800d61c:	f000 ff4a 	bl	800e4b4 <__assert_func>
 800d620:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d624:	6006      	str	r6, [r0, #0]
 800d626:	60c6      	str	r6, [r0, #12]
 800d628:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d62a:	68f3      	ldr	r3, [r6, #12]
 800d62c:	b183      	cbz	r3, 800d650 <_Balloc+0x50>
 800d62e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d630:	68db      	ldr	r3, [r3, #12]
 800d632:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d636:	b9b8      	cbnz	r0, 800d668 <_Balloc+0x68>
 800d638:	2101      	movs	r1, #1
 800d63a:	fa01 f605 	lsl.w	r6, r1, r5
 800d63e:	1d72      	adds	r2, r6, #5
 800d640:	4620      	mov	r0, r4
 800d642:	0092      	lsls	r2, r2, #2
 800d644:	f000 fb5e 	bl	800dd04 <_calloc_r>
 800d648:	b160      	cbz	r0, 800d664 <_Balloc+0x64>
 800d64a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d64e:	e00e      	b.n	800d66e <_Balloc+0x6e>
 800d650:	2221      	movs	r2, #33	; 0x21
 800d652:	2104      	movs	r1, #4
 800d654:	4620      	mov	r0, r4
 800d656:	f000 fb55 	bl	800dd04 <_calloc_r>
 800d65a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d65c:	60f0      	str	r0, [r6, #12]
 800d65e:	68db      	ldr	r3, [r3, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1e4      	bne.n	800d62e <_Balloc+0x2e>
 800d664:	2000      	movs	r0, #0
 800d666:	bd70      	pop	{r4, r5, r6, pc}
 800d668:	6802      	ldr	r2, [r0, #0]
 800d66a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d66e:	2300      	movs	r3, #0
 800d670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d674:	e7f7      	b.n	800d666 <_Balloc+0x66>
 800d676:	bf00      	nop
 800d678:	0800fb66 	.word	0x0800fb66
 800d67c:	0800fc50 	.word	0x0800fc50

0800d680 <_Bfree>:
 800d680:	b570      	push	{r4, r5, r6, lr}
 800d682:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d684:	4605      	mov	r5, r0
 800d686:	460c      	mov	r4, r1
 800d688:	b976      	cbnz	r6, 800d6a8 <_Bfree+0x28>
 800d68a:	2010      	movs	r0, #16
 800d68c:	f7fe f9c4 	bl	800ba18 <malloc>
 800d690:	4602      	mov	r2, r0
 800d692:	6268      	str	r0, [r5, #36]	; 0x24
 800d694:	b920      	cbnz	r0, 800d6a0 <_Bfree+0x20>
 800d696:	218a      	movs	r1, #138	; 0x8a
 800d698:	4b08      	ldr	r3, [pc, #32]	; (800d6bc <_Bfree+0x3c>)
 800d69a:	4809      	ldr	r0, [pc, #36]	; (800d6c0 <_Bfree+0x40>)
 800d69c:	f000 ff0a 	bl	800e4b4 <__assert_func>
 800d6a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d6a4:	6006      	str	r6, [r0, #0]
 800d6a6:	60c6      	str	r6, [r0, #12]
 800d6a8:	b13c      	cbz	r4, 800d6ba <_Bfree+0x3a>
 800d6aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d6ac:	6862      	ldr	r2, [r4, #4]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d6b4:	6021      	str	r1, [r4, #0]
 800d6b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d6ba:	bd70      	pop	{r4, r5, r6, pc}
 800d6bc:	0800fb66 	.word	0x0800fb66
 800d6c0:	0800fc50 	.word	0x0800fc50

0800d6c4 <__multadd>:
 800d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6c8:	4698      	mov	r8, r3
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	690e      	ldr	r6, [r1, #16]
 800d6d0:	4607      	mov	r7, r0
 800d6d2:	f101 0014 	add.w	r0, r1, #20
 800d6d6:	6805      	ldr	r5, [r0, #0]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	b2a9      	uxth	r1, r5
 800d6dc:	fb02 8101 	mla	r1, r2, r1, r8
 800d6e0:	0c2d      	lsrs	r5, r5, #16
 800d6e2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d6e6:	fb02 c505 	mla	r5, r2, r5, ip
 800d6ea:	b289      	uxth	r1, r1
 800d6ec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d6f0:	429e      	cmp	r6, r3
 800d6f2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d6f6:	f840 1b04 	str.w	r1, [r0], #4
 800d6fa:	dcec      	bgt.n	800d6d6 <__multadd+0x12>
 800d6fc:	f1b8 0f00 	cmp.w	r8, #0
 800d700:	d022      	beq.n	800d748 <__multadd+0x84>
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	42b3      	cmp	r3, r6
 800d706:	dc19      	bgt.n	800d73c <__multadd+0x78>
 800d708:	6861      	ldr	r1, [r4, #4]
 800d70a:	4638      	mov	r0, r7
 800d70c:	3101      	adds	r1, #1
 800d70e:	f7ff ff77 	bl	800d600 <_Balloc>
 800d712:	4605      	mov	r5, r0
 800d714:	b928      	cbnz	r0, 800d722 <__multadd+0x5e>
 800d716:	4602      	mov	r2, r0
 800d718:	21b5      	movs	r1, #181	; 0xb5
 800d71a:	4b0d      	ldr	r3, [pc, #52]	; (800d750 <__multadd+0x8c>)
 800d71c:	480d      	ldr	r0, [pc, #52]	; (800d754 <__multadd+0x90>)
 800d71e:	f000 fec9 	bl	800e4b4 <__assert_func>
 800d722:	6922      	ldr	r2, [r4, #16]
 800d724:	f104 010c 	add.w	r1, r4, #12
 800d728:	3202      	adds	r2, #2
 800d72a:	0092      	lsls	r2, r2, #2
 800d72c:	300c      	adds	r0, #12
 800d72e:	f7ff ff4c 	bl	800d5ca <memcpy>
 800d732:	4621      	mov	r1, r4
 800d734:	4638      	mov	r0, r7
 800d736:	f7ff ffa3 	bl	800d680 <_Bfree>
 800d73a:	462c      	mov	r4, r5
 800d73c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d740:	3601      	adds	r6, #1
 800d742:	f8c3 8014 	str.w	r8, [r3, #20]
 800d746:	6126      	str	r6, [r4, #16]
 800d748:	4620      	mov	r0, r4
 800d74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d74e:	bf00      	nop
 800d750:	0800fbdc 	.word	0x0800fbdc
 800d754:	0800fc50 	.word	0x0800fc50

0800d758 <__hi0bits>:
 800d758:	0c02      	lsrs	r2, r0, #16
 800d75a:	0412      	lsls	r2, r2, #16
 800d75c:	4603      	mov	r3, r0
 800d75e:	b9ca      	cbnz	r2, 800d794 <__hi0bits+0x3c>
 800d760:	0403      	lsls	r3, r0, #16
 800d762:	2010      	movs	r0, #16
 800d764:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d768:	bf04      	itt	eq
 800d76a:	021b      	lsleq	r3, r3, #8
 800d76c:	3008      	addeq	r0, #8
 800d76e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d772:	bf04      	itt	eq
 800d774:	011b      	lsleq	r3, r3, #4
 800d776:	3004      	addeq	r0, #4
 800d778:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d77c:	bf04      	itt	eq
 800d77e:	009b      	lsleq	r3, r3, #2
 800d780:	3002      	addeq	r0, #2
 800d782:	2b00      	cmp	r3, #0
 800d784:	db05      	blt.n	800d792 <__hi0bits+0x3a>
 800d786:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d78a:	f100 0001 	add.w	r0, r0, #1
 800d78e:	bf08      	it	eq
 800d790:	2020      	moveq	r0, #32
 800d792:	4770      	bx	lr
 800d794:	2000      	movs	r0, #0
 800d796:	e7e5      	b.n	800d764 <__hi0bits+0xc>

0800d798 <__lo0bits>:
 800d798:	6803      	ldr	r3, [r0, #0]
 800d79a:	4602      	mov	r2, r0
 800d79c:	f013 0007 	ands.w	r0, r3, #7
 800d7a0:	d00b      	beq.n	800d7ba <__lo0bits+0x22>
 800d7a2:	07d9      	lsls	r1, r3, #31
 800d7a4:	d422      	bmi.n	800d7ec <__lo0bits+0x54>
 800d7a6:	0798      	lsls	r0, r3, #30
 800d7a8:	bf49      	itett	mi
 800d7aa:	085b      	lsrmi	r3, r3, #1
 800d7ac:	089b      	lsrpl	r3, r3, #2
 800d7ae:	2001      	movmi	r0, #1
 800d7b0:	6013      	strmi	r3, [r2, #0]
 800d7b2:	bf5c      	itt	pl
 800d7b4:	2002      	movpl	r0, #2
 800d7b6:	6013      	strpl	r3, [r2, #0]
 800d7b8:	4770      	bx	lr
 800d7ba:	b299      	uxth	r1, r3
 800d7bc:	b909      	cbnz	r1, 800d7c2 <__lo0bits+0x2a>
 800d7be:	2010      	movs	r0, #16
 800d7c0:	0c1b      	lsrs	r3, r3, #16
 800d7c2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d7c6:	bf04      	itt	eq
 800d7c8:	0a1b      	lsreq	r3, r3, #8
 800d7ca:	3008      	addeq	r0, #8
 800d7cc:	0719      	lsls	r1, r3, #28
 800d7ce:	bf04      	itt	eq
 800d7d0:	091b      	lsreq	r3, r3, #4
 800d7d2:	3004      	addeq	r0, #4
 800d7d4:	0799      	lsls	r1, r3, #30
 800d7d6:	bf04      	itt	eq
 800d7d8:	089b      	lsreq	r3, r3, #2
 800d7da:	3002      	addeq	r0, #2
 800d7dc:	07d9      	lsls	r1, r3, #31
 800d7de:	d403      	bmi.n	800d7e8 <__lo0bits+0x50>
 800d7e0:	085b      	lsrs	r3, r3, #1
 800d7e2:	f100 0001 	add.w	r0, r0, #1
 800d7e6:	d003      	beq.n	800d7f0 <__lo0bits+0x58>
 800d7e8:	6013      	str	r3, [r2, #0]
 800d7ea:	4770      	bx	lr
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	4770      	bx	lr
 800d7f0:	2020      	movs	r0, #32
 800d7f2:	4770      	bx	lr

0800d7f4 <__i2b>:
 800d7f4:	b510      	push	{r4, lr}
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	2101      	movs	r1, #1
 800d7fa:	f7ff ff01 	bl	800d600 <_Balloc>
 800d7fe:	4602      	mov	r2, r0
 800d800:	b928      	cbnz	r0, 800d80e <__i2b+0x1a>
 800d802:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d806:	4b04      	ldr	r3, [pc, #16]	; (800d818 <__i2b+0x24>)
 800d808:	4804      	ldr	r0, [pc, #16]	; (800d81c <__i2b+0x28>)
 800d80a:	f000 fe53 	bl	800e4b4 <__assert_func>
 800d80e:	2301      	movs	r3, #1
 800d810:	6144      	str	r4, [r0, #20]
 800d812:	6103      	str	r3, [r0, #16]
 800d814:	bd10      	pop	{r4, pc}
 800d816:	bf00      	nop
 800d818:	0800fbdc 	.word	0x0800fbdc
 800d81c:	0800fc50 	.word	0x0800fc50

0800d820 <__multiply>:
 800d820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d824:	4614      	mov	r4, r2
 800d826:	690a      	ldr	r2, [r1, #16]
 800d828:	6923      	ldr	r3, [r4, #16]
 800d82a:	460d      	mov	r5, r1
 800d82c:	429a      	cmp	r2, r3
 800d82e:	bfbe      	ittt	lt
 800d830:	460b      	movlt	r3, r1
 800d832:	4625      	movlt	r5, r4
 800d834:	461c      	movlt	r4, r3
 800d836:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d83a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d83e:	68ab      	ldr	r3, [r5, #8]
 800d840:	6869      	ldr	r1, [r5, #4]
 800d842:	eb0a 0709 	add.w	r7, sl, r9
 800d846:	42bb      	cmp	r3, r7
 800d848:	b085      	sub	sp, #20
 800d84a:	bfb8      	it	lt
 800d84c:	3101      	addlt	r1, #1
 800d84e:	f7ff fed7 	bl	800d600 <_Balloc>
 800d852:	b930      	cbnz	r0, 800d862 <__multiply+0x42>
 800d854:	4602      	mov	r2, r0
 800d856:	f240 115d 	movw	r1, #349	; 0x15d
 800d85a:	4b41      	ldr	r3, [pc, #260]	; (800d960 <__multiply+0x140>)
 800d85c:	4841      	ldr	r0, [pc, #260]	; (800d964 <__multiply+0x144>)
 800d85e:	f000 fe29 	bl	800e4b4 <__assert_func>
 800d862:	f100 0614 	add.w	r6, r0, #20
 800d866:	4633      	mov	r3, r6
 800d868:	2200      	movs	r2, #0
 800d86a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d86e:	4543      	cmp	r3, r8
 800d870:	d31e      	bcc.n	800d8b0 <__multiply+0x90>
 800d872:	f105 0c14 	add.w	ip, r5, #20
 800d876:	f104 0314 	add.w	r3, r4, #20
 800d87a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d87e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d882:	9202      	str	r2, [sp, #8]
 800d884:	ebac 0205 	sub.w	r2, ip, r5
 800d888:	3a15      	subs	r2, #21
 800d88a:	f022 0203 	bic.w	r2, r2, #3
 800d88e:	3204      	adds	r2, #4
 800d890:	f105 0115 	add.w	r1, r5, #21
 800d894:	458c      	cmp	ip, r1
 800d896:	bf38      	it	cc
 800d898:	2204      	movcc	r2, #4
 800d89a:	9201      	str	r2, [sp, #4]
 800d89c:	9a02      	ldr	r2, [sp, #8]
 800d89e:	9303      	str	r3, [sp, #12]
 800d8a0:	429a      	cmp	r2, r3
 800d8a2:	d808      	bhi.n	800d8b6 <__multiply+0x96>
 800d8a4:	2f00      	cmp	r7, #0
 800d8a6:	dc55      	bgt.n	800d954 <__multiply+0x134>
 800d8a8:	6107      	str	r7, [r0, #16]
 800d8aa:	b005      	add	sp, #20
 800d8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b0:	f843 2b04 	str.w	r2, [r3], #4
 800d8b4:	e7db      	b.n	800d86e <__multiply+0x4e>
 800d8b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d8ba:	f1ba 0f00 	cmp.w	sl, #0
 800d8be:	d020      	beq.n	800d902 <__multiply+0xe2>
 800d8c0:	46b1      	mov	r9, r6
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f105 0e14 	add.w	lr, r5, #20
 800d8c8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d8cc:	f8d9 b000 	ldr.w	fp, [r9]
 800d8d0:	b2a1      	uxth	r1, r4
 800d8d2:	fa1f fb8b 	uxth.w	fp, fp
 800d8d6:	fb0a b101 	mla	r1, sl, r1, fp
 800d8da:	4411      	add	r1, r2
 800d8dc:	f8d9 2000 	ldr.w	r2, [r9]
 800d8e0:	0c24      	lsrs	r4, r4, #16
 800d8e2:	0c12      	lsrs	r2, r2, #16
 800d8e4:	fb0a 2404 	mla	r4, sl, r4, r2
 800d8e8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d8ec:	b289      	uxth	r1, r1
 800d8ee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d8f2:	45f4      	cmp	ip, lr
 800d8f4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d8f8:	f849 1b04 	str.w	r1, [r9], #4
 800d8fc:	d8e4      	bhi.n	800d8c8 <__multiply+0xa8>
 800d8fe:	9901      	ldr	r1, [sp, #4]
 800d900:	5072      	str	r2, [r6, r1]
 800d902:	9a03      	ldr	r2, [sp, #12]
 800d904:	3304      	adds	r3, #4
 800d906:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d90a:	f1b9 0f00 	cmp.w	r9, #0
 800d90e:	d01f      	beq.n	800d950 <__multiply+0x130>
 800d910:	46b6      	mov	lr, r6
 800d912:	f04f 0a00 	mov.w	sl, #0
 800d916:	6834      	ldr	r4, [r6, #0]
 800d918:	f105 0114 	add.w	r1, r5, #20
 800d91c:	880a      	ldrh	r2, [r1, #0]
 800d91e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d922:	b2a4      	uxth	r4, r4
 800d924:	fb09 b202 	mla	r2, r9, r2, fp
 800d928:	4492      	add	sl, r2
 800d92a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d92e:	f84e 4b04 	str.w	r4, [lr], #4
 800d932:	f851 4b04 	ldr.w	r4, [r1], #4
 800d936:	f8be 2000 	ldrh.w	r2, [lr]
 800d93a:	0c24      	lsrs	r4, r4, #16
 800d93c:	fb09 2404 	mla	r4, r9, r4, r2
 800d940:	458c      	cmp	ip, r1
 800d942:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d946:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d94a:	d8e7      	bhi.n	800d91c <__multiply+0xfc>
 800d94c:	9a01      	ldr	r2, [sp, #4]
 800d94e:	50b4      	str	r4, [r6, r2]
 800d950:	3604      	adds	r6, #4
 800d952:	e7a3      	b.n	800d89c <__multiply+0x7c>
 800d954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1a5      	bne.n	800d8a8 <__multiply+0x88>
 800d95c:	3f01      	subs	r7, #1
 800d95e:	e7a1      	b.n	800d8a4 <__multiply+0x84>
 800d960:	0800fbdc 	.word	0x0800fbdc
 800d964:	0800fc50 	.word	0x0800fc50

0800d968 <__pow5mult>:
 800d968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d96c:	4615      	mov	r5, r2
 800d96e:	f012 0203 	ands.w	r2, r2, #3
 800d972:	4606      	mov	r6, r0
 800d974:	460f      	mov	r7, r1
 800d976:	d007      	beq.n	800d988 <__pow5mult+0x20>
 800d978:	4c25      	ldr	r4, [pc, #148]	; (800da10 <__pow5mult+0xa8>)
 800d97a:	3a01      	subs	r2, #1
 800d97c:	2300      	movs	r3, #0
 800d97e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d982:	f7ff fe9f 	bl	800d6c4 <__multadd>
 800d986:	4607      	mov	r7, r0
 800d988:	10ad      	asrs	r5, r5, #2
 800d98a:	d03d      	beq.n	800da08 <__pow5mult+0xa0>
 800d98c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d98e:	b97c      	cbnz	r4, 800d9b0 <__pow5mult+0x48>
 800d990:	2010      	movs	r0, #16
 800d992:	f7fe f841 	bl	800ba18 <malloc>
 800d996:	4602      	mov	r2, r0
 800d998:	6270      	str	r0, [r6, #36]	; 0x24
 800d99a:	b928      	cbnz	r0, 800d9a8 <__pow5mult+0x40>
 800d99c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d9a0:	4b1c      	ldr	r3, [pc, #112]	; (800da14 <__pow5mult+0xac>)
 800d9a2:	481d      	ldr	r0, [pc, #116]	; (800da18 <__pow5mult+0xb0>)
 800d9a4:	f000 fd86 	bl	800e4b4 <__assert_func>
 800d9a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d9ac:	6004      	str	r4, [r0, #0]
 800d9ae:	60c4      	str	r4, [r0, #12]
 800d9b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d9b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d9b8:	b94c      	cbnz	r4, 800d9ce <__pow5mult+0x66>
 800d9ba:	f240 2171 	movw	r1, #625	; 0x271
 800d9be:	4630      	mov	r0, r6
 800d9c0:	f7ff ff18 	bl	800d7f4 <__i2b>
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	4604      	mov	r4, r0
 800d9c8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d9cc:	6003      	str	r3, [r0, #0]
 800d9ce:	f04f 0900 	mov.w	r9, #0
 800d9d2:	07eb      	lsls	r3, r5, #31
 800d9d4:	d50a      	bpl.n	800d9ec <__pow5mult+0x84>
 800d9d6:	4639      	mov	r1, r7
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f7ff ff20 	bl	800d820 <__multiply>
 800d9e0:	4680      	mov	r8, r0
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f7ff fe4b 	bl	800d680 <_Bfree>
 800d9ea:	4647      	mov	r7, r8
 800d9ec:	106d      	asrs	r5, r5, #1
 800d9ee:	d00b      	beq.n	800da08 <__pow5mult+0xa0>
 800d9f0:	6820      	ldr	r0, [r4, #0]
 800d9f2:	b938      	cbnz	r0, 800da04 <__pow5mult+0x9c>
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	4621      	mov	r1, r4
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f7ff ff11 	bl	800d820 <__multiply>
 800d9fe:	6020      	str	r0, [r4, #0]
 800da00:	f8c0 9000 	str.w	r9, [r0]
 800da04:	4604      	mov	r4, r0
 800da06:	e7e4      	b.n	800d9d2 <__pow5mult+0x6a>
 800da08:	4638      	mov	r0, r7
 800da0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da0e:	bf00      	nop
 800da10:	0800fda0 	.word	0x0800fda0
 800da14:	0800fb66 	.word	0x0800fb66
 800da18:	0800fc50 	.word	0x0800fc50

0800da1c <__lshift>:
 800da1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	460c      	mov	r4, r1
 800da22:	4607      	mov	r7, r0
 800da24:	4691      	mov	r9, r2
 800da26:	6923      	ldr	r3, [r4, #16]
 800da28:	6849      	ldr	r1, [r1, #4]
 800da2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da2e:	68a3      	ldr	r3, [r4, #8]
 800da30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800da34:	f108 0601 	add.w	r6, r8, #1
 800da38:	42b3      	cmp	r3, r6
 800da3a:	db0b      	blt.n	800da54 <__lshift+0x38>
 800da3c:	4638      	mov	r0, r7
 800da3e:	f7ff fddf 	bl	800d600 <_Balloc>
 800da42:	4605      	mov	r5, r0
 800da44:	b948      	cbnz	r0, 800da5a <__lshift+0x3e>
 800da46:	4602      	mov	r2, r0
 800da48:	f240 11d9 	movw	r1, #473	; 0x1d9
 800da4c:	4b27      	ldr	r3, [pc, #156]	; (800daec <__lshift+0xd0>)
 800da4e:	4828      	ldr	r0, [pc, #160]	; (800daf0 <__lshift+0xd4>)
 800da50:	f000 fd30 	bl	800e4b4 <__assert_func>
 800da54:	3101      	adds	r1, #1
 800da56:	005b      	lsls	r3, r3, #1
 800da58:	e7ee      	b.n	800da38 <__lshift+0x1c>
 800da5a:	2300      	movs	r3, #0
 800da5c:	f100 0114 	add.w	r1, r0, #20
 800da60:	f100 0210 	add.w	r2, r0, #16
 800da64:	4618      	mov	r0, r3
 800da66:	4553      	cmp	r3, sl
 800da68:	db33      	blt.n	800dad2 <__lshift+0xb6>
 800da6a:	6920      	ldr	r0, [r4, #16]
 800da6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da70:	f104 0314 	add.w	r3, r4, #20
 800da74:	f019 091f 	ands.w	r9, r9, #31
 800da78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da80:	d02b      	beq.n	800dada <__lshift+0xbe>
 800da82:	468a      	mov	sl, r1
 800da84:	2200      	movs	r2, #0
 800da86:	f1c9 0e20 	rsb	lr, r9, #32
 800da8a:	6818      	ldr	r0, [r3, #0]
 800da8c:	fa00 f009 	lsl.w	r0, r0, r9
 800da90:	4302      	orrs	r2, r0
 800da92:	f84a 2b04 	str.w	r2, [sl], #4
 800da96:	f853 2b04 	ldr.w	r2, [r3], #4
 800da9a:	459c      	cmp	ip, r3
 800da9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800daa0:	d8f3      	bhi.n	800da8a <__lshift+0x6e>
 800daa2:	ebac 0304 	sub.w	r3, ip, r4
 800daa6:	3b15      	subs	r3, #21
 800daa8:	f023 0303 	bic.w	r3, r3, #3
 800daac:	3304      	adds	r3, #4
 800daae:	f104 0015 	add.w	r0, r4, #21
 800dab2:	4584      	cmp	ip, r0
 800dab4:	bf38      	it	cc
 800dab6:	2304      	movcc	r3, #4
 800dab8:	50ca      	str	r2, [r1, r3]
 800daba:	b10a      	cbz	r2, 800dac0 <__lshift+0xa4>
 800dabc:	f108 0602 	add.w	r6, r8, #2
 800dac0:	3e01      	subs	r6, #1
 800dac2:	4638      	mov	r0, r7
 800dac4:	4621      	mov	r1, r4
 800dac6:	612e      	str	r6, [r5, #16]
 800dac8:	f7ff fdda 	bl	800d680 <_Bfree>
 800dacc:	4628      	mov	r0, r5
 800dace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dad6:	3301      	adds	r3, #1
 800dad8:	e7c5      	b.n	800da66 <__lshift+0x4a>
 800dada:	3904      	subs	r1, #4
 800dadc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dae0:	459c      	cmp	ip, r3
 800dae2:	f841 2f04 	str.w	r2, [r1, #4]!
 800dae6:	d8f9      	bhi.n	800dadc <__lshift+0xc0>
 800dae8:	e7ea      	b.n	800dac0 <__lshift+0xa4>
 800daea:	bf00      	nop
 800daec:	0800fbdc 	.word	0x0800fbdc
 800daf0:	0800fc50 	.word	0x0800fc50

0800daf4 <__mcmp>:
 800daf4:	4603      	mov	r3, r0
 800daf6:	690a      	ldr	r2, [r1, #16]
 800daf8:	6900      	ldr	r0, [r0, #16]
 800dafa:	b530      	push	{r4, r5, lr}
 800dafc:	1a80      	subs	r0, r0, r2
 800dafe:	d10d      	bne.n	800db1c <__mcmp+0x28>
 800db00:	3314      	adds	r3, #20
 800db02:	3114      	adds	r1, #20
 800db04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800db08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800db0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800db10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800db14:	4295      	cmp	r5, r2
 800db16:	d002      	beq.n	800db1e <__mcmp+0x2a>
 800db18:	d304      	bcc.n	800db24 <__mcmp+0x30>
 800db1a:	2001      	movs	r0, #1
 800db1c:	bd30      	pop	{r4, r5, pc}
 800db1e:	42a3      	cmp	r3, r4
 800db20:	d3f4      	bcc.n	800db0c <__mcmp+0x18>
 800db22:	e7fb      	b.n	800db1c <__mcmp+0x28>
 800db24:	f04f 30ff 	mov.w	r0, #4294967295
 800db28:	e7f8      	b.n	800db1c <__mcmp+0x28>
	...

0800db2c <__mdiff>:
 800db2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db30:	460c      	mov	r4, r1
 800db32:	4606      	mov	r6, r0
 800db34:	4611      	mov	r1, r2
 800db36:	4620      	mov	r0, r4
 800db38:	4692      	mov	sl, r2
 800db3a:	f7ff ffdb 	bl	800daf4 <__mcmp>
 800db3e:	1e05      	subs	r5, r0, #0
 800db40:	d111      	bne.n	800db66 <__mdiff+0x3a>
 800db42:	4629      	mov	r1, r5
 800db44:	4630      	mov	r0, r6
 800db46:	f7ff fd5b 	bl	800d600 <_Balloc>
 800db4a:	4602      	mov	r2, r0
 800db4c:	b928      	cbnz	r0, 800db5a <__mdiff+0x2e>
 800db4e:	f240 2132 	movw	r1, #562	; 0x232
 800db52:	4b3c      	ldr	r3, [pc, #240]	; (800dc44 <__mdiff+0x118>)
 800db54:	483c      	ldr	r0, [pc, #240]	; (800dc48 <__mdiff+0x11c>)
 800db56:	f000 fcad 	bl	800e4b4 <__assert_func>
 800db5a:	2301      	movs	r3, #1
 800db5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db60:	4610      	mov	r0, r2
 800db62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db66:	bfa4      	itt	ge
 800db68:	4653      	movge	r3, sl
 800db6a:	46a2      	movge	sl, r4
 800db6c:	4630      	mov	r0, r6
 800db6e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800db72:	bfa6      	itte	ge
 800db74:	461c      	movge	r4, r3
 800db76:	2500      	movge	r5, #0
 800db78:	2501      	movlt	r5, #1
 800db7a:	f7ff fd41 	bl	800d600 <_Balloc>
 800db7e:	4602      	mov	r2, r0
 800db80:	b918      	cbnz	r0, 800db8a <__mdiff+0x5e>
 800db82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800db86:	4b2f      	ldr	r3, [pc, #188]	; (800dc44 <__mdiff+0x118>)
 800db88:	e7e4      	b.n	800db54 <__mdiff+0x28>
 800db8a:	f100 0814 	add.w	r8, r0, #20
 800db8e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800db92:	60c5      	str	r5, [r0, #12]
 800db94:	f04f 0c00 	mov.w	ip, #0
 800db98:	f10a 0514 	add.w	r5, sl, #20
 800db9c:	f10a 0010 	add.w	r0, sl, #16
 800dba0:	46c2      	mov	sl, r8
 800dba2:	6926      	ldr	r6, [r4, #16]
 800dba4:	f104 0914 	add.w	r9, r4, #20
 800dba8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800dbac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dbb0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800dbb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dbb8:	fa1f f18b 	uxth.w	r1, fp
 800dbbc:	4461      	add	r1, ip
 800dbbe:	fa1f fc83 	uxth.w	ip, r3
 800dbc2:	0c1b      	lsrs	r3, r3, #16
 800dbc4:	eba1 010c 	sub.w	r1, r1, ip
 800dbc8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dbcc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800dbd0:	b289      	uxth	r1, r1
 800dbd2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800dbd6:	454e      	cmp	r6, r9
 800dbd8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800dbdc:	f84a 3b04 	str.w	r3, [sl], #4
 800dbe0:	d8e6      	bhi.n	800dbb0 <__mdiff+0x84>
 800dbe2:	1b33      	subs	r3, r6, r4
 800dbe4:	3b15      	subs	r3, #21
 800dbe6:	f023 0303 	bic.w	r3, r3, #3
 800dbea:	3415      	adds	r4, #21
 800dbec:	3304      	adds	r3, #4
 800dbee:	42a6      	cmp	r6, r4
 800dbf0:	bf38      	it	cc
 800dbf2:	2304      	movcc	r3, #4
 800dbf4:	441d      	add	r5, r3
 800dbf6:	4443      	add	r3, r8
 800dbf8:	461e      	mov	r6, r3
 800dbfa:	462c      	mov	r4, r5
 800dbfc:	4574      	cmp	r4, lr
 800dbfe:	d30e      	bcc.n	800dc1e <__mdiff+0xf2>
 800dc00:	f10e 0103 	add.w	r1, lr, #3
 800dc04:	1b49      	subs	r1, r1, r5
 800dc06:	f021 0103 	bic.w	r1, r1, #3
 800dc0a:	3d03      	subs	r5, #3
 800dc0c:	45ae      	cmp	lr, r5
 800dc0e:	bf38      	it	cc
 800dc10:	2100      	movcc	r1, #0
 800dc12:	4419      	add	r1, r3
 800dc14:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800dc18:	b18b      	cbz	r3, 800dc3e <__mdiff+0x112>
 800dc1a:	6117      	str	r7, [r2, #16]
 800dc1c:	e7a0      	b.n	800db60 <__mdiff+0x34>
 800dc1e:	f854 8b04 	ldr.w	r8, [r4], #4
 800dc22:	fa1f f188 	uxth.w	r1, r8
 800dc26:	4461      	add	r1, ip
 800dc28:	1408      	asrs	r0, r1, #16
 800dc2a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800dc2e:	b289      	uxth	r1, r1
 800dc30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dc34:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dc38:	f846 1b04 	str.w	r1, [r6], #4
 800dc3c:	e7de      	b.n	800dbfc <__mdiff+0xd0>
 800dc3e:	3f01      	subs	r7, #1
 800dc40:	e7e8      	b.n	800dc14 <__mdiff+0xe8>
 800dc42:	bf00      	nop
 800dc44:	0800fbdc 	.word	0x0800fbdc
 800dc48:	0800fc50 	.word	0x0800fc50

0800dc4c <__d2b>:
 800dc4c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dc50:	2101      	movs	r1, #1
 800dc52:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800dc56:	4690      	mov	r8, r2
 800dc58:	461d      	mov	r5, r3
 800dc5a:	f7ff fcd1 	bl	800d600 <_Balloc>
 800dc5e:	4604      	mov	r4, r0
 800dc60:	b930      	cbnz	r0, 800dc70 <__d2b+0x24>
 800dc62:	4602      	mov	r2, r0
 800dc64:	f240 310a 	movw	r1, #778	; 0x30a
 800dc68:	4b24      	ldr	r3, [pc, #144]	; (800dcfc <__d2b+0xb0>)
 800dc6a:	4825      	ldr	r0, [pc, #148]	; (800dd00 <__d2b+0xb4>)
 800dc6c:	f000 fc22 	bl	800e4b4 <__assert_func>
 800dc70:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800dc74:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800dc78:	bb2d      	cbnz	r5, 800dcc6 <__d2b+0x7a>
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	f1b8 0300 	subs.w	r3, r8, #0
 800dc80:	d026      	beq.n	800dcd0 <__d2b+0x84>
 800dc82:	4668      	mov	r0, sp
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	f7ff fd87 	bl	800d798 <__lo0bits>
 800dc8a:	9900      	ldr	r1, [sp, #0]
 800dc8c:	b1f0      	cbz	r0, 800dccc <__d2b+0x80>
 800dc8e:	9a01      	ldr	r2, [sp, #4]
 800dc90:	f1c0 0320 	rsb	r3, r0, #32
 800dc94:	fa02 f303 	lsl.w	r3, r2, r3
 800dc98:	430b      	orrs	r3, r1
 800dc9a:	40c2      	lsrs	r2, r0
 800dc9c:	6163      	str	r3, [r4, #20]
 800dc9e:	9201      	str	r2, [sp, #4]
 800dca0:	9b01      	ldr	r3, [sp, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	bf14      	ite	ne
 800dca6:	2102      	movne	r1, #2
 800dca8:	2101      	moveq	r1, #1
 800dcaa:	61a3      	str	r3, [r4, #24]
 800dcac:	6121      	str	r1, [r4, #16]
 800dcae:	b1c5      	cbz	r5, 800dce2 <__d2b+0x96>
 800dcb0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dcb4:	4405      	add	r5, r0
 800dcb6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dcba:	603d      	str	r5, [r7, #0]
 800dcbc:	6030      	str	r0, [r6, #0]
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	b002      	add	sp, #8
 800dcc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dcca:	e7d6      	b.n	800dc7a <__d2b+0x2e>
 800dccc:	6161      	str	r1, [r4, #20]
 800dcce:	e7e7      	b.n	800dca0 <__d2b+0x54>
 800dcd0:	a801      	add	r0, sp, #4
 800dcd2:	f7ff fd61 	bl	800d798 <__lo0bits>
 800dcd6:	2101      	movs	r1, #1
 800dcd8:	9b01      	ldr	r3, [sp, #4]
 800dcda:	6121      	str	r1, [r4, #16]
 800dcdc:	6163      	str	r3, [r4, #20]
 800dcde:	3020      	adds	r0, #32
 800dce0:	e7e5      	b.n	800dcae <__d2b+0x62>
 800dce2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800dce6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dcea:	6038      	str	r0, [r7, #0]
 800dcec:	6918      	ldr	r0, [r3, #16]
 800dcee:	f7ff fd33 	bl	800d758 <__hi0bits>
 800dcf2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800dcf6:	6031      	str	r1, [r6, #0]
 800dcf8:	e7e1      	b.n	800dcbe <__d2b+0x72>
 800dcfa:	bf00      	nop
 800dcfc:	0800fbdc 	.word	0x0800fbdc
 800dd00:	0800fc50 	.word	0x0800fc50

0800dd04 <_calloc_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	fb02 f501 	mul.w	r5, r2, r1
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7fd fee8 	bl	800bae0 <_malloc_r>
 800dd10:	4604      	mov	r4, r0
 800dd12:	b118      	cbz	r0, 800dd1c <_calloc_r+0x18>
 800dd14:	462a      	mov	r2, r5
 800dd16:	2100      	movs	r1, #0
 800dd18:	f7fd fe8e 	bl	800ba38 <memset>
 800dd1c:	4620      	mov	r0, r4
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}

0800dd20 <__ssputs_r>:
 800dd20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd24:	688e      	ldr	r6, [r1, #8]
 800dd26:	4682      	mov	sl, r0
 800dd28:	429e      	cmp	r6, r3
 800dd2a:	460c      	mov	r4, r1
 800dd2c:	4690      	mov	r8, r2
 800dd2e:	461f      	mov	r7, r3
 800dd30:	d838      	bhi.n	800dda4 <__ssputs_r+0x84>
 800dd32:	898a      	ldrh	r2, [r1, #12]
 800dd34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd38:	d032      	beq.n	800dda0 <__ssputs_r+0x80>
 800dd3a:	6825      	ldr	r5, [r4, #0]
 800dd3c:	6909      	ldr	r1, [r1, #16]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	eba5 0901 	sub.w	r9, r5, r1
 800dd44:	6965      	ldr	r5, [r4, #20]
 800dd46:	444b      	add	r3, r9
 800dd48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd50:	106d      	asrs	r5, r5, #1
 800dd52:	429d      	cmp	r5, r3
 800dd54:	bf38      	it	cc
 800dd56:	461d      	movcc	r5, r3
 800dd58:	0553      	lsls	r3, r2, #21
 800dd5a:	d531      	bpl.n	800ddc0 <__ssputs_r+0xa0>
 800dd5c:	4629      	mov	r1, r5
 800dd5e:	f7fd febf 	bl	800bae0 <_malloc_r>
 800dd62:	4606      	mov	r6, r0
 800dd64:	b950      	cbnz	r0, 800dd7c <__ssputs_r+0x5c>
 800dd66:	230c      	movs	r3, #12
 800dd68:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6c:	f8ca 3000 	str.w	r3, [sl]
 800dd70:	89a3      	ldrh	r3, [r4, #12]
 800dd72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd7c:	464a      	mov	r2, r9
 800dd7e:	6921      	ldr	r1, [r4, #16]
 800dd80:	f7ff fc23 	bl	800d5ca <memcpy>
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd8e:	81a3      	strh	r3, [r4, #12]
 800dd90:	6126      	str	r6, [r4, #16]
 800dd92:	444e      	add	r6, r9
 800dd94:	6026      	str	r6, [r4, #0]
 800dd96:	463e      	mov	r6, r7
 800dd98:	6165      	str	r5, [r4, #20]
 800dd9a:	eba5 0509 	sub.w	r5, r5, r9
 800dd9e:	60a5      	str	r5, [r4, #8]
 800dda0:	42be      	cmp	r6, r7
 800dda2:	d900      	bls.n	800dda6 <__ssputs_r+0x86>
 800dda4:	463e      	mov	r6, r7
 800dda6:	4632      	mov	r2, r6
 800dda8:	4641      	mov	r1, r8
 800ddaa:	6820      	ldr	r0, [r4, #0]
 800ddac:	f000 fd0c 	bl	800e7c8 <memmove>
 800ddb0:	68a3      	ldr	r3, [r4, #8]
 800ddb2:	6822      	ldr	r2, [r4, #0]
 800ddb4:	1b9b      	subs	r3, r3, r6
 800ddb6:	4432      	add	r2, r6
 800ddb8:	2000      	movs	r0, #0
 800ddba:	60a3      	str	r3, [r4, #8]
 800ddbc:	6022      	str	r2, [r4, #0]
 800ddbe:	e7db      	b.n	800dd78 <__ssputs_r+0x58>
 800ddc0:	462a      	mov	r2, r5
 800ddc2:	f000 fd1b 	bl	800e7fc <_realloc_r>
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	2800      	cmp	r0, #0
 800ddca:	d1e1      	bne.n	800dd90 <__ssputs_r+0x70>
 800ddcc:	4650      	mov	r0, sl
 800ddce:	6921      	ldr	r1, [r4, #16]
 800ddd0:	f7fd fe3a 	bl	800ba48 <_free_r>
 800ddd4:	e7c7      	b.n	800dd66 <__ssputs_r+0x46>
	...

0800ddd8 <_svfiprintf_r>:
 800ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dddc:	4698      	mov	r8, r3
 800ddde:	898b      	ldrh	r3, [r1, #12]
 800dde0:	4607      	mov	r7, r0
 800dde2:	061b      	lsls	r3, r3, #24
 800dde4:	460d      	mov	r5, r1
 800dde6:	4614      	mov	r4, r2
 800dde8:	b09d      	sub	sp, #116	; 0x74
 800ddea:	d50e      	bpl.n	800de0a <_svfiprintf_r+0x32>
 800ddec:	690b      	ldr	r3, [r1, #16]
 800ddee:	b963      	cbnz	r3, 800de0a <_svfiprintf_r+0x32>
 800ddf0:	2140      	movs	r1, #64	; 0x40
 800ddf2:	f7fd fe75 	bl	800bae0 <_malloc_r>
 800ddf6:	6028      	str	r0, [r5, #0]
 800ddf8:	6128      	str	r0, [r5, #16]
 800ddfa:	b920      	cbnz	r0, 800de06 <_svfiprintf_r+0x2e>
 800ddfc:	230c      	movs	r3, #12
 800ddfe:	603b      	str	r3, [r7, #0]
 800de00:	f04f 30ff 	mov.w	r0, #4294967295
 800de04:	e0d1      	b.n	800dfaa <_svfiprintf_r+0x1d2>
 800de06:	2340      	movs	r3, #64	; 0x40
 800de08:	616b      	str	r3, [r5, #20]
 800de0a:	2300      	movs	r3, #0
 800de0c:	9309      	str	r3, [sp, #36]	; 0x24
 800de0e:	2320      	movs	r3, #32
 800de10:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de14:	2330      	movs	r3, #48	; 0x30
 800de16:	f04f 0901 	mov.w	r9, #1
 800de1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800de1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dfc4 <_svfiprintf_r+0x1ec>
 800de22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de26:	4623      	mov	r3, r4
 800de28:	469a      	mov	sl, r3
 800de2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de2e:	b10a      	cbz	r2, 800de34 <_svfiprintf_r+0x5c>
 800de30:	2a25      	cmp	r2, #37	; 0x25
 800de32:	d1f9      	bne.n	800de28 <_svfiprintf_r+0x50>
 800de34:	ebba 0b04 	subs.w	fp, sl, r4
 800de38:	d00b      	beq.n	800de52 <_svfiprintf_r+0x7a>
 800de3a:	465b      	mov	r3, fp
 800de3c:	4622      	mov	r2, r4
 800de3e:	4629      	mov	r1, r5
 800de40:	4638      	mov	r0, r7
 800de42:	f7ff ff6d 	bl	800dd20 <__ssputs_r>
 800de46:	3001      	adds	r0, #1
 800de48:	f000 80aa 	beq.w	800dfa0 <_svfiprintf_r+0x1c8>
 800de4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de4e:	445a      	add	r2, fp
 800de50:	9209      	str	r2, [sp, #36]	; 0x24
 800de52:	f89a 3000 	ldrb.w	r3, [sl]
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 80a2 	beq.w	800dfa0 <_svfiprintf_r+0x1c8>
 800de5c:	2300      	movs	r3, #0
 800de5e:	f04f 32ff 	mov.w	r2, #4294967295
 800de62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de66:	f10a 0a01 	add.w	sl, sl, #1
 800de6a:	9304      	str	r3, [sp, #16]
 800de6c:	9307      	str	r3, [sp, #28]
 800de6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de72:	931a      	str	r3, [sp, #104]	; 0x68
 800de74:	4654      	mov	r4, sl
 800de76:	2205      	movs	r2, #5
 800de78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de7c:	4851      	ldr	r0, [pc, #324]	; (800dfc4 <_svfiprintf_r+0x1ec>)
 800de7e:	f7ff fb96 	bl	800d5ae <memchr>
 800de82:	9a04      	ldr	r2, [sp, #16]
 800de84:	b9d8      	cbnz	r0, 800debe <_svfiprintf_r+0xe6>
 800de86:	06d0      	lsls	r0, r2, #27
 800de88:	bf44      	itt	mi
 800de8a:	2320      	movmi	r3, #32
 800de8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de90:	0711      	lsls	r1, r2, #28
 800de92:	bf44      	itt	mi
 800de94:	232b      	movmi	r3, #43	; 0x2b
 800de96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de9a:	f89a 3000 	ldrb.w	r3, [sl]
 800de9e:	2b2a      	cmp	r3, #42	; 0x2a
 800dea0:	d015      	beq.n	800dece <_svfiprintf_r+0xf6>
 800dea2:	4654      	mov	r4, sl
 800dea4:	2000      	movs	r0, #0
 800dea6:	f04f 0c0a 	mov.w	ip, #10
 800deaa:	9a07      	ldr	r2, [sp, #28]
 800deac:	4621      	mov	r1, r4
 800deae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800deb2:	3b30      	subs	r3, #48	; 0x30
 800deb4:	2b09      	cmp	r3, #9
 800deb6:	d94e      	bls.n	800df56 <_svfiprintf_r+0x17e>
 800deb8:	b1b0      	cbz	r0, 800dee8 <_svfiprintf_r+0x110>
 800deba:	9207      	str	r2, [sp, #28]
 800debc:	e014      	b.n	800dee8 <_svfiprintf_r+0x110>
 800debe:	eba0 0308 	sub.w	r3, r0, r8
 800dec2:	fa09 f303 	lsl.w	r3, r9, r3
 800dec6:	4313      	orrs	r3, r2
 800dec8:	46a2      	mov	sl, r4
 800deca:	9304      	str	r3, [sp, #16]
 800decc:	e7d2      	b.n	800de74 <_svfiprintf_r+0x9c>
 800dece:	9b03      	ldr	r3, [sp, #12]
 800ded0:	1d19      	adds	r1, r3, #4
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	9103      	str	r1, [sp, #12]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	bfbb      	ittet	lt
 800deda:	425b      	neglt	r3, r3
 800dedc:	f042 0202 	orrlt.w	r2, r2, #2
 800dee0:	9307      	strge	r3, [sp, #28]
 800dee2:	9307      	strlt	r3, [sp, #28]
 800dee4:	bfb8      	it	lt
 800dee6:	9204      	strlt	r2, [sp, #16]
 800dee8:	7823      	ldrb	r3, [r4, #0]
 800deea:	2b2e      	cmp	r3, #46	; 0x2e
 800deec:	d10c      	bne.n	800df08 <_svfiprintf_r+0x130>
 800deee:	7863      	ldrb	r3, [r4, #1]
 800def0:	2b2a      	cmp	r3, #42	; 0x2a
 800def2:	d135      	bne.n	800df60 <_svfiprintf_r+0x188>
 800def4:	9b03      	ldr	r3, [sp, #12]
 800def6:	3402      	adds	r4, #2
 800def8:	1d1a      	adds	r2, r3, #4
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	9203      	str	r2, [sp, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	bfb8      	it	lt
 800df02:	f04f 33ff 	movlt.w	r3, #4294967295
 800df06:	9305      	str	r3, [sp, #20]
 800df08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dfd4 <_svfiprintf_r+0x1fc>
 800df0c:	2203      	movs	r2, #3
 800df0e:	4650      	mov	r0, sl
 800df10:	7821      	ldrb	r1, [r4, #0]
 800df12:	f7ff fb4c 	bl	800d5ae <memchr>
 800df16:	b140      	cbz	r0, 800df2a <_svfiprintf_r+0x152>
 800df18:	2340      	movs	r3, #64	; 0x40
 800df1a:	eba0 000a 	sub.w	r0, r0, sl
 800df1e:	fa03 f000 	lsl.w	r0, r3, r0
 800df22:	9b04      	ldr	r3, [sp, #16]
 800df24:	3401      	adds	r4, #1
 800df26:	4303      	orrs	r3, r0
 800df28:	9304      	str	r3, [sp, #16]
 800df2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df2e:	2206      	movs	r2, #6
 800df30:	4825      	ldr	r0, [pc, #148]	; (800dfc8 <_svfiprintf_r+0x1f0>)
 800df32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df36:	f7ff fb3a 	bl	800d5ae <memchr>
 800df3a:	2800      	cmp	r0, #0
 800df3c:	d038      	beq.n	800dfb0 <_svfiprintf_r+0x1d8>
 800df3e:	4b23      	ldr	r3, [pc, #140]	; (800dfcc <_svfiprintf_r+0x1f4>)
 800df40:	bb1b      	cbnz	r3, 800df8a <_svfiprintf_r+0x1b2>
 800df42:	9b03      	ldr	r3, [sp, #12]
 800df44:	3307      	adds	r3, #7
 800df46:	f023 0307 	bic.w	r3, r3, #7
 800df4a:	3308      	adds	r3, #8
 800df4c:	9303      	str	r3, [sp, #12]
 800df4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df50:	4433      	add	r3, r6
 800df52:	9309      	str	r3, [sp, #36]	; 0x24
 800df54:	e767      	b.n	800de26 <_svfiprintf_r+0x4e>
 800df56:	460c      	mov	r4, r1
 800df58:	2001      	movs	r0, #1
 800df5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800df5e:	e7a5      	b.n	800deac <_svfiprintf_r+0xd4>
 800df60:	2300      	movs	r3, #0
 800df62:	f04f 0c0a 	mov.w	ip, #10
 800df66:	4619      	mov	r1, r3
 800df68:	3401      	adds	r4, #1
 800df6a:	9305      	str	r3, [sp, #20]
 800df6c:	4620      	mov	r0, r4
 800df6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df72:	3a30      	subs	r2, #48	; 0x30
 800df74:	2a09      	cmp	r2, #9
 800df76:	d903      	bls.n	800df80 <_svfiprintf_r+0x1a8>
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d0c5      	beq.n	800df08 <_svfiprintf_r+0x130>
 800df7c:	9105      	str	r1, [sp, #20]
 800df7e:	e7c3      	b.n	800df08 <_svfiprintf_r+0x130>
 800df80:	4604      	mov	r4, r0
 800df82:	2301      	movs	r3, #1
 800df84:	fb0c 2101 	mla	r1, ip, r1, r2
 800df88:	e7f0      	b.n	800df6c <_svfiprintf_r+0x194>
 800df8a:	ab03      	add	r3, sp, #12
 800df8c:	9300      	str	r3, [sp, #0]
 800df8e:	462a      	mov	r2, r5
 800df90:	4638      	mov	r0, r7
 800df92:	4b0f      	ldr	r3, [pc, #60]	; (800dfd0 <_svfiprintf_r+0x1f8>)
 800df94:	a904      	add	r1, sp, #16
 800df96:	f7fd fe9b 	bl	800bcd0 <_printf_float>
 800df9a:	1c42      	adds	r2, r0, #1
 800df9c:	4606      	mov	r6, r0
 800df9e:	d1d6      	bne.n	800df4e <_svfiprintf_r+0x176>
 800dfa0:	89ab      	ldrh	r3, [r5, #12]
 800dfa2:	065b      	lsls	r3, r3, #25
 800dfa4:	f53f af2c 	bmi.w	800de00 <_svfiprintf_r+0x28>
 800dfa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dfaa:	b01d      	add	sp, #116	; 0x74
 800dfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfb0:	ab03      	add	r3, sp, #12
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	462a      	mov	r2, r5
 800dfb6:	4638      	mov	r0, r7
 800dfb8:	4b05      	ldr	r3, [pc, #20]	; (800dfd0 <_svfiprintf_r+0x1f8>)
 800dfba:	a904      	add	r1, sp, #16
 800dfbc:	f7fe f924 	bl	800c208 <_printf_i>
 800dfc0:	e7eb      	b.n	800df9a <_svfiprintf_r+0x1c2>
 800dfc2:	bf00      	nop
 800dfc4:	0800fdac 	.word	0x0800fdac
 800dfc8:	0800fdb6 	.word	0x0800fdb6
 800dfcc:	0800bcd1 	.word	0x0800bcd1
 800dfd0:	0800dd21 	.word	0x0800dd21
 800dfd4:	0800fdb2 	.word	0x0800fdb2

0800dfd8 <__sfputc_r>:
 800dfd8:	6893      	ldr	r3, [r2, #8]
 800dfda:	b410      	push	{r4}
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	6093      	str	r3, [r2, #8]
 800dfe2:	da07      	bge.n	800dff4 <__sfputc_r+0x1c>
 800dfe4:	6994      	ldr	r4, [r2, #24]
 800dfe6:	42a3      	cmp	r3, r4
 800dfe8:	db01      	blt.n	800dfee <__sfputc_r+0x16>
 800dfea:	290a      	cmp	r1, #10
 800dfec:	d102      	bne.n	800dff4 <__sfputc_r+0x1c>
 800dfee:	bc10      	pop	{r4}
 800dff0:	f000 b98e 	b.w	800e310 <__swbuf_r>
 800dff4:	6813      	ldr	r3, [r2, #0]
 800dff6:	1c58      	adds	r0, r3, #1
 800dff8:	6010      	str	r0, [r2, #0]
 800dffa:	7019      	strb	r1, [r3, #0]
 800dffc:	4608      	mov	r0, r1
 800dffe:	bc10      	pop	{r4}
 800e000:	4770      	bx	lr

0800e002 <__sfputs_r>:
 800e002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e004:	4606      	mov	r6, r0
 800e006:	460f      	mov	r7, r1
 800e008:	4614      	mov	r4, r2
 800e00a:	18d5      	adds	r5, r2, r3
 800e00c:	42ac      	cmp	r4, r5
 800e00e:	d101      	bne.n	800e014 <__sfputs_r+0x12>
 800e010:	2000      	movs	r0, #0
 800e012:	e007      	b.n	800e024 <__sfputs_r+0x22>
 800e014:	463a      	mov	r2, r7
 800e016:	4630      	mov	r0, r6
 800e018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e01c:	f7ff ffdc 	bl	800dfd8 <__sfputc_r>
 800e020:	1c43      	adds	r3, r0, #1
 800e022:	d1f3      	bne.n	800e00c <__sfputs_r+0xa>
 800e024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e028 <_vfiprintf_r>:
 800e028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	460d      	mov	r5, r1
 800e02e:	4614      	mov	r4, r2
 800e030:	4698      	mov	r8, r3
 800e032:	4606      	mov	r6, r0
 800e034:	b09d      	sub	sp, #116	; 0x74
 800e036:	b118      	cbz	r0, 800e040 <_vfiprintf_r+0x18>
 800e038:	6983      	ldr	r3, [r0, #24]
 800e03a:	b90b      	cbnz	r3, 800e040 <_vfiprintf_r+0x18>
 800e03c:	f7ff fa12 	bl	800d464 <__sinit>
 800e040:	4b89      	ldr	r3, [pc, #548]	; (800e268 <_vfiprintf_r+0x240>)
 800e042:	429d      	cmp	r5, r3
 800e044:	d11b      	bne.n	800e07e <_vfiprintf_r+0x56>
 800e046:	6875      	ldr	r5, [r6, #4]
 800e048:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e04a:	07d9      	lsls	r1, r3, #31
 800e04c:	d405      	bmi.n	800e05a <_vfiprintf_r+0x32>
 800e04e:	89ab      	ldrh	r3, [r5, #12]
 800e050:	059a      	lsls	r2, r3, #22
 800e052:	d402      	bmi.n	800e05a <_vfiprintf_r+0x32>
 800e054:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e056:	f7ff faa8 	bl	800d5aa <__retarget_lock_acquire_recursive>
 800e05a:	89ab      	ldrh	r3, [r5, #12]
 800e05c:	071b      	lsls	r3, r3, #28
 800e05e:	d501      	bpl.n	800e064 <_vfiprintf_r+0x3c>
 800e060:	692b      	ldr	r3, [r5, #16]
 800e062:	b9eb      	cbnz	r3, 800e0a0 <_vfiprintf_r+0x78>
 800e064:	4629      	mov	r1, r5
 800e066:	4630      	mov	r0, r6
 800e068:	f000 f9b6 	bl	800e3d8 <__swsetup_r>
 800e06c:	b1c0      	cbz	r0, 800e0a0 <_vfiprintf_r+0x78>
 800e06e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e070:	07dc      	lsls	r4, r3, #31
 800e072:	d50e      	bpl.n	800e092 <_vfiprintf_r+0x6a>
 800e074:	f04f 30ff 	mov.w	r0, #4294967295
 800e078:	b01d      	add	sp, #116	; 0x74
 800e07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07e:	4b7b      	ldr	r3, [pc, #492]	; (800e26c <_vfiprintf_r+0x244>)
 800e080:	429d      	cmp	r5, r3
 800e082:	d101      	bne.n	800e088 <_vfiprintf_r+0x60>
 800e084:	68b5      	ldr	r5, [r6, #8]
 800e086:	e7df      	b.n	800e048 <_vfiprintf_r+0x20>
 800e088:	4b79      	ldr	r3, [pc, #484]	; (800e270 <_vfiprintf_r+0x248>)
 800e08a:	429d      	cmp	r5, r3
 800e08c:	bf08      	it	eq
 800e08e:	68f5      	ldreq	r5, [r6, #12]
 800e090:	e7da      	b.n	800e048 <_vfiprintf_r+0x20>
 800e092:	89ab      	ldrh	r3, [r5, #12]
 800e094:	0598      	lsls	r0, r3, #22
 800e096:	d4ed      	bmi.n	800e074 <_vfiprintf_r+0x4c>
 800e098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e09a:	f7ff fa87 	bl	800d5ac <__retarget_lock_release_recursive>
 800e09e:	e7e9      	b.n	800e074 <_vfiprintf_r+0x4c>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0a4:	2320      	movs	r3, #32
 800e0a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0aa:	2330      	movs	r3, #48	; 0x30
 800e0ac:	f04f 0901 	mov.w	r9, #1
 800e0b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0b4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800e274 <_vfiprintf_r+0x24c>
 800e0b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0bc:	4623      	mov	r3, r4
 800e0be:	469a      	mov	sl, r3
 800e0c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0c4:	b10a      	cbz	r2, 800e0ca <_vfiprintf_r+0xa2>
 800e0c6:	2a25      	cmp	r2, #37	; 0x25
 800e0c8:	d1f9      	bne.n	800e0be <_vfiprintf_r+0x96>
 800e0ca:	ebba 0b04 	subs.w	fp, sl, r4
 800e0ce:	d00b      	beq.n	800e0e8 <_vfiprintf_r+0xc0>
 800e0d0:	465b      	mov	r3, fp
 800e0d2:	4622      	mov	r2, r4
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f7ff ff93 	bl	800e002 <__sfputs_r>
 800e0dc:	3001      	adds	r0, #1
 800e0de:	f000 80aa 	beq.w	800e236 <_vfiprintf_r+0x20e>
 800e0e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0e4:	445a      	add	r2, fp
 800e0e6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0e8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	f000 80a2 	beq.w	800e236 <_vfiprintf_r+0x20e>
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0fc:	f10a 0a01 	add.w	sl, sl, #1
 800e100:	9304      	str	r3, [sp, #16]
 800e102:	9307      	str	r3, [sp, #28]
 800e104:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e108:	931a      	str	r3, [sp, #104]	; 0x68
 800e10a:	4654      	mov	r4, sl
 800e10c:	2205      	movs	r2, #5
 800e10e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e112:	4858      	ldr	r0, [pc, #352]	; (800e274 <_vfiprintf_r+0x24c>)
 800e114:	f7ff fa4b 	bl	800d5ae <memchr>
 800e118:	9a04      	ldr	r2, [sp, #16]
 800e11a:	b9d8      	cbnz	r0, 800e154 <_vfiprintf_r+0x12c>
 800e11c:	06d1      	lsls	r1, r2, #27
 800e11e:	bf44      	itt	mi
 800e120:	2320      	movmi	r3, #32
 800e122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e126:	0713      	lsls	r3, r2, #28
 800e128:	bf44      	itt	mi
 800e12a:	232b      	movmi	r3, #43	; 0x2b
 800e12c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e130:	f89a 3000 	ldrb.w	r3, [sl]
 800e134:	2b2a      	cmp	r3, #42	; 0x2a
 800e136:	d015      	beq.n	800e164 <_vfiprintf_r+0x13c>
 800e138:	4654      	mov	r4, sl
 800e13a:	2000      	movs	r0, #0
 800e13c:	f04f 0c0a 	mov.w	ip, #10
 800e140:	9a07      	ldr	r2, [sp, #28]
 800e142:	4621      	mov	r1, r4
 800e144:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e148:	3b30      	subs	r3, #48	; 0x30
 800e14a:	2b09      	cmp	r3, #9
 800e14c:	d94e      	bls.n	800e1ec <_vfiprintf_r+0x1c4>
 800e14e:	b1b0      	cbz	r0, 800e17e <_vfiprintf_r+0x156>
 800e150:	9207      	str	r2, [sp, #28]
 800e152:	e014      	b.n	800e17e <_vfiprintf_r+0x156>
 800e154:	eba0 0308 	sub.w	r3, r0, r8
 800e158:	fa09 f303 	lsl.w	r3, r9, r3
 800e15c:	4313      	orrs	r3, r2
 800e15e:	46a2      	mov	sl, r4
 800e160:	9304      	str	r3, [sp, #16]
 800e162:	e7d2      	b.n	800e10a <_vfiprintf_r+0xe2>
 800e164:	9b03      	ldr	r3, [sp, #12]
 800e166:	1d19      	adds	r1, r3, #4
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	9103      	str	r1, [sp, #12]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	bfbb      	ittet	lt
 800e170:	425b      	neglt	r3, r3
 800e172:	f042 0202 	orrlt.w	r2, r2, #2
 800e176:	9307      	strge	r3, [sp, #28]
 800e178:	9307      	strlt	r3, [sp, #28]
 800e17a:	bfb8      	it	lt
 800e17c:	9204      	strlt	r2, [sp, #16]
 800e17e:	7823      	ldrb	r3, [r4, #0]
 800e180:	2b2e      	cmp	r3, #46	; 0x2e
 800e182:	d10c      	bne.n	800e19e <_vfiprintf_r+0x176>
 800e184:	7863      	ldrb	r3, [r4, #1]
 800e186:	2b2a      	cmp	r3, #42	; 0x2a
 800e188:	d135      	bne.n	800e1f6 <_vfiprintf_r+0x1ce>
 800e18a:	9b03      	ldr	r3, [sp, #12]
 800e18c:	3402      	adds	r4, #2
 800e18e:	1d1a      	adds	r2, r3, #4
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	9203      	str	r2, [sp, #12]
 800e194:	2b00      	cmp	r3, #0
 800e196:	bfb8      	it	lt
 800e198:	f04f 33ff 	movlt.w	r3, #4294967295
 800e19c:	9305      	str	r3, [sp, #20]
 800e19e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e284 <_vfiprintf_r+0x25c>
 800e1a2:	2203      	movs	r2, #3
 800e1a4:	4650      	mov	r0, sl
 800e1a6:	7821      	ldrb	r1, [r4, #0]
 800e1a8:	f7ff fa01 	bl	800d5ae <memchr>
 800e1ac:	b140      	cbz	r0, 800e1c0 <_vfiprintf_r+0x198>
 800e1ae:	2340      	movs	r3, #64	; 0x40
 800e1b0:	eba0 000a 	sub.w	r0, r0, sl
 800e1b4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1b8:	9b04      	ldr	r3, [sp, #16]
 800e1ba:	3401      	adds	r4, #1
 800e1bc:	4303      	orrs	r3, r0
 800e1be:	9304      	str	r3, [sp, #16]
 800e1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1c4:	2206      	movs	r2, #6
 800e1c6:	482c      	ldr	r0, [pc, #176]	; (800e278 <_vfiprintf_r+0x250>)
 800e1c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1cc:	f7ff f9ef 	bl	800d5ae <memchr>
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d03f      	beq.n	800e254 <_vfiprintf_r+0x22c>
 800e1d4:	4b29      	ldr	r3, [pc, #164]	; (800e27c <_vfiprintf_r+0x254>)
 800e1d6:	bb1b      	cbnz	r3, 800e220 <_vfiprintf_r+0x1f8>
 800e1d8:	9b03      	ldr	r3, [sp, #12]
 800e1da:	3307      	adds	r3, #7
 800e1dc:	f023 0307 	bic.w	r3, r3, #7
 800e1e0:	3308      	adds	r3, #8
 800e1e2:	9303      	str	r3, [sp, #12]
 800e1e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1e6:	443b      	add	r3, r7
 800e1e8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1ea:	e767      	b.n	800e0bc <_vfiprintf_r+0x94>
 800e1ec:	460c      	mov	r4, r1
 800e1ee:	2001      	movs	r0, #1
 800e1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1f4:	e7a5      	b.n	800e142 <_vfiprintf_r+0x11a>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	f04f 0c0a 	mov.w	ip, #10
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	3401      	adds	r4, #1
 800e200:	9305      	str	r3, [sp, #20]
 800e202:	4620      	mov	r0, r4
 800e204:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e208:	3a30      	subs	r2, #48	; 0x30
 800e20a:	2a09      	cmp	r2, #9
 800e20c:	d903      	bls.n	800e216 <_vfiprintf_r+0x1ee>
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d0c5      	beq.n	800e19e <_vfiprintf_r+0x176>
 800e212:	9105      	str	r1, [sp, #20]
 800e214:	e7c3      	b.n	800e19e <_vfiprintf_r+0x176>
 800e216:	4604      	mov	r4, r0
 800e218:	2301      	movs	r3, #1
 800e21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e21e:	e7f0      	b.n	800e202 <_vfiprintf_r+0x1da>
 800e220:	ab03      	add	r3, sp, #12
 800e222:	9300      	str	r3, [sp, #0]
 800e224:	462a      	mov	r2, r5
 800e226:	4630      	mov	r0, r6
 800e228:	4b15      	ldr	r3, [pc, #84]	; (800e280 <_vfiprintf_r+0x258>)
 800e22a:	a904      	add	r1, sp, #16
 800e22c:	f7fd fd50 	bl	800bcd0 <_printf_float>
 800e230:	4607      	mov	r7, r0
 800e232:	1c78      	adds	r0, r7, #1
 800e234:	d1d6      	bne.n	800e1e4 <_vfiprintf_r+0x1bc>
 800e236:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e238:	07d9      	lsls	r1, r3, #31
 800e23a:	d405      	bmi.n	800e248 <_vfiprintf_r+0x220>
 800e23c:	89ab      	ldrh	r3, [r5, #12]
 800e23e:	059a      	lsls	r2, r3, #22
 800e240:	d402      	bmi.n	800e248 <_vfiprintf_r+0x220>
 800e242:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e244:	f7ff f9b2 	bl	800d5ac <__retarget_lock_release_recursive>
 800e248:	89ab      	ldrh	r3, [r5, #12]
 800e24a:	065b      	lsls	r3, r3, #25
 800e24c:	f53f af12 	bmi.w	800e074 <_vfiprintf_r+0x4c>
 800e250:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e252:	e711      	b.n	800e078 <_vfiprintf_r+0x50>
 800e254:	ab03      	add	r3, sp, #12
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	462a      	mov	r2, r5
 800e25a:	4630      	mov	r0, r6
 800e25c:	4b08      	ldr	r3, [pc, #32]	; (800e280 <_vfiprintf_r+0x258>)
 800e25e:	a904      	add	r1, sp, #16
 800e260:	f7fd ffd2 	bl	800c208 <_printf_i>
 800e264:	e7e4      	b.n	800e230 <_vfiprintf_r+0x208>
 800e266:	bf00      	nop
 800e268:	0800fc10 	.word	0x0800fc10
 800e26c:	0800fc30 	.word	0x0800fc30
 800e270:	0800fbf0 	.word	0x0800fbf0
 800e274:	0800fdac 	.word	0x0800fdac
 800e278:	0800fdb6 	.word	0x0800fdb6
 800e27c:	0800bcd1 	.word	0x0800bcd1
 800e280:	0800e003 	.word	0x0800e003
 800e284:	0800fdb2 	.word	0x0800fdb2

0800e288 <__sread>:
 800e288:	b510      	push	{r4, lr}
 800e28a:	460c      	mov	r4, r1
 800e28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e290:	f000 fada 	bl	800e848 <_read_r>
 800e294:	2800      	cmp	r0, #0
 800e296:	bfab      	itete	ge
 800e298:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e29a:	89a3      	ldrhlt	r3, [r4, #12]
 800e29c:	181b      	addge	r3, r3, r0
 800e29e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e2a2:	bfac      	ite	ge
 800e2a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e2a6:	81a3      	strhlt	r3, [r4, #12]
 800e2a8:	bd10      	pop	{r4, pc}

0800e2aa <__swrite>:
 800e2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ae:	461f      	mov	r7, r3
 800e2b0:	898b      	ldrh	r3, [r1, #12]
 800e2b2:	4605      	mov	r5, r0
 800e2b4:	05db      	lsls	r3, r3, #23
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	4616      	mov	r6, r2
 800e2ba:	d505      	bpl.n	800e2c8 <__swrite+0x1e>
 800e2bc:	2302      	movs	r3, #2
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2c4:	f000 f9f8 	bl	800e6b8 <_lseek_r>
 800e2c8:	89a3      	ldrh	r3, [r4, #12]
 800e2ca:	4632      	mov	r2, r6
 800e2cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e2d0:	81a3      	strh	r3, [r4, #12]
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	463b      	mov	r3, r7
 800e2d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2de:	f000 b869 	b.w	800e3b4 <_write_r>

0800e2e2 <__sseek>:
 800e2e2:	b510      	push	{r4, lr}
 800e2e4:	460c      	mov	r4, r1
 800e2e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ea:	f000 f9e5 	bl	800e6b8 <_lseek_r>
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	bf15      	itete	ne
 800e2f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800e2f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e2fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e2fe:	81a3      	strheq	r3, [r4, #12]
 800e300:	bf18      	it	ne
 800e302:	81a3      	strhne	r3, [r4, #12]
 800e304:	bd10      	pop	{r4, pc}

0800e306 <__sclose>:
 800e306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e30a:	f000 b8f1 	b.w	800e4f0 <_close_r>
	...

0800e310 <__swbuf_r>:
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e312:	460e      	mov	r6, r1
 800e314:	4614      	mov	r4, r2
 800e316:	4605      	mov	r5, r0
 800e318:	b118      	cbz	r0, 800e322 <__swbuf_r+0x12>
 800e31a:	6983      	ldr	r3, [r0, #24]
 800e31c:	b90b      	cbnz	r3, 800e322 <__swbuf_r+0x12>
 800e31e:	f7ff f8a1 	bl	800d464 <__sinit>
 800e322:	4b21      	ldr	r3, [pc, #132]	; (800e3a8 <__swbuf_r+0x98>)
 800e324:	429c      	cmp	r4, r3
 800e326:	d12b      	bne.n	800e380 <__swbuf_r+0x70>
 800e328:	686c      	ldr	r4, [r5, #4]
 800e32a:	69a3      	ldr	r3, [r4, #24]
 800e32c:	60a3      	str	r3, [r4, #8]
 800e32e:	89a3      	ldrh	r3, [r4, #12]
 800e330:	071a      	lsls	r2, r3, #28
 800e332:	d52f      	bpl.n	800e394 <__swbuf_r+0x84>
 800e334:	6923      	ldr	r3, [r4, #16]
 800e336:	b36b      	cbz	r3, 800e394 <__swbuf_r+0x84>
 800e338:	6923      	ldr	r3, [r4, #16]
 800e33a:	6820      	ldr	r0, [r4, #0]
 800e33c:	b2f6      	uxtb	r6, r6
 800e33e:	1ac0      	subs	r0, r0, r3
 800e340:	6963      	ldr	r3, [r4, #20]
 800e342:	4637      	mov	r7, r6
 800e344:	4283      	cmp	r3, r0
 800e346:	dc04      	bgt.n	800e352 <__swbuf_r+0x42>
 800e348:	4621      	mov	r1, r4
 800e34a:	4628      	mov	r0, r5
 800e34c:	f000 f966 	bl	800e61c <_fflush_r>
 800e350:	bb30      	cbnz	r0, 800e3a0 <__swbuf_r+0x90>
 800e352:	68a3      	ldr	r3, [r4, #8]
 800e354:	3001      	adds	r0, #1
 800e356:	3b01      	subs	r3, #1
 800e358:	60a3      	str	r3, [r4, #8]
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	6022      	str	r2, [r4, #0]
 800e360:	701e      	strb	r6, [r3, #0]
 800e362:	6963      	ldr	r3, [r4, #20]
 800e364:	4283      	cmp	r3, r0
 800e366:	d004      	beq.n	800e372 <__swbuf_r+0x62>
 800e368:	89a3      	ldrh	r3, [r4, #12]
 800e36a:	07db      	lsls	r3, r3, #31
 800e36c:	d506      	bpl.n	800e37c <__swbuf_r+0x6c>
 800e36e:	2e0a      	cmp	r6, #10
 800e370:	d104      	bne.n	800e37c <__swbuf_r+0x6c>
 800e372:	4621      	mov	r1, r4
 800e374:	4628      	mov	r0, r5
 800e376:	f000 f951 	bl	800e61c <_fflush_r>
 800e37a:	b988      	cbnz	r0, 800e3a0 <__swbuf_r+0x90>
 800e37c:	4638      	mov	r0, r7
 800e37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e380:	4b0a      	ldr	r3, [pc, #40]	; (800e3ac <__swbuf_r+0x9c>)
 800e382:	429c      	cmp	r4, r3
 800e384:	d101      	bne.n	800e38a <__swbuf_r+0x7a>
 800e386:	68ac      	ldr	r4, [r5, #8]
 800e388:	e7cf      	b.n	800e32a <__swbuf_r+0x1a>
 800e38a:	4b09      	ldr	r3, [pc, #36]	; (800e3b0 <__swbuf_r+0xa0>)
 800e38c:	429c      	cmp	r4, r3
 800e38e:	bf08      	it	eq
 800e390:	68ec      	ldreq	r4, [r5, #12]
 800e392:	e7ca      	b.n	800e32a <__swbuf_r+0x1a>
 800e394:	4621      	mov	r1, r4
 800e396:	4628      	mov	r0, r5
 800e398:	f000 f81e 	bl	800e3d8 <__swsetup_r>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d0cb      	beq.n	800e338 <__swbuf_r+0x28>
 800e3a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a4:	e7ea      	b.n	800e37c <__swbuf_r+0x6c>
 800e3a6:	bf00      	nop
 800e3a8:	0800fc10 	.word	0x0800fc10
 800e3ac:	0800fc30 	.word	0x0800fc30
 800e3b0:	0800fbf0 	.word	0x0800fbf0

0800e3b4 <_write_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	4608      	mov	r0, r1
 800e3ba:	4611      	mov	r1, r2
 800e3bc:	2200      	movs	r2, #0
 800e3be:	4d05      	ldr	r5, [pc, #20]	; (800e3d4 <_write_r+0x20>)
 800e3c0:	602a      	str	r2, [r5, #0]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f7f4 fa46 	bl	8002854 <_write>
 800e3c8:	1c43      	adds	r3, r0, #1
 800e3ca:	d102      	bne.n	800e3d2 <_write_r+0x1e>
 800e3cc:	682b      	ldr	r3, [r5, #0]
 800e3ce:	b103      	cbz	r3, 800e3d2 <_write_r+0x1e>
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
 800e3d4:	20000bb8 	.word	0x20000bb8

0800e3d8 <__swsetup_r>:
 800e3d8:	4b32      	ldr	r3, [pc, #200]	; (800e4a4 <__swsetup_r+0xcc>)
 800e3da:	b570      	push	{r4, r5, r6, lr}
 800e3dc:	681d      	ldr	r5, [r3, #0]
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	b125      	cbz	r5, 800e3ee <__swsetup_r+0x16>
 800e3e4:	69ab      	ldr	r3, [r5, #24]
 800e3e6:	b913      	cbnz	r3, 800e3ee <__swsetup_r+0x16>
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	f7ff f83b 	bl	800d464 <__sinit>
 800e3ee:	4b2e      	ldr	r3, [pc, #184]	; (800e4a8 <__swsetup_r+0xd0>)
 800e3f0:	429c      	cmp	r4, r3
 800e3f2:	d10f      	bne.n	800e414 <__swsetup_r+0x3c>
 800e3f4:	686c      	ldr	r4, [r5, #4]
 800e3f6:	89a3      	ldrh	r3, [r4, #12]
 800e3f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3fc:	0719      	lsls	r1, r3, #28
 800e3fe:	d42c      	bmi.n	800e45a <__swsetup_r+0x82>
 800e400:	06dd      	lsls	r5, r3, #27
 800e402:	d411      	bmi.n	800e428 <__swsetup_r+0x50>
 800e404:	2309      	movs	r3, #9
 800e406:	6033      	str	r3, [r6, #0]
 800e408:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e40c:	f04f 30ff 	mov.w	r0, #4294967295
 800e410:	81a3      	strh	r3, [r4, #12]
 800e412:	e03e      	b.n	800e492 <__swsetup_r+0xba>
 800e414:	4b25      	ldr	r3, [pc, #148]	; (800e4ac <__swsetup_r+0xd4>)
 800e416:	429c      	cmp	r4, r3
 800e418:	d101      	bne.n	800e41e <__swsetup_r+0x46>
 800e41a:	68ac      	ldr	r4, [r5, #8]
 800e41c:	e7eb      	b.n	800e3f6 <__swsetup_r+0x1e>
 800e41e:	4b24      	ldr	r3, [pc, #144]	; (800e4b0 <__swsetup_r+0xd8>)
 800e420:	429c      	cmp	r4, r3
 800e422:	bf08      	it	eq
 800e424:	68ec      	ldreq	r4, [r5, #12]
 800e426:	e7e6      	b.n	800e3f6 <__swsetup_r+0x1e>
 800e428:	0758      	lsls	r0, r3, #29
 800e42a:	d512      	bpl.n	800e452 <__swsetup_r+0x7a>
 800e42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e42e:	b141      	cbz	r1, 800e442 <__swsetup_r+0x6a>
 800e430:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e434:	4299      	cmp	r1, r3
 800e436:	d002      	beq.n	800e43e <__swsetup_r+0x66>
 800e438:	4630      	mov	r0, r6
 800e43a:	f7fd fb05 	bl	800ba48 <_free_r>
 800e43e:	2300      	movs	r3, #0
 800e440:	6363      	str	r3, [r4, #52]	; 0x34
 800e442:	89a3      	ldrh	r3, [r4, #12]
 800e444:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e448:	81a3      	strh	r3, [r4, #12]
 800e44a:	2300      	movs	r3, #0
 800e44c:	6063      	str	r3, [r4, #4]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	6023      	str	r3, [r4, #0]
 800e452:	89a3      	ldrh	r3, [r4, #12]
 800e454:	f043 0308 	orr.w	r3, r3, #8
 800e458:	81a3      	strh	r3, [r4, #12]
 800e45a:	6923      	ldr	r3, [r4, #16]
 800e45c:	b94b      	cbnz	r3, 800e472 <__swsetup_r+0x9a>
 800e45e:	89a3      	ldrh	r3, [r4, #12]
 800e460:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e464:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e468:	d003      	beq.n	800e472 <__swsetup_r+0x9a>
 800e46a:	4621      	mov	r1, r4
 800e46c:	4630      	mov	r0, r6
 800e46e:	f000 f959 	bl	800e724 <__smakebuf_r>
 800e472:	89a0      	ldrh	r0, [r4, #12]
 800e474:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e478:	f010 0301 	ands.w	r3, r0, #1
 800e47c:	d00a      	beq.n	800e494 <__swsetup_r+0xbc>
 800e47e:	2300      	movs	r3, #0
 800e480:	60a3      	str	r3, [r4, #8]
 800e482:	6963      	ldr	r3, [r4, #20]
 800e484:	425b      	negs	r3, r3
 800e486:	61a3      	str	r3, [r4, #24]
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	b943      	cbnz	r3, 800e49e <__swsetup_r+0xc6>
 800e48c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e490:	d1ba      	bne.n	800e408 <__swsetup_r+0x30>
 800e492:	bd70      	pop	{r4, r5, r6, pc}
 800e494:	0781      	lsls	r1, r0, #30
 800e496:	bf58      	it	pl
 800e498:	6963      	ldrpl	r3, [r4, #20]
 800e49a:	60a3      	str	r3, [r4, #8]
 800e49c:	e7f4      	b.n	800e488 <__swsetup_r+0xb0>
 800e49e:	2000      	movs	r0, #0
 800e4a0:	e7f7      	b.n	800e492 <__swsetup_r+0xba>
 800e4a2:	bf00      	nop
 800e4a4:	2000001c 	.word	0x2000001c
 800e4a8:	0800fc10 	.word	0x0800fc10
 800e4ac:	0800fc30 	.word	0x0800fc30
 800e4b0:	0800fbf0 	.word	0x0800fbf0

0800e4b4 <__assert_func>:
 800e4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e4b6:	4614      	mov	r4, r2
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	4b09      	ldr	r3, [pc, #36]	; (800e4e0 <__assert_func+0x2c>)
 800e4bc:	4605      	mov	r5, r0
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	68d8      	ldr	r0, [r3, #12]
 800e4c2:	b14c      	cbz	r4, 800e4d8 <__assert_func+0x24>
 800e4c4:	4b07      	ldr	r3, [pc, #28]	; (800e4e4 <__assert_func+0x30>)
 800e4c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e4ca:	9100      	str	r1, [sp, #0]
 800e4cc:	462b      	mov	r3, r5
 800e4ce:	4906      	ldr	r1, [pc, #24]	; (800e4e8 <__assert_func+0x34>)
 800e4d0:	f000 f8e0 	bl	800e694 <fiprintf>
 800e4d4:	f000 f9d7 	bl	800e886 <abort>
 800e4d8:	4b04      	ldr	r3, [pc, #16]	; (800e4ec <__assert_func+0x38>)
 800e4da:	461c      	mov	r4, r3
 800e4dc:	e7f3      	b.n	800e4c6 <__assert_func+0x12>
 800e4de:	bf00      	nop
 800e4e0:	2000001c 	.word	0x2000001c
 800e4e4:	0800fdbd 	.word	0x0800fdbd
 800e4e8:	0800fdca 	.word	0x0800fdca
 800e4ec:	0800fdf8 	.word	0x0800fdf8

0800e4f0 <_close_r>:
 800e4f0:	b538      	push	{r3, r4, r5, lr}
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	4d05      	ldr	r5, [pc, #20]	; (800e50c <_close_r+0x1c>)
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	4608      	mov	r0, r1
 800e4fa:	602b      	str	r3, [r5, #0]
 800e4fc:	f7f4 f9d4 	bl	80028a8 <_close>
 800e500:	1c43      	adds	r3, r0, #1
 800e502:	d102      	bne.n	800e50a <_close_r+0x1a>
 800e504:	682b      	ldr	r3, [r5, #0]
 800e506:	b103      	cbz	r3, 800e50a <_close_r+0x1a>
 800e508:	6023      	str	r3, [r4, #0]
 800e50a:	bd38      	pop	{r3, r4, r5, pc}
 800e50c:	20000bb8 	.word	0x20000bb8

0800e510 <__sflush_r>:
 800e510:	898a      	ldrh	r2, [r1, #12]
 800e512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e516:	4605      	mov	r5, r0
 800e518:	0710      	lsls	r0, r2, #28
 800e51a:	460c      	mov	r4, r1
 800e51c:	d458      	bmi.n	800e5d0 <__sflush_r+0xc0>
 800e51e:	684b      	ldr	r3, [r1, #4]
 800e520:	2b00      	cmp	r3, #0
 800e522:	dc05      	bgt.n	800e530 <__sflush_r+0x20>
 800e524:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e526:	2b00      	cmp	r3, #0
 800e528:	dc02      	bgt.n	800e530 <__sflush_r+0x20>
 800e52a:	2000      	movs	r0, #0
 800e52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e530:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e532:	2e00      	cmp	r6, #0
 800e534:	d0f9      	beq.n	800e52a <__sflush_r+0x1a>
 800e536:	2300      	movs	r3, #0
 800e538:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e53c:	682f      	ldr	r7, [r5, #0]
 800e53e:	602b      	str	r3, [r5, #0]
 800e540:	d032      	beq.n	800e5a8 <__sflush_r+0x98>
 800e542:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	075a      	lsls	r2, r3, #29
 800e548:	d505      	bpl.n	800e556 <__sflush_r+0x46>
 800e54a:	6863      	ldr	r3, [r4, #4]
 800e54c:	1ac0      	subs	r0, r0, r3
 800e54e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e550:	b10b      	cbz	r3, 800e556 <__sflush_r+0x46>
 800e552:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e554:	1ac0      	subs	r0, r0, r3
 800e556:	2300      	movs	r3, #0
 800e558:	4602      	mov	r2, r0
 800e55a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e55c:	4628      	mov	r0, r5
 800e55e:	6a21      	ldr	r1, [r4, #32]
 800e560:	47b0      	blx	r6
 800e562:	1c43      	adds	r3, r0, #1
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	d106      	bne.n	800e576 <__sflush_r+0x66>
 800e568:	6829      	ldr	r1, [r5, #0]
 800e56a:	291d      	cmp	r1, #29
 800e56c:	d82c      	bhi.n	800e5c8 <__sflush_r+0xb8>
 800e56e:	4a2a      	ldr	r2, [pc, #168]	; (800e618 <__sflush_r+0x108>)
 800e570:	40ca      	lsrs	r2, r1
 800e572:	07d6      	lsls	r6, r2, #31
 800e574:	d528      	bpl.n	800e5c8 <__sflush_r+0xb8>
 800e576:	2200      	movs	r2, #0
 800e578:	6062      	str	r2, [r4, #4]
 800e57a:	6922      	ldr	r2, [r4, #16]
 800e57c:	04d9      	lsls	r1, r3, #19
 800e57e:	6022      	str	r2, [r4, #0]
 800e580:	d504      	bpl.n	800e58c <__sflush_r+0x7c>
 800e582:	1c42      	adds	r2, r0, #1
 800e584:	d101      	bne.n	800e58a <__sflush_r+0x7a>
 800e586:	682b      	ldr	r3, [r5, #0]
 800e588:	b903      	cbnz	r3, 800e58c <__sflush_r+0x7c>
 800e58a:	6560      	str	r0, [r4, #84]	; 0x54
 800e58c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e58e:	602f      	str	r7, [r5, #0]
 800e590:	2900      	cmp	r1, #0
 800e592:	d0ca      	beq.n	800e52a <__sflush_r+0x1a>
 800e594:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e598:	4299      	cmp	r1, r3
 800e59a:	d002      	beq.n	800e5a2 <__sflush_r+0x92>
 800e59c:	4628      	mov	r0, r5
 800e59e:	f7fd fa53 	bl	800ba48 <_free_r>
 800e5a2:	2000      	movs	r0, #0
 800e5a4:	6360      	str	r0, [r4, #52]	; 0x34
 800e5a6:	e7c1      	b.n	800e52c <__sflush_r+0x1c>
 800e5a8:	6a21      	ldr	r1, [r4, #32]
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	4628      	mov	r0, r5
 800e5ae:	47b0      	blx	r6
 800e5b0:	1c41      	adds	r1, r0, #1
 800e5b2:	d1c7      	bne.n	800e544 <__sflush_r+0x34>
 800e5b4:	682b      	ldr	r3, [r5, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0c4      	beq.n	800e544 <__sflush_r+0x34>
 800e5ba:	2b1d      	cmp	r3, #29
 800e5bc:	d001      	beq.n	800e5c2 <__sflush_r+0xb2>
 800e5be:	2b16      	cmp	r3, #22
 800e5c0:	d101      	bne.n	800e5c6 <__sflush_r+0xb6>
 800e5c2:	602f      	str	r7, [r5, #0]
 800e5c4:	e7b1      	b.n	800e52a <__sflush_r+0x1a>
 800e5c6:	89a3      	ldrh	r3, [r4, #12]
 800e5c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	e7ad      	b.n	800e52c <__sflush_r+0x1c>
 800e5d0:	690f      	ldr	r7, [r1, #16]
 800e5d2:	2f00      	cmp	r7, #0
 800e5d4:	d0a9      	beq.n	800e52a <__sflush_r+0x1a>
 800e5d6:	0793      	lsls	r3, r2, #30
 800e5d8:	bf18      	it	ne
 800e5da:	2300      	movne	r3, #0
 800e5dc:	680e      	ldr	r6, [r1, #0]
 800e5de:	bf08      	it	eq
 800e5e0:	694b      	ldreq	r3, [r1, #20]
 800e5e2:	eba6 0807 	sub.w	r8, r6, r7
 800e5e6:	600f      	str	r7, [r1, #0]
 800e5e8:	608b      	str	r3, [r1, #8]
 800e5ea:	f1b8 0f00 	cmp.w	r8, #0
 800e5ee:	dd9c      	ble.n	800e52a <__sflush_r+0x1a>
 800e5f0:	4643      	mov	r3, r8
 800e5f2:	463a      	mov	r2, r7
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	6a21      	ldr	r1, [r4, #32]
 800e5f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e5fa:	47b0      	blx	r6
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	dc06      	bgt.n	800e60e <__sflush_r+0xfe>
 800e600:	89a3      	ldrh	r3, [r4, #12]
 800e602:	f04f 30ff 	mov.w	r0, #4294967295
 800e606:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e60a:	81a3      	strh	r3, [r4, #12]
 800e60c:	e78e      	b.n	800e52c <__sflush_r+0x1c>
 800e60e:	4407      	add	r7, r0
 800e610:	eba8 0800 	sub.w	r8, r8, r0
 800e614:	e7e9      	b.n	800e5ea <__sflush_r+0xda>
 800e616:	bf00      	nop
 800e618:	20400001 	.word	0x20400001

0800e61c <_fflush_r>:
 800e61c:	b538      	push	{r3, r4, r5, lr}
 800e61e:	690b      	ldr	r3, [r1, #16]
 800e620:	4605      	mov	r5, r0
 800e622:	460c      	mov	r4, r1
 800e624:	b913      	cbnz	r3, 800e62c <_fflush_r+0x10>
 800e626:	2500      	movs	r5, #0
 800e628:	4628      	mov	r0, r5
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	b118      	cbz	r0, 800e636 <_fflush_r+0x1a>
 800e62e:	6983      	ldr	r3, [r0, #24]
 800e630:	b90b      	cbnz	r3, 800e636 <_fflush_r+0x1a>
 800e632:	f7fe ff17 	bl	800d464 <__sinit>
 800e636:	4b14      	ldr	r3, [pc, #80]	; (800e688 <_fflush_r+0x6c>)
 800e638:	429c      	cmp	r4, r3
 800e63a:	d11b      	bne.n	800e674 <_fflush_r+0x58>
 800e63c:	686c      	ldr	r4, [r5, #4]
 800e63e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d0ef      	beq.n	800e626 <_fflush_r+0xa>
 800e646:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e648:	07d0      	lsls	r0, r2, #31
 800e64a:	d404      	bmi.n	800e656 <_fflush_r+0x3a>
 800e64c:	0599      	lsls	r1, r3, #22
 800e64e:	d402      	bmi.n	800e656 <_fflush_r+0x3a>
 800e650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e652:	f7fe ffaa 	bl	800d5aa <__retarget_lock_acquire_recursive>
 800e656:	4628      	mov	r0, r5
 800e658:	4621      	mov	r1, r4
 800e65a:	f7ff ff59 	bl	800e510 <__sflush_r>
 800e65e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e660:	4605      	mov	r5, r0
 800e662:	07da      	lsls	r2, r3, #31
 800e664:	d4e0      	bmi.n	800e628 <_fflush_r+0xc>
 800e666:	89a3      	ldrh	r3, [r4, #12]
 800e668:	059b      	lsls	r3, r3, #22
 800e66a:	d4dd      	bmi.n	800e628 <_fflush_r+0xc>
 800e66c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e66e:	f7fe ff9d 	bl	800d5ac <__retarget_lock_release_recursive>
 800e672:	e7d9      	b.n	800e628 <_fflush_r+0xc>
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <_fflush_r+0x70>)
 800e676:	429c      	cmp	r4, r3
 800e678:	d101      	bne.n	800e67e <_fflush_r+0x62>
 800e67a:	68ac      	ldr	r4, [r5, #8]
 800e67c:	e7df      	b.n	800e63e <_fflush_r+0x22>
 800e67e:	4b04      	ldr	r3, [pc, #16]	; (800e690 <_fflush_r+0x74>)
 800e680:	429c      	cmp	r4, r3
 800e682:	bf08      	it	eq
 800e684:	68ec      	ldreq	r4, [r5, #12]
 800e686:	e7da      	b.n	800e63e <_fflush_r+0x22>
 800e688:	0800fc10 	.word	0x0800fc10
 800e68c:	0800fc30 	.word	0x0800fc30
 800e690:	0800fbf0 	.word	0x0800fbf0

0800e694 <fiprintf>:
 800e694:	b40e      	push	{r1, r2, r3}
 800e696:	b503      	push	{r0, r1, lr}
 800e698:	4601      	mov	r1, r0
 800e69a:	ab03      	add	r3, sp, #12
 800e69c:	4805      	ldr	r0, [pc, #20]	; (800e6b4 <fiprintf+0x20>)
 800e69e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6a2:	6800      	ldr	r0, [r0, #0]
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	f7ff fcbf 	bl	800e028 <_vfiprintf_r>
 800e6aa:	b002      	add	sp, #8
 800e6ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6b0:	b003      	add	sp, #12
 800e6b2:	4770      	bx	lr
 800e6b4:	2000001c 	.word	0x2000001c

0800e6b8 <_lseek_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	4611      	mov	r1, r2
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	4d05      	ldr	r5, [pc, #20]	; (800e6d8 <_lseek_r+0x20>)
 800e6c4:	602a      	str	r2, [r5, #0]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f7f4 f912 	bl	80028f0 <_lseek>
 800e6cc:	1c43      	adds	r3, r0, #1
 800e6ce:	d102      	bne.n	800e6d6 <_lseek_r+0x1e>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	b103      	cbz	r3, 800e6d6 <_lseek_r+0x1e>
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	bd38      	pop	{r3, r4, r5, pc}
 800e6d8:	20000bb8 	.word	0x20000bb8

0800e6dc <__swhatbuf_r>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	460e      	mov	r6, r1
 800e6e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e4:	4614      	mov	r4, r2
 800e6e6:	2900      	cmp	r1, #0
 800e6e8:	461d      	mov	r5, r3
 800e6ea:	b096      	sub	sp, #88	; 0x58
 800e6ec:	da07      	bge.n	800e6fe <__swhatbuf_r+0x22>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	602b      	str	r3, [r5, #0]
 800e6f2:	89b3      	ldrh	r3, [r6, #12]
 800e6f4:	061a      	lsls	r2, r3, #24
 800e6f6:	d410      	bmi.n	800e71a <__swhatbuf_r+0x3e>
 800e6f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6fc:	e00e      	b.n	800e71c <__swhatbuf_r+0x40>
 800e6fe:	466a      	mov	r2, sp
 800e700:	f000 f8c8 	bl	800e894 <_fstat_r>
 800e704:	2800      	cmp	r0, #0
 800e706:	dbf2      	blt.n	800e6ee <__swhatbuf_r+0x12>
 800e708:	9a01      	ldr	r2, [sp, #4]
 800e70a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e70e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e712:	425a      	negs	r2, r3
 800e714:	415a      	adcs	r2, r3
 800e716:	602a      	str	r2, [r5, #0]
 800e718:	e7ee      	b.n	800e6f8 <__swhatbuf_r+0x1c>
 800e71a:	2340      	movs	r3, #64	; 0x40
 800e71c:	2000      	movs	r0, #0
 800e71e:	6023      	str	r3, [r4, #0]
 800e720:	b016      	add	sp, #88	; 0x58
 800e722:	bd70      	pop	{r4, r5, r6, pc}

0800e724 <__smakebuf_r>:
 800e724:	898b      	ldrh	r3, [r1, #12]
 800e726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e728:	079d      	lsls	r5, r3, #30
 800e72a:	4606      	mov	r6, r0
 800e72c:	460c      	mov	r4, r1
 800e72e:	d507      	bpl.n	800e740 <__smakebuf_r+0x1c>
 800e730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	6123      	str	r3, [r4, #16]
 800e738:	2301      	movs	r3, #1
 800e73a:	6163      	str	r3, [r4, #20]
 800e73c:	b002      	add	sp, #8
 800e73e:	bd70      	pop	{r4, r5, r6, pc}
 800e740:	466a      	mov	r2, sp
 800e742:	ab01      	add	r3, sp, #4
 800e744:	f7ff ffca 	bl	800e6dc <__swhatbuf_r>
 800e748:	9900      	ldr	r1, [sp, #0]
 800e74a:	4605      	mov	r5, r0
 800e74c:	4630      	mov	r0, r6
 800e74e:	f7fd f9c7 	bl	800bae0 <_malloc_r>
 800e752:	b948      	cbnz	r0, 800e768 <__smakebuf_r+0x44>
 800e754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e758:	059a      	lsls	r2, r3, #22
 800e75a:	d4ef      	bmi.n	800e73c <__smakebuf_r+0x18>
 800e75c:	f023 0303 	bic.w	r3, r3, #3
 800e760:	f043 0302 	orr.w	r3, r3, #2
 800e764:	81a3      	strh	r3, [r4, #12]
 800e766:	e7e3      	b.n	800e730 <__smakebuf_r+0xc>
 800e768:	4b0d      	ldr	r3, [pc, #52]	; (800e7a0 <__smakebuf_r+0x7c>)
 800e76a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	6020      	str	r0, [r4, #0]
 800e770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e774:	81a3      	strh	r3, [r4, #12]
 800e776:	9b00      	ldr	r3, [sp, #0]
 800e778:	6120      	str	r0, [r4, #16]
 800e77a:	6163      	str	r3, [r4, #20]
 800e77c:	9b01      	ldr	r3, [sp, #4]
 800e77e:	b15b      	cbz	r3, 800e798 <__smakebuf_r+0x74>
 800e780:	4630      	mov	r0, r6
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f000 f897 	bl	800e8b8 <_isatty_r>
 800e78a:	b128      	cbz	r0, 800e798 <__smakebuf_r+0x74>
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	f023 0303 	bic.w	r3, r3, #3
 800e792:	f043 0301 	orr.w	r3, r3, #1
 800e796:	81a3      	strh	r3, [r4, #12]
 800e798:	89a0      	ldrh	r0, [r4, #12]
 800e79a:	4305      	orrs	r5, r0
 800e79c:	81a5      	strh	r5, [r4, #12]
 800e79e:	e7cd      	b.n	800e73c <__smakebuf_r+0x18>
 800e7a0:	0800d3fd 	.word	0x0800d3fd

0800e7a4 <__ascii_mbtowc>:
 800e7a4:	b082      	sub	sp, #8
 800e7a6:	b901      	cbnz	r1, 800e7aa <__ascii_mbtowc+0x6>
 800e7a8:	a901      	add	r1, sp, #4
 800e7aa:	b142      	cbz	r2, 800e7be <__ascii_mbtowc+0x1a>
 800e7ac:	b14b      	cbz	r3, 800e7c2 <__ascii_mbtowc+0x1e>
 800e7ae:	7813      	ldrb	r3, [r2, #0]
 800e7b0:	600b      	str	r3, [r1, #0]
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	1e10      	subs	r0, r2, #0
 800e7b6:	bf18      	it	ne
 800e7b8:	2001      	movne	r0, #1
 800e7ba:	b002      	add	sp, #8
 800e7bc:	4770      	bx	lr
 800e7be:	4610      	mov	r0, r2
 800e7c0:	e7fb      	b.n	800e7ba <__ascii_mbtowc+0x16>
 800e7c2:	f06f 0001 	mvn.w	r0, #1
 800e7c6:	e7f8      	b.n	800e7ba <__ascii_mbtowc+0x16>

0800e7c8 <memmove>:
 800e7c8:	4288      	cmp	r0, r1
 800e7ca:	b510      	push	{r4, lr}
 800e7cc:	eb01 0402 	add.w	r4, r1, r2
 800e7d0:	d902      	bls.n	800e7d8 <memmove+0x10>
 800e7d2:	4284      	cmp	r4, r0
 800e7d4:	4623      	mov	r3, r4
 800e7d6:	d807      	bhi.n	800e7e8 <memmove+0x20>
 800e7d8:	1e43      	subs	r3, r0, #1
 800e7da:	42a1      	cmp	r1, r4
 800e7dc:	d008      	beq.n	800e7f0 <memmove+0x28>
 800e7de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e7e6:	e7f8      	b.n	800e7da <memmove+0x12>
 800e7e8:	4601      	mov	r1, r0
 800e7ea:	4402      	add	r2, r0
 800e7ec:	428a      	cmp	r2, r1
 800e7ee:	d100      	bne.n	800e7f2 <memmove+0x2a>
 800e7f0:	bd10      	pop	{r4, pc}
 800e7f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e7fa:	e7f7      	b.n	800e7ec <memmove+0x24>

0800e7fc <_realloc_r>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	4607      	mov	r7, r0
 800e800:	4614      	mov	r4, r2
 800e802:	460e      	mov	r6, r1
 800e804:	b921      	cbnz	r1, 800e810 <_realloc_r+0x14>
 800e806:	4611      	mov	r1, r2
 800e808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e80c:	f7fd b968 	b.w	800bae0 <_malloc_r>
 800e810:	b922      	cbnz	r2, 800e81c <_realloc_r+0x20>
 800e812:	f7fd f919 	bl	800ba48 <_free_r>
 800e816:	4625      	mov	r5, r4
 800e818:	4628      	mov	r0, r5
 800e81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e81c:	f000 f85c 	bl	800e8d8 <_malloc_usable_size_r>
 800e820:	42a0      	cmp	r0, r4
 800e822:	d20f      	bcs.n	800e844 <_realloc_r+0x48>
 800e824:	4621      	mov	r1, r4
 800e826:	4638      	mov	r0, r7
 800e828:	f7fd f95a 	bl	800bae0 <_malloc_r>
 800e82c:	4605      	mov	r5, r0
 800e82e:	2800      	cmp	r0, #0
 800e830:	d0f2      	beq.n	800e818 <_realloc_r+0x1c>
 800e832:	4631      	mov	r1, r6
 800e834:	4622      	mov	r2, r4
 800e836:	f7fe fec8 	bl	800d5ca <memcpy>
 800e83a:	4631      	mov	r1, r6
 800e83c:	4638      	mov	r0, r7
 800e83e:	f7fd f903 	bl	800ba48 <_free_r>
 800e842:	e7e9      	b.n	800e818 <_realloc_r+0x1c>
 800e844:	4635      	mov	r5, r6
 800e846:	e7e7      	b.n	800e818 <_realloc_r+0x1c>

0800e848 <_read_r>:
 800e848:	b538      	push	{r3, r4, r5, lr}
 800e84a:	4604      	mov	r4, r0
 800e84c:	4608      	mov	r0, r1
 800e84e:	4611      	mov	r1, r2
 800e850:	2200      	movs	r2, #0
 800e852:	4d05      	ldr	r5, [pc, #20]	; (800e868 <_read_r+0x20>)
 800e854:	602a      	str	r2, [r5, #0]
 800e856:	461a      	mov	r2, r3
 800e858:	f7f3 ffdf 	bl	800281a <_read>
 800e85c:	1c43      	adds	r3, r0, #1
 800e85e:	d102      	bne.n	800e866 <_read_r+0x1e>
 800e860:	682b      	ldr	r3, [r5, #0]
 800e862:	b103      	cbz	r3, 800e866 <_read_r+0x1e>
 800e864:	6023      	str	r3, [r4, #0]
 800e866:	bd38      	pop	{r3, r4, r5, pc}
 800e868:	20000bb8 	.word	0x20000bb8

0800e86c <__ascii_wctomb>:
 800e86c:	4603      	mov	r3, r0
 800e86e:	4608      	mov	r0, r1
 800e870:	b141      	cbz	r1, 800e884 <__ascii_wctomb+0x18>
 800e872:	2aff      	cmp	r2, #255	; 0xff
 800e874:	d904      	bls.n	800e880 <__ascii_wctomb+0x14>
 800e876:	228a      	movs	r2, #138	; 0x8a
 800e878:	f04f 30ff 	mov.w	r0, #4294967295
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	4770      	bx	lr
 800e880:	2001      	movs	r0, #1
 800e882:	700a      	strb	r2, [r1, #0]
 800e884:	4770      	bx	lr

0800e886 <abort>:
 800e886:	2006      	movs	r0, #6
 800e888:	b508      	push	{r3, lr}
 800e88a:	f000 f855 	bl	800e938 <raise>
 800e88e:	2001      	movs	r0, #1
 800e890:	f7f3 ffb9 	bl	8002806 <_exit>

0800e894 <_fstat_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	2300      	movs	r3, #0
 800e898:	4d06      	ldr	r5, [pc, #24]	; (800e8b4 <_fstat_r+0x20>)
 800e89a:	4604      	mov	r4, r0
 800e89c:	4608      	mov	r0, r1
 800e89e:	4611      	mov	r1, r2
 800e8a0:	602b      	str	r3, [r5, #0]
 800e8a2:	f7f4 f80c 	bl	80028be <_fstat>
 800e8a6:	1c43      	adds	r3, r0, #1
 800e8a8:	d102      	bne.n	800e8b0 <_fstat_r+0x1c>
 800e8aa:	682b      	ldr	r3, [r5, #0]
 800e8ac:	b103      	cbz	r3, 800e8b0 <_fstat_r+0x1c>
 800e8ae:	6023      	str	r3, [r4, #0]
 800e8b0:	bd38      	pop	{r3, r4, r5, pc}
 800e8b2:	bf00      	nop
 800e8b4:	20000bb8 	.word	0x20000bb8

0800e8b8 <_isatty_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	4d05      	ldr	r5, [pc, #20]	; (800e8d4 <_isatty_r+0x1c>)
 800e8be:	4604      	mov	r4, r0
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	f7f4 f80a 	bl	80028dc <_isatty>
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	d102      	bne.n	800e8d2 <_isatty_r+0x1a>
 800e8cc:	682b      	ldr	r3, [r5, #0]
 800e8ce:	b103      	cbz	r3, 800e8d2 <_isatty_r+0x1a>
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	bd38      	pop	{r3, r4, r5, pc}
 800e8d4:	20000bb8 	.word	0x20000bb8

0800e8d8 <_malloc_usable_size_r>:
 800e8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8dc:	1f18      	subs	r0, r3, #4
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	bfbc      	itt	lt
 800e8e2:	580b      	ldrlt	r3, [r1, r0]
 800e8e4:	18c0      	addlt	r0, r0, r3
 800e8e6:	4770      	bx	lr

0800e8e8 <_raise_r>:
 800e8e8:	291f      	cmp	r1, #31
 800e8ea:	b538      	push	{r3, r4, r5, lr}
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	460d      	mov	r5, r1
 800e8f0:	d904      	bls.n	800e8fc <_raise_r+0x14>
 800e8f2:	2316      	movs	r3, #22
 800e8f4:	6003      	str	r3, [r0, #0]
 800e8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fa:	bd38      	pop	{r3, r4, r5, pc}
 800e8fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8fe:	b112      	cbz	r2, 800e906 <_raise_r+0x1e>
 800e900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e904:	b94b      	cbnz	r3, 800e91a <_raise_r+0x32>
 800e906:	4620      	mov	r0, r4
 800e908:	f000 f830 	bl	800e96c <_getpid_r>
 800e90c:	462a      	mov	r2, r5
 800e90e:	4601      	mov	r1, r0
 800e910:	4620      	mov	r0, r4
 800e912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e916:	f000 b817 	b.w	800e948 <_kill_r>
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	d00a      	beq.n	800e934 <_raise_r+0x4c>
 800e91e:	1c59      	adds	r1, r3, #1
 800e920:	d103      	bne.n	800e92a <_raise_r+0x42>
 800e922:	2316      	movs	r3, #22
 800e924:	6003      	str	r3, [r0, #0]
 800e926:	2001      	movs	r0, #1
 800e928:	e7e7      	b.n	800e8fa <_raise_r+0x12>
 800e92a:	2400      	movs	r4, #0
 800e92c:	4628      	mov	r0, r5
 800e92e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e932:	4798      	blx	r3
 800e934:	2000      	movs	r0, #0
 800e936:	e7e0      	b.n	800e8fa <_raise_r+0x12>

0800e938 <raise>:
 800e938:	4b02      	ldr	r3, [pc, #8]	; (800e944 <raise+0xc>)
 800e93a:	4601      	mov	r1, r0
 800e93c:	6818      	ldr	r0, [r3, #0]
 800e93e:	f7ff bfd3 	b.w	800e8e8 <_raise_r>
 800e942:	bf00      	nop
 800e944:	2000001c 	.word	0x2000001c

0800e948 <_kill_r>:
 800e948:	b538      	push	{r3, r4, r5, lr}
 800e94a:	2300      	movs	r3, #0
 800e94c:	4d06      	ldr	r5, [pc, #24]	; (800e968 <_kill_r+0x20>)
 800e94e:	4604      	mov	r4, r0
 800e950:	4608      	mov	r0, r1
 800e952:	4611      	mov	r1, r2
 800e954:	602b      	str	r3, [r5, #0]
 800e956:	f7f3 ff46 	bl	80027e6 <_kill>
 800e95a:	1c43      	adds	r3, r0, #1
 800e95c:	d102      	bne.n	800e964 <_kill_r+0x1c>
 800e95e:	682b      	ldr	r3, [r5, #0]
 800e960:	b103      	cbz	r3, 800e964 <_kill_r+0x1c>
 800e962:	6023      	str	r3, [r4, #0]
 800e964:	bd38      	pop	{r3, r4, r5, pc}
 800e966:	bf00      	nop
 800e968:	20000bb8 	.word	0x20000bb8

0800e96c <_getpid_r>:
 800e96c:	f7f3 bf34 	b.w	80027d8 <_getpid>

0800e970 <_init>:
 800e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e972:	bf00      	nop
 800e974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e976:	bc08      	pop	{r3}
 800e978:	469e      	mov	lr, r3
 800e97a:	4770      	bx	lr

0800e97c <_fini>:
 800e97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e97e:	bf00      	nop
 800e980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e982:	bc08      	pop	{r3}
 800e984:	469e      	mov	lr, r3
 800e986:	4770      	bx	lr
