
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4c0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010fc  0800b6a4  0800b6a4  0001b6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a0  0800c7a0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800c7a0  0800c7a0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c7a0  0800c7a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7a0  0800c7a0  0001c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7a4  0800c7a4  0001c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800c7a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000080  0800c828  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800c828  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b741  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e9f  00000000  00000000  0003b7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  0003f690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  00040ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ebf2  00000000  00000000  00041d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc22  00000000  00000000  0006090a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5b0e  00000000  00000000  0007c52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012203a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b0c  00000000  00000000  00122090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800b68c 	.word	0x0800b68c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800b68c 	.word	0x0800b68c

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__aeabi_f2iz>:
 80006e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006e8:	d30f      	bcc.n	800070a <__aeabi_f2iz+0x2a>
 80006ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80006f2:	d90d      	bls.n	8000710 <__aeabi_f2iz+0x30>
 80006f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80006f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000700:	fa23 f002 	lsr.w	r0, r3, r2
 8000704:	bf18      	it	ne
 8000706:	4240      	negne	r0, r0
 8000708:	4770      	bx	lr
 800070a:	f04f 0000 	mov.w	r0, #0
 800070e:	4770      	bx	lr
 8000710:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000714:	d101      	bne.n	800071a <__aeabi_f2iz+0x3a>
 8000716:	0242      	lsls	r2, r0, #9
 8000718:	d105      	bne.n	8000726 <__aeabi_f2iz+0x46>
 800071a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800071e:	bf08      	it	eq
 8000720:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000724:	4770      	bx	lr
 8000726:	f04f 0000 	mov.w	r0, #0
 800072a:	4770      	bx	lr

0800072c <__aeabi_f2uiz>:
 800072c:	0042      	lsls	r2, r0, #1
 800072e:	d20e      	bcs.n	800074e <__aeabi_f2uiz+0x22>
 8000730:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000734:	d30b      	bcc.n	800074e <__aeabi_f2uiz+0x22>
 8000736:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800073a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800073e:	d409      	bmi.n	8000754 <__aeabi_f2uiz+0x28>
 8000740:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000744:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000748:	fa23 f002 	lsr.w	r0, r3, r2
 800074c:	4770      	bx	lr
 800074e:	f04f 0000 	mov.w	r0, #0
 8000752:	4770      	bx	lr
 8000754:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000758:	d101      	bne.n	800075e <__aeabi_f2uiz+0x32>
 800075a:	0242      	lsls	r2, r0, #9
 800075c:	d102      	bne.n	8000764 <__aeabi_f2uiz+0x38>
 800075e:	f04f 30ff 	mov.w	r0, #4294967295
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 8000770:	4914      	ldr	r1, [pc, #80]	; (80007c4 <MAIN_displayRcfwBanner+0x58>)
 8000772:	2001      	movs	r0, #1
 8000774:	f009 fa18 	bl	8009ba8 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000778:	4913      	ldr	r1, [pc, #76]	; (80007c8 <MAIN_displayRcfwBanner+0x5c>)
 800077a:	2001      	movs	r0, #1
 800077c:	f009 fa14 	bl	8009ba8 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 8000780:	4912      	ldr	r1, [pc, #72]	; (80007cc <MAIN_displayRcfwBanner+0x60>)
 8000782:	2001      	movs	r0, #1
 8000784:	f009 fa10 	bl	8009ba8 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000788:	4911      	ldr	r1, [pc, #68]	; (80007d0 <MAIN_displayRcfwBanner+0x64>)
 800078a:	2001      	movs	r0, #1
 800078c:	f009 fa0c 	bl	8009ba8 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 8000790:	4910      	ldr	r1, [pc, #64]	; (80007d4 <MAIN_displayRcfwBanner+0x68>)
 8000792:	2001      	movs	r0, #1
 8000794:	f009 fa08 	bl	8009ba8 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8000798:	490f      	ldr	r1, [pc, #60]	; (80007d8 <MAIN_displayRcfwBanner+0x6c>)
 800079a:	2001      	movs	r0, #1
 800079c:	f009 fa04 	bl	8009ba8 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80007a0:	490e      	ldr	r1, [pc, #56]	; (80007dc <MAIN_displayRcfwBanner+0x70>)
 80007a2:	2001      	movs	r0, #1
 80007a4:	f009 fa00 	bl	8009ba8 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80007a8:	490d      	ldr	r1, [pc, #52]	; (80007e0 <MAIN_displayRcfwBanner+0x74>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f009 f9fc 	bl	8009ba8 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <MAIN_displayRcfwBanner+0x78>)
 80007b2:	2001      	movs	r0, #1
 80007b4:	f009 f9f8 	bl	8009ba8 <LOG_log>
  LOG_info("");
 80007b8:	4902      	ldr	r1, [pc, #8]	; (80007c4 <MAIN_displayRcfwBanner+0x58>)
 80007ba:	2001      	movs	r0, #1
 80007bc:	f009 f9f4 	bl	8009ba8 <LOG_log>

  return;
 80007c0:	bf00      	nop
}
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	0800b6a4 	.word	0x0800b6a4
 80007c8:	0800b6a8 	.word	0x0800b6a8
 80007cc:	0800b6ec 	.word	0x0800b6ec
 80007d0:	0800b730 	.word	0x0800b730
 80007d4:	0800b774 	.word	0x0800b774
 80007d8:	0800b7b8 	.word	0x0800b7b8
 80007dc:	0800b7fc 	.word	0x0800b7fc
 80007e0:	0800b840 	.word	0x0800b840
 80007e4:	0800b884 	.word	0x0800b884

080007e8 <MAIN_updateLogLevel>:

static void MAIN_updateLogLevel(T_BLU_Data *p_data)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	4839      	ldr	r0, [pc, #228]	; (80008e0 <MAIN_updateLogLevel+0xf8>)
 80007fa:	f004 f91d 	bl	8004a38 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	2201      	movs	r2, #1
 8000804:	4619      	mov	r1, r3
 8000806:	4836      	ldr	r0, [pc, #216]	; (80008e0 <MAIN_updateLogLevel+0xf8>)
 8000808:	f004 fb1a 	bl	8004e40 <HAL_RTC_GetDate>

  switch (p_data->button)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	7c1b      	ldrb	r3, [r3, #16]
 8000810:	3b05      	subs	r3, #5
 8000812:	2b03      	cmp	r3, #3
 8000814:	d84c      	bhi.n	80008b0 <MAIN_updateLogLevel+0xc8>
 8000816:	a201      	add	r2, pc, #4	; (adr r2, 800081c <MAIN_updateLogLevel+0x34>)
 8000818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081c:	0800082d 	.word	0x0800082d
 8000820:	080008ab 	.word	0x080008ab
 8000824:	08000869 	.word	0x08000869
 8000828:	080008a5 	.word	0x080008a5
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 800082c:	4b2d      	ldr	r3, [pc, #180]	; (80008e4 <MAIN_updateLogLevel+0xfc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10a      	bne.n	800084a <MAIN_updateLogLevel+0x62>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4618      	mov	r0, r3
 800083a:	f009 fdbe 	bl	800a3ba <UTI_turnRtcTimeToSeconds>
 800083e:	4603      	mov	r3, r0
 8000840:	4a28      	ldr	r2, [pc, #160]	; (80008e4 <MAIN_updateLogLevel+0xfc>)
 8000842:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000844:	f009 f980 	bl	8009b48 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000848:	e034      	b.n	80008b4 <MAIN_updateLogLevel+0xcc>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	4618      	mov	r0, r3
 8000850:	f009 fdb3 	bl	800a3ba <UTI_turnRtcTimeToSeconds>
 8000854:	4602      	mov	r2, r0
 8000856:	4b23      	ldr	r3, [pc, #140]	; (80008e4 <MAIN_updateLogLevel+0xfc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	1ad3      	subs	r3, r2, r3
 800085c:	2b01      	cmp	r3, #1
 800085e:	d929      	bls.n	80008b4 <MAIN_updateLogLevel+0xcc>
        g_MAIN_padUpPressedStartTime = 0;
 8000860:	4b20      	ldr	r3, [pc, #128]	; (80008e4 <MAIN_updateLogLevel+0xfc>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
      break;
 8000866:	e025      	b.n	80008b4 <MAIN_updateLogLevel+0xcc>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 8000868:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <MAIN_updateLogLevel+0x100>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d10a      	bne.n	8000886 <MAIN_updateLogLevel+0x9e>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	4618      	mov	r0, r3
 8000876:	f009 fda0 	bl	800a3ba <UTI_turnRtcTimeToSeconds>
 800087a:	4603      	mov	r3, r0
 800087c:	4a1a      	ldr	r2, [pc, #104]	; (80008e8 <MAIN_updateLogLevel+0x100>)
 800087e:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 8000880:	f009 f97a 	bl	8009b78 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8000884:	e018      	b.n	80008b8 <MAIN_updateLogLevel+0xd0>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	4618      	mov	r0, r3
 800088c:	f009 fd95 	bl	800a3ba <UTI_turnRtcTimeToSeconds>
 8000890:	4602      	mov	r2, r0
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MAIN_updateLogLevel+0x100>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	1ad3      	subs	r3, r2, r3
 8000898:	2b01      	cmp	r3, #1
 800089a:	d90d      	bls.n	80008b8 <MAIN_updateLogLevel+0xd0>
        g_MAIN_padDownPressedStartTime = 0;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MAIN_updateLogLevel+0x100>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
      break;
 80008a2:	e009      	b.n	80008b8 <MAIN_updateLogLevel+0xd0>

    case BLU_BUTTON_PAD_LEFT:
      LOG_turnOff();
 80008a4:	f009 f92c 	bl	8009b00 <LOG_turnOff>
      break;
 80008a8:	e007      	b.n	80008ba <MAIN_updateLogLevel+0xd2>

    case BLU_BUTTON_PAD_RIGHT:
      LOG_turnOn();
 80008aa:	f009 f911 	bl	8009ad0 <LOG_turnOn>
      break;
 80008ae:	e004      	b.n	80008ba <MAIN_updateLogLevel+0xd2>

    default:
      ; /* Nothing to do */;
      break;
 80008b0:	bf00      	nop
 80008b2:	e002      	b.n	80008ba <MAIN_updateLogLevel+0xd2>
      break;
 80008b4:	bf00      	nop
 80008b6:	e000      	b.n	80008ba <MAIN_updateLogLevel+0xd2>
      break;
 80008b8:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7c1b      	ldrb	r3, [r3, #16]
 80008be:	2b05      	cmp	r3, #5
 80008c0:	d00a      	beq.n	80008d8 <MAIN_updateLogLevel+0xf0>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7c1b      	ldrb	r3, [r3, #16]
 80008c6:	2b07      	cmp	r3, #7
 80008c8:	d006      	beq.n	80008d8 <MAIN_updateLogLevel+0xf0>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MAIN_updateLogLevel+0xfc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <MAIN_updateLogLevel+0x100>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
}
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000614 	.word	0x20000614
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	200000a0 	.word	0x200000a0

080008ec <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00d      	beq.n	800091a <MAIN_updateLedMode+0x2e>
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	f242 720f 	movw	r2, #9999	; 0x270f
 8000904:	4293      	cmp	r3, r2
 8000906:	d808      	bhi.n	800091a <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8000908:	683a      	ldr	r2, [r7, #0]
 800090a:	4911      	ldr	r1, [pc, #68]	; (8000950 <MAIN_updateLedMode+0x64>)
 800090c:	2002      	movs	r0, #2
 800090e:	f009 f94b 	bl	8009ba8 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 8000912:	2000      	movs	r0, #0
 8000914:	f009 f826 	bl	8009964 <LED_setMode>
 8000918:	e016      	b.n	8000948 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d00e      	beq.n	800093e <MAIN_updateLedMode+0x52>
 8000920:	2b02      	cmp	r3, #2
 8000922:	dc10      	bgt.n	8000946 <MAIN_updateLedMode+0x5a>
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <MAIN_updateLedMode+0x42>
 8000928:	2b01      	cmp	r3, #1
 800092a:	d004      	beq.n	8000936 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 800092c:	e00b      	b.n	8000946 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 800092e:	2002      	movs	r0, #2
 8000930:	f009 f818 	bl	8009964 <LED_setMode>
        break;
 8000934:	e008      	b.n	8000948 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000936:	2003      	movs	r0, #3
 8000938:	f009 f814 	bl	8009964 <LED_setMode>
        break;
 800093c:	e004      	b.n	8000948 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 800093e:	2004      	movs	r0, #4
 8000940:	f009 f810 	bl	8009964 <LED_setMode>
        break;
 8000944:	e000      	b.n	8000948 <MAIN_updateLedMode+0x5c>
        break;
 8000946:	bf00      	nop
    }
  }

  return;
 8000948:	bf00      	nop
}
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	0800b8c8 	.word	0x0800b8c8

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095a:	f001 fafd 	bl	8001f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095e:	f000 f993 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000962:	f000 fd95 	bl	8001490 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000966:	f000 fa6f 	bl	8000e48 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800096a:	f000 fd67 	bl	800143c <MX_USART1_UART_Init>
  MX_UART4_Init();
 800096e:	f000 fd3b 	bl	80013e8 <MX_UART4_Init>
  MX_ADC1_Init();
 8000972:	f000 f9e1 	bl	8000d38 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000976:	f000 fc73 	bl	8001260 <MX_TIM8_Init>
  MX_RTC_Init();
 800097a:	f000 fa1b 	bl	8000db4 <MX_RTC_Init>
  MX_TIM7_Init();
 800097e:	f000 fc39 	bl	80011f4 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000982:	f000 fab1 	bl	8000ee8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000986:	f000 fb03 	bl	8000f90 <MX_TIM3_Init>
  MX_TIM4_Init();
 800098a:	f000 fb55 	bl	8001038 <MX_TIM4_Init>
  MX_TIM5_Init();
 800098e:	f000 fba7 	bl	80010e0 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000992:	f000 fbf9 	bl	8001188 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime   = 0;
 8000996:	4ba1      	ldr	r3, [pc, #644]	; (8000c1c <main+0x2c8>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime = 0;
 800099c:	4ba0      	ldr	r3, [pc, #640]	; (8000c20 <main+0x2cc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4618      	mov	r0, r3
 80009a8:	f009 fbb2 	bl	800a110 <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 80009ac:	489d      	ldr	r0, [pc, #628]	; (8000c24 <main+0x2d0>)
 80009ae:	f008 f8a3 	bl	8008af8 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 80009b2:	489d      	ldr	r0, [pc, #628]	; (8000c28 <main+0x2d4>)
 80009b4:	f009 f958 	bl	8009c68 <MAS_init>
//  {
//    HAL_Delay(1000);
//  }

  /* Setup and start using logs */
  LOG_init    (&hrtc                );
 80009b8:	489c      	ldr	r0, [pc, #624]	; (8000c2c <main+0x2d8>)
 80009ba:	f009 f87b 	bl	8009ab4 <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL);
 80009be:	2000      	movs	r0, #0
 80009c0:	f009 f8b2 	bl	8009b28 <LOG_setLevel>
  LOG_turnOn  (                     );
 80009c4:	f009 f884 	bl	8009ad0 <LOG_turnOn>
  LOG_info    ("Starting RCFW"      );
 80009c8:	4999      	ldr	r1, [pc, #612]	; (8000c30 <main+0x2dc>)
 80009ca:	2001      	movs	r0, #1
 80009cc:	f009 f8ec 	bl	8009ba8 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 80009d0:	f7ff fecc 	bl	800076c <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 80009d4:	4897      	ldr	r0, [pc, #604]	; (8000c34 <main+0x2e0>)
 80009d6:	f004 fe09 	bl	80055ec <HAL_TIM_Base_Start>
 80009da:	4603      	mov	r3, r0
 80009dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80009e0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d007      	beq.n	80009f8 <main+0xa4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 80009e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80009ec:	461a      	mov	r2, r3
 80009ee:	4992      	ldr	r1, [pc, #584]	; (8000c38 <main+0x2e4>)
 80009f0:	2003      	movs	r0, #3
 80009f2:	f009 f8d9 	bl	8009ba8 <LOG_log>
 80009f6:	e003      	b.n	8000a00 <main+0xac>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 80009f8:	4990      	ldr	r1, [pc, #576]	; (8000c3c <main+0x2e8>)
 80009fa:	2001      	movs	r0, #1
 80009fc:	f009 f8d4 	bl	8009ba8 <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8000a00:	488f      	ldr	r0, [pc, #572]	; (8000c40 <main+0x2ec>)
 8000a02:	f009 fc85 	bl	800a310 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8000a06:	488e      	ldr	r0, [pc, #568]	; (8000c40 <main+0x2ec>)
 8000a08:	f004 fe7a 	bl	8005700 <HAL_TIM_Base_Start_IT>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000a12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d007      	beq.n	8000a2a <main+0xd6>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8000a1a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a1e:	461a      	mov	r2, r3
 8000a20:	4988      	ldr	r1, [pc, #544]	; (8000c44 <main+0x2f0>)
 8000a22:	2003      	movs	r0, #3
 8000a24:	f009 f8c0 	bl	8009ba8 <LOG_log>
 8000a28:	e003      	b.n	8000a32 <main+0xde>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8000a2a:	4987      	ldr	r1, [pc, #540]	; (8000c48 <main+0x2f4>)
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f009 f8bb 	bl	8009ba8 <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 8000a32:	2004      	movs	r0, #4
 8000a34:	f008 ff96 	bl	8009964 <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8000a38:	4884      	ldr	r0, [pc, #528]	; (8000c4c <main+0x2f8>)
 8000a3a:	f004 fe61 	bl	8005700 <HAL_TIM_Base_Start_IT>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000a44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <main+0x108>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8000a4c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a50:	461a      	mov	r2, r3
 8000a52:	497f      	ldr	r1, [pc, #508]	; (8000c50 <main+0x2fc>)
 8000a54:	2003      	movs	r0, #3
 8000a56:	f009 f8a7 	bl	8009ba8 <LOG_log>
 8000a5a:	e003      	b.n	8000a64 <main+0x110>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8000a5c:	497d      	ldr	r1, [pc, #500]	; (8000c54 <main+0x300>)
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f009 f8a2 	bl	8009ba8 <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000a64:	213c      	movs	r1, #60	; 0x3c
 8000a66:	487c      	ldr	r0, [pc, #496]	; (8000c58 <main+0x304>)
 8000a68:	f005 fa82 	bl	8005f70 <HAL_TIM_Encoder_Start_IT>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000a72:	213c      	movs	r1, #60	; 0x3c
 8000a74:	4879      	ldr	r0, [pc, #484]	; (8000c5c <main+0x308>)
 8000a76:	f005 fa7b 	bl	8005f70 <HAL_TIM_Encoder_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a82:	4313      	orrs	r3, r2
 8000a84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000a88:	213c      	movs	r1, #60	; 0x3c
 8000a8a:	4875      	ldr	r0, [pc, #468]	; (8000c60 <main+0x30c>)
 8000a8c:	f005 fa70 	bl	8005f70 <HAL_TIM_Encoder_Start_IT>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000a9e:	213c      	movs	r1, #60	; 0x3c
 8000aa0:	4870      	ldr	r0, [pc, #448]	; (8000c64 <main+0x310>)
 8000aa2:	f005 fa65 	bl	8005f70 <HAL_TIM_Encoder_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000ab4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d007      	beq.n	8000acc <main+0x178>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 8000abc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4969      	ldr	r1, [pc, #420]	; (8000c68 <main+0x314>)
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f009 f86f 	bl	8009ba8 <LOG_log>
 8000aca:	e003      	b.n	8000ad4 <main+0x180>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000acc:	4967      	ldr	r1, [pc, #412]	; (8000c6c <main+0x318>)
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f009 f86a 	bl	8009ba8 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8000ad4:	4866      	ldr	r0, [pc, #408]	; (8000c70 <main+0x31c>)
 8000ad6:	f004 fd89 	bl	80055ec <HAL_TIM_Base_Start>
 8000ada:	4603      	mov	r3, r0
 8000adc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000ae0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d007      	beq.n	8000af8 <main+0x1a4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 8000ae8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000aec:	461a      	mov	r2, r3
 8000aee:	4961      	ldr	r1, [pc, #388]	; (8000c74 <main+0x320>)
 8000af0:	2003      	movs	r0, #3
 8000af2:	f009 f859 	bl	8009ba8 <LOG_log>
 8000af6:	e003      	b.n	8000b00 <main+0x1ac>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8000af8:	495f      	ldr	r1, [pc, #380]	; (8000c78 <main+0x324>)
 8000afa:	2001      	movs	r0, #1
 8000afc:	f009 f854 	bl	8009ba8 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000b00:	494a      	ldr	r1, [pc, #296]	; (8000c2c <main+0x2d8>)
 8000b02:	485e      	ldr	r0, [pc, #376]	; (8000c7c <main+0x328>)
 8000b04:	f007 fd48 	bl	8008598 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4859      	ldr	r0, [pc, #356]	; (8000c70 <main+0x31c>)
 8000b0c:	f004 ff66 	bl	80059dc <HAL_TIM_PWM_Start>
 8000b10:	4603      	mov	r3, r0
 8000b12:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b16:	2104      	movs	r1, #4
 8000b18:	4855      	ldr	r0, [pc, #340]	; (8000c70 <main+0x31c>)
 8000b1a:	f004 ff5f 	bl	80059dc <HAL_TIM_PWM_Start>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	461a      	mov	r2, r3
 8000b22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b26:	4313      	orrs	r3, r2
 8000b28:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	4850      	ldr	r0, [pc, #320]	; (8000c70 <main+0x31c>)
 8000b30:	f004 ff54 	bl	80059dc <HAL_TIM_PWM_Start>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b42:	210c      	movs	r1, #12
 8000b44:	484a      	ldr	r0, [pc, #296]	; (8000c70 <main+0x31c>)
 8000b46:	f004 ff49 	bl	80059dc <HAL_TIM_PWM_Start>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b52:	4313      	orrs	r3, r2
 8000b54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8000b58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d007      	beq.n	8000b70 <main+0x21c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8000b60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000b64:	461a      	mov	r2, r3
 8000b66:	4946      	ldr	r1, [pc, #280]	; (8000c80 <main+0x32c>)
 8000b68:	2003      	movs	r0, #3
 8000b6a:	f009 f81d 	bl	8009ba8 <LOG_log>
 8000b6e:	e003      	b.n	8000b78 <main+0x224>
  }
  else
  {
    LOG_info("Started PWM channels");
 8000b70:	4944      	ldr	r1, [pc, #272]	; (8000c84 <main+0x330>)
 8000b72:	2001      	movs	r0, #1
 8000b74:	f009 f818 	bl	8009ba8 <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 8000b78:	f007 fef2 	bl	8008960 <BLU_init>
  BLU_initData(&l_bluetoothData);
 8000b7c:	f107 0308 	add.w	r3, r7, #8
 8000b80:	4618      	mov	r0, r3
 8000b82:	f007 fefd 	bl	8008980 <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <main+0x310>)
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <main+0x30c>)
 8000b8c:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <main+0x308>)
 8000b8e:	4932      	ldr	r1, [pc, #200]	; (8000c58 <main+0x304>)
 8000b90:	4837      	ldr	r0, [pc, #220]	; (8000c70 <main+0x31c>)
 8000b92:	f008 f82d 	bl	8008bf0 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <main+0x2e0>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9c:	85fb      	strh	r3, [r7, #46]	; 0x2e

  while (1)
  {
    BLU_receiveData        (&l_bluetoothData);
 8000b9e:	f107 0308 	add.w	r3, r7, #8
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 ff04 	bl	80089b0 <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4618      	mov	r0, r3
 8000bae:	f008 f937 	bl	8008e20 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000bb2:	f008 fb9d 	bl	80092f0 <DRV_getMode>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    BAT_update         (&l_voltageInMv            );
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f007 fd38 	bl	8008634 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fe8d 	bl	80008ec <MAIN_updateLedMode>
    MAIN_updateLogLevel(&l_bluetoothData          );
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f7ff fe06 	bl	80007e8 <MAIN_updateLogLevel>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000bdc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000be0:	f009 fbaa 	bl	800a338 <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4618      	mov	r0, r3
 8000bea:	f007 ffdd 	bl	8008ba8 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f009 f890 	bl	8009d18 <MAS_updateFifo>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <main+0x2e0>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfe:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_deltaTime   = l_lastTime - l_currentTime;
 8000c00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000c02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	853b      	strh	r3, [r7, #40]	; 0x28
    l_lastTime    = l_currentTime;
 8000c08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c0a:	85fb      	strh	r3, [r7, #46]	; 0x2e

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTime);
 8000c0c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4611      	mov	r1, r2
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 fa43 	bl	80090a0 <DRV_updateFromMaster>
    BLU_receiveData        (&l_bluetoothData);
 8000c1a:	e7c0      	b.n	8000b9e <main+0x24a>
 8000c1c:	2000009c 	.word	0x2000009c
 8000c20:	200000a0 	.word	0x200000a0
 8000c24:	200005a0 	.word	0x200005a0
 8000c28:	20000790 	.word	0x20000790
 8000c2c:	20000614 	.word	0x20000614
 8000c30:	0800b8e8 	.word	0x0800b8e8
 8000c34:	20000628 	.word	0x20000628
 8000c38:	0800b8f8 	.word	0x0800b8f8
 8000c3c:	0800b930 	.word	0x0800b930
 8000c40:	200008b8 	.word	0x200008b8
 8000c44:	0800b954 	.word	0x0800b954
 8000c48:	0800b990 	.word	0x0800b990
 8000c4c:	200006dc 	.word	0x200006dc
 8000c50:	0800b9b4 	.word	0x0800b9b4
 8000c54:	0800b9f0 	.word	0x0800b9f0
 8000c58:	20000804 	.word	0x20000804
 8000c5c:	200004bc 	.word	0x200004bc
 8000c60:	20000354 	.word	0x20000354
 8000c64:	20000408 	.word	0x20000408
 8000c68:	0800ba0c 	.word	0x0800ba0c
 8000c6c:	0800ba48 	.word	0x0800ba48
 8000c70:	200002a0 	.word	0x200002a0
 8000c74:	0800ba6c 	.word	0x0800ba6c
 8000c78:	0800baa4 	.word	0x0800baa4
 8000c7c:	20000570 	.word	0x20000570
 8000c80:	0800bac4 	.word	0x0800bac4
 8000c84:	0800bafc 	.word	0x0800bafc

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b096      	sub	sp, #88	; 0x58
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f009 fc60 	bl	800a55c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
 8000cba:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000cbc:	230a      	movs	r3, #10
 8000cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 fd33 	bl	8003740 <HAL_RCC_OscConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000ce0:	f000 fcd6 	bl	8001690 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f003 f88e 	bl	8003e20 <HAL_RCC_ClockConfig>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d0a:	f000 fcc1 	bl	8001690 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 fabe 	bl	80042a0 <HAL_RCCEx_PeriphCLKConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d2a:	f000 fcb1 	bl	8001690 <Error_Handler>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3758      	adds	r7, #88	; 0x58
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d4a:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <MX_ADC1_Init+0x78>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d68:	4b10      	ldr	r3, [pc, #64]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d74:	480d      	ldr	r0, [pc, #52]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d76:	f001 f951 	bl	800201c <HAL_ADC_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d80:	f000 fc86 	bl	8001690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d84:	2305      	movs	r3, #5
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_ADC1_Init+0x74>)
 8000d96:	f001 fcf3 	bl	8002780 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000da0:	f000 fc76 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000570 	.word	0x20000570
 8000db0:	40012400 	.word	0x40012400

08000db4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	801a      	strh	r2, [r3, #0]
 8000dc2:	460a      	mov	r2, r1
 8000dc4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_RTC_Init+0x8c>)
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <MX_RTC_Init+0x90>)
 8000dce:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000dd0:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_RTC_Init+0x8c>)
 8000dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_RTC_Init+0x8c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <MX_RTC_Init+0x8c>)
 8000de0:	f003 fc7a 	bl	80046d8 <HAL_RTC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000dea:	f000 fc51 	bl	8001690 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480f      	ldr	r0, [pc, #60]	; (8000e40 <MX_RTC_Init+0x8c>)
 8000e02:	f003 fd33 	bl	800486c <HAL_RTC_SetTime>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 fc40 	bl	8001690 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e10:	2301      	movs	r3, #1
 8000e12:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e14:	2301      	movs	r3, #1
 8000e16:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e20:	463b      	mov	r3, r7
 8000e22:	2201      	movs	r2, #1
 8000e24:	4619      	mov	r1, r3
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <MX_RTC_Init+0x8c>)
 8000e28:	f003 feec 	bl	8004c04 <HAL_RTC_SetDate>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e32:	f000 fc2d 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000614 	.word	0x20000614
 8000e44:	40002800 	.word	0x40002800

08000e48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e66:	4a1f      	ldr	r2, [pc, #124]	; (8000ee4 <MX_TIM1_Init+0x9c>)
 8000e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e6c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e7a:	22f9      	movs	r2, #249	; 0xf9
 8000e7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7e:	4b18      	ldr	r3, [pc, #96]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e8c:	2280      	movs	r2, #128	; 0x80
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e90:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000e92:	f004 fad9 	bl	8005448 <HAL_TIM_Base_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e9c:	f000 fbf8 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ea6:	f107 0308 	add.w	r3, r7, #8
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000eae:	f005 fc03 	bl	80066b8 <HAL_TIM_ConfigClockSource>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000eb8:	f000 fbea 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_TIM1_Init+0x98>)
 8000eca:	f006 fb51 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ed4:	f000 fbdc 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200006dc 	.word	0x200006dc
 8000ee4:	40012c00 	.word	0x40012c00

08000ee8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08c      	sub	sp, #48	; 0x30
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	2224      	movs	r2, #36	; 0x24
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f009 fb30 	bl	800a55c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f04:	4b21      	ldr	r3, [pc, #132]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f0c:	4b1f      	ldr	r3, [pc, #124]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f18:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f20:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f26:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f28:	2280      	movs	r2, #128	; 0x80
 8000f2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f34:	2301      	movs	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f44:	2301      	movs	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	4619      	mov	r1, r3
 8000f56:	480d      	ldr	r0, [pc, #52]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f58:	f004 fe68 	bl	8005c2c <HAL_TIM_Encoder_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f62:	f000 fb95 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <MX_TIM2_Init+0xa4>)
 8000f74:	f006 fafc 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f7e:	f000 fb87 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	3730      	adds	r7, #48	; 0x30
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000804 	.word	0x20000804

08000f90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2224      	movs	r2, #36	; 0x24
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 fadc 	bl	800a55c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fae:	4a21      	ldr	r2, [pc, #132]	; (8001034 <MX_TIM3_Init+0xa4>)
 8000fb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fc4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000fce:	2280      	movs	r2, #128	; 0x80
 8000fd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000fe2:	230a      	movs	r3, #10
 8000fe4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fea:	2301      	movs	r3, #1
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_TIM3_Init+0xa0>)
 8000ffe:	f004 fe15 	bl	8005c2c <HAL_TIM_Encoder_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001008:	f000 fb42 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_TIM3_Init+0xa0>)
 800101a:	f006 faa9 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001024:	f000 fb34 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3730      	adds	r7, #48	; 0x30
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200004bc 	.word	0x200004bc
 8001034:	40000400 	.word	0x40000400

08001038 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08c      	sub	sp, #48	; 0x30
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2224      	movs	r2, #36	; 0x24
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f009 fa88 	bl	800a55c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <MX_TIM4_Init+0xa0>)
 8001056:	4a21      	ldr	r2, [pc, #132]	; (80010dc <MX_TIM4_Init+0xa4>)
 8001058:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800105a:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_TIM4_Init+0xa0>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <MX_TIM4_Init+0xa0>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001066:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_TIM4_Init+0xa0>)
 8001068:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800106c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_TIM4_Init+0xa0>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <MX_TIM4_Init+0xa0>)
 8001076:	2280      	movs	r2, #128	; 0x80
 8001078:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800107a:	2303      	movs	r3, #3
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001082:	2301      	movs	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800108a:	230a      	movs	r3, #10
 800108c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001092:	2301      	movs	r3, #1
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4619      	mov	r1, r3
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <MX_TIM4_Init+0xa0>)
 80010a6:	f004 fdc1 	bl	8005c2c <HAL_TIM_Encoder_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010b0:	f000 faee 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <MX_TIM4_Init+0xa0>)
 80010c2:	f006 fa55 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80010cc:	f000 fae0 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3730      	adds	r7, #48	; 0x30
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000354 	.word	0x20000354
 80010dc:	40000800 	.word	0x40000800

080010e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	2224      	movs	r2, #36	; 0x24
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 fa34 	bl	800a55c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_TIM5_Init+0xa0>)
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <MX_TIM5_Init+0xa4>)
 8001100:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001102:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <MX_TIM5_Init+0xa0>)
 8001104:	2200      	movs	r2, #0
 8001106:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <MX_TIM5_Init+0xa0>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM5_Init+0xa0>)
 8001110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001114:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <MX_TIM5_Init+0xa0>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <MX_TIM5_Init+0xa0>)
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001122:	2303      	movs	r3, #3
 8001124:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800112a:	2301      	movs	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001132:	230a      	movs	r3, #10
 8001134:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800113a:	2301      	movs	r3, #1
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001146:	f107 030c 	add.w	r3, r7, #12
 800114a:	4619      	mov	r1, r3
 800114c:	480c      	ldr	r0, [pc, #48]	; (8001180 <MX_TIM5_Init+0xa0>)
 800114e:	f004 fd6d 	bl	8005c2c <HAL_TIM_Encoder_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001158:	f000 fa9a 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4805      	ldr	r0, [pc, #20]	; (8001180 <MX_TIM5_Init+0xa0>)
 800116a:	f006 fa01 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001174:	f000 fa8c 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	3730      	adds	r7, #48	; 0x30
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000408 	.word	0x20000408
 8001184:	40000c00 	.word	0x40000c00

08001188 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001196:	4b15      	ldr	r3, [pc, #84]	; (80011ec <MX_TIM6_Init+0x64>)
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <MX_TIM6_Init+0x68>)
 800119a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_TIM6_Init+0x64>)
 800119e:	2207      	movs	r2, #7
 80011a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_TIM6_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_TIM6_Init+0x64>)
 80011aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_TIM6_Init+0x64>)
 80011b2:	2280      	movs	r2, #128	; 0x80
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <MX_TIM6_Init+0x64>)
 80011b8:	f004 f946 	bl	8005448 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80011c2:	f000 fa65 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80011ce:	463b      	mov	r3, r7
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_TIM6_Init+0x64>)
 80011d4:	f006 f9cc 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80011de:	f000 fa57 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000628 	.word	0x20000628
 80011f0:	40001000 	.word	0x40001000

080011f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011fa:	463b      	mov	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001202:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_TIM7_Init+0x64>)
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <MX_TIM7_Init+0x68>)
 8001206:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_TIM7_Init+0x64>)
 800120a:	2207      	movs	r2, #7
 800120c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_TIM7_Init+0x64>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001214:	4b10      	ldr	r3, [pc, #64]	; (8001258 <MX_TIM7_Init+0x64>)
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_TIM7_Init+0x64>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001222:	480d      	ldr	r0, [pc, #52]	; (8001258 <MX_TIM7_Init+0x64>)
 8001224:	f004 f910 	bl	8005448 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800122e:	f000 fa2f 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_TIM7_Init+0x64>)
 8001240:	f006 f996 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800124a:	f000 fa21 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200008b8 	.word	0x200008b8
 800125c:	40001400 	.word	0x40001400

08001260 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b096      	sub	sp, #88	; 0x58
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001266:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001274:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
 800128e:	615a      	str	r2, [r3, #20]
 8001290:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2220      	movs	r2, #32
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f009 f95f 	bl	800a55c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800129e:	4b50      	ldr	r3, [pc, #320]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012a0:	4a50      	ldr	r2, [pc, #320]	; (80013e4 <MX_TIM8_Init+0x184>)
 80012a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80012a4:	4b4e      	ldr	r3, [pc, #312]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012a6:	2207      	movs	r2, #7
 80012a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012aa:	4b4d      	ldr	r3, [pc, #308]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012b2:	2264      	movs	r2, #100	; 0x64
 80012b4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80012bc:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c2:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80012c8:	4845      	ldr	r0, [pc, #276]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012ca:	f004 f8bd 	bl	8005448 <HAL_TIM_Base_Init>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80012d4:	f000 f9dc 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012dc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80012de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012e2:	4619      	mov	r1, r3
 80012e4:	483e      	ldr	r0, [pc, #248]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012e6:	f005 f9e7 	bl	80066b8 <HAL_TIM_ConfigClockSource>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80012f0:	f000 f9ce 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <MX_TIM8_Init+0x180>)
 80012f6:	f004 fa95 	bl	8005824 <HAL_TIM_PWM_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001300:	f000 f9c6 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800130c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001310:	4619      	mov	r1, r3
 8001312:	4833      	ldr	r0, [pc, #204]	; (80013e0 <MX_TIM8_Init+0x180>)
 8001314:	f006 f92c 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800131e:	f000 f9b7 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001322:	2360      	movs	r3, #96	; 0x60
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132a:	2300      	movs	r3, #0
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	4826      	ldr	r0, [pc, #152]	; (80013e0 <MX_TIM8_Init+0x180>)
 8001348:	f005 f818 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001352:	f000 f99d 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2204      	movs	r2, #4
 800135c:	4619      	mov	r1, r3
 800135e:	4820      	ldr	r0, [pc, #128]	; (80013e0 <MX_TIM8_Init+0x180>)
 8001360:	f005 f80c 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 800136a:	f000 f991 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800136e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001372:	2208      	movs	r2, #8
 8001374:	4619      	mov	r1, r3
 8001376:	481a      	ldr	r0, [pc, #104]	; (80013e0 <MX_TIM8_Init+0x180>)
 8001378:	f005 f800 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001382:	f000 f985 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	220c      	movs	r2, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_TIM8_Init+0x180>)
 8001390:	f004 fff4 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800139a:	f000 f979 	bl	8001690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	4619      	mov	r1, r3
 80013c0:	4807      	ldr	r0, [pc, #28]	; (80013e0 <MX_TIM8_Init+0x180>)
 80013c2:	f006 f9a5 	bl	8007710 <HAL_TIMEx_ConfigBreakDeadTime>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 80013cc:	f000 f960 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_TIM8_Init+0x180>)
 80013d2:	f000 fb7f 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 80013d6:	bf00      	nop
 80013d8:	3758      	adds	r7, #88	; 0x58
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200002a0 	.word	0x200002a0
 80013e4:	40013400 	.word	0x40013400

080013e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_UART4_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	; (8001438 <MX_UART4_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <MX_UART4_Init+0x4c>)
 80013f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_UART4_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_UART4_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_UART4_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <MX_UART4_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <MX_UART4_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_UART4_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_UART4_Init+0x4c>)
 8001420:	f006 fa5e 	bl	80078e0 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f931 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000790 	.word	0x20000790
 8001438:	40004c00 	.word	0x40004c00

0800143c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <MX_USART1_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <MX_USART1_UART_Init+0x4c>)
 8001474:	f006 fa34 	bl	80078e0 <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f000 f907 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200005a0 	.word	0x200005a0
 800148c:	40013800 	.word	0x40013800

08001490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a4:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	4a4d      	ldr	r2, [pc, #308]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014aa:	f043 0310 	orr.w	r3, r3, #16
 80014ae:	6193      	str	r3, [r2, #24]
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	f003 0310 	and.w	r3, r3, #16
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	4b48      	ldr	r3, [pc, #288]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a47      	ldr	r2, [pc, #284]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014c2:	f043 0304 	orr.w	r3, r3, #4
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b45      	ldr	r3, [pc, #276]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b42      	ldr	r3, [pc, #264]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a41      	ldr	r2, [pc, #260]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b3f      	ldr	r3, [pc, #252]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ec:	4b3c      	ldr	r3, [pc, #240]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a3b      	ldr	r2, [pc, #236]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014f2:	f043 0320 	orr.w	r3, r3, #32
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_GPIO_Init+0x150>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0320 	and.w	r3, r3, #32
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 8001504:	2200      	movs	r2, #0
 8001506:	f243 013a 	movw	r1, #12346	; 0x303a
 800150a:	4836      	ldr	r0, [pc, #216]	; (80015e4 <MX_GPIO_Init+0x154>)
 800150c:	f002 f8b2 	bl	8003674 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	2110      	movs	r1, #16
 8001514:	4834      	ldr	r0, [pc, #208]	; (80015e8 <MX_GPIO_Init+0x158>)
 8001516:	f002 f8ad 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	2133      	movs	r1, #51	; 0x33
 800151e:	4833      	ldr	r0, [pc, #204]	; (80015ec <MX_GPIO_Init+0x15c>)
 8001520:	f002 f8a8 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2104      	movs	r1, #4
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <MX_GPIO_Init+0x160>)
 800152a:	f002 f8a3 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800152e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2302      	movs	r3, #2
 800153e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4619      	mov	r1, r3
 8001546:	4827      	ldr	r0, [pc, #156]	; (80015e4 <MX_GPIO_Init+0x154>)
 8001548:	f001 fe00 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 800154c:	f241 033a 	movw	r3, #4154	; 0x103a
 8001550:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	f107 0310 	add.w	r3, r7, #16
 8001562:	4619      	mov	r1, r3
 8001564:	481f      	ldr	r0, [pc, #124]	; (80015e4 <MX_GPIO_Init+0x154>)
 8001566:	f001 fdf1 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 800156a:	2304      	movs	r3, #4
 800156c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	4819      	ldr	r0, [pc, #100]	; (80015e4 <MX_GPIO_Init+0x154>)
 800157e:	f001 fde5 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001582:	2310      	movs	r3, #16
 8001584:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 0310 	add.w	r3, r7, #16
 8001596:	4619      	mov	r1, r3
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <MX_GPIO_Init+0x158>)
 800159a:	f001 fdd7 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 800159e:	2333      	movs	r3, #51	; 0x33
 80015a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	4619      	mov	r1, r3
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <MX_GPIO_Init+0x15c>)
 80015b6:	f001 fdc9 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 80015ba:	2304      	movs	r3, #4
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_GPIO_Init+0x160>)
 80015d2:	f001 fdbb 	bl	800314c <HAL_GPIO_Init>

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40011000 	.word	0x40011000
 80015e8:	40010800 	.word	0x40010800
 80015ec:	40010c00 	.word	0x40010c00
 80015f0:	40011400 	.word	0x40011400

080015f4 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a0b      	ldr	r2, [pc, #44]	; (800162c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00b      	beq.n	800161c <HAL_TIM_IC_CaptureCallback+0x28>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_TIM_IC_CaptureCallback+0x28>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d003      	beq.n	800161c <HAL_TIM_IC_CaptureCallback+0x28>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a08      	ldr	r2, [pc, #32]	; (8001638 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d103      	bne.n	8001624 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f007 fbbb 	bl	8008d98 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8001622:	bf00      	nop
 8001624:	bf00      	nop
}
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000804 	.word	0x20000804
 8001630:	200004bc 	.word	0x200004bc
 8001634:	20000354 	.word	0x20000354
 8001638:	20000408 	.word	0x20000408

0800163c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d101      	bne.n	8001650 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 800164c:	f008 f9d2 	bl	80099f4 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	200006dc 	.word	0x200006dc

0800165c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a08      	ldr	r2, [pc, #32]	; (8001688 <HAL_UART_RxCpltCallback+0x2c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 800166c:	f007 fa70 	bl	8008b50 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8001670:	e005      	b.n	800167e <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_UART_RxCpltCallback+0x30>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 800167a:	f008 fb21 	bl	8009cc0 <MAS_receiveData>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200005a0 	.word	0x200005a0
 800168c:	20000790 	.word	0x20000790

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8001698:	4902      	ldr	r1, [pc, #8]	; (80016a4 <Error_Handler+0x14>)
 800169a:	2003      	movs	r0, #3
 800169c:	f008 fa84 	bl	8009ba8 <LOG_log>

  while (1)
 80016a0:	e7fe      	b.n	80016a0 <Error_Handler+0x10>
 80016a2:	bf00      	nop
 80016a4:	0800bb14 	.word	0x0800bb14

080016a8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	4904      	ldr	r1, [pc, #16]	; (80016c8 <assert_failed+0x20>)
 80016b8:	2003      	movs	r0, #3
 80016ba:	f008 fa75 	bl	8009ba8 <LOG_log>

    return;
 80016be:	bf00      	nop
  /* USER CODE END 6 */
}
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	0800bb30 	.word	0x0800bb30

080016cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_MspInit+0x5c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	4a14      	ldr	r2, [pc, #80]	; (8001728 <HAL_MspInit+0x5c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6193      	str	r3, [r2, #24]
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_MspInit+0x5c>)
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x5c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x5c>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	61d3      	str	r3, [r2, #28]
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x5c>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_MspInit+0x60>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_MspInit+0x60>)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171e:	bf00      	nop
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40021000 	.word	0x40021000
 800172c:	40010000 	.word	0x40010000

08001730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_ADC_MspInit+0x6c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d121      	bne.n	8001794 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_ADC_MspInit+0x70>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <HAL_ADC_MspInit+0x70>)
 8001756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <HAL_ADC_MspInit+0x70>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <HAL_ADC_MspInit+0x70>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <HAL_ADC_MspInit+0x70>)
 800176e:	f043 0304 	orr.w	r3, r3, #4
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_ADC_MspInit+0x70>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8001780:	2320      	movs	r3, #32
 8001782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001784:	2303      	movs	r3, #3
 8001786:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0310 	add.w	r3, r7, #16
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_ADC_MspInit+0x74>)
 8001790:	f001 fcdc 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001794:	bf00      	nop
 8001796:	3720      	adds	r7, #32
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40012400 	.word	0x40012400
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010800 	.word	0x40010800

080017a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <HAL_RTC_MspInit+0x3c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d110      	bne.n	80017dc <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80017ba:	f001 ffb5 	bl	8003728 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_RTC_MspInit+0x40>)
 80017c0:	69db      	ldr	r3, [r3, #28]
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_RTC_MspInit+0x40>)
 80017c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c8:	61d3      	str	r3, [r2, #28]
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_RTC_MspInit+0x40>)
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_RTC_MspInit+0x44>)
 80017d8:	2201      	movs	r2, #1
 80017da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40002800 	.word	0x40002800
 80017e8:	40021000 	.word	0x40021000
 80017ec:	4242043c 	.word	0x4242043c

080017f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a28      	ldr	r2, [pc, #160]	; (80018a0 <HAL_TIM_Base_MspInit+0xb0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d114      	bne.n	800182c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001802:	4b28      	ldr	r3, [pc, #160]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001804:	699b      	ldr	r3, [r3, #24]
 8001806:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001808:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800180c:	6193      	str	r3, [r2, #24]
 800180e:	4b25      	ldr	r3, [pc, #148]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2106      	movs	r1, #6
 800181e:	2019      	movs	r0, #25
 8001820:	f001 fb02 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001824:	2019      	movs	r0, #25
 8001826:	f001 fb2b 	bl	8002e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800182a:	e034      	b.n	8001896 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <HAL_TIM_Base_MspInit+0xb8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d10c      	bne.n	8001850 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
}
 800184e:	e022      	b.n	8001896 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_TIM_Base_MspInit+0xbc>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10c      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	4a11      	ldr	r2, [pc, #68]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001860:	f043 0320 	orr.w	r3, r3, #32
 8001864:	61d3      	str	r3, [r2, #28]
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	e010      	b.n	8001896 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_TIM_Base_MspInit+0xc0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10b      	bne.n	8001896 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	4a08      	ldr	r2, [pc, #32]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 8001884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_TIM_Base_MspInit+0xb4>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	40021000 	.word	0x40021000
 80018a8:	40001000 	.word	0x40001000
 80018ac:	40001400 	.word	0x40001400
 80018b0:	40013400 	.word	0x40013400

080018b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b090      	sub	sp, #64	; 0x40
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d2:	d157      	bne.n	8001984 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018d4:	4b78      	ldr	r3, [pc, #480]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	4a77      	ldr	r2, [pc, #476]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	61d3      	str	r3, [r2, #28]
 80018e0:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80018ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b72      	ldr	r3, [pc, #456]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a71      	ldr	r2, [pc, #452]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b69      	ldr	r3, [pc, #420]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 800191c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001920:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001922:	2300      	movs	r3, #0
 8001924:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800192e:	4619      	mov	r1, r3
 8001930:	4862      	ldr	r0, [pc, #392]	; (8001abc <HAL_TIM_Encoder_MspInit+0x208>)
 8001932:	f001 fc0b 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 8001936:	2308      	movs	r3, #8
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001946:	4619      	mov	r1, r3
 8001948:	485d      	ldr	r0, [pc, #372]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800194a:	f001 fbff 	bl	800314c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800194e:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x210>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800195e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800196c:	4a55      	ldr	r2, [pc, #340]	; (8001ac4 <HAL_TIM_Encoder_MspInit+0x210>)
 800196e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001970:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2104      	movs	r1, #4
 8001976:	201c      	movs	r0, #28
 8001978:	f001 fa56 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800197c:	201c      	movs	r0, #28
 800197e:	f001 fa7f 	bl	8002e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001982:	e094      	b.n	8001aae <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a4f      	ldr	r2, [pc, #316]	; (8001ac8 <HAL_TIM_Encoder_MspInit+0x214>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d12c      	bne.n	80019e8 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	4a43      	ldr	r2, [pc, #268]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6193      	str	r3, [r2, #24]
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80019b4:	699b      	ldr	r3, [r3, #24]
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c2:	2300      	movs	r3, #0
 80019c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ce:	4619      	mov	r1, r3
 80019d0:	483a      	ldr	r0, [pc, #232]	; (8001abc <HAL_TIM_Encoder_MspInit+0x208>)
 80019d2:	f001 fbbb 	bl	800314c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2104      	movs	r1, #4
 80019da:	201d      	movs	r0, #29
 80019dc:	f001 fa24 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019e0:	201d      	movs	r0, #29
 80019e2:	f001 fa4d 	bl	8002e80 <HAL_NVIC_EnableIRQ>
}
 80019e6:	e062      	b.n	8001aae <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a37      	ldr	r2, [pc, #220]	; (8001acc <HAL_TIM_Encoder_MspInit+0x218>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d12c      	bne.n	8001a4c <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019f2:	4b31      	ldr	r3, [pc, #196]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a30      	ldr	r2, [pc, #192]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a10:	f043 0308 	orr.w	r3, r3, #8
 8001a14:	6193      	str	r3, [r2, #24]
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4822      	ldr	r0, [pc, #136]	; (8001ac0 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001a36:	f001 fb89 	bl	800314c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	201e      	movs	r0, #30
 8001a40:	f001 f9f2 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a44:	201e      	movs	r0, #30
 8001a46:	f001 fa1b 	bl	8002e80 <HAL_NVIC_EnableIRQ>
}
 8001a4a:	e030      	b.n	8001aae <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d12b      	bne.n	8001aae <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001a86:	2303      	movs	r3, #3
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	4619      	mov	r1, r3
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <HAL_TIM_Encoder_MspInit+0x208>)
 8001a9a:	f001 fb57 	bl	800314c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	2032      	movs	r0, #50	; 0x32
 8001aa4:	f001 f9c0 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f001 f9e9 	bl	8002e80 <HAL_NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3740      	adds	r7, #64	; 0x40
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40010800 	.word	0x40010800
 8001ac0:	40010c00 	.word	0x40010c00
 8001ac4:	40010000 	.word	0x40010000
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40000c00 	.word	0x40000c00

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_TIM_MspPostInit+0x5c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d118      	bne.n	8001b26 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <HAL_TIM_MspPostInit+0x60>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a0e      	ldr	r2, [pc, #56]	; (8001b34 <HAL_TIM_MspPostInit+0x60>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_TIM_MspPostInit+0x60>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001b0c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4805      	ldr	r0, [pc, #20]	; (8001b38 <HAL_TIM_MspPostInit+0x64>)
 8001b22:	f001 fb13 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b26:	bf00      	nop
 8001b28:	3720      	adds	r7, #32
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40013400 	.word	0x40013400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40011000 	.word	0x40011000

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a40      	ldr	r2, [pc, #256]	; (8001c58 <HAL_UART_MspInit+0x11c>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d13a      	bne.n	8001bd2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4a3e      	ldr	r2, [pc, #248]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001b62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b66:	61d3      	str	r3, [r2, #28]
 8001b68:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a38      	ldr	r2, [pc, #224]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0310 	and.w	r3, r3, #16
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8001b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0318 	add.w	r3, r7, #24
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	482f      	ldr	r0, [pc, #188]	; (8001c60 <HAL_UART_MspInit+0x124>)
 8001ba2:	f001 fad3 	bl	800314c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 8001ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4829      	ldr	r0, [pc, #164]	; (8001c60 <HAL_UART_MspInit+0x124>)
 8001bbc:	f001 fac6 	bl	800314c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2105      	movs	r1, #5
 8001bc4:	2034      	movs	r0, #52	; 0x34
 8001bc6:	f001 f92f 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bca:	2034      	movs	r0, #52	; 0x34
 8001bcc:	f001 f958 	bl	8002e80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd0:	e03e      	b.n	8001c50 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a23      	ldr	r2, [pc, #140]	; (8001c64 <HAL_UART_MspInit+0x128>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d139      	bne.n	8001c50 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b1c      	ldr	r3, [pc, #112]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <HAL_UART_MspInit+0x120>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8001c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <HAL_UART_MspInit+0x12c>)
 8001c22:	f001 fa93 	bl	800314c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c34:	f107 0318 	add.w	r3, r7, #24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <HAL_UART_MspInit+0x12c>)
 8001c3c:	f001 fa86 	bl	800314c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2105      	movs	r1, #5
 8001c44:	2025      	movs	r0, #37	; 0x25
 8001c46:	f001 f8ef 	bl	8002e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c4a:	2025      	movs	r0, #37	; 0x25
 8001c4c:	f001 f918 	bl	8002e80 <HAL_NVIC_EnableIRQ>
}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	; 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40004c00 	.word	0x40004c00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40011000 	.word	0x40011000
 8001c64:	40013800 	.word	0x40013800
 8001c68:	40010800 	.word	0x40010800

08001c6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001c70:	4902      	ldr	r1, [pc, #8]	; (8001c7c <NMI_Handler+0x10>)
 8001c72:	2003      	movs	r0, #3
 8001c74:	f007 ff98 	bl	8009ba8 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c78:	e7fe      	b.n	8001c78 <NMI_Handler+0xc>
 8001c7a:	bf00      	nop
 8001c7c:	0800bb48 	.word	0x0800bb48

08001c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001c84:	4902      	ldr	r1, [pc, #8]	; (8001c90 <HardFault_Handler+0x10>)
 8001c86:	2003      	movs	r0, #3
 8001c88:	f007 ff8e 	bl	8009ba8 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <HardFault_Handler+0xc>
 8001c8e:	bf00      	nop
 8001c90:	0800bb60 	.word	0x0800bb60

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001c98:	4902      	ldr	r1, [pc, #8]	; (8001ca4 <MemManage_Handler+0x10>)
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f007 ff84 	bl	8009ba8 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0xc>
 8001ca2:	bf00      	nop
 8001ca4:	0800bb80 	.word	0x0800bb80

08001ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001cac:	4902      	ldr	r1, [pc, #8]	; (8001cb8 <BusFault_Handler+0x10>)
 8001cae:	2003      	movs	r0, #3
 8001cb0:	f007 ff7a 	bl	8009ba8 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <BusFault_Handler+0xc>
 8001cb6:	bf00      	nop
 8001cb8:	0800bba0 	.word	0x0800bba0

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001cc0:	4902      	ldr	r1, [pc, #8]	; (8001ccc <UsageFault_Handler+0x10>)
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f007 ff70 	bl	8009ba8 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0xc>
 8001cca:	bf00      	nop
 8001ccc:	0800bbc0 	.word	0x0800bbc0

08001cd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001cd4:	4902      	ldr	r1, [pc, #8]	; (8001ce0 <SVC_Handler+0x10>)
 8001cd6:	2003      	movs	r0, #3
 8001cd8:	f007 ff66 	bl	8009ba8 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	0800bbe0 	.word	0x0800bbe0

08001ce4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001ce8:	4902      	ldr	r1, [pc, #8]	; (8001cf4 <DebugMon_Handler+0x10>)
 8001cea:	2003      	movs	r0, #3
 8001cec:	f007 ff5c 	bl	8009ba8 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	0800bbf8 	.word	0x0800bbf8

08001cf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001cfc:	4902      	ldr	r1, [pc, #8]	; (8001d08 <PendSV_Handler+0x10>)
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f007 ff52 	bl	8009ba8 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0800bc18 	.word	0x0800bc18

08001d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d10:	f000 f968 	bl	8001fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM1_UP_IRQHandler+0x10>)
 8001d1e:	f004 fa05 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200006dc 	.word	0x200006dc

08001d2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <TIM2_IRQHandler+0x10>)
 8001d32:	f004 f9fb 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000804 	.word	0x20000804

08001d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM3_IRQHandler+0x10>)
 8001d46:	f004 f9f1 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200004bc 	.word	0x200004bc

08001d54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <TIM4_IRQHandler+0x10>)
 8001d5a:	f004 f9e7 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000354 	.word	0x20000354

08001d68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <USART1_IRQHandler+0x10>)
 8001d6e:	f005 ff3d 	bl	8007bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	200005a0 	.word	0x200005a0

08001d7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM5_IRQHandler+0x10>)
 8001d82:	f004 f9d3 	bl	800612c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000408 	.word	0x20000408

08001d90 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <UART4_IRQHandler+0x10>)
 8001d96:	f005 ff29 	bl	8007bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000790 	.word	0x20000790

08001da4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e00a      	b.n	8001dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001db6:	f3af 8000 	nop.w
 8001dba:	4601      	mov	r1, r0
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf0      	blt.n	8001db6 <_read+0x12>
	}

return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d00a      	beq.n	8001e08 <_write+0x28>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d007      	beq.n	8001e08 <_write+0x28>
  {
    errno = EBADF;
 8001df8:	f008 fb76 	bl	800a4e8 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2209      	movs	r2, #9
 8001e00:	601a      	str	r2, [r3, #0]
    return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e00f      	b.n	8001e28 <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e10:	68b9      	ldr	r1, [r7, #8]
 8001e12:	4807      	ldr	r0, [pc, #28]	; (8001e30 <_write+0x50>)
 8001e14:	f005 fe28 	bl	8007a68 <HAL_UART_Transmit>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	75fb      	strb	r3, [r7, #23]
                                     (uint8_t *)ptr,
                                                len,
                                                CST_UART_TRANSMIT_TIMEOUT_IN_MS);
  return (status == HAL_OK ? len : 0);
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <_write+0x46>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	e000      	b.n	8001e28 <_write+0x48>
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200005a0 	.word	0x200005a0

08001e34 <_close>:

int _close(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc80      	pop	{r7}
 8001e48:	4770      	bx	lr

08001e4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e5a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr

08001e68 <_isatty>:

int _isatty(int file)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
	return 1;
 8001e70:	2301      	movs	r3, #1
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
	return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f008 fb10 	bl	800a4e8 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	2000c000 	.word	0x2000c000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	200000a4 	.word	0x200000a4
 8001efc:	20000980 	.word	0x20000980

08001f00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f32:	f7ff ffe5 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f36:	f008 fadd 	bl	800a4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f3a:	f7fe fd0b 	bl	8000954 <main>
  bx lr
 8001f3e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f48:	0800c7a8 	.word	0x0800c7a8
  ldr r2, =_sbss
 8001f4c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f50:	20000980 	.word	0x20000980

08001f54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC1_2_IRQHandler>
	...

08001f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <HAL_Init+0x28>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a07      	ldr	r2, [pc, #28]	; (8001f80 <HAL_Init+0x28>)
 8001f62:	f043 0310 	orr.w	r3, r3, #16
 8001f66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 ff3d 	bl	8002de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f808 	bl	8001f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f74:	f7ff fbaa 	bl	80016cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40022000 	.word	0x40022000

08001f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f8c:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <HAL_InitTick+0x54>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_InitTick+0x58>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	4619      	mov	r1, r3
 8001f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 ff84 	bl	8002eb0 <HAL_SYSTICK_Config>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e00e      	b.n	8001fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2b0f      	cmp	r3, #15
 8001fb6:	d80a      	bhi.n	8001fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	f000 ff32 	bl	8002e28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <HAL_InitTick+0x5c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000008 	.word	0x20000008
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_IncTick+0x1c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	461a      	mov	r2, r3
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_IncTick+0x20>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4a03      	ldr	r2, [pc, #12]	; (8002004 <HAL_IncTick+0x20>)
 8001ff6:	6013      	str	r3, [r2, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	20000008 	.word	0x20000008
 8002004:	2000096c 	.word	0x2000096c

08002008 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b02      	ldr	r3, [pc, #8]	; (8002018 <HAL_GetTick+0x10>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr
 8002018:	2000096c 	.word	0x2000096c

0800201c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e188      	b.n	8002350 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8c      	ldr	r2, [pc, #560]	; (8002274 <HAL_ADC_Init+0x258>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00e      	beq.n	8002066 <HAL_ADC_Init+0x4a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a8a      	ldr	r2, [pc, #552]	; (8002278 <HAL_ADC_Init+0x25c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_ADC_Init+0x4a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a89      	ldr	r2, [pc, #548]	; (800227c <HAL_ADC_Init+0x260>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d004      	beq.n	8002066 <HAL_ADC_Init+0x4a>
 800205c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002060:	4887      	ldr	r0, [pc, #540]	; (8002280 <HAL_ADC_Init+0x264>)
 8002062:	f7ff fb21 	bl	80016a8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_ADC_Init+0x66>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002076:	d004      	beq.n	8002082 <HAL_ADC_Init+0x66>
 8002078:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800207c:	4880      	ldr	r0, [pc, #512]	; (8002280 <HAL_ADC_Init+0x264>)
 800207e:	f7ff fb13 	bl	80016a8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <HAL_ADC_Init+0x82>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002092:	d004      	beq.n	800209e <HAL_ADC_Init+0x82>
 8002094:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002098:	4879      	ldr	r0, [pc, #484]	; (8002280 <HAL_ADC_Init+0x264>)
 800209a:	f7ff fb05 	bl	80016a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	7b1b      	ldrb	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d008      	beq.n	80020b8 <HAL_ADC_Init+0x9c>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7b1b      	ldrb	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d004      	beq.n	80020b8 <HAL_ADC_Init+0x9c>
 80020ae:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80020b2:	4873      	ldr	r0, [pc, #460]	; (8002280 <HAL_ADC_Init+0x264>)
 80020b4:	f7ff faf8 	bl	80016a8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d044      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020c8:	d03f      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80020d2:	d03a      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020dc:	d035      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80020e6:	d030      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020f0:	d02b      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d027      	beq.n	800214a <HAL_ADC_Init+0x12e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002102:	d022      	beq.n	800214a <HAL_ADC_Init+0x12e>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800210c:	d01d      	beq.n	800214a <HAL_ADC_Init+0x12e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002116:	d018      	beq.n	800214a <HAL_ADC_Init+0x12e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002120:	d013      	beq.n	800214a <HAL_ADC_Init+0x12e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800212a:	d00e      	beq.n	800214a <HAL_ADC_Init+0x12e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002134:	d009      	beq.n	800214a <HAL_ADC_Init+0x12e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800213e:	d004      	beq.n	800214a <HAL_ADC_Init+0x12e>
 8002140:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002144:	484e      	ldr	r0, [pc, #312]	; (8002280 <HAL_ADC_Init+0x264>)
 8002146:	f7ff faaf 	bl	80016a8 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02a      	beq.n	80021a8 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_ADC_Init+0x146>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	2b10      	cmp	r3, #16
 8002160:	d904      	bls.n	800216c <HAL_ADC_Init+0x150>
 8002162:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002166:	4846      	ldr	r0, [pc, #280]	; (8002280 <HAL_ADC_Init+0x264>)
 8002168:	f7ff fa9e 	bl	80016a8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7d1b      	ldrb	r3, [r3, #20]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_ADC_Init+0x16a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7d1b      	ldrb	r3, [r3, #20]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d004      	beq.n	8002186 <HAL_ADC_Init+0x16a>
 800217c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002180:	483f      	ldr	r0, [pc, #252]	; (8002280 <HAL_ADC_Init+0x264>)
 8002182:	f7ff fa91 	bl	80016a8 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7d1b      	ldrb	r3, [r3, #20]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_ADC_Init+0x182>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d904      	bls.n	80021a8 <HAL_ADC_Init+0x18c>
 800219e:	f240 11bf 	movw	r1, #447	; 0x1bf
 80021a2:	4837      	ldr	r0, [pc, #220]	; (8002280 <HAL_ADC_Init+0x264>)
 80021a4:	f7ff fa80 	bl	80016a8 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d109      	bne.n	80021c4 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7ff fab6 	bl	8001730 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fd01 	bl	8002bcc <ADC_ConversionStop_Disable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f003 0310 	and.w	r3, r3, #16
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f040 80b1 	bne.w	800233e <HAL_ADC_Init+0x322>
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80ad 	bne.w	800233e <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021ec:	f023 0302 	bic.w	r3, r3, #2
 80021f0:	f043 0202 	orr.w	r2, r3, #2
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	491e      	ldr	r1, [pc, #120]	; (800227c <HAL_ADC_Init+0x260>)
 8002202:	428b      	cmp	r3, r1
 8002204:	d10a      	bne.n	800221c <HAL_ADC_Init+0x200>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800220e:	d002      	beq.n	8002216 <HAL_ADC_Init+0x1fa>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	e004      	b.n	8002220 <HAL_ADC_Init+0x204>
 8002216:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800221a:	e001      	b.n	8002220 <HAL_ADC_Init+0x204>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002220:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	7b1b      	ldrb	r3, [r3, #12]
 8002226:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002228:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4313      	orrs	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002238:	d003      	beq.n	8002242 <HAL_ADC_Init+0x226>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_ADC_Init+0x22c>
 8002242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002246:	e000      	b.n	800224a <HAL_ADC_Init+0x22e>
 8002248:	2300      	movs	r3, #0
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7d1b      	ldrb	r3, [r3, #20]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d121      	bne.n	800229c <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7b1b      	ldrb	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	3b01      	subs	r3, #1
 8002266:	035a      	lsls	r2, r3, #13
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	e013      	b.n	800229c <HAL_ADC_Init+0x280>
 8002274:	40012400 	.word	0x40012400
 8002278:	40012800 	.word	0x40012800
 800227c:	40013c00 	.word	0x40013c00
 8002280:	0800bc34 	.word	0x0800bc34
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_ADC_Init+0x33c>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	68b9      	ldr	r1, [r7, #8]
 80022c0:	430b      	orrs	r3, r1
 80022c2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022cc:	d003      	beq.n	80022d6 <HAL_ADC_Init+0x2ba>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d104      	bne.n	80022e0 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	3b01      	subs	r3, #1
 80022dc:	051b      	lsls	r3, r3, #20
 80022de:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_ADC_Init+0x340>)
 80022fc:	4013      	ands	r3, r2
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	429a      	cmp	r2, r3
 8002302:	d10b      	bne.n	800231c <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230e:	f023 0303 	bic.w	r3, r3, #3
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800231a:	e018      	b.n	800234e <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002320:	f023 0312 	bic.w	r3, r3, #18
 8002324:	f043 0210 	orr.w	r2, r3, #16
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002330:	f043 0201 	orr.w	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800233c:	e007      	b.n	800234e <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002342:	f043 0210 	orr.w	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800234e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	ffe1f7fd 	.word	0xffe1f7fd
 800235c:	ff1f0efe 	.word	0xff1f0efe

08002360 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <HAL_ADC_Start+0x17c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00e      	beq.n	8002394 <HAL_ADC_Start+0x34>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a59      	ldr	r2, [pc, #356]	; (80024e0 <HAL_ADC_Start+0x180>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_ADC_Start+0x34>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a57      	ldr	r2, [pc, #348]	; (80024e4 <HAL_ADC_Start+0x184>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_ADC_Start+0x34>
 800238a:	f240 411b 	movw	r1, #1051	; 0x41b
 800238e:	4856      	ldr	r0, [pc, #344]	; (80024e8 <HAL_ADC_Start+0x188>)
 8002390:	f7ff f98a 	bl	80016a8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_ADC_Start+0x42>
 800239e:	2302      	movs	r3, #2
 80023a0:	e098      	b.n	80024d4 <HAL_ADC_Start+0x174>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fbb4 	bl	8002b18 <ADC_Enable>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 8087 	bne.w	80024ca <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a42      	ldr	r2, [pc, #264]	; (80024e0 <HAL_ADC_Start+0x180>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d105      	bne.n	80023e6 <HAL_ADC_Start+0x86>
 80023da:	4b40      	ldr	r3, [pc, #256]	; (80024dc <HAL_ADC_Start+0x17c>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d115      	bne.n	8002412 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d026      	beq.n	800244e <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002408:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002410:	e01d      	b.n	800244e <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2e      	ldr	r2, [pc, #184]	; (80024dc <HAL_ADC_Start+0x17c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_ADC_Start+0xd2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2c      	ldr	r2, [pc, #176]	; (80024e0 <HAL_ADC_Start+0x180>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d10d      	bne.n	800244e <HAL_ADC_Start+0xee>
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_ADC_Start+0x17c>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002442:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002446:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d006      	beq.n	8002468 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	f023 0206 	bic.w	r2, r3, #6
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
 8002466:	e002      	b.n	800246e <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f06f 0202 	mvn.w	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800248a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800248e:	d113      	bne.n	80024b8 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <HAL_ADC_Start+0x180>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d105      	bne.n	80024a6 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800249a:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_ADC_Start+0x17c>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d108      	bne.n	80024b8 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	e00c      	b.n	80024d2 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	e003      	b.n	80024d2 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40012400 	.word	0x40012400
 80024e0:	40012800 	.word	0x40012800
 80024e4:	40013c00 	.word	0x40013c00
 80024e8:	0800bc34 	.word	0x0800bc34

080024ec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_ADC_PollForConversion+0x21c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d00e      	beq.n	800252a <HAL_ADC_PollForConversion+0x3e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a7e      	ldr	r2, [pc, #504]	; (800270c <HAL_ADC_PollForConversion+0x220>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d009      	beq.n	800252a <HAL_ADC_PollForConversion+0x3e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7d      	ldr	r2, [pc, #500]	; (8002710 <HAL_ADC_PollForConversion+0x224>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d004      	beq.n	800252a <HAL_ADC_PollForConversion+0x3e>
 8002520:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002524:	487b      	ldr	r0, [pc, #492]	; (8002714 <HAL_ADC_PollForConversion+0x228>)
 8002526:	f7ff f8bf 	bl	80016a8 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800252a:	f7ff fd6d 	bl	8002008 <HAL_GetTick>
 800252e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	f043 0220 	orr.w	r2, r3, #32
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0d3      	b.n	80026fe <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d131      	bne.n	80025c8 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d12a      	bne.n	80025c8 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002572:	e021      	b.n	80025b8 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257a:	d01d      	beq.n	80025b8 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d007      	beq.n	8002592 <HAL_ADC_PollForConversion+0xa6>
 8002582:	f7ff fd41 	bl	8002008 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d212      	bcs.n	80025b8 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0302 	and.w	r3, r3, #2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	f043 0204 	orr.w	r2, r3, #4
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e0a2      	b.n	80026fe <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0d6      	beq.n	8002574 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025c6:	e070      	b.n	80026aa <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_ADC_PollForConversion+0x22c>)
 80025ca:	681c      	ldr	r4, [r3, #0]
 80025cc:	2002      	movs	r0, #2
 80025ce:	f001 ff7d 	bl	80044cc <HAL_RCCEx_GetPeriphCLKFreq>
 80025d2:	4603      	mov	r3, r0
 80025d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_ADC_PollForConversion+0x230>)
 80025e0:	400b      	ands	r3, r1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d118      	bne.n	8002618 <HAL_ADC_PollForConversion+0x12c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68d9      	ldr	r1, [r3, #12]
 80025ec:	4b4c      	ldr	r3, [pc, #304]	; (8002720 <HAL_ADC_PollForConversion+0x234>)
 80025ee:	400b      	ands	r3, r1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d111      	bne.n	8002618 <HAL_ADC_PollForConversion+0x12c>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6919      	ldr	r1, [r3, #16]
 80025fa:	4b4a      	ldr	r3, [pc, #296]	; (8002724 <HAL_ADC_PollForConversion+0x238>)
 80025fc:	400b      	ands	r3, r1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_ADC_PollForConversion+0x128>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_ADC_PollForConversion+0x23c>)
 800260a:	400b      	ands	r3, r1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <HAL_ADC_PollForConversion+0x128>
 8002610:	2314      	movs	r3, #20
 8002612:	e020      	b.n	8002656 <HAL_ADC_PollForConversion+0x16a>
 8002614:	2329      	movs	r3, #41	; 0x29
 8002616:	e01e      	b.n	8002656 <HAL_ADC_PollForConversion+0x16a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6919      	ldr	r1, [r3, #16]
 800261e:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_ADC_PollForConversion+0x238>)
 8002620:	400b      	ands	r3, r1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_ADC_PollForConversion+0x148>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68d9      	ldr	r1, [r3, #12]
 800262c:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_ADC_PollForConversion+0x23c>)
 800262e:	400b      	ands	r3, r1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00d      	beq.n	8002650 <HAL_ADC_PollForConversion+0x164>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6919      	ldr	r1, [r3, #16]
 800263a:	4b3c      	ldr	r3, [pc, #240]	; (800272c <HAL_ADC_PollForConversion+0x240>)
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_ADC_PollForConversion+0x168>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68d9      	ldr	r1, [r3, #12]
 8002648:	4b38      	ldr	r3, [pc, #224]	; (800272c <HAL_ADC_PollForConversion+0x240>)
 800264a:	400b      	ands	r3, r1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d101      	bne.n	8002654 <HAL_ADC_PollForConversion+0x168>
 8002650:	2354      	movs	r3, #84	; 0x54
 8002652:	e000      	b.n	8002656 <HAL_ADC_PollForConversion+0x16a>
 8002654:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800265c:	e021      	b.n	80026a2 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d01a      	beq.n	800269c <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_ADC_PollForConversion+0x190>
 800266c:	f7ff fccc 	bl	8002008 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	429a      	cmp	r2, r3
 800267a:	d20f      	bcs.n	800269c <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d90b      	bls.n	800269c <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e030      	b.n	80026fe <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d8d9      	bhi.n	800265e <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0212 	mvn.w	r2, #18
 80026b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80026ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80026ce:	d115      	bne.n	80026fc <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d111      	bne.n	80026fc <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f043 0201 	orr.w	r2, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	371c      	adds	r7, #28
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	40012400 	.word	0x40012400
 800270c:	40012800 	.word	0x40012800
 8002710:	40013c00 	.word	0x40013c00
 8002714:	0800bc34 	.word	0x0800bc34
 8002718:	20000000 	.word	0x20000000
 800271c:	24924924 	.word	0x24924924
 8002720:	00924924 	.word	0x00924924
 8002724:	12492492 	.word	0x12492492
 8002728:	00492492 	.word	0x00492492
 800272c:	00249249 	.word	0x00249249

08002730 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0c      	ldr	r2, [pc, #48]	; (8002770 <HAL_ADC_GetValue+0x40>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00e      	beq.n	8002760 <HAL_ADC_GetValue+0x30>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_ADC_GetValue+0x44>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d009      	beq.n	8002760 <HAL_ADC_GetValue+0x30>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_ADC_GetValue+0x48>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d004      	beq.n	8002760 <HAL_ADC_GetValue+0x30>
 8002756:	f240 61ef 	movw	r1, #1775	; 0x6ef
 800275a:	4808      	ldr	r0, [pc, #32]	; (800277c <HAL_ADC_GetValue+0x4c>)
 800275c:	f7fe ffa4 	bl	80016a8 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40012400 	.word	0x40012400
 8002774:	40012800 	.word	0x40012800
 8002778:	40013c00 	.word	0x40013c00
 800277c:	0800bc34 	.word	0x0800bc34

08002780 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800278a:	2300      	movs	r3, #0
 800278c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a8b      	ldr	r2, [pc, #556]	; (80029c4 <HAL_ADC_ConfigChannel+0x244>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d00e      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x3a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a89      	ldr	r2, [pc, #548]	; (80029c8 <HAL_ADC_ConfigChannel+0x248>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d009      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x3a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a88      	ldr	r2, [pc, #544]	; (80029cc <HAL_ADC_ConfigChannel+0x24c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_ConfigChannel+0x3a>
 80027b0:	f240 71dd 	movw	r1, #2013	; 0x7dd
 80027b4:	4886      	ldr	r0, [pc, #536]	; (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 80027b6:	f7fe ff77 	bl	80016a8 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d048      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d044      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d040      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d03c      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d038      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d034      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b06      	cmp	r3, #6
 80027f0:	d030      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b07      	cmp	r3, #7
 80027f8:	d02c      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d028      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b09      	cmp	r3, #9
 8002808:	d024      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b0a      	cmp	r3, #10
 8002810:	d020      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2b0b      	cmp	r3, #11
 8002818:	d01c      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d018      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b0d      	cmp	r3, #13
 8002828:	d014      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b0e      	cmp	r3, #14
 8002830:	d010      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b0f      	cmp	r3, #15
 8002838:	d00c      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b10      	cmp	r3, #16
 8002840:	d008      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b11      	cmp	r3, #17
 8002848:	d004      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xd4>
 800284a:	f240 71de 	movw	r1, #2014	; 0x7de
 800284e:	4860      	ldr	r0, [pc, #384]	; (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 8002850:	f7fe ff2a 	bl	80016a8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d040      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d03c      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d038      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d034      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d030      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d02c      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b07      	cmp	r3, #7
 800288a:	d028      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d024      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b09      	cmp	r3, #9
 800289a:	d020      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b0a      	cmp	r3, #10
 80028a2:	d01c      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b0b      	cmp	r3, #11
 80028aa:	d018      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d014      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b0d      	cmp	r3, #13
 80028ba:	d010      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b0e      	cmp	r3, #14
 80028c2:	d00c      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d008      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b10      	cmp	r3, #16
 80028d2:	d004      	beq.n	80028de <HAL_ADC_ConfigChannel+0x15e>
 80028d4:	f240 71df 	movw	r1, #2015	; 0x7df
 80028d8:	483d      	ldr	r0, [pc, #244]	; (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 80028da:	f7fe fee5 	bl	80016a8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d020      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d01c      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d018      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d014      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b04      	cmp	r3, #4
 8002904:	d010      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b05      	cmp	r3, #5
 800290c:	d00c      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d008      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b07      	cmp	r3, #7
 800291c:	d004      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x1a8>
 800291e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002922:	482b      	ldr	r0, [pc, #172]	; (80029d0 <HAL_ADC_ConfigChannel+0x250>)
 8002924:	f7fe fec0 	bl	80016a8 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x1b6>
 8002932:	2302      	movs	r3, #2
 8002934:	e0e5      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x382>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b06      	cmp	r3, #6
 8002944:	d81c      	bhi.n	8002980 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	3b05      	subs	r3, #5
 8002958:	221f      	movs	r2, #31
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43db      	mvns	r3, r3
 8002960:	4019      	ands	r1, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	6818      	ldr	r0, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	3b05      	subs	r3, #5
 8002972:	fa00 f203 	lsl.w	r2, r0, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	635a      	str	r2, [r3, #52]	; 0x34
 800297e:	e045      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b0c      	cmp	r3, #12
 8002986:	d825      	bhi.n	80029d4 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	3b23      	subs	r3, #35	; 0x23
 800299a:	221f      	movs	r2, #31
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	43db      	mvns	r3, r3
 80029a2:	4019      	ands	r1, r3
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6818      	ldr	r0, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	3b23      	subs	r3, #35	; 0x23
 80029b4:	fa00 f203 	lsl.w	r2, r0, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
 80029c0:	e024      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x28c>
 80029c2:	bf00      	nop
 80029c4:	40012400 	.word	0x40012400
 80029c8:	40012800 	.word	0x40012800
 80029cc:	40013c00 	.word	0x40013c00
 80029d0:	0800bc34 	.word	0x0800bc34
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	3b41      	subs	r3, #65	; 0x41
 80029e6:	221f      	movs	r2, #31
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	4019      	ands	r1, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6818      	ldr	r0, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	3b41      	subs	r3, #65	; 0x41
 8002a00:	fa00 f203 	lsl.w	r2, r0, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	d91c      	bls.n	8002a4e <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	4413      	add	r3, r2
 8002a24:	3b1e      	subs	r3, #30
 8002a26:	2207      	movs	r2, #7
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	4019      	ands	r1, r3
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	6898      	ldr	r0, [r3, #8]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	3b1e      	subs	r3, #30
 8002a40:	fa00 f203 	lsl.w	r2, r0, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	60da      	str	r2, [r3, #12]
 8002a4c:	e019      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6919      	ldr	r1, [r3, #16]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	2207      	movs	r2, #7
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	4019      	ands	r1, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6898      	ldr	r0, [r3, #8]
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d003      	beq.n	8002a92 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a8e:	2b11      	cmp	r3, #17
 8002a90:	d132      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <HAL_ADC_ConfigChannel+0x38c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d125      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d126      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ab8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d11a      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <HAL_ADC_ConfigChannel+0x390>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a13      	ldr	r2, [pc, #76]	; (8002b14 <HAL_ADC_ConfigChannel+0x394>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	0c9a      	lsrs	r2, r3, #18
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad8:	e002      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f9      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x35a>
 8002ae6:	e007      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40012400 	.word	0x40012400
 8002b10:	20000000 	.word	0x20000000
 8002b14:	431bde83 	.word	0x431bde83

08002b18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d040      	beq.n	8002bb8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0201 	orr.w	r2, r2, #1
 8002b44:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b46:	4b1f      	ldr	r3, [pc, #124]	; (8002bc4 <ADC_Enable+0xac>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <ADC_Enable+0xb0>)
 8002b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b54:	e002      	b.n	8002b5c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f9      	bne.n	8002b56 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b62:	f7ff fa51 	bl	8002008 <HAL_GetTick>
 8002b66:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b68:	e01f      	b.n	8002baa <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b6a:	f7ff fa4d 	bl	8002008 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d918      	bls.n	8002baa <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d011      	beq.n	8002baa <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	f043 0210 	orr.w	r2, r3, #16
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	f043 0201 	orr.w	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e007      	b.n	8002bba <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d1d8      	bne.n	8002b6a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	431bde83 	.word	0x431bde83

08002bcc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d12e      	bne.n	8002c44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bf6:	f7ff fa07 	bl	8002008 <HAL_GetTick>
 8002bfa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bfc:	e01b      	b.n	8002c36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bfe:	f7ff fa03 	bl	8002008 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d914      	bls.n	8002c36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10d      	bne.n	8002c36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1e:	f043 0210 	orr.w	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f043 0201 	orr.w	r2, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e007      	b.n	8002c46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d0dc      	beq.n	8002bfe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4906      	ldr	r1, [pc, #24]	; (8002ce8 <__NVIC_EnableIRQ+0x34>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bc80      	pop	{r7}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db4:	d301      	bcc.n	8002dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00f      	b.n	8002dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dba:	4a0a      	ldr	r2, [pc, #40]	; (8002de4 <SysTick_Config+0x40>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc8:	f7ff ff90 	bl	8002cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <SysTick_Config+0x40>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd2:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <SysTick_Config+0x40>)
 8002dd4:	2207      	movs	r2, #7
 8002dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	e000e010 	.word	0xe000e010

08002de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b07      	cmp	r3, #7
 8002df4:	d00f      	beq.n	8002e16 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b06      	cmp	r3, #6
 8002dfa:	d00c      	beq.n	8002e16 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d009      	beq.n	8002e16 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b04      	cmp	r3, #4
 8002e06:	d006      	beq.n	8002e16 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d003      	beq.n	8002e16 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e0e:	2192      	movs	r1, #146	; 0x92
 8002e10:	4804      	ldr	r0, [pc, #16]	; (8002e24 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002e12:	f7fe fc49 	bl	80016a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ff1a 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	0800bc6c 	.word	0x0800bc6c

08002e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b0f      	cmp	r3, #15
 8002e3e:	d903      	bls.n	8002e48 <HAL_NVIC_SetPriority+0x20>
 8002e40:	21aa      	movs	r1, #170	; 0xaa
 8002e42:	480e      	ldr	r0, [pc, #56]	; (8002e7c <HAL_NVIC_SetPriority+0x54>)
 8002e44:	f7fe fc30 	bl	80016a8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	d903      	bls.n	8002e56 <HAL_NVIC_SetPriority+0x2e>
 8002e4e:	21ab      	movs	r1, #171	; 0xab
 8002e50:	480a      	ldr	r0, [pc, #40]	; (8002e7c <HAL_NVIC_SetPriority+0x54>)
 8002e52:	f7fe fc29 	bl	80016a8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e56:	f7ff ff1f 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6978      	ldr	r0, [r7, #20]
 8002e62:	f7ff ff6d 	bl	8002d40 <NVIC_EncodePriority>
 8002e66:	4602      	mov	r2, r0
 8002e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff ff3c 	bl	8002cec <__NVIC_SetPriority>
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	0800bc6c 	.word	0x0800bc6c

08002e80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	da03      	bge.n	8002e9a <HAL_NVIC_EnableIRQ+0x1a>
 8002e92:	21be      	movs	r1, #190	; 0xbe
 8002e94:	4805      	ldr	r0, [pc, #20]	; (8002eac <HAL_NVIC_EnableIRQ+0x2c>)
 8002e96:	f7fe fc07 	bl	80016a8 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff ff08 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	0800bc6c 	.word	0x0800bc6c

08002eb0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff73 	bl	8002da4 <SysTick_Config>
 8002ebe:	4603      	mov	r3, r0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d008      	beq.n	8002ef0 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e020      	b.n	8002f32 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 020e 	bic.w	r2, r2, #14
 8002efe:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f1e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d005      	beq.n	8002f5e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2204      	movs	r2, #4
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
 8002f5c:	e0d6      	b.n	800310c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 020e 	bic.w	r2, r2, #14
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0201 	bic.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b64      	ldr	r3, [pc, #400]	; (8003118 <HAL_DMA_Abort_IT+0x1dc>)
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d958      	bls.n	800303c <HAL_DMA_Abort_IT+0x100>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a63      	ldr	r2, [pc, #396]	; (800311c <HAL_DMA_Abort_IT+0x1e0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d04f      	beq.n	8003034 <HAL_DMA_Abort_IT+0xf8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a61      	ldr	r2, [pc, #388]	; (8003120 <HAL_DMA_Abort_IT+0x1e4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d048      	beq.n	8003030 <HAL_DMA_Abort_IT+0xf4>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a60      	ldr	r2, [pc, #384]	; (8003124 <HAL_DMA_Abort_IT+0x1e8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d040      	beq.n	800302a <HAL_DMA_Abort_IT+0xee>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5e      	ldr	r2, [pc, #376]	; (8003128 <HAL_DMA_Abort_IT+0x1ec>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d038      	beq.n	8003024 <HAL_DMA_Abort_IT+0xe8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5d      	ldr	r2, [pc, #372]	; (800312c <HAL_DMA_Abort_IT+0x1f0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d030      	beq.n	800301e <HAL_DMA_Abort_IT+0xe2>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a5b      	ldr	r2, [pc, #364]	; (8003130 <HAL_DMA_Abort_IT+0x1f4>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d028      	beq.n	8003018 <HAL_DMA_Abort_IT+0xdc>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a53      	ldr	r2, [pc, #332]	; (8003118 <HAL_DMA_Abort_IT+0x1dc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d020      	beq.n	8003012 <HAL_DMA_Abort_IT+0xd6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <HAL_DMA_Abort_IT+0x1f8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d019      	beq.n	800300e <HAL_DMA_Abort_IT+0xd2>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_DMA_Abort_IT+0x1fc>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d012      	beq.n	800300a <HAL_DMA_Abort_IT+0xce>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a54      	ldr	r2, [pc, #336]	; (800313c <HAL_DMA_Abort_IT+0x200>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00a      	beq.n	8003004 <HAL_DMA_Abort_IT+0xc8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a53      	ldr	r2, [pc, #332]	; (8003140 <HAL_DMA_Abort_IT+0x204>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d102      	bne.n	8002ffe <HAL_DMA_Abort_IT+0xc2>
 8002ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffc:	e01b      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8002ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003002:	e018      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8003004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003008:	e015      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 800300a:	2310      	movs	r3, #16
 800300c:	e013      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 800300e:	2301      	movs	r3, #1
 8003010:	e011      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8003012:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003016:	e00e      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8003018:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800301c:	e00b      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 800301e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003022:	e008      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8003024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003028:	e005      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 800302a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302e:	e002      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8003030:	2310      	movs	r3, #16
 8003032:	e000      	b.n	8003036 <HAL_DMA_Abort_IT+0xfa>
 8003034:	2301      	movs	r3, #1
 8003036:	4a43      	ldr	r2, [pc, #268]	; (8003144 <HAL_DMA_Abort_IT+0x208>)
 8003038:	6053      	str	r3, [r2, #4]
 800303a:	e057      	b.n	80030ec <HAL_DMA_Abort_IT+0x1b0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a36      	ldr	r2, [pc, #216]	; (800311c <HAL_DMA_Abort_IT+0x1e0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d04f      	beq.n	80030e6 <HAL_DMA_Abort_IT+0x1aa>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a35      	ldr	r2, [pc, #212]	; (8003120 <HAL_DMA_Abort_IT+0x1e4>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d048      	beq.n	80030e2 <HAL_DMA_Abort_IT+0x1a6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a33      	ldr	r2, [pc, #204]	; (8003124 <HAL_DMA_Abort_IT+0x1e8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d040      	beq.n	80030dc <HAL_DMA_Abort_IT+0x1a0>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_DMA_Abort_IT+0x1ec>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d038      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x19a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a30      	ldr	r2, [pc, #192]	; (800312c <HAL_DMA_Abort_IT+0x1f0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d030      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x194>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a2f      	ldr	r2, [pc, #188]	; (8003130 <HAL_DMA_Abort_IT+0x1f4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d028      	beq.n	80030ca <HAL_DMA_Abort_IT+0x18e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a26      	ldr	r2, [pc, #152]	; (8003118 <HAL_DMA_Abort_IT+0x1dc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d020      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x188>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a2b      	ldr	r2, [pc, #172]	; (8003134 <HAL_DMA_Abort_IT+0x1f8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d019      	beq.n	80030c0 <HAL_DMA_Abort_IT+0x184>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_DMA_Abort_IT+0x1fc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d012      	beq.n	80030bc <HAL_DMA_Abort_IT+0x180>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_DMA_Abort_IT+0x200>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d00a      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x17a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a26      	ldr	r2, [pc, #152]	; (8003140 <HAL_DMA_Abort_IT+0x204>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d102      	bne.n	80030b0 <HAL_DMA_Abort_IT+0x174>
 80030aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ae:	e01b      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b4:	e018      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030ba:	e015      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030bc:	2310      	movs	r3, #16
 80030be:	e013      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e011      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c8:	e00e      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030ca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ce:	e00b      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030d4:	e008      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030da:	e005      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e0:	e002      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030e2:	2310      	movs	r3, #16
 80030e4:	e000      	b.n	80030e8 <HAL_DMA_Abort_IT+0x1ac>
 80030e6:	2301      	movs	r3, #1
 80030e8:	4a17      	ldr	r2, [pc, #92]	; (8003148 <HAL_DMA_Abort_IT+0x20c>)
 80030ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4798      	blx	r3
    } 
  }
  return status;
 800310c:	7bfb      	ldrb	r3, [r7, #15]
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40020080 	.word	0x40020080
 800311c:	40020008 	.word	0x40020008
 8003120:	4002001c 	.word	0x4002001c
 8003124:	40020030 	.word	0x40020030
 8003128:	40020044 	.word	0x40020044
 800312c:	40020058 	.word	0x40020058
 8003130:	4002006c 	.word	0x4002006c
 8003134:	40020408 	.word	0x40020408
 8003138:	4002041c 	.word	0x4002041c
 800313c:	40020430 	.word	0x40020430
 8003140:	40020444 	.word	0x40020444
 8003144:	40020400 	.word	0x40020400
 8003148:	40020000 	.word	0x40020000

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800315a:	2300      	movs	r3, #0
 800315c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4aa9      	ldr	r2, [pc, #676]	; (8003408 <HAL_GPIO_Init+0x2bc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d01b      	beq.n	800319e <HAL_GPIO_Init+0x52>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4aa8      	ldr	r2, [pc, #672]	; (800340c <HAL_GPIO_Init+0x2c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d017      	beq.n	800319e <HAL_GPIO_Init+0x52>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4aa7      	ldr	r2, [pc, #668]	; (8003410 <HAL_GPIO_Init+0x2c4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d013      	beq.n	800319e <HAL_GPIO_Init+0x52>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4aa6      	ldr	r2, [pc, #664]	; (8003414 <HAL_GPIO_Init+0x2c8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d00f      	beq.n	800319e <HAL_GPIO_Init+0x52>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4aa5      	ldr	r2, [pc, #660]	; (8003418 <HAL_GPIO_Init+0x2cc>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00b      	beq.n	800319e <HAL_GPIO_Init+0x52>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4aa4      	ldr	r2, [pc, #656]	; (800341c <HAL_GPIO_Init+0x2d0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x52>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4aa3      	ldr	r2, [pc, #652]	; (8003420 <HAL_GPIO_Init+0x2d4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x52>
 8003196:	21bd      	movs	r1, #189	; 0xbd
 8003198:	48a2      	ldr	r0, [pc, #648]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 800319a:	f7fe fa85 	bl	80016a8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_GPIO_Init+0x68>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	041b      	lsls	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x70>
 80031b4:	21be      	movs	r1, #190	; 0xbe
 80031b6:	489b      	ldr	r0, [pc, #620]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 80031b8:	f7fe fa76 	bl	80016a8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 8235 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	f000 8230 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b11      	cmp	r3, #17
 80031d6:	f000 822b 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	f000 8226 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b12      	cmp	r3, #18
 80031ea:	f000 8221 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	4a8d      	ldr	r2, [pc, #564]	; (8003428 <HAL_GPIO_Init+0x2dc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	f000 821b 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a8b      	ldr	r2, [pc, #556]	; (800342c <HAL_GPIO_Init+0x2e0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	f000 8215 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a89      	ldr	r2, [pc, #548]	; (8003430 <HAL_GPIO_Init+0x2e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	f000 820f 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_GPIO_Init+0x2e8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	f000 8209 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4a85      	ldr	r2, [pc, #532]	; (8003438 <HAL_GPIO_Init+0x2ec>)
 8003224:	4293      	cmp	r3, r2
 8003226:	f000 8203 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4a83      	ldr	r2, [pc, #524]	; (800343c <HAL_GPIO_Init+0x2f0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	f000 81fd 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b03      	cmp	r3, #3
 800323c:	f000 81f8 	beq.w	8003630 <HAL_GPIO_Init+0x4e4>
 8003240:	21bf      	movs	r1, #191	; 0xbf
 8003242:	4878      	ldr	r0, [pc, #480]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 8003244:	f7fe fa30 	bl	80016a8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003248:	e1f2      	b.n	8003630 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800324a:	2201      	movs	r2, #1
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	4013      	ands	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	429a      	cmp	r2, r3
 8003264:	f040 81e1 	bne.w	800362a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a67      	ldr	r2, [pc, #412]	; (8003408 <HAL_GPIO_Init+0x2bc>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d01b      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a66      	ldr	r2, [pc, #408]	; (800340c <HAL_GPIO_Init+0x2c0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d017      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a65      	ldr	r2, [pc, #404]	; (8003410 <HAL_GPIO_Init+0x2c4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a64      	ldr	r2, [pc, #400]	; (8003414 <HAL_GPIO_Init+0x2c8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d00f      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a63      	ldr	r2, [pc, #396]	; (8003418 <HAL_GPIO_Init+0x2cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_GPIO_Init+0x2d0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a61      	ldr	r2, [pc, #388]	; (8003420 <HAL_GPIO_Init+0x2d4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x15c>
 80032a0:	21cd      	movs	r1, #205	; 0xcd
 80032a2:	4860      	ldr	r0, [pc, #384]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 80032a4:	f7fe fa00 	bl	80016a8 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a63      	ldr	r2, [pc, #396]	; (800343c <HAL_GPIO_Init+0x2f0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f000 80c6 	beq.w	8003440 <HAL_GPIO_Init+0x2f4>
 80032b4:	4a61      	ldr	r2, [pc, #388]	; (800343c <HAL_GPIO_Init+0x2f0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f200 80ec 	bhi.w	8003494 <HAL_GPIO_Init+0x348>
 80032bc:	4a5c      	ldr	r2, [pc, #368]	; (8003430 <HAL_GPIO_Init+0x2e4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f000 80be 	beq.w	8003440 <HAL_GPIO_Init+0x2f4>
 80032c4:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_GPIO_Init+0x2e4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f200 80e4 	bhi.w	8003494 <HAL_GPIO_Init+0x348>
 80032cc:	4a5a      	ldr	r2, [pc, #360]	; (8003438 <HAL_GPIO_Init+0x2ec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f000 80b6 	beq.w	8003440 <HAL_GPIO_Init+0x2f4>
 80032d4:	4a58      	ldr	r2, [pc, #352]	; (8003438 <HAL_GPIO_Init+0x2ec>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f200 80dc 	bhi.w	8003494 <HAL_GPIO_Init+0x348>
 80032dc:	4a53      	ldr	r2, [pc, #332]	; (800342c <HAL_GPIO_Init+0x2e0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	f000 80ae 	beq.w	8003440 <HAL_GPIO_Init+0x2f4>
 80032e4:	4a51      	ldr	r2, [pc, #324]	; (800342c <HAL_GPIO_Init+0x2e0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f200 80d4 	bhi.w	8003494 <HAL_GPIO_Init+0x348>
 80032ec:	4a51      	ldr	r2, [pc, #324]	; (8003434 <HAL_GPIO_Init+0x2e8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	f000 80a6 	beq.w	8003440 <HAL_GPIO_Init+0x2f4>
 80032f4:	4a4f      	ldr	r2, [pc, #316]	; (8003434 <HAL_GPIO_Init+0x2e8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f200 80cc 	bhi.w	8003494 <HAL_GPIO_Init+0x348>
 80032fc:	2b12      	cmp	r3, #18
 80032fe:	d82b      	bhi.n	8003358 <HAL_GPIO_Init+0x20c>
 8003300:	2b12      	cmp	r3, #18
 8003302:	f200 80c7 	bhi.w	8003494 <HAL_GPIO_Init+0x348>
 8003306:	a201      	add	r2, pc, #4	; (adr r2, 800330c <HAL_GPIO_Init+0x1c0>)
 8003308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330c:	08003441 	.word	0x08003441
 8003310:	08003361 	.word	0x08003361
 8003314:	080033b3 	.word	0x080033b3
 8003318:	0800348f 	.word	0x0800348f
 800331c:	08003495 	.word	0x08003495
 8003320:	08003495 	.word	0x08003495
 8003324:	08003495 	.word	0x08003495
 8003328:	08003495 	.word	0x08003495
 800332c:	08003495 	.word	0x08003495
 8003330:	08003495 	.word	0x08003495
 8003334:	08003495 	.word	0x08003495
 8003338:	08003495 	.word	0x08003495
 800333c:	08003495 	.word	0x08003495
 8003340:	08003495 	.word	0x08003495
 8003344:	08003495 	.word	0x08003495
 8003348:	08003495 	.word	0x08003495
 800334c:	08003495 	.word	0x08003495
 8003350:	08003389 	.word	0x08003389
 8003354:	080033dd 	.word	0x080033dd
 8003358:	4a33      	ldr	r2, [pc, #204]	; (8003428 <HAL_GPIO_Init+0x2dc>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d070      	beq.n	8003440 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800335e:	e099      	b.n	8003494 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d00b      	beq.n	8003380 <HAL_GPIO_Init+0x234>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d007      	beq.n	8003380 <HAL_GPIO_Init+0x234>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b03      	cmp	r3, #3
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x234>
 8003378:	21d5      	movs	r1, #213	; 0xd5
 800337a:	482a      	ldr	r0, [pc, #168]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 800337c:	f7fe f994 	bl	80016a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e086      	b.n	8003496 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d00b      	beq.n	80033a8 <HAL_GPIO_Init+0x25c>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d007      	beq.n	80033a8 <HAL_GPIO_Init+0x25c>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d003      	beq.n	80033a8 <HAL_GPIO_Init+0x25c>
 80033a0:	21dc      	movs	r1, #220	; 0xdc
 80033a2:	4820      	ldr	r0, [pc, #128]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 80033a4:	f7fe f980 	bl	80016a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	3304      	adds	r3, #4
 80033ae:	623b      	str	r3, [r7, #32]
          break;
 80033b0:	e071      	b.n	8003496 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d00b      	beq.n	80033d2 <HAL_GPIO_Init+0x286>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d007      	beq.n	80033d2 <HAL_GPIO_Init+0x286>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d003      	beq.n	80033d2 <HAL_GPIO_Init+0x286>
 80033ca:	21e3      	movs	r1, #227	; 0xe3
 80033cc:	4815      	ldr	r0, [pc, #84]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 80033ce:	f7fe f96b 	bl	80016a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	3308      	adds	r3, #8
 80033d8:	623b      	str	r3, [r7, #32]
          break;
 80033da:	e05c      	b.n	8003496 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d00b      	beq.n	80033fc <HAL_GPIO_Init+0x2b0>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d007      	beq.n	80033fc <HAL_GPIO_Init+0x2b0>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d003      	beq.n	80033fc <HAL_GPIO_Init+0x2b0>
 80033f4:	21ea      	movs	r1, #234	; 0xea
 80033f6:	480b      	ldr	r0, [pc, #44]	; (8003424 <HAL_GPIO_Init+0x2d8>)
 80033f8:	f7fe f956 	bl	80016a8 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	330c      	adds	r3, #12
 8003402:	623b      	str	r3, [r7, #32]
          break;
 8003404:	e047      	b.n	8003496 <HAL_GPIO_Init+0x34a>
 8003406:	bf00      	nop
 8003408:	40010800 	.word	0x40010800
 800340c:	40010c00 	.word	0x40010c00
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	40011800 	.word	0x40011800
 800341c:	40011c00 	.word	0x40011c00
 8003420:	40012000 	.word	0x40012000
 8003424:	0800bca8 	.word	0x0800bca8
 8003428:	10110000 	.word	0x10110000
 800342c:	10210000 	.word	0x10210000
 8003430:	10310000 	.word	0x10310000
 8003434:	10120000 	.word	0x10120000
 8003438:	10220000 	.word	0x10220000
 800343c:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00b      	beq.n	8003460 <HAL_GPIO_Init+0x314>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d007      	beq.n	8003460 <HAL_GPIO_Init+0x314>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d003      	beq.n	8003460 <HAL_GPIO_Init+0x314>
 8003458:	21f7      	movs	r1, #247	; 0xf7
 800345a:	487c      	ldr	r0, [pc, #496]	; (800364c <HAL_GPIO_Init+0x500>)
 800345c:	f7fe f924 	bl	80016a8 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d102      	bne.n	800346e <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003468:	2304      	movs	r3, #4
 800346a:	623b      	str	r3, [r7, #32]
          break;
 800346c:	e013      	b.n	8003496 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d105      	bne.n	8003482 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003476:	2308      	movs	r3, #8
 8003478:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69fa      	ldr	r2, [r7, #28]
 800347e:	611a      	str	r2, [r3, #16]
          break;
 8003480:	e009      	b.n	8003496 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003482:	2308      	movs	r3, #8
 8003484:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	615a      	str	r2, [r3, #20]
          break;
 800348c:	e003      	b.n	8003496 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800348e:	2300      	movs	r3, #0
 8003490:	623b      	str	r3, [r7, #32]
          break;
 8003492:	e000      	b.n	8003496 <HAL_GPIO_Init+0x34a>
          break;
 8003494:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2bff      	cmp	r3, #255	; 0xff
 800349a:	d801      	bhi.n	80034a0 <HAL_GPIO_Init+0x354>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	e001      	b.n	80034a4 <HAL_GPIO_Init+0x358>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3304      	adds	r3, #4
 80034a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2bff      	cmp	r3, #255	; 0xff
 80034aa:	d802      	bhi.n	80034b2 <HAL_GPIO_Init+0x366>
 80034ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x36c>
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	3b08      	subs	r3, #8
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	210f      	movs	r1, #15
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	401a      	ands	r2, r3
 80034ca:	6a39      	ldr	r1, [r7, #32]
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	fa01 f303 	lsl.w	r3, r1, r3
 80034d2:	431a      	orrs	r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80a2 	beq.w	800362a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80034e6:	4b5a      	ldr	r3, [pc, #360]	; (8003650 <HAL_GPIO_Init+0x504>)
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	4a59      	ldr	r2, [pc, #356]	; (8003650 <HAL_GPIO_Init+0x504>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6193      	str	r3, [r2, #24]
 80034f2:	4b57      	ldr	r3, [pc, #348]	; (8003650 <HAL_GPIO_Init+0x504>)
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80034fe:	4a55      	ldr	r2, [pc, #340]	; (8003654 <HAL_GPIO_Init+0x508>)
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	3302      	adds	r3, #2
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4c      	ldr	r2, [pc, #304]	; (8003658 <HAL_GPIO_Init+0x50c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <HAL_GPIO_Init+0x41e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4b      	ldr	r2, [pc, #300]	; (800365c <HAL_GPIO_Init+0x510>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_GPIO_Init+0x41a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4a      	ldr	r2, [pc, #296]	; (8003660 <HAL_GPIO_Init+0x514>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x416>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a49      	ldr	r2, [pc, #292]	; (8003664 <HAL_GPIO_Init+0x518>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00d      	beq.n	800355e <HAL_GPIO_Init+0x412>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a48      	ldr	r2, [pc, #288]	; (8003668 <HAL_GPIO_Init+0x51c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0x40e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a47      	ldr	r2, [pc, #284]	; (800366c <HAL_GPIO_Init+0x520>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x40a>
 8003552:	2305      	movs	r3, #5
 8003554:	e00a      	b.n	800356c <HAL_GPIO_Init+0x420>
 8003556:	2306      	movs	r3, #6
 8003558:	e008      	b.n	800356c <HAL_GPIO_Init+0x420>
 800355a:	2304      	movs	r3, #4
 800355c:	e006      	b.n	800356c <HAL_GPIO_Init+0x420>
 800355e:	2303      	movs	r3, #3
 8003560:	e004      	b.n	800356c <HAL_GPIO_Init+0x420>
 8003562:	2302      	movs	r3, #2
 8003564:	e002      	b.n	800356c <HAL_GPIO_Init+0x420>
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x420>
 800356a:	2300      	movs	r3, #0
 800356c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356e:	f002 0203 	and.w	r2, r2, #3
 8003572:	0092      	lsls	r2, r2, #2
 8003574:	4093      	lsls	r3, r2
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800357c:	4935      	ldr	r1, [pc, #212]	; (8003654 <HAL_GPIO_Init+0x508>)
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	089b      	lsrs	r3, r3, #2
 8003582:	3302      	adds	r3, #2
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_GPIO_Init+0x524>)
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4935      	ldr	r1, [pc, #212]	; (8003670 <HAL_GPIO_Init+0x524>)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	600b      	str	r3, [r1, #0]
 80035a2:	e006      	b.n	80035b2 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035a4:	4b32      	ldr	r3, [pc, #200]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	4930      	ldr	r1, [pc, #192]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035be:	4b2c      	ldr	r3, [pc, #176]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	492b      	ldr	r1, [pc, #172]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	604b      	str	r3, [r1, #4]
 80035ca:	e006      	b.n	80035da <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035cc:	4b28      	ldr	r3, [pc, #160]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	4926      	ldr	r1, [pc, #152]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035e6:	4b22      	ldr	r3, [pc, #136]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035e8:	689a      	ldr	r2, [r3, #8]
 80035ea:	4921      	ldr	r1, [pc, #132]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	608b      	str	r3, [r1, #8]
 80035f2:	e006      	b.n	8003602 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	491c      	ldr	r1, [pc, #112]	; (8003670 <HAL_GPIO_Init+0x524>)
 80035fe:	4013      	ands	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800360e:	4b18      	ldr	r3, [pc, #96]	; (8003670 <HAL_GPIO_Init+0x524>)
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	4917      	ldr	r1, [pc, #92]	; (8003670 <HAL_GPIO_Init+0x524>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	60cb      	str	r3, [r1, #12]
 800361a:	e006      	b.n	800362a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800361c:	4b14      	ldr	r3, [pc, #80]	; (8003670 <HAL_GPIO_Init+0x524>)
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	43db      	mvns	r3, r3
 8003624:	4912      	ldr	r1, [pc, #72]	; (8003670 <HAL_GPIO_Init+0x524>)
 8003626:	4013      	ands	r3, r2
 8003628:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	3301      	adds	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	fa22 f303 	lsr.w	r3, r2, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	f47f ae05 	bne.w	800324a <HAL_GPIO_Init+0xfe>
  }
}
 8003640:	bf00      	nop
 8003642:	bf00      	nop
 8003644:	3728      	adds	r7, #40	; 0x28
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	0800bca8 	.word	0x0800bca8
 8003650:	40021000 	.word	0x40021000
 8003654:	40010000 	.word	0x40010000
 8003658:	40010800 	.word	0x40010800
 800365c:	40010c00 	.word	0x40010c00
 8003660:	40011000 	.word	0x40011000
 8003664:	40011400 	.word	0x40011400
 8003668:	40011800 	.word	0x40011800
 800366c:	40011c00 	.word	0x40011c00
 8003670:	40010400 	.word	0x40010400

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003684:	887b      	ldrh	r3, [r7, #2]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d004      	beq.n	8003694 <HAL_GPIO_WritePin+0x20>
 800368a:	887b      	ldrh	r3, [r7, #2]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	041b      	lsls	r3, r3, #16
 8003690:	2b00      	cmp	r3, #0
 8003692:	d004      	beq.n	800369e <HAL_GPIO_WritePin+0x2a>
 8003694:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003698:	480e      	ldr	r0, [pc, #56]	; (80036d4 <HAL_GPIO_WritePin+0x60>)
 800369a:	f7fe f805 	bl	80016a8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800369e:	787b      	ldrb	r3, [r7, #1]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_GPIO_WritePin+0x40>
 80036a4:	787b      	ldrb	r3, [r7, #1]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d004      	beq.n	80036b4 <HAL_GPIO_WritePin+0x40>
 80036aa:	f240 11d5 	movw	r1, #469	; 0x1d5
 80036ae:	4809      	ldr	r0, [pc, #36]	; (80036d4 <HAL_GPIO_WritePin+0x60>)
 80036b0:	f7fd fffa 	bl	80016a8 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	0800bca8 	.word	0x0800bca8

080036d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80036e4:	887b      	ldrh	r3, [r7, #2]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_GPIO_TogglePin+0x1c>
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	0c1b      	lsrs	r3, r3, #16
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <HAL_GPIO_TogglePin+0x26>
 80036f4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 80036f8:	480a      	ldr	r0, [pc, #40]	; (8003724 <HAL_GPIO_TogglePin+0x4c>)
 80036fa:	f7fd ffd5 	bl	80016a8 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	4013      	ands	r3, r2
 800370a:	041a      	lsls	r2, r3, #16
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	43d9      	mvns	r1, r3
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	400b      	ands	r3, r1
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	611a      	str	r2, [r3, #16]
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	0800bca8 	.word	0x0800bca8

08003728 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800372c:	4b03      	ldr	r3, [pc, #12]	; (800373c <HAL_PWR_EnableBkUpAccess+0x14>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	420e0020 	.word	0x420e0020

08003740 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e35c      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01c      	beq.n	8003794 <HAL_RCC_OscConfig+0x54>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d116      	bne.n	8003794 <HAL_RCC_OscConfig+0x54>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d110      	bne.n	8003794 <HAL_RCC_OscConfig+0x54>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0308 	and.w	r3, r3, #8
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_RCC_OscConfig+0x54>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d104      	bne.n	8003794 <HAL_RCC_OscConfig+0x54>
 800378a:	f240 1167 	movw	r1, #359	; 0x167
 800378e:	48a5      	ldr	r0, [pc, #660]	; (8003a24 <HAL_RCC_OscConfig+0x2e4>)
 8003790:	f7fd ff8a 	bl	80016a8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 809a 	beq.w	80038d6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00e      	beq.n	80037c8 <HAL_RCC_OscConfig+0x88>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037b2:	d009      	beq.n	80037c8 <HAL_RCC_OscConfig+0x88>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037bc:	d004      	beq.n	80037c8 <HAL_RCC_OscConfig+0x88>
 80037be:	f240 116d 	movw	r1, #365	; 0x16d
 80037c2:	4898      	ldr	r0, [pc, #608]	; (8003a24 <HAL_RCC_OscConfig+0x2e4>)
 80037c4:	f7fd ff70 	bl	80016a8 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c8:	4b97      	ldr	r3, [pc, #604]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d00c      	beq.n	80037ee <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037d4:	4b94      	ldr	r3, [pc, #592]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d112      	bne.n	8003806 <HAL_RCC_OscConfig+0xc6>
 80037e0:	4b91      	ldr	r3, [pc, #580]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d10b      	bne.n	8003806 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ee:	4b8e      	ldr	r3, [pc, #568]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d06c      	beq.n	80038d4 <HAL_RCC_OscConfig+0x194>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d168      	bne.n	80038d4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e302      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d106      	bne.n	800381e <HAL_RCC_OscConfig+0xde>
 8003810:	4b85      	ldr	r3, [pc, #532]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a84      	ldr	r2, [pc, #528]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e02e      	b.n	800387c <HAL_RCC_OscConfig+0x13c>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x100>
 8003826:	4b80      	ldr	r3, [pc, #512]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a7f      	ldr	r2, [pc, #508]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800382c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b7d      	ldr	r3, [pc, #500]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a7c      	ldr	r2, [pc, #496]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e01d      	b.n	800387c <HAL_RCC_OscConfig+0x13c>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003848:	d10c      	bne.n	8003864 <HAL_RCC_OscConfig+0x124>
 800384a:	4b77      	ldr	r3, [pc, #476]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a76      	ldr	r2, [pc, #472]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003854:	6013      	str	r3, [r2, #0]
 8003856:	4b74      	ldr	r3, [pc, #464]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a73      	ldr	r2, [pc, #460]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	e00b      	b.n	800387c <HAL_RCC_OscConfig+0x13c>
 8003864:	4b70      	ldr	r3, [pc, #448]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6f      	ldr	r2, [pc, #444]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	4b6d      	ldr	r3, [pc, #436]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6c      	ldr	r2, [pc, #432]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800387a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d013      	beq.n	80038ac <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003884:	f7fe fbc0 	bl	8002008 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7fe fbbc 	bl	8002008 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e2b6      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389e:	4b62      	ldr	r3, [pc, #392]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x14c>
 80038aa:	e014      	b.n	80038d6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7fe fbac 	bl	8002008 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b4:	f7fe fba8 	bl	8002008 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b64      	cmp	r3, #100	; 0x64
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e2a2      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c6:	4b58      	ldr	r3, [pc, #352]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x174>
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d079      	beq.n	80039d6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_RCC_OscConfig+0x1bc>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d004      	beq.n	80038fc <HAL_RCC_OscConfig+0x1bc>
 80038f2:	f240 11a1 	movw	r1, #417	; 0x1a1
 80038f6:	484b      	ldr	r0, [pc, #300]	; (8003a24 <HAL_RCC_OscConfig+0x2e4>)
 80038f8:	f7fd fed6 	bl	80016a8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	2b1f      	cmp	r3, #31
 8003902:	d904      	bls.n	800390e <HAL_RCC_OscConfig+0x1ce>
 8003904:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003908:	4846      	ldr	r0, [pc, #280]	; (8003a24 <HAL_RCC_OscConfig+0x2e4>)
 800390a:	f7fd fecd 	bl	80016a8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800390e:	4b46      	ldr	r3, [pc, #280]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 030c 	and.w	r3, r3, #12
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800391a:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b08      	cmp	r3, #8
 8003924:	d11c      	bne.n	8003960 <HAL_RCC_OscConfig+0x220>
 8003926:	4b40      	ldr	r3, [pc, #256]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d116      	bne.n	8003960 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003932:	4b3d      	ldr	r3, [pc, #244]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d005      	beq.n	800394a <HAL_RCC_OscConfig+0x20a>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d001      	beq.n	800394a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e260      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	4933      	ldr	r1, [pc, #204]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800395a:	4313      	orrs	r3, r2
 800395c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	e03a      	b.n	80039d6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003968:	4b30      	ldr	r3, [pc, #192]	; (8003a2c <HAL_RCC_OscConfig+0x2ec>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396e:	f7fe fb4b 	bl	8002008 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003974:	e008      	b.n	8003988 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003976:	f7fe fb47 	bl	8002008 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	2b02      	cmp	r3, #2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e241      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0f0      	beq.n	8003976 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4921      	ldr	r1, [pc, #132]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	600b      	str	r3, [r1, #0]
 80039a8:	e015      	b.n	80039d6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_OscConfig+0x2ec>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b0:	f7fe fb2a 	bl	8002008 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b8:	f7fe fb26 	bl	8002008 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e220      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ca:	4b17      	ldr	r3, [pc, #92]	; (8003a28 <HAL_RCC_OscConfig+0x2e8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d048      	beq.n	8003a74 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d008      	beq.n	80039fc <HAL_RCC_OscConfig+0x2bc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d004      	beq.n	80039fc <HAL_RCC_OscConfig+0x2bc>
 80039f2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80039f6:	480b      	ldr	r0, [pc, #44]	; (8003a24 <HAL_RCC_OscConfig+0x2e4>)
 80039f8:	f7fd fe56 	bl	80016a8 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d021      	beq.n	8003a48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <HAL_RCC_OscConfig+0x2f0>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe fafd 	bl	8002008 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a10:	e010      	b.n	8003a34 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7fe faf9 	bl	8002008 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d909      	bls.n	8003a34 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e1f3      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
 8003a24:	0800bce4 	.word	0x0800bce4
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	42420000 	.word	0x42420000
 8003a30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a34:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f003 0302 	and.w	r3, r3, #2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d0e8      	beq.n	8003a12 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a40:	2001      	movs	r0, #1
 8003a42:	f000 fc0f 	bl	8004264 <RCC_Delay>
 8003a46:	e015      	b.n	8003a74 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a48:	4b63      	ldr	r3, [pc, #396]	; (8003bd8 <HAL_RCC_OscConfig+0x498>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4e:	f7fe fadb 	bl	8002008 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a56:	f7fe fad7 	bl	8002008 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e1d1      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a68:	4b5a      	ldr	r3, [pc, #360]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1f0      	bne.n	8003a56 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0304 	and.w	r3, r3, #4
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80c0 	beq.w	8003c02 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a82:	2300      	movs	r3, #0
 8003a84:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x368>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d008      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x368>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b05      	cmp	r3, #5
 8003a9c:	d004      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x368>
 8003a9e:	f240 2111 	movw	r1, #529	; 0x211
 8003aa2:	484e      	ldr	r0, [pc, #312]	; (8003bdc <HAL_RCC_OscConfig+0x49c>)
 8003aa4:	f7fd fe00 	bl	80016a8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa8:	4b4a      	ldr	r3, [pc, #296]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ab4:	4b47      	ldr	r3, [pc, #284]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	4a46      	ldr	r2, [pc, #280]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abe:	61d3      	str	r3, [r2, #28]
 8003ac0:	4b44      	ldr	r3, [pc, #272]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x4a0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d118      	bne.n	8003b0e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003adc:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <HAL_RCC_OscConfig+0x4a0>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3f      	ldr	r2, [pc, #252]	; (8003be0 <HAL_RCC_OscConfig+0x4a0>)
 8003ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae8:	f7fe fa8e 	bl	8002008 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af0:	f7fe fa8a 	bl	8002008 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e184      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b02:	4b37      	ldr	r3, [pc, #220]	; (8003be0 <HAL_RCC_OscConfig+0x4a0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f0      	beq.n	8003af0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x3e4>
 8003b16:	4b2f      	ldr	r3, [pc, #188]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	4a2e      	ldr	r2, [pc, #184]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6213      	str	r3, [r2, #32]
 8003b22:	e02d      	b.n	8003b80 <HAL_RCC_OscConfig+0x440>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10c      	bne.n	8003b46 <HAL_RCC_OscConfig+0x406>
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	6213      	str	r3, [r2, #32]
 8003b38:	4b26      	ldr	r3, [pc, #152]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b3a:	6a1b      	ldr	r3, [r3, #32]
 8003b3c:	4a25      	ldr	r2, [pc, #148]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b3e:	f023 0304 	bic.w	r3, r3, #4
 8003b42:	6213      	str	r3, [r2, #32]
 8003b44:	e01c      	b.n	8003b80 <HAL_RCC_OscConfig+0x440>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b05      	cmp	r3, #5
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x428>
 8003b4e:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	6213      	str	r3, [r2, #32]
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6213      	str	r3, [r2, #32]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0x440>
 8003b68:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	6213      	str	r3, [r2, #32]
 8003b74:	4b17      	ldr	r3, [pc, #92]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003b7a:	f023 0304 	bic.w	r3, r3, #4
 8003b7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d015      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b88:	f7fe fa3e 	bl	8002008 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fe fa3a 	bl	8002008 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e132      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba6:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_OscConfig+0x494>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0ee      	beq.n	8003b90 <HAL_RCC_OscConfig+0x450>
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb4:	f7fe fa28 	bl	8002008 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bba:	e013      	b.n	8003be4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bbc:	f7fe fa24 	bl	8002008 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d90a      	bls.n	8003be4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e11c      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	42420480 	.word	0x42420480
 8003bdc:	0800bce4 	.word	0x0800bce4
 8003be0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be4:	4b8b      	ldr	r3, [pc, #556]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1e5      	bne.n	8003bbc <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d105      	bne.n	8003c02 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf6:	4b87      	ldr	r3, [pc, #540]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003bf8:	69db      	ldr	r3, [r3, #28]
 8003bfa:	4a86      	ldr	r2, [pc, #536]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c00:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4e4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d008      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4e4>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d004      	beq.n	8003c24 <HAL_RCC_OscConfig+0x4e4>
 8003c1a:	f240 21af 	movw	r1, #687	; 0x2af
 8003c1e:	487e      	ldr	r0, [pc, #504]	; (8003e18 <HAL_RCC_OscConfig+0x6d8>)
 8003c20:	f7fd fd42 	bl	80016a8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80ee 	beq.w	8003e0a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c2e:	4b79      	ldr	r3, [pc, #484]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	f000 80ce 	beq.w	8003dd8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	f040 80b2 	bne.w	8003daa <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <HAL_RCC_OscConfig+0x522>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c56:	d004      	beq.n	8003c62 <HAL_RCC_OscConfig+0x522>
 8003c58:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003c5c:	486e      	ldr	r0, [pc, #440]	; (8003e18 <HAL_RCC_OscConfig+0x6d8>)
 8003c5e:	f7fd fd23 	bl	80016a8 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d04a      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c72:	d045      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c7c:	d040      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c86:	d03b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c90:	d036      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c9a:	d031      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ca4:	d02c      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003caa:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003cae:	d027      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cb8:	d022      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003cc2:	d01d      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003ccc:	d018      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003cd6:	d013      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ce0:	d00e      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003cea:	d009      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003cf4:	d004      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
 8003cf6:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003cfa:	4847      	ldr	r0, [pc, #284]	; (8003e18 <HAL_RCC_OscConfig+0x6d8>)
 8003cfc:	f7fd fcd4 	bl	80016a8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d00:	4b46      	ldr	r3, [pc, #280]	; (8003e1c <HAL_RCC_OscConfig+0x6dc>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d06:	f7fe f97f 	bl	8002008 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d0e:	f7fe f97b 	bl	8002008 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e075      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d20:	4b3c      	ldr	r3, [pc, #240]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d34:	d116      	bne.n	8003d64 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCC_OscConfig+0x612>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d46:	d004      	beq.n	8003d52 <HAL_RCC_OscConfig+0x612>
 8003d48:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003d4c:	4832      	ldr	r0, [pc, #200]	; (8003e18 <HAL_RCC_OscConfig+0x6d8>)
 8003d4e:	f7fd fcab 	bl	80016a8 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d52:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	492d      	ldr	r1, [pc, #180]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a19      	ldr	r1, [r3, #32]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	430b      	orrs	r3, r1
 8003d76:	4927      	ldr	r1, [pc, #156]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <HAL_RCC_OscConfig+0x6dc>)
 8003d7e:	2201      	movs	r2, #1
 8003d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d82:	f7fe f941 	bl	8002008 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d8a:	f7fe f93d 	bl	8002008 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e037      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d9c:	4b1d      	ldr	r3, [pc, #116]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0f0      	beq.n	8003d8a <HAL_RCC_OscConfig+0x64a>
 8003da8:	e02f      	b.n	8003e0a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_RCC_OscConfig+0x6dc>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe f92a 	bl	8002008 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe f926 	bl	8002008 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e020      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dca:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x678>
 8003dd6:	e018      	b.n	8003e0a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e013      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003de4:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x6d4>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d001      	beq.n	8003e0a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	0800bce4 	.word	0x0800bce4
 8003e1c:	42420060 	.word	0x42420060

08003e20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e176      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d116      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x4e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d110      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x4e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x4e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d104      	bne.n	8003e6e <HAL_RCC_ClockConfig+0x4e>
 8003e64:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003e68:	4874      	ldr	r0, [pc, #464]	; (800403c <HAL_RCC_ClockConfig+0x21c>)
 8003e6a:	f7fd fc1d 	bl	80016a8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x6a>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d007      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x6a>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d004      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x6a>
 8003e80:	f240 3139 	movw	r1, #825	; 0x339
 8003e84:	486d      	ldr	r0, [pc, #436]	; (800403c <HAL_RCC_ClockConfig+0x21c>)
 8003e86:	f7fd fc0f 	bl	80016a8 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e8a:	4b6d      	ldr	r3, [pc, #436]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d910      	bls.n	8003eba <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e98:	4b69      	ldr	r3, [pc, #420]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f023 0207 	bic.w	r2, r3, #7
 8003ea0:	4967      	ldr	r1, [pc, #412]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ea8:	4b65      	ldr	r3, [pc, #404]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d001      	beq.n	8003eba <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e133      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d049      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a5b      	ldr	r2, [pc, #364]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003ed8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003edc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eea:	4b56      	ldr	r3, [pc, #344]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4a55      	ldr	r2, [pc, #340]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003ef0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ef4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d024      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b80      	cmp	r3, #128	; 0x80
 8003f04:	d020      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b90      	cmp	r3, #144	; 0x90
 8003f0c:	d01c      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2ba0      	cmp	r3, #160	; 0xa0
 8003f14:	d018      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2bb0      	cmp	r3, #176	; 0xb0
 8003f1c:	d014      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	2bc0      	cmp	r3, #192	; 0xc0
 8003f24:	d010      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	2bd0      	cmp	r3, #208	; 0xd0
 8003f2c:	d00c      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2be0      	cmp	r3, #224	; 0xe0
 8003f34:	d008      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2bf0      	cmp	r3, #240	; 0xf0
 8003f3c:	d004      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x128>
 8003f3e:	f240 315f 	movw	r1, #863	; 0x35f
 8003f42:	483e      	ldr	r0, [pc, #248]	; (800403c <HAL_RCC_ClockConfig+0x21c>)
 8003f44:	f7fd fbb0 	bl	80016a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	493b      	ldr	r1, [pc, #236]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d051      	beq.n	800400a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00c      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x168>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d008      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x168>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d004      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x168>
 8003f7e:	f240 3166 	movw	r1, #870	; 0x366
 8003f82:	482e      	ldr	r0, [pc, #184]	; (800403c <HAL_RCC_ClockConfig+0x21c>)
 8003f84:	f7fd fb90 	bl	80016a8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d115      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0c0      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa8:	4b26      	ldr	r3, [pc, #152]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d109      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b4      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0ac      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 0203 	bic.w	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	491b      	ldr	r1, [pc, #108]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fda:	f7fe f815 	bl	8002008 <HAL_GetTick>
 8003fde:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fe2:	f7fe f811 	bl	8002008 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e094      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff8:	4b12      	ldr	r3, [pc, #72]	; (8004044 <HAL_RCC_ClockConfig+0x224>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 020c 	and.w	r2, r3, #12
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	429a      	cmp	r2, r3
 8004008:	d1eb      	bne.n	8003fe2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800400a:	4b0d      	ldr	r3, [pc, #52]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0307 	and.w	r3, r3, #7
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d217      	bcs.n	8004048 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004018:	4b09      	ldr	r3, [pc, #36]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	4907      	ldr	r1, [pc, #28]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004028:	4b05      	ldr	r3, [pc, #20]	; (8004040 <HAL_RCC_ClockConfig+0x220>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	429a      	cmp	r2, r3
 8004034:	d008      	beq.n	8004048 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e073      	b.n	8004122 <HAL_RCC_ClockConfig+0x302>
 800403a:	bf00      	nop
 800403c:	0800bce4 	.word	0x0800bce4
 8004040:	40022000 	.word	0x40022000
 8004044:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d025      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d018      	beq.n	800408e <HAL_RCC_ClockConfig+0x26e>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d013      	beq.n	800408e <HAL_RCC_ClockConfig+0x26e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800406e:	d00e      	beq.n	800408e <HAL_RCC_ClockConfig+0x26e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004078:	d009      	beq.n	800408e <HAL_RCC_ClockConfig+0x26e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004082:	d004      	beq.n	800408e <HAL_RCC_ClockConfig+0x26e>
 8004084:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004088:	4828      	ldr	r0, [pc, #160]	; (800412c <HAL_RCC_ClockConfig+0x30c>)
 800408a:	f7fd fb0d 	bl	80016a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800408e:	4b28      	ldr	r3, [pc, #160]	; (8004130 <HAL_RCC_ClockConfig+0x310>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	4925      	ldr	r1, [pc, #148]	; (8004130 <HAL_RCC_ClockConfig+0x310>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d026      	beq.n	80040fa <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d018      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2c6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040bc:	d013      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2c6>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040c6:	d00e      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2c6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2c6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040da:	d004      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2c6>
 80040dc:	f240 31ab 	movw	r1, #939	; 0x3ab
 80040e0:	4812      	ldr	r0, [pc, #72]	; (800412c <HAL_RCC_ClockConfig+0x30c>)
 80040e2:	f7fd fae1 	bl	80016a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040e6:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_RCC_ClockConfig+0x310>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	490e      	ldr	r1, [pc, #56]	; (8004130 <HAL_RCC_ClockConfig+0x310>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040fa:	f000 f821 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 80040fe:	4602      	mov	r2, r0
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <HAL_RCC_ClockConfig+0x310>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	490a      	ldr	r1, [pc, #40]	; (8004134 <HAL_RCC_ClockConfig+0x314>)
 800410c:	5ccb      	ldrb	r3, [r1, r3]
 800410e:	fa22 f303 	lsr.w	r3, r2, r3
 8004112:	4a09      	ldr	r2, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x318>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x31c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd ff32 	bl	8001f84 <HAL_InitTick>

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	0800bce4 	.word	0x0800bce4
 8004130:	40021000 	.word	0x40021000
 8004134:	0800c5ec 	.word	0x0800c5ec
 8004138:	20000000 	.word	0x20000000
 800413c:	20000004 	.word	0x20000004

08004140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004140:	b490      	push	{r4, r7}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004146:	4b2a      	ldr	r3, [pc, #168]	; (80041f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004148:	1d3c      	adds	r4, r7, #4
 800414a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800414c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004150:	f240 2301 	movw	r3, #513	; 0x201
 8004154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	2300      	movs	r3, #0
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800416a:	4b22      	ldr	r3, [pc, #136]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f003 030c 	and.w	r3, r3, #12
 8004176:	2b04      	cmp	r3, #4
 8004178:	d002      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x40>
 800417a:	2b08      	cmp	r3, #8
 800417c:	d003      	beq.n	8004186 <HAL_RCC_GetSysClockFreq+0x46>
 800417e:	e02d      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004182:	623b      	str	r3, [r7, #32]
      break;
 8004184:	e02d      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	0c9b      	lsrs	r3, r3, #18
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004192:	4413      	add	r3, r2
 8004194:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004198:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d013      	beq.n	80041cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041a4:	4b13      	ldr	r3, [pc, #76]	; (80041f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	0c5b      	lsrs	r3, r3, #17
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041b2:	4413      	add	r3, r2
 80041b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80041b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4a0e      	ldr	r2, [pc, #56]	; (80041f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041be:	fb02 f203 	mul.w	r2, r2, r3
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ca:	e004      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d8:	623b      	str	r3, [r7, #32]
      break;
 80041da:	e002      	b.n	80041e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041de:	623b      	str	r3, [r7, #32]
      break;
 80041e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e2:	6a3b      	ldr	r3, [r7, #32]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3728      	adds	r7, #40	; 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bc90      	pop	{r4, r7}
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	0800bd1c 	.word	0x0800bd1c
 80041f4:	40021000 	.word	0x40021000
 80041f8:	007a1200 	.word	0x007a1200
 80041fc:	003d0900 	.word	0x003d0900

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <HAL_RCC_GetHCLKFreq+0x10>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr
 8004210:	20000000 	.word	0x20000000

08004214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004218:	f7ff fff2 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4903      	ldr	r1, [pc, #12]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	0800c5fc 	.word	0x0800c5fc

0800423c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004240:	f7ff ffde 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004244:	4602      	mov	r2, r0
 8004246:	4b05      	ldr	r3, [pc, #20]	; (800425c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0adb      	lsrs	r3, r3, #11
 800424c:	f003 0307 	and.w	r3, r3, #7
 8004250:	4903      	ldr	r1, [pc, #12]	; (8004260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004252:	5ccb      	ldrb	r3, [r1, r3]
 8004254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004258:	4618      	mov	r0, r3
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	0800c5fc 	.word	0x0800c5fc

08004264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800426c:	4b0a      	ldr	r3, [pc, #40]	; (8004298 <RCC_Delay+0x34>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0a      	ldr	r2, [pc, #40]	; (800429c <RCC_Delay+0x38>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	0a5b      	lsrs	r3, r3, #9
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	fb02 f303 	mul.w	r3, r2, r3
 800427e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004280:	bf00      	nop
  }
  while (Delay --);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1f9      	bne.n	8004280 <RCC_Delay+0x1c>
}
 800428c:	bf00      	nop
 800428e:	bf00      	nop
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	bc80      	pop	{r7}
 8004296:	4770      	bx	lr
 8004298:	20000000 	.word	0x20000000
 800429c:	10624dd3 	.word	0x10624dd3

080042a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11b      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d115      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10f      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0308 	and.w	r3, r3, #8
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d109      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0310 	and.w	r3, r3, #16
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d103      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042ec:	216c      	movs	r1, #108	; 0x6c
 80042ee:	4873      	ldr	r0, [pc, #460]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80042f0:	f7fd f9da 	bl	80016a8 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 8095 	beq.w	800442c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004302:	2300      	movs	r3, #0
 8004304:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d012      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004316:	d00d      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004320:	d008      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800432a:	d003      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800432c:	2174      	movs	r1, #116	; 0x74
 800432e:	4863      	ldr	r0, [pc, #396]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004330:	f7fd f9ba 	bl	80016a8 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004334:	4b62      	ldr	r3, [pc, #392]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10d      	bne.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004340:	4b5f      	ldr	r3, [pc, #380]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	4a5e      	ldr	r2, [pc, #376]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434a:	61d3      	str	r3, [r2, #28]
 800434c:	4b5c      	ldr	r3, [pc, #368]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004354:	60bb      	str	r3, [r7, #8]
 8004356:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004358:	2301      	movs	r3, #1
 800435a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800435c:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d118      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004368:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a55      	ldr	r2, [pc, #340]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800436e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004372:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004374:	f7fd fe48 	bl	8002008 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437c:	f7fd fe44 	bl	8002008 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e092      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438e:	4b4d      	ldr	r3, [pc, #308]	; (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0f0      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800439a:	4b49      	ldr	r3, [pc, #292]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02e      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d027      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043b8:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043c2:	4b41      	ldr	r3, [pc, #260]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043c8:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ce:	4a3c      	ldr	r2, [pc, #240]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d014      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fd fe13 	bl	8002008 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e4:	e00a      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e6:	f7fd fe0f 	bl	8002008 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d901      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e05b      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043fc:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f003 0302 	and.w	r3, r3, #2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0ee      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004408:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	492a      	ldr	r1, [pc, #168]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004416:	4313      	orrs	r3, r2
 8004418:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004420:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d012      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004448:	d00d      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004452:	d008      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800445c:	d003      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800445e:	21b9      	movs	r1, #185	; 0xb9
 8004460:	4816      	ldr	r0, [pc, #88]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004462:	f7fd f921 	bl	80016a8 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4913      	ldr	r1, [pc, #76]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004474:	4313      	orrs	r3, r2
 8004476:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2b00      	cmp	r3, #0
 8004482:	d016      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448c:	d008      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d004      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004496:	f240 1115 	movw	r1, #277	; 0x115
 800449a:	4808      	ldr	r0, [pc, #32]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800449c:	f7fd f904 	bl	80016a8 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044a0:	4b07      	ldr	r3, [pc, #28]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	4904      	ldr	r1, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	0800bd2c 	.word	0x0800bd2c
 80044c0:	40021000 	.word	0x40021000
 80044c4:	40007000 	.word	0x40007000
 80044c8:	42420440 	.word	0x42420440

080044cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b08d      	sub	sp, #52	; 0x34
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80044d4:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 80044d6:	f107 040c 	add.w	r4, r7, #12
 80044da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80044e0:	f240 2301 	movw	r3, #513	; 0x201
 80044e4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ea:	2300      	movs	r3, #0
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	2300      	movs	r3, #0
 80044f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d118      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d113      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d10e      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d109      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f003 0310 	and.w	r3, r3, #16
 8004528:	2b00      	cmp	r3, #0
 800452a:	d104      	bne.n	8004536 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800452c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004530:	4864      	ldr	r0, [pc, #400]	; (80046c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004532:	f7fd f8b9 	bl	80016a8 <assert_failed>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3b01      	subs	r3, #1
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f200 80b6 	bhi.w	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	0800462b 	.word	0x0800462b
 800454c:	08004691 	.word	0x08004691
 8004550:	080046ad 	.word	0x080046ad
 8004554:	0800461b 	.word	0x0800461b
 8004558:	080046ad 	.word	0x080046ad
 800455c:	080046ad 	.word	0x080046ad
 8004560:	080046ad 	.word	0x080046ad
 8004564:	08004623 	.word	0x08004623
 8004568:	080046ad 	.word	0x080046ad
 800456c:	080046ad 	.word	0x080046ad
 8004570:	080046ad 	.word	0x080046ad
 8004574:	080046ad 	.word	0x080046ad
 8004578:	080046ad 	.word	0x080046ad
 800457c:	080046ad 	.word	0x080046ad
 8004580:	080046ad 	.word	0x080046ad
 8004584:	08004589 	.word	0x08004589
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004588:	4b4f      	ldr	r3, [pc, #316]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800458e:	4b4e      	ldr	r3, [pc, #312]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 808a 	beq.w	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	0c9b      	lsrs	r3, r3, #18
 80045a0:	f003 030f 	and.w	r3, r3, #15
 80045a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045a8:	4413      	add	r3, r2
 80045aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d018      	beq.n	80045ec <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ba:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	0c5b      	lsrs	r3, r3, #17
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80045c8:	4413      	add	r3, r2
 80045ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00d      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80045da:	4a3c      	ldr	r2, [pc, #240]	; (80046cc <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	fb02 f303 	mul.w	r3, r2, r3
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ea:	e004      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	4a38      	ldr	r2, [pc, #224]	; (80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80045f0:	fb02 f303 	mul.w	r3, r2, r3
 80045f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80045f6:	4b34      	ldr	r3, [pc, #208]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004602:	d102      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004606:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004608:	e052      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	005b      	lsls	r3, r3, #1
 800460e:	4a31      	ldr	r2, [pc, #196]	; (80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004618:	e04a      	b.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800461a:	f7ff fd91 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 800461e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004620:	e049      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004622:	f7ff fd8d 	bl	8004140 <HAL_RCC_GetSysClockFreq>
 8004626:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004628:	e045      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800462a:	4b27      	ldr	r3, [pc, #156]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463a:	d108      	bne.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800464a:	62bb      	str	r3, [r7, #40]	; 0x28
 800464c:	e01f      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004658:	d109      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004666:	f649 4340 	movw	r3, #40000	; 0x9c40
 800466a:	62bb      	str	r3, [r7, #40]	; 0x28
 800466c:	e00f      	b.n	800468e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004674:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004678:	d11c      	bne.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d016      	beq.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004686:	f24f 4324 	movw	r3, #62500	; 0xf424
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800468c:	e012      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800468e:	e011      	b.n	80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004690:	f7ff fdd4 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 8004694:	4602      	mov	r2, r0
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	0b9b      	lsrs	r3, r3, #14
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046aa:	e004      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 80046b4:	bf00      	nop
    }
  }
  return (frequency);
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3734      	adds	r7, #52	; 0x34
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd90      	pop	{r4, r7, pc}
 80046c0:	0800bd68 	.word	0x0800bd68
 80046c4:	0800bd2c 	.word	0x0800bd2c
 80046c8:	40021000 	.word	0x40021000
 80046cc:	007a1200 	.word	0x007a1200
 80046d0:	003d0900 	.word	0x003d0900
 80046d4:	aaaaaaab 	.word	0xaaaaaaab

080046d8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0b4      	b.n	8004858 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a5b      	ldr	r2, [pc, #364]	; (8004860 <HAL_RTC_Init+0x188>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_RTC_Init+0x2a>
 80046f8:	f240 111d 	movw	r1, #285	; 0x11d
 80046fc:	4859      	ldr	r0, [pc, #356]	; (8004864 <HAL_RTC_Init+0x18c>)
 80046fe:	f7fc ffd3 	bl	80016a8 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <HAL_RTC_Init+0x58>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	2b80      	cmp	r3, #128	; 0x80
 8004710:	d00e      	beq.n	8004730 <HAL_RTC_Init+0x58>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800471a:	d009      	beq.n	8004730 <HAL_RTC_Init+0x58>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004724:	d004      	beq.n	8004730 <HAL_RTC_Init+0x58>
 8004726:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800472a:	484e      	ldr	r0, [pc, #312]	; (8004864 <HAL_RTC_Init+0x18c>)
 800472c:	f7fc ffbc 	bl	80016a8 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004738:	d309      	bcc.n	800474e <HAL_RTC_Init+0x76>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004742:	d004      	beq.n	800474e <HAL_RTC_Init+0x76>
 8004744:	f240 111f 	movw	r1, #287	; 0x11f
 8004748:	4846      	ldr	r0, [pc, #280]	; (8004864 <HAL_RTC_Init+0x18c>)
 800474a:	f7fc ffad 	bl	80016a8 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	7c5b      	ldrb	r3, [r3, #17]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	d105      	bne.n	8004764 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fd f822 	bl	80017a8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fbca 	bl	8004f04 <HAL_RTC_WaitForSynchro>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d004      	beq.n	8004780 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2204      	movs	r2, #4
 800477a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e06b      	b.n	8004858 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fc83 	bl	800508c <RTC_EnterInitMode>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2204      	movs	r2, #4
 8004790:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e060      	b.n	8004858 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0207 	bic.w	r2, r2, #7
 80047a4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80047ae:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RTC_Init+0x190>)
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	4a2d      	ldr	r2, [pc, #180]	; (8004868 <HAL_RTC_Init+0x190>)
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80047ba:	4b2b      	ldr	r3, [pc, #172]	; (8004868 <HAL_RTC_Init+0x190>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	4928      	ldr	r1, [pc, #160]	; (8004868 <HAL_RTC_Init+0x190>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d003      	beq.n	80047de <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e00e      	b.n	80047fc <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80047de:	2001      	movs	r0, #1
 80047e0:	f7ff fe74 	bl	80044cc <HAL_RCCEx_GetPeriphCLKFreq>
 80047e4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2204      	movs	r2, #4
 80047f0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e030      	b.n	8004858 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 010f 	bic.w	r1, r3, #15
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	0c1a      	lsrs	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	041b      	lsls	r3, r3, #16
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	b291      	uxth	r1, r2
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	430b      	orrs	r3, r1
 8004826:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 fc57 	bl	80050dc <RTC_ExitInitMode>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d004      	beq.n	800483e <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2204      	movs	r2, #4
 8004838:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e00c      	b.n	8004858 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004856:	2300      	movs	r3, #0
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40002800 	.word	0x40002800
 8004864:	0800bd78 	.word	0x0800bd78
 8004868:	40006c00 	.word	0x40006c00

0800486c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_RTC_SetTime+0x20>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0cd      	b.n	8004a2c <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <HAL_RTC_SetTime+0x3a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d004      	beq.n	80048a6 <HAL_RTC_SetTime+0x3a>
 800489c:	f240 21ca 	movw	r1, #714	; 0x2ca
 80048a0:	4864      	ldr	r0, [pc, #400]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 80048a2:	f7fc ff01 	bl	80016a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	7c1b      	ldrb	r3, [r3, #16]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_RTC_SetTime+0x46>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e0bc      	b.n	8004a2c <HAL_RTC_SetTime+0x1c0>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2202      	movs	r2, #2
 80048bc:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d12e      	bne.n	8004922 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b17      	cmp	r3, #23
 80048ca:	d904      	bls.n	80048d6 <HAL_RTC_SetTime+0x6a>
 80048cc:	f240 21d3 	movw	r1, #723	; 0x2d3
 80048d0:	4858      	ldr	r0, [pc, #352]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 80048d2:	f7fc fee9 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	785b      	ldrb	r3, [r3, #1]
 80048da:	2b3b      	cmp	r3, #59	; 0x3b
 80048dc:	d904      	bls.n	80048e8 <HAL_RTC_SetTime+0x7c>
 80048de:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 80048e2:	4854      	ldr	r0, [pc, #336]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 80048e4:	f7fc fee0 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	789b      	ldrb	r3, [r3, #2]
 80048ec:	2b3b      	cmp	r3, #59	; 0x3b
 80048ee:	d904      	bls.n	80048fa <HAL_RTC_SetTime+0x8e>
 80048f0:	f240 21d5 	movw	r1, #725	; 0x2d5
 80048f4:	484f      	ldr	r0, [pc, #316]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 80048f6:	f7fc fed7 	bl	80016a8 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004904:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	4619      	mov	r1, r3
 800490e:	460b      	mov	r3, r1
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a5b      	subs	r3, r3, r1
 8004914:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004916:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800491c:	4413      	add	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	e045      	b.n	80049ae <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fc1d 	bl	8005166 <RTC_Bcd2ToByte>
 800492c:	4603      	mov	r3, r0
 800492e:	2b17      	cmp	r3, #23
 8004930:	d904      	bls.n	800493c <HAL_RTC_SetTime+0xd0>
 8004932:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004936:	483f      	ldr	r0, [pc, #252]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 8004938:	f7fc feb6 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	785b      	ldrb	r3, [r3, #1]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fc10 	bl	8005166 <RTC_Bcd2ToByte>
 8004946:	4603      	mov	r3, r0
 8004948:	2b3b      	cmp	r3, #59	; 0x3b
 800494a:	d904      	bls.n	8004956 <HAL_RTC_SetTime+0xea>
 800494c:	f240 21de 	movw	r1, #734	; 0x2de
 8004950:	4838      	ldr	r0, [pc, #224]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 8004952:	f7fc fea9 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	789b      	ldrb	r3, [r3, #2]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fc03 	bl	8005166 <RTC_Bcd2ToByte>
 8004960:	4603      	mov	r3, r0
 8004962:	2b3b      	cmp	r3, #59	; 0x3b
 8004964:	d904      	bls.n	8004970 <HAL_RTC_SetTime+0x104>
 8004966:	f240 21df 	movw	r1, #735	; 0x2df
 800496a:	4832      	ldr	r0, [pc, #200]	; (8004a34 <HAL_RTC_SetTime+0x1c8>)
 800496c:	f7fc fe9c 	bl	80016a8 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fbf6 	bl	8005166 <RTC_Bcd2ToByte>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004982:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	785b      	ldrb	r3, [r3, #1]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fbeb 	bl	8005166 <RTC_Bcd2ToByte>
 8004990:	4603      	mov	r3, r0
 8004992:	461a      	mov	r2, r3
 8004994:	4613      	mov	r3, r2
 8004996:	011b      	lsls	r3, r3, #4
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800499c:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	789b      	ldrb	r3, [r3, #2]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fbdf 	bl	8005166 <RTC_Bcd2ToByte>
 80049a8:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80049aa:	4423      	add	r3, r4
 80049ac:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80049ae:	6979      	ldr	r1, [r7, #20]
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fb04 	bl	8004fbe <RTC_WriteTimeCounter>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d007      	beq.n	80049cc <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2204      	movs	r2, #4
 80049c0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e02f      	b.n	8004a2c <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0205 	bic.w	r2, r2, #5
 80049da:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fb15 	bl	800500c <RTC_ReadAlarmCounter>
 80049e2:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d018      	beq.n	8004a1e <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d214      	bcs.n	8004a1e <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80049fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80049fe:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a00:	6939      	ldr	r1, [r7, #16]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fb1b 	bl	800503e <RTC_WriteAlarmCounter>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2204      	movs	r2, #4
 8004a12:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e006      	b.n	8004a2c <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
  }
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd90      	pop	{r4, r7, pc}
 8004a34:	0800bd78 	.word	0x0800bd78

08004a38 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	61bb      	str	r3, [r7, #24]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_RTC_GetTime+0x28>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0c0      	b.n	8004be6 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <HAL_RTC_GetTime+0x42>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d004      	beq.n	8004a7a <HAL_RTC_GetTime+0x42>
 8004a70:	f240 312d 	movw	r1, #813	; 0x32d
 8004a74:	485e      	ldr	r0, [pc, #376]	; (8004bf0 <HAL_RTC_GetTime+0x1b8>)
 8004a76:	f7fc fe17 	bl	80016a8 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e0ac      	b.n	8004be6 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa66 	bl	8004f5e <RTC_ReadTimeCounter>
 8004a92:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	4a57      	ldr	r2, [pc, #348]	; (8004bf4 <HAL_RTC_GetTime+0x1bc>)
 8004a98:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9c:	0adb      	lsrs	r3, r3, #11
 8004a9e:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <HAL_RTC_GetTime+0x1bc>)
 8004aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa8:	0adb      	lsrs	r3, r3, #11
 8004aaa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004aae:	fb01 f303 	mul.w	r3, r1, r3
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	4a50      	ldr	r2, [pc, #320]	; (8004bf8 <HAL_RTC_GetTime+0x1c0>)
 8004ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	4a4b      	ldr	r2, [pc, #300]	; (8004bf4 <HAL_RTC_GetTime+0x1bc>)
 8004ac6:	fba2 1203 	umull	r1, r2, r2, r3
 8004aca:	0ad2      	lsrs	r2, r2, #11
 8004acc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004ad0:	fb01 f202 	mul.w	r2, r1, r2
 8004ad4:	1a9a      	subs	r2, r3, r2
 8004ad6:	4b48      	ldr	r3, [pc, #288]	; (8004bf8 <HAL_RTC_GetTime+0x1c0>)
 8004ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8004adc:	0959      	lsrs	r1, r3, #5
 8004ade:	460b      	mov	r3, r1
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	1a5b      	subs	r3, r3, r1
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	1ad1      	subs	r1, r2, r3
 8004ae8:	b2ca      	uxtb	r2, r1
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2b17      	cmp	r3, #23
 8004af2:	d955      	bls.n	8004ba0 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4a41      	ldr	r2, [pc, #260]	; (8004bfc <HAL_RTC_GetTime+0x1c4>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	091b      	lsrs	r3, r3, #4
 8004afe:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004b00:	6939      	ldr	r1, [r7, #16]
 8004b02:	4b3e      	ldr	r3, [pc, #248]	; (8004bfc <HAL_RTC_GetTime+0x1c4>)
 8004b04:	fba3 2301 	umull	r2, r3, r3, r1
 8004b08:	091a      	lsrs	r2, r3, #4
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	1aca      	subs	r2, r1, r3
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b1a:	68f8      	ldr	r0, [r7, #12]
 8004b1c:	f000 fa76 	bl	800500c <RTC_ReadAlarmCounter>
 8004b20:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b28:	d008      	beq.n	8004b3c <HAL_RTC_GetTime+0x104>
 8004b2a:	69fa      	ldr	r2, [r7, #28]
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d904      	bls.n	8004b3c <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	e002      	b.n	8004b42 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b40:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4a2e      	ldr	r2, [pc, #184]	; (8004c00 <HAL_RTC_GetTime+0x1c8>)
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004b50:	69b9      	ldr	r1, [r7, #24]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 fa33 	bl	8004fbe <RTC_WriteTimeCounter>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e041      	b.n	8004be6 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b68:	d00c      	beq.n	8004b84 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	4413      	add	r3, r2
 8004b70:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b72:	69f9      	ldr	r1, [r7, #28]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 fa62 	bl	800503e <RTC_WriteAlarmCounter>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e030      	b.n	8004be6 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b84:	69f9      	ldr	r1, [r7, #28]
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fa59 	bl	800503e <RTC_WriteAlarmCounter>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e027      	b.n	8004be6 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004b96:	6979      	ldr	r1, [r7, #20]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fb01 	bl	80051a0 <RTC_DateUpdate>
 8004b9e:	e003      	b.n	8004ba8 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01a      	beq.n	8004be4 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 faba 	bl	800512c <RTC_ByteToBcd2>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fab1 	bl	800512c <RTC_ByteToBcd2>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	789b      	ldrb	r3, [r3, #2]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 faa8 	bl	800512c <RTC_ByteToBcd2>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	0800bd78 	.word	0x0800bd78
 8004bf4:	91a2b3c5 	.word	0x91a2b3c5
 8004bf8:	88888889 	.word	0x88888889
 8004bfc:	aaaaaaab 	.word	0xaaaaaaab
 8004c00:	00015180 	.word	0x00015180

08004c04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_RTC_SetDate+0x24>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0fc      	b.n	8004e26 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_RTC_SetDate+0x3e>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d004      	beq.n	8004c42 <HAL_RTC_SetDate+0x3e>
 8004c38:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004c3c:	487c      	ldr	r0, [pc, #496]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004c3e:	f7fc fd33 	bl	80016a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	7c1b      	ldrb	r3, [r3, #16]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d101      	bne.n	8004c4e <HAL_RTC_SetDate+0x4a>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	e0eb      	b.n	8004e26 <HAL_RTC_SetDate+0x222>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2202      	movs	r2, #2
 8004c58:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d12f      	bne.n	8004cc0 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	78db      	ldrb	r3, [r3, #3]
 8004c64:	2b63      	cmp	r3, #99	; 0x63
 8004c66:	d904      	bls.n	8004c72 <HAL_RTC_SetDate+0x6e>
 8004c68:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004c6c:	4870      	ldr	r0, [pc, #448]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004c6e:	f7fc fd1b 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_RTC_SetDate+0x7e>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	785b      	ldrb	r3, [r3, #1]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d904      	bls.n	8004c8c <HAL_RTC_SetDate+0x88>
 8004c82:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004c86:	486a      	ldr	r0, [pc, #424]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004c88:	f7fc fd0e 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	789b      	ldrb	r3, [r3, #2]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_RTC_SetDate+0x98>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	789b      	ldrb	r3, [r3, #2]
 8004c98:	2b1f      	cmp	r3, #31
 8004c9a:	d904      	bls.n	8004ca6 <HAL_RTC_SetDate+0xa2>
 8004c9c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004ca0:	4863      	ldr	r0, [pc, #396]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004ca2:	f7fc fd01 	bl	80016a8 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	78da      	ldrb	r2, [r3, #3]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	785a      	ldrb	r2, [r3, #1]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	789a      	ldrb	r2, [r3, #2]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	739a      	strb	r2, [r3, #14]
 8004cbe:	e051      	b.n	8004d64 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	78db      	ldrb	r3, [r3, #3]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fa4e 	bl	8005166 <RTC_Bcd2ToByte>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b63      	cmp	r3, #99	; 0x63
 8004cce:	d904      	bls.n	8004cda <HAL_RTC_SetDate+0xd6>
 8004cd0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004cd4:	4856      	ldr	r0, [pc, #344]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004cd6:	f7fc fce7 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	785b      	ldrb	r3, [r3, #1]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fa41 	bl	8005166 <RTC_Bcd2ToByte>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_RTC_SetDate+0xf6>
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa39 	bl	8005166 <RTC_Bcd2ToByte>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d904      	bls.n	8004d04 <HAL_RTC_SetDate+0x100>
 8004cfa:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004cfe:	484c      	ldr	r0, [pc, #304]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004d00:	f7fc fcd2 	bl	80016a8 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	789b      	ldrb	r3, [r3, #2]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 fa2c 	bl	8005166 <RTC_Bcd2ToByte>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_RTC_SetDate+0x120>
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	789b      	ldrb	r3, [r3, #2]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fa24 	bl	8005166 <RTC_Bcd2ToByte>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b1f      	cmp	r3, #31
 8004d22:	d904      	bls.n	8004d2e <HAL_RTC_SetDate+0x12a>
 8004d24:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004d28:	4841      	ldr	r0, [pc, #260]	; (8004e30 <HAL_RTC_SetDate+0x22c>)
 8004d2a:	f7fc fcbd 	bl	80016a8 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa17 	bl	8005166 <RTC_Bcd2ToByte>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fa0e 	bl	8005166 <RTC_Bcd2ToByte>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	789b      	ldrb	r3, [r3, #2]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fa05 	bl	8005166 <RTC_Bcd2ToByte>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	7bdb      	ldrb	r3, [r3, #15]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	7b59      	ldrb	r1, [r3, #13]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	7b9b      	ldrb	r3, [r3, #14]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f000 faf0 	bl	8005358 <RTC_WeekDayNum>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	7b1a      	ldrb	r2, [r3, #12]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f8e8 	bl	8004f5e <RTC_ReadTimeCounter>
 8004d8e:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <HAL_RTC_SetDate+0x230>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	0adb      	lsrs	r3, r3, #11
 8004d9a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b18      	cmp	r3, #24
 8004da0:	d93a      	bls.n	8004e18 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	4a24      	ldr	r2, [pc, #144]	; (8004e38 <HAL_RTC_SetDate+0x234>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	091b      	lsrs	r3, r3, #4
 8004dac:	4a23      	ldr	r2, [pc, #140]	; (8004e3c <HAL_RTC_SetDate+0x238>)
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004db8:	69f9      	ldr	r1, [r7, #28]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f8ff 	bl	8004fbe <RTC_WriteTimeCounter>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e027      	b.n	8004e26 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f918 	bl	800500c <RTC_ReadAlarmCounter>
 8004ddc:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d018      	beq.n	8004e18 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d214      	bcs.n	8004e18 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004df4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004df8:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004dfa:	69b9      	ldr	r1, [r7, #24]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f91e 	bl	800503e <RTC_WriteAlarmCounter>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	e006      	b.n	8004e26 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	0800bd78 	.word	0x0800bd78
 8004e34:	91a2b3c5 	.word	0x91a2b3c5
 8004e38:	aaaaaaab 	.word	0xaaaaaaab
 8004e3c:	00015180 	.word	0x00015180

08004e40 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004e4c:	f107 0314 	add.w	r3, r7, #20
 8004e50:	2100      	movs	r1, #0
 8004e52:	460a      	mov	r2, r1
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	460a      	mov	r2, r1
 8004e58:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <HAL_RTC_GetDate+0x26>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e045      	b.n	8004ef6 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_RTC_GetDate+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d004      	beq.n	8004e80 <HAL_RTC_GetDate+0x40>
 8004e76:	f240 410e 	movw	r1, #1038	; 0x40e
 8004e7a:	4821      	ldr	r0, [pc, #132]	; (8004f00 <HAL_RTC_GetDate+0xc0>)
 8004e7c:	f7fc fc14 	bl	80016a8 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	2200      	movs	r2, #0
 8004e86:	4619      	mov	r1, r3
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff fdd5 	bl	8004a38 <HAL_RTC_GetTime>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e02e      	b.n	8004ef6 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7b1a      	ldrb	r2, [r3, #12]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	7bda      	ldrb	r2, [r3, #15]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	7b5a      	ldrb	r2, [r3, #13]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	7b9a      	ldrb	r2, [r3, #14]
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d01a      	beq.n	8004ef4 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	78db      	ldrb	r3, [r3, #3]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 f932 	bl	800512c <RTC_ByteToBcd2>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	785b      	ldrb	r3, [r3, #1]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f929 	bl	800512c <RTC_ByteToBcd2>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	789b      	ldrb	r3, [r3, #2]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 f920 	bl	800512c <RTC_ByteToBcd2>
 8004eec:	4603      	mov	r3, r0
 8004eee:	461a      	mov	r2, r3
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	0800bd78 	.word	0x0800bd78

08004f04 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e01d      	b.n	8004f56 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f022 0208 	bic.w	r2, r2, #8
 8004f28:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f2a:	f7fd f86d 	bl	8002008 <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f30:	e009      	b.n	8004f46 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f32:	f7fd f869 	bl	8002008 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f40:	d901      	bls.n	8004f46 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e007      	b.n	8004f56 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 0308 	and.w	r3, r3, #8
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ee      	beq.n	8004f32 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b087      	sub	sp, #28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	827b      	strh	r3, [r7, #18]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	823b      	strh	r3, [r7, #16]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004f8e:	8a7a      	ldrh	r2, [r7, #18]
 8004f90:	8a3b      	ldrh	r3, [r7, #16]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d008      	beq.n	8004fa8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004f96:	8a3b      	ldrh	r3, [r7, #16]
 8004f98:	041a      	lsls	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	e004      	b.n	8004fb2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004fa8:	8a7b      	ldrh	r3, [r7, #18]
 8004faa:	041a      	lsls	r2, r3, #16
 8004fac:	89fb      	ldrh	r3, [r7, #14]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004fb2:	697b      	ldr	r3, [r7, #20]
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bc80      	pop	{r7}
 8004fbc:	4770      	bx	lr

08004fbe <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f85d 	bl	800508c <RTC_EnterInitMode>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e011      	b.n	8005002 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	0c12      	lsrs	r2, r2, #16
 8004fe6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	b292      	uxth	r2, r2
 8004ff0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f872 	bl	80050dc <RTC_ExitInitMode>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005002:	7bfb      	ldrb	r3, [r7, #15]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	81fb      	strh	r3, [r7, #14]
 8005018:	2300      	movs	r3, #0
 800501a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800502c:	89fb      	ldrh	r3, [r7, #14]
 800502e:	041a      	lsls	r2, r3, #16
 8005030:	89bb      	ldrh	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b084      	sub	sp, #16
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f81d 	bl	800508c <RTC_EnterInitMode>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
 800505c:	e011      	b.n	8005082 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	0c12      	lsrs	r2, r2, #16
 8005066:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b292      	uxth	r2, r2
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f832 	bl	80050dc <RTC_ExitInitMode>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3710      	adds	r7, #16
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005094:	2300      	movs	r3, #0
 8005096:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005098:	f7fc ffb6 	bl	8002008 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800509e:	e009      	b.n	80050b4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80050a0:	f7fc ffb2 	bl	8002008 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ae:	d901      	bls.n	80050b4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e00f      	b.n	80050d4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0ee      	beq.n	80050a0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f042 0210 	orr.w	r2, r2, #16
 80050d0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0210 	bic.w	r2, r2, #16
 80050f6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80050f8:	f7fc ff86 	bl	8002008 <HAL_GetTick>
 80050fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80050fe:	e009      	b.n	8005114 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005100:	f7fc ff82 	bl	8002008 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510e:	d901      	bls.n	8005114 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e007      	b.n	8005124 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d0ee      	beq.n	8005100 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800513a:	e005      	b.n	8005148 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3301      	adds	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	3b0a      	subs	r3, #10
 8005146:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b09      	cmp	r3, #9
 800514c:	d8f6      	bhi.n	800513c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	b2db      	uxtb	r3, r3
 8005152:	011b      	lsls	r3, r3, #4
 8005154:	b2da      	uxtb	r2, r3
 8005156:	79fb      	ldrb	r3, [r7, #7]
 8005158:	4313      	orrs	r3, r2
 800515a:	b2db      	uxtb	r3, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr

08005166 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005166:	b480      	push	{r7}
 8005168:	b085      	sub	sp, #20
 800516a:	af00      	add	r7, sp, #0
 800516c:	4603      	mov	r3, r0
 800516e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005174:	79fb      	ldrb	r3, [r7, #7]
 8005176:	091b      	lsrs	r3, r3, #4
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	b2da      	uxtb	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	b2db      	uxtb	r3, r3
 8005192:	4413      	add	r3, r2
 8005194:	b2db      	uxtb	r3, r3
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	bc80      	pop	{r7}
 800519e:	4770      	bx	lr

080051a0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	2300      	movs	r3, #0
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	7bdb      	ldrb	r3, [r3, #15]
 80051be:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	7b5b      	ldrb	r3, [r3, #13]
 80051c4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	7b9b      	ldrb	r3, [r3, #14]
 80051ca:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	e06f      	b.n	80052b2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d011      	beq.n	80051fc <RTC_DateUpdate+0x5c>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d00e      	beq.n	80051fc <RTC_DateUpdate+0x5c>
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	2b05      	cmp	r3, #5
 80051e2:	d00b      	beq.n	80051fc <RTC_DateUpdate+0x5c>
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b07      	cmp	r3, #7
 80051e8:	d008      	beq.n	80051fc <RTC_DateUpdate+0x5c>
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d005      	beq.n	80051fc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b0a      	cmp	r3, #10
 80051f4:	d002      	beq.n	80051fc <RTC_DateUpdate+0x5c>
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b0c      	cmp	r3, #12
 80051fa:	d117      	bne.n	800522c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b1e      	cmp	r3, #30
 8005200:	d803      	bhi.n	800520a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005208:	e050      	b.n	80052ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b0c      	cmp	r3, #12
 800520e:	d005      	beq.n	800521c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	3301      	adds	r3, #1
 8005214:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005216:	2301      	movs	r3, #1
 8005218:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800521a:	e047      	b.n	80052ac <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800521c:	2301      	movs	r3, #1
 800521e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
          year++;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	3301      	adds	r3, #1
 8005228:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800522a:	e03f      	b.n	80052ac <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b04      	cmp	r3, #4
 8005230:	d008      	beq.n	8005244 <RTC_DateUpdate+0xa4>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	2b06      	cmp	r3, #6
 8005236:	d005      	beq.n	8005244 <RTC_DateUpdate+0xa4>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b09      	cmp	r3, #9
 800523c:	d002      	beq.n	8005244 <RTC_DateUpdate+0xa4>
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b0b      	cmp	r3, #11
 8005242:	d10c      	bne.n	800525e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b1d      	cmp	r3, #29
 8005248:	d803      	bhi.n	8005252 <RTC_DateUpdate+0xb2>
      {
        day++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005250:	e02c      	b.n	80052ac <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3301      	adds	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005258:	2301      	movs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800525c:	e026      	b.n	80052ac <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d123      	bne.n	80052ac <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b1b      	cmp	r3, #27
 8005268:	d803      	bhi.n	8005272 <RTC_DateUpdate+0xd2>
      {
        day++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]
 8005270:	e01c      	b.n	80052ac <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2b1c      	cmp	r3, #28
 8005276:	d111      	bne.n	800529c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	b29b      	uxth	r3, r3
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f839 	bl	80052f4 <RTC_IsLeapYear>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	e00d      	b.n	80052ac <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	3301      	adds	r3, #1
 8005294:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005296:	2301      	movs	r3, #1
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	e007      	b.n	80052ac <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b1d      	cmp	r3, #29
 80052a0:	d104      	bne.n	80052ac <RTC_DateUpdate+0x10c>
      {
        month++;
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80052a8:	2301      	movs	r3, #1
 80052aa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	3301      	adds	r3, #1
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d38b      	bcc.n	80051d2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4619      	mov	r1, r3
 80052dc:	6978      	ldr	r0, [r7, #20]
 80052de:	f000 f83b 	bl	8005358 <RTC_WeekDayNum>
 80052e2:	4603      	mov	r3, r0
 80052e4:	461a      	mov	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	731a      	strb	r2, [r3, #12]
}
 80052ea:	bf00      	nop
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	4603      	mov	r3, r0
 80052fc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800530a:	2300      	movs	r3, #0
 800530c:	e01d      	b.n	800534a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	4a10      	ldr	r2, [pc, #64]	; (8005354 <RTC_IsLeapYear+0x60>)
 8005312:	fba2 1203 	umull	r1, r2, r2, r3
 8005316:	0952      	lsrs	r2, r2, #5
 8005318:	2164      	movs	r1, #100	; 0x64
 800531a:	fb01 f202 	mul.w	r2, r1, r2
 800531e:	1a9b      	subs	r3, r3, r2
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005326:	2301      	movs	r3, #1
 8005328:	e00f      	b.n	800534a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800532a:	88fb      	ldrh	r3, [r7, #6]
 800532c:	4a09      	ldr	r2, [pc, #36]	; (8005354 <RTC_IsLeapYear+0x60>)
 800532e:	fba2 1203 	umull	r1, r2, r2, r3
 8005332:	09d2      	lsrs	r2, r2, #7
 8005334:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005338:	fb01 f202 	mul.w	r2, r1, r2
 800533c:	1a9b      	subs	r3, r3, r2
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005348:	2300      	movs	r3, #0
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	51eb851f 	.word	0x51eb851f

08005358 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
 8005364:	4613      	mov	r3, r2
 8005366:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005376:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d82d      	bhi.n	80053da <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	4a2c      	ldr	r2, [pc, #176]	; (800543c <RTC_WeekDayNum+0xe4>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	085a      	lsrs	r2, r3, #1
 8005392:	78bb      	ldrb	r3, [r7, #2]
 8005394:	441a      	add	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	441a      	add	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	3b01      	subs	r3, #1
 800539e:	089b      	lsrs	r3, r3, #2
 80053a0:	441a      	add	r2, r3
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	3b01      	subs	r3, #1
 80053a6:	4926      	ldr	r1, [pc, #152]	; (8005440 <RTC_WeekDayNum+0xe8>)
 80053a8:	fba1 1303 	umull	r1, r3, r1, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	4922      	ldr	r1, [pc, #136]	; (8005440 <RTC_WeekDayNum+0xe8>)
 80053b6:	fba1 1303 	umull	r1, r3, r1, r3
 80053ba:	09db      	lsrs	r3, r3, #7
 80053bc:	4413      	add	r3, r2
 80053be:	1d1a      	adds	r2, r3, #4
 80053c0:	4b20      	ldr	r3, [pc, #128]	; (8005444 <RTC_WeekDayNum+0xec>)
 80053c2:	fba3 1302 	umull	r1, r3, r3, r2
 80053c6:	1ad1      	subs	r1, r2, r3
 80053c8:	0849      	lsrs	r1, r1, #1
 80053ca:	440b      	add	r3, r1
 80053cc:	0899      	lsrs	r1, r3, #2
 80053ce:	460b      	mov	r3, r1
 80053d0:	00db      	lsls	r3, r3, #3
 80053d2:	1a5b      	subs	r3, r3, r1
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	e029      	b.n	800542e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80053da:	78fa      	ldrb	r2, [r7, #3]
 80053dc:	4613      	mov	r3, r2
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	4413      	add	r3, r2
 80053e2:	00db      	lsls	r3, r3, #3
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	4a15      	ldr	r2, [pc, #84]	; (800543c <RTC_WeekDayNum+0xe4>)
 80053e8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ec:	085a      	lsrs	r2, r3, #1
 80053ee:	78bb      	ldrb	r3, [r7, #2]
 80053f0:	441a      	add	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	441a      	add	r2, r3
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	089b      	lsrs	r3, r3, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	4910      	ldr	r1, [pc, #64]	; (8005440 <RTC_WeekDayNum+0xe8>)
 8005400:	fba1 1303 	umull	r1, r3, r1, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	1ad2      	subs	r2, r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	490d      	ldr	r1, [pc, #52]	; (8005440 <RTC_WeekDayNum+0xe8>)
 800540c:	fba1 1303 	umull	r1, r3, r1, r3
 8005410:	09db      	lsrs	r3, r3, #7
 8005412:	4413      	add	r3, r2
 8005414:	1c9a      	adds	r2, r3, #2
 8005416:	4b0b      	ldr	r3, [pc, #44]	; (8005444 <RTC_WeekDayNum+0xec>)
 8005418:	fba3 1302 	umull	r1, r3, r3, r2
 800541c:	1ad1      	subs	r1, r2, r3
 800541e:	0849      	lsrs	r1, r1, #1
 8005420:	440b      	add	r3, r1
 8005422:	0899      	lsrs	r1, r3, #2
 8005424:	460b      	mov	r3, r1
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	1a5b      	subs	r3, r3, r1
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	b2db      	uxtb	r3, r3
}
 8005432:	4618      	mov	r0, r3
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	38e38e39 	.word	0x38e38e39
 8005440:	51eb851f 	.word	0x51eb851f
 8005444:	24924925 	.word	0x24924925

08005448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e0b2      	b.n	80055c0 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5a      	ldr	r2, [pc, #360]	; (80055c8 <HAL_TIM_Base_Init+0x180>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d027      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a58      	ldr	r2, [pc, #352]	; (80055cc <HAL_TIM_Base_Init+0x184>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d022      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005476:	d01d      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a54      	ldr	r2, [pc, #336]	; (80055d0 <HAL_TIM_Base_Init+0x188>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d018      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a53      	ldr	r2, [pc, #332]	; (80055d4 <HAL_TIM_Base_Init+0x18c>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d013      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a51      	ldr	r2, [pc, #324]	; (80055d8 <HAL_TIM_Base_Init+0x190>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00e      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a50      	ldr	r2, [pc, #320]	; (80055dc <HAL_TIM_Base_Init+0x194>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a4e      	ldr	r2, [pc, #312]	; (80055e0 <HAL_TIM_Base_Init+0x198>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d004      	beq.n	80054b4 <HAL_TIM_Base_Init+0x6c>
 80054aa:	f240 1113 	movw	r1, #275	; 0x113
 80054ae:	484d      	ldr	r0, [pc, #308]	; (80055e4 <HAL_TIM_Base_Init+0x19c>)
 80054b0:	f7fc f8fa 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d014      	beq.n	80054e6 <HAL_TIM_Base_Init+0x9e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b10      	cmp	r3, #16
 80054c2:	d010      	beq.n	80054e6 <HAL_TIM_Base_Init+0x9e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d00c      	beq.n	80054e6 <HAL_TIM_Base_Init+0x9e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b40      	cmp	r3, #64	; 0x40
 80054d2:	d008      	beq.n	80054e6 <HAL_TIM_Base_Init+0x9e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b60      	cmp	r3, #96	; 0x60
 80054da:	d004      	beq.n	80054e6 <HAL_TIM_Base_Init+0x9e>
 80054dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80054e0:	4840      	ldr	r0, [pc, #256]	; (80055e4 <HAL_TIM_Base_Init+0x19c>)
 80054e2:	f7fc f8e1 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00e      	beq.n	800550c <HAL_TIM_Base_Init+0xc4>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f6:	d009      	beq.n	800550c <HAL_TIM_Base_Init+0xc4>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005500:	d004      	beq.n	800550c <HAL_TIM_Base_Init+0xc4>
 8005502:	f240 1115 	movw	r1, #277	; 0x115
 8005506:	4837      	ldr	r0, [pc, #220]	; (80055e4 <HAL_TIM_Base_Init+0x19c>)
 8005508:	f7fc f8ce 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_TIM_Base_Init+0xde>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b80      	cmp	r3, #128	; 0x80
 800551a:	d004      	beq.n	8005526 <HAL_TIM_Base_Init+0xde>
 800551c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005520:	4830      	ldr	r0, [pc, #192]	; (80055e4 <HAL_TIM_Base_Init+0x19c>)
 8005522:	f7fc f8c1 	bl	80016a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d111      	bne.n	8005556 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f001 ffc0 	bl	80074c0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005544:	2b00      	cmp	r3, #0
 8005546:	d102      	bne.n	800554e <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a27      	ldr	r2, [pc, #156]	; (80055e8 <HAL_TIM_Base_Init+0x1a0>)
 800554c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3304      	adds	r3, #4
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f001 fbff 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3708      	adds	r7, #8
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	40012c00 	.word	0x40012c00
 80055cc:	40013400 	.word	0x40013400
 80055d0:	40000400 	.word	0x40000400
 80055d4:	40000800 	.word	0x40000800
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	40001000 	.word	0x40001000
 80055e0:	40001400 	.word	0x40001400
 80055e4:	0800bdb0 	.word	0x0800bdb0
 80055e8:	080017f1 	.word	0x080017f1

080055ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <HAL_TIM_Base_Start+0xf4>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d027      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a38      	ldr	r2, [pc, #224]	; (80056e4 <HAL_TIM_Base_Start+0xf8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d022      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005610:	d01d      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a34      	ldr	r2, [pc, #208]	; (80056e8 <HAL_TIM_Base_Start+0xfc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d018      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a32      	ldr	r2, [pc, #200]	; (80056ec <HAL_TIM_Base_Start+0x100>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a31      	ldr	r2, [pc, #196]	; (80056f0 <HAL_TIM_Base_Start+0x104>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00e      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <HAL_TIM_Base_Start+0x108>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2e      	ldr	r2, [pc, #184]	; (80056f8 <HAL_TIM_Base_Start+0x10c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d004      	beq.n	800564e <HAL_TIM_Base_Start+0x62>
 8005644:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005648:	482c      	ldr	r0, [pc, #176]	; (80056fc <HAL_TIM_Base_Start+0x110>)
 800564a:	f7fc f82d 	bl	80016a8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	d001      	beq.n	800565e <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e03c      	b.n	80056d8 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2202      	movs	r2, #2
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a1d      	ldr	r2, [pc, #116]	; (80056e0 <HAL_TIM_Base_Start+0xf4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_TIM_Base_Start+0xb6>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a1b      	ldr	r2, [pc, #108]	; (80056e4 <HAL_TIM_Base_Start+0xf8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_TIM_Base_Start+0xb6>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005682:	d00e      	beq.n	80056a2 <HAL_TIM_Base_Start+0xb6>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a17      	ldr	r2, [pc, #92]	; (80056e8 <HAL_TIM_Base_Start+0xfc>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_TIM_Base_Start+0xb6>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a16      	ldr	r2, [pc, #88]	; (80056ec <HAL_TIM_Base_Start+0x100>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_TIM_Base_Start+0xb6>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a14      	ldr	r2, [pc, #80]	; (80056f0 <HAL_TIM_Base_Start+0x104>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d111      	bne.n	80056c6 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b06      	cmp	r3, #6
 80056b2:	d010      	beq.n	80056d6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c4:	e007      	b.n	80056d6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f042 0201 	orr.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40012c00 	.word	0x40012c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800
 80056f0:	40000c00 	.word	0x40000c00
 80056f4:	40001000 	.word	0x40001000
 80056f8:	40001400 	.word	0x40001400
 80056fc:	0800bdb0 	.word	0x0800bdb0

08005700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a3d      	ldr	r2, [pc, #244]	; (8005804 <HAL_TIM_Base_Start_IT+0x104>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d027      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <HAL_TIM_Base_Start_IT+0x108>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d022      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d01d      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <HAL_TIM_Base_Start_IT+0x10c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d018      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a36      	ldr	r2, [pc, #216]	; (8005810 <HAL_TIM_Base_Start_IT+0x110>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a35      	ldr	r2, [pc, #212]	; (8005814 <HAL_TIM_Base_Start_IT+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a33      	ldr	r2, [pc, #204]	; (8005818 <HAL_TIM_Base_Start_IT+0x118>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a32      	ldr	r2, [pc, #200]	; (800581c <HAL_TIM_Base_Start_IT+0x11c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIM_Base_Start_IT+0x62>
 8005758:	f240 11cf 	movw	r1, #463	; 0x1cf
 800575c:	4830      	ldr	r0, [pc, #192]	; (8005820 <HAL_TIM_Base_Start_IT+0x120>)
 800575e:	f7fb ffa3 	bl	80016a8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	d001      	beq.n	8005772 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e044      	b.n	80057fc <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0201 	orr.w	r2, r2, #1
 8005788:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <HAL_TIM_Base_Start_IT+0x104>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d018      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xc6>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1b      	ldr	r2, [pc, #108]	; (8005808 <HAL_TIM_Base_Start_IT+0x108>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d013      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xc6>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a6:	d00e      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xc6>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_TIM_Base_Start_IT+0x10c>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d009      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xc6>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIM_Base_Start_IT+0x110>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d004      	beq.n	80057c6 <HAL_TIM_Base_Start_IT+0xc6>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a14      	ldr	r2, [pc, #80]	; (8005814 <HAL_TIM_Base_Start_IT+0x114>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d111      	bne.n	80057ea <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b06      	cmp	r3, #6
 80057d6:	d010      	beq.n	80057fa <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0201 	orr.w	r2, r2, #1
 80057e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057e8:	e007      	b.n	80057fa <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f042 0201 	orr.w	r2, r2, #1
 80057f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3710      	adds	r7, #16
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40013400 	.word	0x40013400
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40001000 	.word	0x40001000
 800581c:	40001400 	.word	0x40001400
 8005820:	0800bdb0 	.word	0x0800bdb0

08005824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e0b2      	b.n	800599c <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a5a      	ldr	r2, [pc, #360]	; (80059a4 <HAL_TIM_PWM_Init+0x180>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d027      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a58      	ldr	r2, [pc, #352]	; (80059a8 <HAL_TIM_PWM_Init+0x184>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d022      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d01d      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a54      	ldr	r2, [pc, #336]	; (80059ac <HAL_TIM_PWM_Init+0x188>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d018      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a53      	ldr	r2, [pc, #332]	; (80059b0 <HAL_TIM_PWM_Init+0x18c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d013      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a51      	ldr	r2, [pc, #324]	; (80059b4 <HAL_TIM_PWM_Init+0x190>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d00e      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a50      	ldr	r2, [pc, #320]	; (80059b8 <HAL_TIM_PWM_Init+0x194>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d009      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a4e      	ldr	r2, [pc, #312]	; (80059bc <HAL_TIM_PWM_Init+0x198>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d004      	beq.n	8005890 <HAL_TIM_PWM_Init+0x6c>
 8005886:	f240 5113 	movw	r1, #1299	; 0x513
 800588a:	484d      	ldr	r0, [pc, #308]	; (80059c0 <HAL_TIM_PWM_Init+0x19c>)
 800588c:	f7fb ff0c 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d014      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x9e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b10      	cmp	r3, #16
 800589e:	d010      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x9e>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d00c      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x9e>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b40      	cmp	r3, #64	; 0x40
 80058ae:	d008      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x9e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	2b60      	cmp	r3, #96	; 0x60
 80058b6:	d004      	beq.n	80058c2 <HAL_TIM_PWM_Init+0x9e>
 80058b8:	f240 5114 	movw	r1, #1300	; 0x514
 80058bc:	4840      	ldr	r0, [pc, #256]	; (80059c0 <HAL_TIM_PWM_Init+0x19c>)
 80058be:	f7fb fef3 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00e      	beq.n	80058e8 <HAL_TIM_PWM_Init+0xc4>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d2:	d009      	beq.n	80058e8 <HAL_TIM_PWM_Init+0xc4>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058dc:	d004      	beq.n	80058e8 <HAL_TIM_PWM_Init+0xc4>
 80058de:	f240 5115 	movw	r1, #1301	; 0x515
 80058e2:	4837      	ldr	r0, [pc, #220]	; (80059c0 <HAL_TIM_PWM_Init+0x19c>)
 80058e4:	f7fb fee0 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_TIM_PWM_Init+0xde>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b80      	cmp	r3, #128	; 0x80
 80058f6:	d004      	beq.n	8005902 <HAL_TIM_PWM_Init+0xde>
 80058f8:	f240 5116 	movw	r1, #1302	; 0x516
 80058fc:	4830      	ldr	r0, [pc, #192]	; (80059c0 <HAL_TIM_PWM_Init+0x19c>)
 80058fe:	f7fb fed3 	bl	80016a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d111      	bne.n	8005932 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f001 fdd2 	bl	80074c0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005920:	2b00      	cmp	r3, #0
 8005922:	d102      	bne.n	800592a <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a27      	ldr	r2, [pc, #156]	; (80059c4 <HAL_TIM_PWM_Init+0x1a0>)
 8005928:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2202      	movs	r2, #2
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f001 fa11 	bl	8006d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40013400 	.word	0x40013400
 80059ac:	40000400 	.word	0x40000400
 80059b0:	40000800 	.word	0x40000800
 80059b4:	40000c00 	.word	0x40000c00
 80059b8:	40001000 	.word	0x40001000
 80059bc:	40001400 	.word	0x40001400
 80059c0:	0800bdb0 	.word	0x0800bdb0
 80059c4:	080059c9 	.word	0x080059c9

080059c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bc80      	pop	{r7}
 80059d8:	4770      	bx	lr
	...

080059dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a8a      	ldr	r2, [pc, #552]	; (8005c14 <HAL_TIM_PWM_Start+0x238>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d10b      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x2c>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d062      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d05f      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d05c      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b0c      	cmp	r3, #12
 8005a06:	d059      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a82      	ldr	r2, [pc, #520]	; (8005c18 <HAL_TIM_PWM_Start+0x23c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10b      	bne.n	8005a2a <HAL_TIM_PWM_Start+0x4e>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d051      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d04e      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	2b08      	cmp	r3, #8
 8005a22:	d04b      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	2b0c      	cmp	r3, #12
 8005a28:	d048      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a32:	d10b      	bne.n	8005a4c <HAL_TIM_PWM_Start+0x70>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d040      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d03d      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d03a      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b0c      	cmp	r3, #12
 8005a4a:	d037      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a72      	ldr	r2, [pc, #456]	; (8005c1c <HAL_TIM_PWM_Start+0x240>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d10b      	bne.n	8005a6e <HAL_TIM_PWM_Start+0x92>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d02f      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d02c      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d029      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	d026      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a6b      	ldr	r2, [pc, #428]	; (8005c20 <HAL_TIM_PWM_Start+0x244>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10b      	bne.n	8005a90 <HAL_TIM_PWM_Start+0xb4>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d01e      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d01b      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d018      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b0c      	cmp	r3, #12
 8005a8e:	d015      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a63      	ldr	r2, [pc, #396]	; (8005c24 <HAL_TIM_PWM_Start+0x248>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d10b      	bne.n	8005ab2 <HAL_TIM_PWM_Start+0xd6>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d00a      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d007      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b0c      	cmp	r3, #12
 8005ab0:	d004      	beq.n	8005abc <HAL_TIM_PWM_Start+0xe0>
 8005ab2:	f240 5199 	movw	r1, #1433	; 0x599
 8005ab6:	485c      	ldr	r0, [pc, #368]	; (8005c28 <HAL_TIM_PWM_Start+0x24c>)
 8005ab8:	f7fb fdf6 	bl	80016a8 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <HAL_TIM_PWM_Start+0xfa>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	bf14      	ite	ne
 8005ace:	2301      	movne	r3, #1
 8005ad0:	2300      	moveq	r3, #0
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	e022      	b.n	8005b1c <HAL_TIM_PWM_Start+0x140>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d109      	bne.n	8005af0 <HAL_TIM_PWM_Start+0x114>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e015      	b.n	8005b1c <HAL_TIM_PWM_Start+0x140>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d109      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x12e>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	bf14      	ite	ne
 8005b02:	2301      	movne	r3, #1
 8005b04:	2300      	moveq	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	e008      	b.n	8005b1c <HAL_TIM_PWM_Start+0x140>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	bf14      	ite	ne
 8005b16:	2301      	movne	r3, #1
 8005b18:	2300      	moveq	r3, #0
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d001      	beq.n	8005b24 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e072      	b.n	8005c0a <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <HAL_TIM_PWM_Start+0x158>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b32:	e013      	b.n	8005b5c <HAL_TIM_PWM_Start+0x180>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d104      	bne.n	8005b44 <HAL_TIM_PWM_Start+0x168>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b42:	e00b      	b.n	8005b5c <HAL_TIM_PWM_Start+0x180>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d104      	bne.n	8005b54 <HAL_TIM_PWM_Start+0x178>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b52:	e003      	b.n	8005b5c <HAL_TIM_PWM_Start+0x180>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2201      	movs	r2, #1
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fc4b 	bl	8007400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a29      	ldr	r2, [pc, #164]	; (8005c14 <HAL_TIM_PWM_Start+0x238>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d004      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x1a2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a27      	ldr	r2, [pc, #156]	; (8005c18 <HAL_TIM_PWM_Start+0x23c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_PWM_Start+0x1a6>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_TIM_PWM_Start+0x1a8>
 8005b82:	2300      	movs	r3, #0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d007      	beq.n	8005b98 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1d      	ldr	r2, [pc, #116]	; (8005c14 <HAL_TIM_PWM_Start+0x238>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d018      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <HAL_TIM_PWM_Start+0x23c>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb4:	d00e      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a18      	ldr	r2, [pc, #96]	; (8005c1c <HAL_TIM_PWM_Start+0x240>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d009      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a16      	ldr	r2, [pc, #88]	; (8005c20 <HAL_TIM_PWM_Start+0x244>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d004      	beq.n	8005bd4 <HAL_TIM_PWM_Start+0x1f8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a15      	ldr	r2, [pc, #84]	; (8005c24 <HAL_TIM_PWM_Start+0x248>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d111      	bne.n	8005bf8 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2b06      	cmp	r3, #6
 8005be4:	d010      	beq.n	8005c08 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f042 0201 	orr.w	r2, r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf6:	e007      	b.n	8005c08 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40012c00 	.word	0x40012c00
 8005c18:	40013400 	.word	0x40013400
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	0800bdb0 	.word	0x0800bdb0

08005c2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e192      	b.n	8005f66 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a7d      	ldr	r2, [pc, #500]	; (8005e3c <HAL_TIM_Encoder_Init+0x210>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_TIM_Encoder_Init+0x5a>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a7c      	ldr	r2, [pc, #496]	; (8005e40 <HAL_TIM_Encoder_Init+0x214>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_TIM_Encoder_Init+0x5a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c5c:	d013      	beq.n	8005c86 <HAL_TIM_Encoder_Init+0x5a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a78      	ldr	r2, [pc, #480]	; (8005e44 <HAL_TIM_Encoder_Init+0x218>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_TIM_Encoder_Init+0x5a>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a76      	ldr	r2, [pc, #472]	; (8005e48 <HAL_TIM_Encoder_Init+0x21c>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_TIM_Encoder_Init+0x5a>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a75      	ldr	r2, [pc, #468]	; (8005e4c <HAL_TIM_Encoder_Init+0x220>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_TIM_Encoder_Init+0x5a>
 8005c7c:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005c80:	4873      	ldr	r0, [pc, #460]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005c82:	f7fb fd11 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d014      	beq.n	8005cb8 <HAL_TIM_Encoder_Init+0x8c>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b10      	cmp	r3, #16
 8005c94:	d010      	beq.n	8005cb8 <HAL_TIM_Encoder_Init+0x8c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	d00c      	beq.n	8005cb8 <HAL_TIM_Encoder_Init+0x8c>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d008      	beq.n	8005cb8 <HAL_TIM_Encoder_Init+0x8c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	2b60      	cmp	r3, #96	; 0x60
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIM_Encoder_Init+0x8c>
 8005cae:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005cb2:	4867      	ldr	r0, [pc, #412]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005cb4:	f7fb fcf8 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	691b      	ldr	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00e      	beq.n	8005cde <HAL_TIM_Encoder_Init+0xb2>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc8:	d009      	beq.n	8005cde <HAL_TIM_Encoder_Init+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cd2:	d004      	beq.n	8005cde <HAL_TIM_Encoder_Init+0xb2>
 8005cd4:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005cd8:	485d      	ldr	r0, [pc, #372]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005cda:	f7fb fce5 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d008      	beq.n	8005cf8 <HAL_TIM_Encoder_Init+0xcc>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_Encoder_Init+0xcc>
 8005cee:	f640 3191 	movw	r1, #2961	; 0xb91
 8005cf2:	4857      	ldr	r0, [pc, #348]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005cf4:	f7fb fcd8 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d00c      	beq.n	8005d1a <HAL_TIM_Encoder_Init+0xee>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d008      	beq.n	8005d1a <HAL_TIM_Encoder_Init+0xee>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b03      	cmp	r3, #3
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIM_Encoder_Init+0xee>
 8005d10:	f640 3192 	movw	r1, #2962	; 0xb92
 8005d14:	484e      	ldr	r0, [pc, #312]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005d16:	f7fb fcc7 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d00c      	beq.n	8005d3c <HAL_TIM_Encoder_Init+0x110>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d008      	beq.n	8005d3c <HAL_TIM_Encoder_Init+0x110>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_Encoder_Init+0x110>
 8005d32:	f640 3193 	movw	r1, #2963	; 0xb93
 8005d36:	4846      	ldr	r0, [pc, #280]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005d38:	f7fb fcb6 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d00c      	beq.n	8005d5e <HAL_TIM_Encoder_Init+0x132>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d008      	beq.n	8005d5e <HAL_TIM_Encoder_Init+0x132>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	2b03      	cmp	r3, #3
 8005d52:	d004      	beq.n	8005d5e <HAL_TIM_Encoder_Init+0x132>
 8005d54:	f640 3194 	movw	r1, #2964	; 0xb94
 8005d58:	483d      	ldr	r0, [pc, #244]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005d5a:	f7fb fca5 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d008      	beq.n	8005d78 <HAL_TIM_Encoder_Init+0x14c>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIM_Encoder_Init+0x14c>
 8005d6e:	f640 3195 	movw	r1, #2965	; 0xb95
 8005d72:	4837      	ldr	r0, [pc, #220]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005d74:	f7fb fc98 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d008      	beq.n	8005d92 <HAL_TIM_Encoder_Init+0x166>
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_Encoder_Init+0x166>
 8005d88:	f640 3196 	movw	r1, #2966	; 0xb96
 8005d8c:	4830      	ldr	r0, [pc, #192]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005d8e:	f7fb fc8b 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d010      	beq.n	8005dbc <HAL_TIM_Encoder_Init+0x190>
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d00c      	beq.n	8005dbc <HAL_TIM_Encoder_Init+0x190>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b08      	cmp	r3, #8
 8005da8:	d008      	beq.n	8005dbc <HAL_TIM_Encoder_Init+0x190>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_Encoder_Init+0x190>
 8005db2:	f640 3197 	movw	r1, #2967	; 0xb97
 8005db6:	4826      	ldr	r0, [pc, #152]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005db8:	f7fb fc76 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d010      	beq.n	8005de6 <HAL_TIM_Encoder_Init+0x1ba>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d00c      	beq.n	8005de6 <HAL_TIM_Encoder_Init+0x1ba>
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d008      	beq.n	8005de6 <HAL_TIM_Encoder_Init+0x1ba>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	2b0c      	cmp	r3, #12
 8005dda:	d004      	beq.n	8005de6 <HAL_TIM_Encoder_Init+0x1ba>
 8005ddc:	f640 3198 	movw	r1, #2968	; 0xb98
 8005de0:	481b      	ldr	r0, [pc, #108]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005de2:	f7fb fc61 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b0f      	cmp	r3, #15
 8005dec:	d904      	bls.n	8005df8 <HAL_TIM_Encoder_Init+0x1cc>
 8005dee:	f640 3199 	movw	r1, #2969	; 0xb99
 8005df2:	4817      	ldr	r0, [pc, #92]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005df4:	f7fb fc58 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	6a1b      	ldr	r3, [r3, #32]
 8005dfc:	2b0f      	cmp	r3, #15
 8005dfe:	d904      	bls.n	8005e0a <HAL_TIM_Encoder_Init+0x1de>
 8005e00:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005e04:	4812      	ldr	r0, [pc, #72]	; (8005e50 <HAL_TIM_Encoder_Init+0x224>)
 8005e06:	f7fb fc4f 	bl	80016a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d120      	bne.n	8005e58 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f001 fb4e 	bl	80074c0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d102      	bne.n	8005e32 <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a09      	ldr	r2, [pc, #36]	; (8005e54 <HAL_TIM_Encoder_Init+0x228>)
 8005e30:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	4798      	blx	r3
 8005e3a:	e00d      	b.n	8005e58 <HAL_TIM_Encoder_Init+0x22c>
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	0800bdb0 	.word	0x0800bdb0
 8005e54:	080018b5 	.word	0x080018b5
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e6e:	f023 0307 	bic.w	r3, r3, #7
 8005e72:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 ff74 	bl	8006d6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	697a      	ldr	r2, [r7, #20]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005eca:	f023 030c 	bic.w	r3, r3, #12
 8005ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ed6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	011a      	lsls	r2, r3, #4
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	031b      	lsls	r3, r3, #12
 8005efa:	4313      	orrs	r3, r2
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f08:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	4313      	orrs	r3, r2
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop

08005f70 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a5d      	ldr	r2, [pc, #372]	; (8006114 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d01d      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0x70>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5b      	ldr	r2, [pc, #364]	; (8006118 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0x70>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d013      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0x70>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a57      	ldr	r2, [pc, #348]	; (800611c <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d00e      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0x70>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d009      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0x70>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a54      	ldr	r2, [pc, #336]	; (8006124 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_TIM_Encoder_Start_IT+0x70>
 8005fd6:	f640 41e4 	movw	r1, #3300	; 0xce4
 8005fda:	4853      	ldr	r0, [pc, #332]	; (8006128 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8005fdc:	f7fb fb64 	bl	80016a8 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d110      	bne.n	8006008 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d102      	bne.n	8005ff2 <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fec:	7b7b      	ldrb	r3, [r7, #13]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d001      	beq.n	8005ff6 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e089      	b.n	800610a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006006:	e031      	b.n	800606c <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d110      	bne.n	8006030 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800600e:	7bbb      	ldrb	r3, [r7, #14]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d102      	bne.n	800601a <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006014:	7b3b      	ldrb	r3, [r7, #12]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d001      	beq.n	800601e <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e075      	b.n	800610a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2202      	movs	r2, #2
 8006022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800602e:	e01d      	b.n	800606c <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d108      	bne.n	8006048 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d105      	bne.n	8006048 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800603c:	7b7b      	ldrb	r3, [r7, #13]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d102      	bne.n	8006048 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006042:	7b3b      	ldrb	r3, [r7, #12]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d001      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e05e      	b.n	800610a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2202      	movs	r2, #2
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2202      	movs	r2, #2
 8006068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_TIM_Encoder_Start_IT+0x10a>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d010      	beq.n	800609a <HAL_TIM_Encoder_Start_IT+0x12a>
 8006078:	e01f      	b.n	80060ba <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2201      	movs	r2, #1
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f001 f9bc 	bl	8007400 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0202 	orr.w	r2, r2, #2
 8006096:	60da      	str	r2, [r3, #12]
      break;
 8006098:	e02e      	b.n	80060f8 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	2104      	movs	r1, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f001 f9ac 	bl	8007400 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f042 0204 	orr.w	r2, r2, #4
 80060b6:	60da      	str	r2, [r3, #12]
      break;
 80060b8:	e01e      	b.n	80060f8 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	2100      	movs	r1, #0
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 f99c 	bl	8007400 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2201      	movs	r2, #1
 80060ce:	2104      	movs	r1, #4
 80060d0:	4618      	mov	r0, r3
 80060d2:	f001 f995 	bl	8007400 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f042 0202 	orr.w	r2, r2, #2
 80060e4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0204 	orr.w	r2, r2, #4
 80060f4:	60da      	str	r2, [r3, #12]
      break;
 80060f6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	40012c00 	.word	0x40012c00
 8006118:	40013400 	.word	0x40013400
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	0800bdb0 	.word	0x0800bdb0

0800612c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d128      	bne.n	8006194 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b02      	cmp	r3, #2
 800614e:	d121      	bne.n	8006194 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0202 	mvn.w	r2, #2
 8006158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
 8006178:	e009      	b.n	800618e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0304 	and.w	r3, r3, #4
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d128      	bne.n	80061f4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d121      	bne.n	80061f4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0204 	mvn.w	r2, #4
 80061b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699b      	ldr	r3, [r3, #24]
 80061c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	e009      	b.n	80061ee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0308 	and.w	r3, r3, #8
 80061fe:	2b08      	cmp	r3, #8
 8006200:	d128      	bne.n	8006254 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	f003 0308 	and.w	r3, r3, #8
 800620c:	2b08      	cmp	r3, #8
 800620e:	d121      	bne.n	8006254 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f06f 0208 	mvn.w	r2, #8
 8006218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2204      	movs	r2, #4
 800621e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d005      	beq.n	800623a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	4798      	blx	r3
 8006238:	e009      	b.n	800624e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b10      	cmp	r3, #16
 8006260:	d128      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0310 	and.w	r3, r3, #16
 800626c:	2b10      	cmp	r3, #16
 800626e:	d121      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0210 	mvn.w	r2, #16
 8006278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2208      	movs	r2, #8
 800627e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800628a:	2b00      	cmp	r3, #0
 800628c:	d005      	beq.n	800629a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	4798      	blx	r3
 8006298:	e009      	b.n	80062ae <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0301 	and.w	r3, r3, #1
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d110      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d109      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0201 	mvn.w	r2, #1
 80062d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ee:	2b80      	cmp	r3, #128	; 0x80
 80062f0:	d110      	bne.n	8006314 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d109      	bne.n	8006314 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631e:	2b40      	cmp	r3, #64	; 0x40
 8006320:	d110      	bne.n	8006344 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b40      	cmp	r3, #64	; 0x40
 800632e:	d109      	bne.n	8006344 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b20      	cmp	r3, #32
 8006350:	d110      	bne.n	8006374 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b20      	cmp	r3, #32
 800635e:	d109      	bne.n	8006374 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0220 	mvn.w	r2, #32
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d010      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b04      	cmp	r3, #4
 8006392:	d00d      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b08      	cmp	r3, #8
 8006398:	d00a      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b0c      	cmp	r3, #12
 800639e:	d007      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b3c      	cmp	r3, #60	; 0x3c
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>
 80063a6:	f241 0127 	movw	r1, #4135	; 0x1027
 80063aa:	4890      	ldr	r0, [pc, #576]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063ac:	f7fb f97c 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b60      	cmp	r3, #96	; 0x60
 80063b6:	d008      	beq.n	80063ca <HAL_TIM_PWM_ConfigChannel+0x4e>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b70      	cmp	r3, #112	; 0x70
 80063be:	d004      	beq.n	80063ca <HAL_TIM_PWM_ConfigChannel+0x4e>
 80063c0:	f241 0128 	movw	r1, #4136	; 0x1028
 80063c4:	4889      	ldr	r0, [pc, #548]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063c6:	f7fb f96f 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <HAL_TIM_PWM_ConfigChannel+0x68>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIM_PWM_ConfigChannel+0x68>
 80063da:	f241 0129 	movw	r1, #4137	; 0x1029
 80063de:	4883      	ldr	r0, [pc, #524]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063e0:	f7fb f962 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x82>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	d004      	beq.n	80063fe <HAL_TIM_PWM_ConfigChannel+0x82>
 80063f4:	f241 012a 	movw	r1, #4138	; 0x102a
 80063f8:	487c      	ldr	r0, [pc, #496]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 80063fa:	f7fb f955 	bl	80016a8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_TIM_PWM_ConfigChannel+0x90>
 8006408:	2302      	movs	r3, #2
 800640a:	e145      	b.n	8006698 <HAL_TIM_PWM_ConfigChannel+0x31c>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	f200 8138 	bhi.w	800668c <HAL_TIM_PWM_ConfigChannel+0x310>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006459 	.word	0x08006459
 8006428:	0800668d 	.word	0x0800668d
 800642c:	0800668d 	.word	0x0800668d
 8006430:	0800668d 	.word	0x0800668d
 8006434:	080064df 	.word	0x080064df
 8006438:	0800668d 	.word	0x0800668d
 800643c:	0800668d 	.word	0x0800668d
 8006440:	0800668d 	.word	0x0800668d
 8006444:	08006567 	.word	0x08006567
 8006448:	0800668d 	.word	0x0800668d
 800644c:	0800668d 	.word	0x0800668d
 8006450:	0800668d 	.word	0x0800668d
 8006454:	08006605 	.word	0x08006605
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a64      	ldr	r2, [pc, #400]	; (80065f0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d01d      	beq.n	800649e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a63      	ldr	r2, [pc, #396]	; (80065f4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_TIM_PWM_ConfigChannel+0x122>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006474:	d013      	beq.n	800649e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a5f      	ldr	r2, [pc, #380]	; (80065f8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a5d      	ldr	r2, [pc, #372]	; (80065fc <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIM_PWM_ConfigChannel+0x122>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a5c      	ldr	r2, [pc, #368]	; (8006600 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006494:	f241 0134 	movw	r1, #4148	; 0x1034
 8006498:	4854      	ldr	r0, [pc, #336]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 800649a:	f7fb f905 	bl	80016a8 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	4618      	mov	r0, r3
 80064a6:	f000 fcdb 	bl	8006e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699a      	ldr	r2, [r3, #24]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f042 0208 	orr.w	r2, r2, #8
 80064b8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	699a      	ldr	r2, [r3, #24]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0204 	bic.w	r2, r2, #4
 80064c8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	6999      	ldr	r1, [r3, #24]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	430a      	orrs	r2, r1
 80064da:	619a      	str	r2, [r3, #24]
      break;
 80064dc:	e0d7      	b.n	800668e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a43      	ldr	r2, [pc, #268]	; (80065f0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d01d      	beq.n	8006524 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a41      	ldr	r2, [pc, #260]	; (80065f4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d018      	beq.n	8006524 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064fa:	d013      	beq.n	8006524 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a3d      	ldr	r2, [pc, #244]	; (80065f8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00e      	beq.n	8006524 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a3c      	ldr	r2, [pc, #240]	; (80065fc <HAL_TIM_PWM_ConfigChannel+0x280>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d009      	beq.n	8006524 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a3a      	ldr	r2, [pc, #232]	; (8006600 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d004      	beq.n	8006524 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800651a:	f241 0145 	movw	r1, #4165	; 0x1045
 800651e:	4833      	ldr	r0, [pc, #204]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006520:	f7fb f8c2 	bl	80016a8 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 fd32 	bl	8006f94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800653e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699a      	ldr	r2, [r3, #24]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6999      	ldr	r1, [r3, #24]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	619a      	str	r2, [r3, #24]
      break;
 8006564:	e093      	b.n	800668e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a21      	ldr	r2, [pc, #132]	; (80065f0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d01d      	beq.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x230>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d018      	beq.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x230>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006582:	d013      	beq.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x230>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a1b      	ldr	r2, [pc, #108]	; (80065f8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d00e      	beq.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x230>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a1a      	ldr	r2, [pc, #104]	; (80065fc <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d009      	beq.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x230>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a18      	ldr	r2, [pc, #96]	; (8006600 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <HAL_TIM_PWM_ConfigChannel+0x230>
 80065a2:	f241 0156 	movw	r1, #4182	; 0x1056
 80065a6:	4811      	ldr	r0, [pc, #68]	; (80065ec <HAL_TIM_PWM_ConfigChannel+0x270>)
 80065a8:	f7fb f87e 	bl	80016a8 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68b9      	ldr	r1, [r7, #8]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 fd8c 	bl	80070d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	69da      	ldr	r2, [r3, #28]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f042 0208 	orr.w	r2, r2, #8
 80065c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	69da      	ldr	r2, [r3, #28]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0204 	bic.w	r2, r2, #4
 80065d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69d9      	ldr	r1, [r3, #28]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	61da      	str	r2, [r3, #28]
      break;
 80065ea:	e050      	b.n	800668e <HAL_TIM_PWM_ConfigChannel+0x312>
 80065ec:	0800bdb0 	.word	0x0800bdb0
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400
 80065f8:	40000400 	.word	0x40000400
 80065fc:	40000800 	.word	0x40000800
 8006600:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a25      	ldr	r2, [pc, #148]	; (80066a0 <HAL_TIM_PWM_ConfigChannel+0x324>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01d      	beq.n	800664a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a24      	ldr	r2, [pc, #144]	; (80066a4 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d018      	beq.n	800664a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006620:	d013      	beq.n	800664a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a20      	ldr	r2, [pc, #128]	; (80066a8 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d00e      	beq.n	800664a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d009      	beq.n	800664a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a1d      	ldr	r2, [pc, #116]	; (80066b0 <HAL_TIM_PWM_ConfigChannel+0x334>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d004      	beq.n	800664a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006640:	f241 0167 	movw	r1, #4199	; 0x1067
 8006644:	481b      	ldr	r0, [pc, #108]	; (80066b4 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006646:	f7fb f82f 	bl	80016a8 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68b9      	ldr	r1, [r7, #8]
 8006650:	4618      	mov	r0, r3
 8006652:	f000 fddb 	bl	800720c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69d9      	ldr	r1, [r3, #28]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	021a      	lsls	r2, r3, #8
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	61da      	str	r2, [r3, #28]
      break;
 800668a:	e000      	b.n	800668e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 800668c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2200      	movs	r2, #0
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40012c00 	.word	0x40012c00
 80066a4:	40013400 	.word	0x40013400
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	0800bdb0 	.word	0x0800bdb0

080066b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x18>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e2f5      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x604>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e8:	d029      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f2:	d024      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d020      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b10      	cmp	r3, #16
 8006702:	d01c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2b20      	cmp	r3, #32
 800670a:	d018      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b30      	cmp	r3, #48	; 0x30
 8006712:	d014      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	2b40      	cmp	r3, #64	; 0x40
 800671a:	d010      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b50      	cmp	r3, #80	; 0x50
 8006722:	d00c      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b60      	cmp	r3, #96	; 0x60
 800672a:	d008      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b70      	cmp	r3, #112	; 0x70
 8006732:	d004      	beq.n	800673e <HAL_TIM_ConfigClockSource+0x86>
 8006734:	f241 4132 	movw	r1, #5170	; 0x1432
 8006738:	487c      	ldr	r0, [pc, #496]	; (800692c <HAL_TIM_ConfigClockSource+0x274>)
 800673a:	f7fa ffb5 	bl	80016a8 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800674c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006754:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006766:	f000 80f1 	beq.w	800694c <HAL_TIM_ConfigClockSource+0x294>
 800676a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676e:	f200 8299 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 8006772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006776:	d02d      	beq.n	80067d4 <HAL_TIM_ConfigClockSource+0x11c>
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	f200 8292 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 8006780:	2b70      	cmp	r3, #112	; 0x70
 8006782:	d05d      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0x188>
 8006784:	2b70      	cmp	r3, #112	; 0x70
 8006786:	f200 828d 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 800678a:	2b60      	cmp	r3, #96	; 0x60
 800678c:	f000 81a5 	beq.w	8006ada <HAL_TIM_ConfigClockSource+0x422>
 8006790:	2b60      	cmp	r3, #96	; 0x60
 8006792:	f200 8287 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 8006796:	2b50      	cmp	r3, #80	; 0x50
 8006798:	f000 8149 	beq.w	8006a2e <HAL_TIM_ConfigClockSource+0x376>
 800679c:	2b50      	cmp	r3, #80	; 0x50
 800679e:	f200 8281 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 80067a2:	2b40      	cmp	r3, #64	; 0x40
 80067a4:	f000 81fc 	beq.w	8006ba0 <HAL_TIM_ConfigClockSource+0x4e8>
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	f200 827b 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 80067ae:	2b30      	cmp	r3, #48	; 0x30
 80067b0:	f000 824c 	beq.w	8006c4c <HAL_TIM_ConfigClockSource+0x594>
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	f200 8275 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	f000 8246 	beq.w	8006c4c <HAL_TIM_ConfigClockSource+0x594>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	f200 826f 	bhi.w	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 8240 	beq.w	8006c4c <HAL_TIM_ConfigClockSource+0x594>
 80067cc:	2b10      	cmp	r3, #16
 80067ce:	f000 823d 	beq.w	8006c4c <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067d2:	e267      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a55      	ldr	r2, [pc, #340]	; (8006930 <HAL_TIM_ConfigClockSource+0x278>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	f000 8264 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a53      	ldr	r2, [pc, #332]	; (8006934 <HAL_TIM_ConfigClockSource+0x27c>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	f000 825e 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067f4:	f000 8258 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a4e      	ldr	r2, [pc, #312]	; (8006938 <HAL_TIM_ConfigClockSource+0x280>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f000 8252 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a4c      	ldr	r2, [pc, #304]	; (800693c <HAL_TIM_ConfigClockSource+0x284>)
 800680a:	4293      	cmp	r3, r2
 800680c:	f000 824c 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a4a      	ldr	r2, [pc, #296]	; (8006940 <HAL_TIM_ConfigClockSource+0x288>)
 8006816:	4293      	cmp	r3, r2
 8006818:	f000 8246 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a48      	ldr	r2, [pc, #288]	; (8006944 <HAL_TIM_ConfigClockSource+0x28c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	f000 8240 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a46      	ldr	r2, [pc, #280]	; (8006948 <HAL_TIM_ConfigClockSource+0x290>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f000 823a 	beq.w	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
 8006834:	f241 413e 	movw	r1, #5182	; 0x143e
 8006838:	483c      	ldr	r0, [pc, #240]	; (800692c <HAL_TIM_ConfigClockSource+0x274>)
 800683a:	f7fa ff35 	bl	80016a8 <assert_failed>
      break;
 800683e:	e233      	b.n	8006ca8 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <HAL_TIM_ConfigClockSource+0x278>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01d      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x1ce>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a39      	ldr	r2, [pc, #228]	; (8006934 <HAL_TIM_ConfigClockSource+0x27c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d018      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x1ce>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d013      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x1ce>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a35      	ldr	r2, [pc, #212]	; (8006938 <HAL_TIM_ConfigClockSource+0x280>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00e      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x1ce>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a33      	ldr	r2, [pc, #204]	; (800693c <HAL_TIM_ConfigClockSource+0x284>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x1ce>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a32      	ldr	r2, [pc, #200]	; (8006940 <HAL_TIM_ConfigClockSource+0x288>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d004      	beq.n	8006886 <HAL_TIM_ConfigClockSource+0x1ce>
 800687c:	f241 4145 	movw	r1, #5189	; 0x1445
 8006880:	482a      	ldr	r0, [pc, #168]	; (800692c <HAL_TIM_ConfigClockSource+0x274>)
 8006882:	f7fa ff11 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d013      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0x1fe>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006896:	d00e      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0x1fe>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a0:	d009      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0x1fe>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068aa:	d004      	beq.n	80068b6 <HAL_TIM_ConfigClockSource+0x1fe>
 80068ac:	f241 4148 	movw	r1, #5192	; 0x1448
 80068b0:	481e      	ldr	r0, [pc, #120]	; (800692c <HAL_TIM_ConfigClockSource+0x274>)
 80068b2:	f7fa fef9 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068be:	d014      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x232>
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d010      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x232>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00c      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x232>
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d008      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x232>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2b0a      	cmp	r3, #10
 80068de:	d004      	beq.n	80068ea <HAL_TIM_ConfigClockSource+0x232>
 80068e0:	f241 4149 	movw	r1, #5193	; 0x1449
 80068e4:	4811      	ldr	r0, [pc, #68]	; (800692c <HAL_TIM_ConfigClockSource+0x274>)
 80068e6:	f7fa fedf 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b0f      	cmp	r3, #15
 80068f0:	d904      	bls.n	80068fc <HAL_TIM_ConfigClockSource+0x244>
 80068f2:	f241 414a 	movw	r1, #5194	; 0x144a
 80068f6:	480d      	ldr	r0, [pc, #52]	; (800692c <HAL_TIM_ConfigClockSource+0x274>)
 80068f8:	f7fa fed6 	bl	80016a8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6899      	ldr	r1, [r3, #8]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	f000 fd59 	bl	80073c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800691e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	609a      	str	r2, [r3, #8]
      break;
 8006928:	e1bf      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
 800692a:	bf00      	nop
 800692c:	0800bdb0 	.word	0x0800bdb0
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40000400 	.word	0x40000400
 800693c:	40000800 	.word	0x40000800
 8006940:	40000c00 	.word	0x40000c00
 8006944:	40001000 	.word	0x40001000
 8006948:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a8d      	ldr	r2, [pc, #564]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01d      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x2da>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a8c      	ldr	r2, [pc, #560]	; (8006b8c <HAL_TIM_ConfigClockSource+0x4d4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d018      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x2da>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006968:	d013      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x2da>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a88      	ldr	r2, [pc, #544]	; (8006b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00e      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x2da>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a86      	ldr	r2, [pc, #536]	; (8006b94 <HAL_TIM_ConfigClockSource+0x4dc>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x2da>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a85      	ldr	r2, [pc, #532]	; (8006b98 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_TIM_ConfigClockSource+0x2da>
 8006988:	f241 415d 	movw	r1, #5213	; 0x145d
 800698c:	4883      	ldr	r0, [pc, #524]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 800698e:	f7fa fe8b 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d013      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x30a>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x30a>
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ac:	d009      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x30a>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b6:	d004      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0x30a>
 80069b8:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 80069bc:	4877      	ldr	r0, [pc, #476]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 80069be:	f7fa fe73 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ca:	d014      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x33e>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x33e>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00c      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x33e>
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	d008      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x33e>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b0a      	cmp	r3, #10
 80069ea:	d004      	beq.n	80069f6 <HAL_TIM_ConfigClockSource+0x33e>
 80069ec:	f241 4161 	movw	r1, #5217	; 0x1461
 80069f0:	486a      	ldr	r0, [pc, #424]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 80069f2:	f7fa fe59 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	68db      	ldr	r3, [r3, #12]
 80069fa:	2b0f      	cmp	r3, #15
 80069fc:	d904      	bls.n	8006a08 <HAL_TIM_ConfigClockSource+0x350>
 80069fe:	f241 4162 	movw	r1, #5218	; 0x1462
 8006a02:	4866      	ldr	r0, [pc, #408]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a04:	f7fa fe50 	bl	80016a8 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	6899      	ldr	r1, [r3, #8]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	f000 fcd3 	bl	80073c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	689a      	ldr	r2, [r3, #8]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a2a:	609a      	str	r2, [r3, #8]
      break;
 8006a2c:	e13d      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a55      	ldr	r2, [pc, #340]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a53      	ldr	r2, [pc, #332]	; (8006b8c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a4f      	ldr	r2, [pc, #316]	; (8006b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a4e      	ldr	r2, [pc, #312]	; (8006b94 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a4c      	ldr	r2, [pc, #304]	; (8006b98 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0x3bc>
 8006a6a:	f241 4171 	movw	r1, #5233	; 0x1471
 8006a6e:	484b      	ldr	r0, [pc, #300]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a70:	f7fa fe1a 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7c:	d014      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d010      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00c      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d008      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b0a      	cmp	r3, #10
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a9e:	f241 4174 	movw	r1, #5236	; 0x1474
 8006aa2:	483e      	ldr	r0, [pc, #248]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006aa4:	f7fa fe00 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b0f      	cmp	r3, #15
 8006aae:	d904      	bls.n	8006aba <HAL_TIM_ConfigClockSource+0x402>
 8006ab0:	f241 4175 	movw	r1, #5237	; 0x1475
 8006ab4:	4839      	ldr	r0, [pc, #228]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006ab6:	f7fa fdf7 	bl	80016a8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fc04 	bl	80072d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2150      	movs	r1, #80	; 0x50
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fc5b 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e0e7      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a2a      	ldr	r2, [pc, #168]	; (8006b88 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d01d      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x468>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a28      	ldr	r2, [pc, #160]	; (8006b8c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d018      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x468>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af6:	d013      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x468>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a24      	ldr	r2, [pc, #144]	; (8006b90 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d00e      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x468>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a23      	ldr	r2, [pc, #140]	; (8006b94 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d009      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x468>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d004      	beq.n	8006b20 <HAL_TIM_ConfigClockSource+0x468>
 8006b16:	f241 4181 	movw	r1, #5249	; 0x1481
 8006b1a:	4820      	ldr	r0, [pc, #128]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b1c:	f7fa fdc4 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b28:	d014      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x49c>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d010      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x49c>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00c      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x49c>
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d008      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x49c>
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	2b0a      	cmp	r3, #10
 8006b48:	d004      	beq.n	8006b54 <HAL_TIM_ConfigClockSource+0x49c>
 8006b4a:	f241 4184 	movw	r1, #5252	; 0x1484
 8006b4e:	4813      	ldr	r0, [pc, #76]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b50:	f7fa fdaa 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d904      	bls.n	8006b66 <HAL_TIM_ConfigClockSource+0x4ae>
 8006b5c:	f241 4185 	movw	r1, #5253	; 0x1485
 8006b60:	480e      	ldr	r0, [pc, #56]	; (8006b9c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b62:	f7fa fda1 	bl	80016a8 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	6859      	ldr	r1, [r3, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	68db      	ldr	r3, [r3, #12]
 8006b72:	461a      	mov	r2, r3
 8006b74:	f000 fbdc 	bl	8007330 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2160      	movs	r1, #96	; 0x60
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f000 fc05 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006b84:	e091      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
 8006b86:	bf00      	nop
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40013400 	.word	0x40013400
 8006b90:	40000400 	.word	0x40000400
 8006b94:	40000800 	.word	0x40000800
 8006b98:	40000c00 	.word	0x40000c00
 8006b9c:	0800bdb0 	.word	0x0800bdb0
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a47      	ldr	r2, [pc, #284]	; (8006cc4 <HAL_TIM_ConfigClockSource+0x60c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01d      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x52e>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a46      	ldr	r2, [pc, #280]	; (8006cc8 <HAL_TIM_ConfigClockSource+0x610>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x52e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bbc:	d013      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x52e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a42      	ldr	r2, [pc, #264]	; (8006ccc <HAL_TIM_ConfigClockSource+0x614>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x52e>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a40      	ldr	r2, [pc, #256]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x618>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x52e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a3f      	ldr	r2, [pc, #252]	; (8006cd4 <HAL_TIM_ConfigClockSource+0x61c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_TIM_ConfigClockSource+0x52e>
 8006bdc:	f241 4191 	movw	r1, #5265	; 0x1491
 8006be0:	483d      	ldr	r0, [pc, #244]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x620>)
 8006be2:	f7fa fd61 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bee:	d014      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x562>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d010      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x562>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00c      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x562>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d008      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x562>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b0a      	cmp	r3, #10
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x562>
 8006c10:	f241 4194 	movw	r1, #5268	; 0x1494
 8006c14:	4830      	ldr	r0, [pc, #192]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x620>)
 8006c16:	f7fa fd47 	bl	80016a8 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b0f      	cmp	r3, #15
 8006c20:	d904      	bls.n	8006c2c <HAL_TIM_ConfigClockSource+0x574>
 8006c22:	f241 4195 	movw	r1, #5269	; 0x1495
 8006c26:	482c      	ldr	r0, [pc, #176]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x620>)
 8006c28:	f7fa fd3e 	bl	80016a8 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	6859      	ldr	r1, [r3, #4]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f000 fb4b 	bl	80072d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2140      	movs	r1, #64	; 0x40
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fba2 	bl	800738e <TIM_ITRx_SetConfig>
      break;
 8006c4a:	e02e      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a1c      	ldr	r2, [pc, #112]	; (8006cc4 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d01d      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x5da>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a1b      	ldr	r2, [pc, #108]	; (8006cc8 <HAL_TIM_ConfigClockSource+0x610>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d018      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x5da>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c68:	d013      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x5da>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <HAL_TIM_ConfigClockSource+0x614>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d00e      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x5da>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <HAL_TIM_ConfigClockSource+0x618>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d009      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x5da>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <HAL_TIM_ConfigClockSource+0x61c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d004      	beq.n	8006c92 <HAL_TIM_ConfigClockSource+0x5da>
 8006c88:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006c8c:	4812      	ldr	r0, [pc, #72]	; (8006cd8 <HAL_TIM_ConfigClockSource+0x620>)
 8006c8e:	f7fa fd0b 	bl	80016a8 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f000 fb76 	bl	800738e <TIM_ITRx_SetConfig>
        break;
 8006ca2:	e002      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006ca8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	40012c00 	.word	0x40012c00
 8006cc8:	40013400 	.word	0x40013400
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	40000800 	.word	0x40000800
 8006cd4:	40000c00 	.word	0x40000c00
 8006cd8:	0800bdb0 	.word	0x0800bdb0

08006cdc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr

08006cee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bc80      	pop	{r7}
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bc80      	pop	{r7}
 8006d10:	4770      	bx	lr

08006d12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc80      	pop	{r7}
 8006d22:	4770      	bx	lr

08006d24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bc80      	pop	{r7}
 8006d34:	4770      	bx	lr

08006d36 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bc80      	pop	{r7}
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr

08006d5a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr

08006d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a33      	ldr	r2, [pc, #204]	; (8006e4c <TIM_Base_SetConfig+0xe0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a32      	ldr	r2, [pc, #200]	; (8006e50 <TIM_Base_SetConfig+0xe4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00f      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d92:	d00b      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a2f      	ldr	r2, [pc, #188]	; (8006e54 <TIM_Base_SetConfig+0xe8>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d007      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a2e      	ldr	r2, [pc, #184]	; (8006e58 <TIM_Base_SetConfig+0xec>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_Base_SetConfig+0x40>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a2d      	ldr	r2, [pc, #180]	; (8006e5c <TIM_Base_SetConfig+0xf0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d108      	bne.n	8006dbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a22      	ldr	r2, [pc, #136]	; (8006e4c <TIM_Base_SetConfig+0xe0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <TIM_Base_SetConfig+0x82>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a21      	ldr	r2, [pc, #132]	; (8006e50 <TIM_Base_SetConfig+0xe4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00f      	beq.n	8006dee <TIM_Base_SetConfig+0x82>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dd4:	d00b      	beq.n	8006dee <TIM_Base_SetConfig+0x82>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a1e      	ldr	r2, [pc, #120]	; (8006e54 <TIM_Base_SetConfig+0xe8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <TIM_Base_SetConfig+0x82>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <TIM_Base_SetConfig+0xec>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_Base_SetConfig+0x82>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a1c      	ldr	r2, [pc, #112]	; (8006e5c <TIM_Base_SetConfig+0xf0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d108      	bne.n	8006e00 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a09      	ldr	r2, [pc, #36]	; (8006e4c <TIM_Base_SetConfig+0xe0>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_Base_SetConfig+0xc8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a08      	ldr	r2, [pc, #32]	; (8006e50 <TIM_Base_SetConfig+0xe4>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d103      	bne.n	8006e3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	615a      	str	r2, [r3, #20]
}
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bc80      	pop	{r7}
 8006e4a:	4770      	bx	lr
 8006e4c:	40012c00 	.word	0x40012c00
 8006e50:	40013400 	.word	0x40013400
 8006e54:	40000400 	.word	0x40000400
 8006e58:	40000800 	.word	0x40000800
 8006e5c:	40000c00 	.word	0x40000c00

08006e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	f023 0201 	bic.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0303 	bic.w	r3, r3, #3
 8006e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f023 0302 	bic.w	r3, r3, #2
 8006ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a34      	ldr	r2, [pc, #208]	; (8006f88 <TIM_OC1_SetConfig+0x128>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_OC1_SetConfig+0x64>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a33      	ldr	r2, [pc, #204]	; (8006f8c <TIM_OC1_SetConfig+0x12c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d119      	bne.n	8006ef8 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <TIM_OC1_SetConfig+0x7e>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d004      	beq.n	8006ede <TIM_OC1_SetConfig+0x7e>
 8006ed4:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006ed8:	482d      	ldr	r0, [pc, #180]	; (8006f90 <TIM_OC1_SetConfig+0x130>)
 8006eda:	f7fa fbe5 	bl	80016a8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f023 0308 	bic.w	r3, r3, #8
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 0304 	bic.w	r3, r3, #4
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a23      	ldr	r2, [pc, #140]	; (8006f88 <TIM_OC1_SetConfig+0x128>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d003      	beq.n	8006f08 <TIM_OC1_SetConfig+0xa8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a22      	ldr	r2, [pc, #136]	; (8006f8c <TIM_OC1_SetConfig+0x12c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d12d      	bne.n	8006f64 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	699b      	ldr	r3, [r3, #24]
 8006f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f10:	d008      	beq.n	8006f24 <TIM_OC1_SetConfig+0xc4>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <TIM_OC1_SetConfig+0xc4>
 8006f1a:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8006f1e:	481c      	ldr	r0, [pc, #112]	; (8006f90 <TIM_OC1_SetConfig+0x130>)
 8006f20:	f7fa fbc2 	bl	80016a8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f2c:	d008      	beq.n	8006f40 <TIM_OC1_SetConfig+0xe0>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d004      	beq.n	8006f40 <TIM_OC1_SetConfig+0xe0>
 8006f36:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8006f3a:	4815      	ldr	r0, [pc, #84]	; (8006f90 <TIM_OC1_SetConfig+0x130>)
 8006f3c:	f7fa fbb4 	bl	80016a8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	693a      	ldr	r2, [r7, #16]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	621a      	str	r2, [r3, #32]
}
 8006f7e:	bf00      	nop
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40012c00 	.word	0x40012c00
 8006f8c:	40013400 	.word	0x40013400
 8006f90:	0800bdb0 	.word	0x0800bdb0

08006f94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f023 0210 	bic.w	r2, r3, #16
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	021b      	lsls	r3, r3, #8
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	f023 0320 	bic.w	r3, r3, #32
 8006fde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	011b      	lsls	r3, r3, #4
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	4a35      	ldr	r2, [pc, #212]	; (80070c4 <TIM_OC2_SetConfig+0x130>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d003      	beq.n	8006ffc <TIM_OC2_SetConfig+0x68>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4a34      	ldr	r2, [pc, #208]	; (80070c8 <TIM_OC2_SetConfig+0x134>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d11a      	bne.n	8007032 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d008      	beq.n	8007016 <TIM_OC2_SetConfig+0x82>
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d004      	beq.n	8007016 <TIM_OC2_SetConfig+0x82>
 800700c:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007010:	482e      	ldr	r0, [pc, #184]	; (80070cc <TIM_OC2_SetConfig+0x138>)
 8007012:	f7fa fb49 	bl	80016a8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800701c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	011b      	lsls	r3, r3, #4
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	4313      	orrs	r3, r2
 8007028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007030:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a23      	ldr	r2, [pc, #140]	; (80070c4 <TIM_OC2_SetConfig+0x130>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_OC2_SetConfig+0xae>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a22      	ldr	r2, [pc, #136]	; (80070c8 <TIM_OC2_SetConfig+0x134>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d12f      	bne.n	80070a2 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704a:	d008      	beq.n	800705e <TIM_OC2_SetConfig+0xca>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <TIM_OC2_SetConfig+0xca>
 8007054:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007058:	481c      	ldr	r0, [pc, #112]	; (80070cc <TIM_OC2_SetConfig+0x138>)
 800705a:	f7fa fb25 	bl	80016a8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007066:	d008      	beq.n	800707a <TIM_OC2_SetConfig+0xe6>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	695b      	ldr	r3, [r3, #20]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <TIM_OC2_SetConfig+0xe6>
 8007070:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007074:	4815      	ldr	r0, [pc, #84]	; (80070cc <TIM_OC2_SetConfig+0x138>)
 8007076:	f7fa fb17 	bl	80016a8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	621a      	str	r2, [r3, #32]
}
 80070bc:	bf00      	nop
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	40012c00 	.word	0x40012c00
 80070c8:	40013400 	.word	0x40013400
 80070cc:	0800bdb0 	.word	0x0800bdb0

080070d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	021b      	lsls	r3, r3, #8
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a35      	ldr	r2, [pc, #212]	; (8007200 <TIM_OC3_SetConfig+0x130>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_OC3_SetConfig+0x66>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a34      	ldr	r2, [pc, #208]	; (8007204 <TIM_OC3_SetConfig+0x134>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d11a      	bne.n	800716c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <TIM_OC3_SetConfig+0x80>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	2b08      	cmp	r3, #8
 8007144:	d004      	beq.n	8007150 <TIM_OC3_SetConfig+0x80>
 8007146:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800714a:	482f      	ldr	r0, [pc, #188]	; (8007208 <TIM_OC3_SetConfig+0x138>)
 800714c:	f7fa faac 	bl	80016a8 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	021b      	lsls	r3, r3, #8
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800716a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a24      	ldr	r2, [pc, #144]	; (8007200 <TIM_OC3_SetConfig+0x130>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC3_SetConfig+0xac>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a23      	ldr	r2, [pc, #140]	; (8007204 <TIM_OC3_SetConfig+0x134>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d12f      	bne.n	80071dc <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007184:	d008      	beq.n	8007198 <TIM_OC3_SetConfig+0xc8>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	699b      	ldr	r3, [r3, #24]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <TIM_OC3_SetConfig+0xc8>
 800718e:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007192:	481d      	ldr	r0, [pc, #116]	; (8007208 <TIM_OC3_SetConfig+0x138>)
 8007194:	f7fa fa88 	bl	80016a8 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a0:	d008      	beq.n	80071b4 <TIM_OC3_SetConfig+0xe4>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <TIM_OC3_SetConfig+0xe4>
 80071aa:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80071ae:	4816      	ldr	r0, [pc, #88]	; (8007208 <TIM_OC3_SetConfig+0x138>)
 80071b0:	f7fa fa7a 	bl	80016a8 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	695b      	ldr	r3, [r3, #20]
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	693a      	ldr	r2, [r7, #16]
 80071d8:	4313      	orrs	r3, r2
 80071da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	685a      	ldr	r2, [r3, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40012c00 	.word	0x40012c00
 8007204:	40013400 	.word	0x40013400
 8007208:	0800bdb0 	.word	0x0800bdb0

0800720c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800723a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <TIM_OC4_SetConfig+0xbc>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d003      	beq.n	8007274 <TIM_OC4_SetConfig+0x68>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	4a17      	ldr	r2, [pc, #92]	; (80072cc <TIM_OC4_SetConfig+0xc0>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d117      	bne.n	80072a4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800727c:	d008      	beq.n	8007290 <TIM_OC4_SetConfig+0x84>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <TIM_OC4_SetConfig+0x84>
 8007286:	f641 3123 	movw	r1, #6947	; 0x1b23
 800728a:	4811      	ldr	r0, [pc, #68]	; (80072d0 <TIM_OC4_SetConfig+0xc4>)
 800728c:	f7fa fa0c 	bl	80016a8 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007296:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	019b      	lsls	r3, r3, #6
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	697a      	ldr	r2, [r7, #20]
 80072a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	621a      	str	r2, [r3, #32]
}
 80072be:	bf00      	nop
 80072c0:	3718      	adds	r7, #24
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	0800bdb0 	.word	0x0800bdb0

080072d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f023 0201 	bic.w	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80072fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	011b      	lsls	r3, r3, #4
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	4313      	orrs	r3, r2
 8007308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f023 030a 	bic.w	r3, r3, #10
 8007310:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	693a      	ldr	r2, [r7, #16]
 800731e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	bc80      	pop	{r7}
 800732e:	4770      	bx	lr

08007330 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f023 0210 	bic.w	r2, r3, #16
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800735a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	031b      	lsls	r3, r3, #12
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800736c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	4313      	orrs	r3, r2
 8007376:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	621a      	str	r2, [r3, #32]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	bc80      	pop	{r7}
 800738c:	4770      	bx	lr

0800738e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f043 0307 	orr.w	r3, r3, #7
 80073b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	609a      	str	r2, [r3, #8]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	bc80      	pop	{r7}
 80073c0:	4770      	bx	lr

080073c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b087      	sub	sp, #28
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	607a      	str	r2, [r7, #4]
 80073ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	021a      	lsls	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	431a      	orrs	r2, r3
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	697a      	ldr	r2, [r7, #20]
 80073f4:	609a      	str	r2, [r3, #8]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bc80      	pop	{r7}
 80073fe:	4770      	bx	lr

08007400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4a26      	ldr	r2, [pc, #152]	; (80074a8 <TIM_CCxChannelCmd+0xa8>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d018      	beq.n	8007446 <TIM_CCxChannelCmd+0x46>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a25      	ldr	r2, [pc, #148]	; (80074ac <TIM_CCxChannelCmd+0xac>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d014      	beq.n	8007446 <TIM_CCxChannelCmd+0x46>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007422:	d010      	beq.n	8007446 <TIM_CCxChannelCmd+0x46>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a22      	ldr	r2, [pc, #136]	; (80074b0 <TIM_CCxChannelCmd+0xb0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00c      	beq.n	8007446 <TIM_CCxChannelCmd+0x46>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4a21      	ldr	r2, [pc, #132]	; (80074b4 <TIM_CCxChannelCmd+0xb4>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d008      	beq.n	8007446 <TIM_CCxChannelCmd+0x46>
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4a20      	ldr	r2, [pc, #128]	; (80074b8 <TIM_CCxChannelCmd+0xb8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d004      	beq.n	8007446 <TIM_CCxChannelCmd+0x46>
 800743c:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007440:	481e      	ldr	r0, [pc, #120]	; (80074bc <TIM_CCxChannelCmd+0xbc>)
 8007442:	f7fa f931 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d010      	beq.n	800746e <TIM_CCxChannelCmd+0x6e>
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00d      	beq.n	800746e <TIM_CCxChannelCmd+0x6e>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b08      	cmp	r3, #8
 8007456:	d00a      	beq.n	800746e <TIM_CCxChannelCmd+0x6e>
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2b0c      	cmp	r3, #12
 800745c:	d007      	beq.n	800746e <TIM_CCxChannelCmd+0x6e>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2b3c      	cmp	r3, #60	; 0x3c
 8007462:	d004      	beq.n	800746e <TIM_CCxChannelCmd+0x6e>
 8007464:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007468:	4814      	ldr	r0, [pc, #80]	; (80074bc <TIM_CCxChannelCmd+0xbc>)
 800746a:	f7fa f91d 	bl	80016a8 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2201      	movs	r2, #1
 8007476:	fa02 f303 	lsl.w	r3, r2, r3
 800747a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a1a      	ldr	r2, [r3, #32]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	43db      	mvns	r3, r3
 8007484:	401a      	ands	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1a      	ldr	r2, [r3, #32]
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	f003 031f 	and.w	r3, r3, #31
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	fa01 f303 	lsl.w	r3, r1, r3
 800749a:	431a      	orrs	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	621a      	str	r2, [r3, #32]
}
 80074a0:	bf00      	nop
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40012c00 	.word	0x40012c00
 80074ac:	40013400 	.word	0x40013400
 80074b0:	40000400 	.word	0x40000400
 80074b4:	40000800 	.word	0x40000800
 80074b8:	40000c00 	.word	0x40000c00
 80074bc:	0800bdb0 	.word	0x0800bdb0

080074c0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	4a1c      	ldr	r2, [pc, #112]	; (800753c <TIM_ResetCallback+0x7c>)
 80074cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <TIM_ResetCallback+0x80>)
 80074d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a1a      	ldr	r2, [pc, #104]	; (8007544 <TIM_ResetCallback+0x84>)
 80074dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a19      	ldr	r2, [pc, #100]	; (8007548 <TIM_ResetCallback+0x88>)
 80074e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a18      	ldr	r2, [pc, #96]	; (800754c <TIM_ResetCallback+0x8c>)
 80074ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a17      	ldr	r2, [pc, #92]	; (8007550 <TIM_ResetCallback+0x90>)
 80074f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a16      	ldr	r2, [pc, #88]	; (8007554 <TIM_ResetCallback+0x94>)
 80074fc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <TIM_ResetCallback+0x98>)
 8007504:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a14      	ldr	r2, [pc, #80]	; (800755c <TIM_ResetCallback+0x9c>)
 800750c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a13      	ldr	r2, [pc, #76]	; (8007560 <TIM_ResetCallback+0xa0>)
 8007514:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a12      	ldr	r2, [pc, #72]	; (8007564 <TIM_ResetCallback+0xa4>)
 800751c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a11      	ldr	r2, [pc, #68]	; (8007568 <TIM_ResetCallback+0xa8>)
 8007524:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <TIM_ResetCallback+0xac>)
 800752c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	0800163d 	.word	0x0800163d
 8007540:	08006cdd 	.word	0x08006cdd
 8007544:	08006d37 	.word	0x08006d37
 8007548:	08006d49 	.word	0x08006d49
 800754c:	080015f5 	.word	0x080015f5
 8007550:	08006d01 	.word	0x08006d01
 8007554:	08006cef 	.word	0x08006cef
 8007558:	08006d13 	.word	0x08006d13
 800755c:	08006d25 	.word	0x08006d25
 8007560:	08006d5b 	.word	0x08006d5b
 8007564:	080078a9 	.word	0x080078a9
 8007568:	080078bb 	.word	0x080078bb
 800756c:	080078cd 	.word	0x080078cd

08007570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a5c      	ldr	r2, [pc, #368]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d027      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a5a      	ldr	r2, [pc, #360]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d022      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007596:	d01d      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a56      	ldr	r2, [pc, #344]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a55      	ldr	r2, [pc, #340]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d013      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a53      	ldr	r2, [pc, #332]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a52      	ldr	r2, [pc, #328]	; (8007704 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a50      	ldr	r2, [pc, #320]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075ca:	f240 7186 	movw	r1, #1926	; 0x786
 80075ce:	484f      	ldr	r0, [pc, #316]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80075d0:	f7fa f86a 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d020      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b10      	cmp	r3, #16
 80075e2:	d01c      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b20      	cmp	r3, #32
 80075ea:	d018      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b30      	cmp	r3, #48	; 0x30
 80075f2:	d014      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2b40      	cmp	r3, #64	; 0x40
 80075fa:	d010      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b50      	cmp	r3, #80	; 0x50
 8007602:	d00c      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b60      	cmp	r3, #96	; 0x60
 800760a:	d008      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b70      	cmp	r3, #112	; 0x70
 8007612:	d004      	beq.n	800761e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007614:	f240 7187 	movw	r1, #1927	; 0x787
 8007618:	483c      	ldr	r0, [pc, #240]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800761a:	f7fa f845 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b80      	cmp	r3, #128	; 0x80
 8007624:	d008      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800762e:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007632:	4836      	ldr	r0, [pc, #216]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007634:	f7fa f838 	bl	80016a8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007642:	2302      	movs	r3, #2
 8007644:	e050      	b.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2201      	movs	r2, #1
 800764a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800766c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1a      	ldr	r2, [pc, #104]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d018      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a19      	ldr	r2, [pc, #100]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d013      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769c:	d00e      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a15      	ldr	r2, [pc, #84]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d009      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a13      	ldr	r2, [pc, #76]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d004      	beq.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a12      	ldr	r2, [pc, #72]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d10c      	bne.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	40012c00 	.word	0x40012c00
 80076f4:	40013400 	.word	0x40013400
 80076f8:	40000400 	.word	0x40000400
 80076fc:	40000800 	.word	0x40000800
 8007700:	40000c00 	.word	0x40000c00
 8007704:	40001000 	.word	0x40001000
 8007708:	40001400 	.word	0x40001400
 800770c:	0800bde8 	.word	0x0800bde8

08007710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a5e      	ldr	r2, [pc, #376]	; (800789c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d009      	beq.n	800773c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a5c      	ldr	r2, [pc, #368]	; (80078a0 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d004      	beq.n	800773c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007732:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007736:	485b      	ldr	r0, [pc, #364]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007738:	f7f9 ffb6 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007744:	d008      	beq.n	8007758 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 800774e:	f240 71c4 	movw	r1, #1988	; 0x7c4
 8007752:	4854      	ldr	r0, [pc, #336]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007754:	f7f9 ffa8 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007760:	d008      	beq.n	8007774 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d004      	beq.n	8007774 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 800776a:	f240 71c5 	movw	r1, #1989	; 0x7c5
 800776e:	484d      	ldr	r0, [pc, #308]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007770:	f7f9 ff9a 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d013      	beq.n	80077a4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007784:	d00e      	beq.n	80077a4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778e:	d009      	beq.n	80077a4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007798:	d004      	beq.n	80077a4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800779a:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800779e:	4841      	ldr	r0, [pc, #260]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077a0:	f7f9 ff82 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	2bff      	cmp	r3, #255	; 0xff
 80077aa:	d904      	bls.n	80077b6 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 80077ac:	f240 71c7 	movw	r1, #1991	; 0x7c7
 80077b0:	483c      	ldr	r0, [pc, #240]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077b2:	f7f9 ff79 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	d008      	beq.n	80077d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d004      	beq.n	80077d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80077c8:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 80077cc:	4835      	ldr	r0, [pc, #212]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077ce:	f7f9 ff6b 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d009      	beq.n	80077ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e2:	d004      	beq.n	80077ee <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80077e4:	f240 71c9 	movw	r1, #1993	; 0x7c9
 80077e8:	482e      	ldr	r0, [pc, #184]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077ea:	f7f9 ff5d 	bl	80016a8 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077f6:	d008      	beq.n	800780a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007800:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007804:	4827      	ldr	r0, [pc, #156]	; (80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007806:	f7f9 ff4f 	bl	80016a8 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007810:	2b01      	cmp	r3, #1
 8007812:	d101      	bne.n	8007818 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007814:	2302      	movs	r3, #2
 8007816:	e03d      	b.n	8007894 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	4313      	orrs	r3, r2
 800783a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4313      	orrs	r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	4313      	orrs	r3, r2
 8007872:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	4313      	orrs	r3, r2
 8007880:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3710      	adds	r7, #16
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40012c00 	.word	0x40012c00
 80078a0:	40013400 	.word	0x40013400
 80078a4:	0800bde8 	.word	0x0800bde8

080078a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bc80      	pop	{r7}
 80078b8:	4770      	bx	lr

080078ba <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	bc80      	pop	{r7}
 80078dc:	4770      	bx	lr
	...

080078e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b082      	sub	sp, #8
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e0a7      	b.n	8007a42 <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d02c      	beq.n	8007954 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a53      	ldr	r2, [pc, #332]	; (8007a4c <HAL_UART_Init+0x16c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00e      	beq.n	8007922 <HAL_UART_Init+0x42>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a51      	ldr	r2, [pc, #324]	; (8007a50 <HAL_UART_Init+0x170>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d009      	beq.n	8007922 <HAL_UART_Init+0x42>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a50      	ldr	r2, [pc, #320]	; (8007a54 <HAL_UART_Init+0x174>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d004      	beq.n	8007922 <HAL_UART_Init+0x42>
 8007918:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800791c:	484e      	ldr	r0, [pc, #312]	; (8007a58 <HAL_UART_Init+0x178>)
 800791e:	f7f9 fec3 	bl	80016a8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d032      	beq.n	8007990 <HAL_UART_Init+0xb0>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007932:	d02d      	beq.n	8007990 <HAL_UART_Init+0xb0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800793c:	d028      	beq.n	8007990 <HAL_UART_Init+0xb0>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007946:	d023      	beq.n	8007990 <HAL_UART_Init+0xb0>
 8007948:	f240 116d 	movw	r1, #365	; 0x16d
 800794c:	4842      	ldr	r0, [pc, #264]	; (8007a58 <HAL_UART_Init+0x178>)
 800794e:	f7f9 feab 	bl	80016a8 <assert_failed>
 8007952:	e01d      	b.n	8007990 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a3c      	ldr	r2, [pc, #240]	; (8007a4c <HAL_UART_Init+0x16c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_UART_Init+0xb0>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a3b      	ldr	r2, [pc, #236]	; (8007a50 <HAL_UART_Init+0x170>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_UART_Init+0xb0>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a39      	ldr	r2, [pc, #228]	; (8007a54 <HAL_UART_Init+0x174>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_UART_Init+0xb0>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a39      	ldr	r2, [pc, #228]	; (8007a5c <HAL_UART_Init+0x17c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_UART_Init+0xb0>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a37      	ldr	r2, [pc, #220]	; (8007a60 <HAL_UART_Init+0x180>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_UART_Init+0xb0>
 8007986:	f240 1171 	movw	r1, #369	; 0x171
 800798a:	4833      	ldr	r0, [pc, #204]	; (8007a58 <HAL_UART_Init+0x178>)
 800798c:	f7f9 fe8c 	bl	80016a8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_UART_Init+0xcc>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a0:	d004      	beq.n	80079ac <HAL_UART_Init+0xcc>
 80079a2:	f240 1173 	movw	r1, #371	; 0x173
 80079a6:	482c      	ldr	r0, [pc, #176]	; (8007a58 <HAL_UART_Init+0x178>)
 80079a8:	f7f9 fe7e 	bl	80016a8 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d111      	bne.n	80079dc <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fb0d 	bl	8007fe0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d102      	bne.n	80079d4 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a24      	ldr	r2, [pc, #144]	; (8007a64 <HAL_UART_Init+0x184>)
 80079d2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2224      	movs	r2, #36	; 0x24
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68da      	ldr	r2, [r3, #12]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fd01 	bl	80083fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	695a      	ldr	r2, [r3, #20]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	40013800 	.word	0x40013800
 8007a50:	40004400 	.word	0x40004400
 8007a54:	40004800 	.word	0x40004800
 8007a58:	0800be24 	.word	0x0800be24
 8007a5c:	40004c00 	.word	0x40004c00
 8007a60:	40005000 	.word	0x40005000
 8007a64:	08001b3d 	.word	0x08001b3d

08007a68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b08a      	sub	sp, #40	; 0x28
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	4613      	mov	r3, r2
 8007a76:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b20      	cmp	r3, #32
 8007a86:	d17c      	bne.n	8007b82 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d002      	beq.n	8007a94 <HAL_UART_Transmit+0x2c>
 8007a8e:	88fb      	ldrh	r3, [r7, #6]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	e075      	b.n	8007b84 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d101      	bne.n	8007aa6 <HAL_UART_Transmit+0x3e>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	e06e      	b.n	8007b84 <HAL_UART_Transmit+0x11c>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2221      	movs	r2, #33	; 0x21
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007abc:	f7fa faa4 	bl	8002008 <HAL_GetTick>
 8007ac0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	88fa      	ldrh	r2, [r7, #6]
 8007ac6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	88fa      	ldrh	r2, [r7, #6]
 8007acc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad6:	d108      	bne.n	8007aea <HAL_UART_Transmit+0x82>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d104      	bne.n	8007aea <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	61bb      	str	r3, [r7, #24]
 8007ae8:	e003      	b.n	8007af2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007afa:	e02a      	b.n	8007b52 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2200      	movs	r2, #0
 8007b04:	2180      	movs	r1, #128	; 0x80
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 faa0 	bl	800804c <UART_WaitOnFlagUntilTimeout>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e036      	b.n	8007b84 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10b      	bne.n	8007b34 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	881b      	ldrh	r3, [r3, #0]
 8007b20:	461a      	mov	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b2a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	3302      	adds	r3, #2
 8007b30:	61bb      	str	r3, [r7, #24]
 8007b32:	e007      	b.n	8007b44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	3301      	adds	r3, #1
 8007b42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1cf      	bne.n	8007afc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	2200      	movs	r2, #0
 8007b64:	2140      	movs	r1, #64	; 0x40
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 fa70 	bl	800804c <UART_WaitOnFlagUntilTimeout>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e006      	b.n	8007b84 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2220      	movs	r2, #32
 8007b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	e000      	b.n	8007b84 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b82:	2302      	movs	r3, #2
  }
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3720      	adds	r7, #32
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	4613      	mov	r3, r2
 8007b98:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	d11d      	bne.n	8007be2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d002      	beq.n	8007bb2 <HAL_UART_Receive_IT+0x26>
 8007bac:	88fb      	ldrh	r3, [r7, #6]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e016      	b.n	8007be4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d101      	bne.n	8007bc4 <HAL_UART_Receive_IT+0x38>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	e00f      	b.n	8007be4 <HAL_UART_Receive_IT+0x58>
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	68b9      	ldr	r1, [r7, #8]
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fa81 	bl	80080e0 <UART_Start_Receive_IT>
 8007bde:	4603      	mov	r3, r0
 8007be0:	e000      	b.n	8007be4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007be2:	2302      	movs	r3, #2
  }
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08a      	sub	sp, #40	; 0x28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	f003 030f 	and.w	r3, r3, #15
 8007c1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c24:	f003 0320 	and.w	r3, r3, #32
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d008      	beq.n	8007c3e <HAL_UART_IRQHandler+0x52>
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d003      	beq.n	8007c3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fb34 	bl	80082a4 <UART_Receive_IT>
      return;
 8007c3c:	e180      	b.n	8007f40 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80b4 	beq.w	8007dae <HAL_UART_IRQHandler+0x1c2>
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d105      	bne.n	8007c5c <HAL_UART_IRQHandler+0x70>
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 80a9 	beq.w	8007dae <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00a      	beq.n	8007c7c <HAL_UART_IRQHandler+0x90>
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d005      	beq.n	8007c7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c74:	f043 0201 	orr.w	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	f003 0304 	and.w	r3, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <HAL_UART_IRQHandler+0xb0>
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c94:	f043 0202 	orr.w	r2, r3, #2
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f003 0302 	and.w	r3, r3, #2
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00a      	beq.n	8007cbc <HAL_UART_IRQHandler+0xd0>
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d005      	beq.n	8007cbc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb4:	f043 0204 	orr.w	r2, r3, #4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00f      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xfa>
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	f003 0320 	and.w	r3, r3, #32
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d104      	bne.n	8007cda <HAL_UART_IRQHandler+0xee>
 8007cd0:	69fb      	ldr	r3, [r7, #28]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f043 0208 	orr.w	r2, r3, #8
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8123 	beq.w	8007f36 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <HAL_UART_IRQHandler+0x11e>
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 facd 	bl	80082a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	695b      	ldr	r3, [r3, #20]
 8007d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf14      	ite	ne
 8007d18:	2301      	movne	r3, #1
 8007d1a:	2300      	moveq	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d102      	bne.n	8007d32 <HAL_UART_IRQHandler+0x146>
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d033      	beq.n	8007d9a <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa0d 	bl	8008152 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d024      	beq.n	8007d90 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	695a      	ldr	r2, [r3, #20]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d013      	beq.n	8007d86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	4a79      	ldr	r2, [pc, #484]	; (8007f48 <HAL_UART_IRQHandler+0x35c>)
 8007d64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fb f8e6 	bl	8002f3c <HAL_DMA_Abort_IT>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d019      	beq.n	8007daa <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d84:	e011      	b.n	8007daa <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d8e:	e00c      	b.n	8007daa <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d98:	e007      	b.n	8007daa <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007da8:	e0c5      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007daa:	bf00      	nop
    return;
 8007dac:	e0c3      	b.n	8007f36 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	f040 80a3 	bne.w	8007efe <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	f003 0310 	and.w	r3, r3, #16
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 809d 	beq.w	8007efe <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	f003 0310 	and.w	r3, r3, #16
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8097 	beq.w	8007efe <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d04f      	beq.n	8007e94 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007dfe:	8a3b      	ldrh	r3, [r7, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 809a 	beq.w	8007f3a <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e0a:	8a3a      	ldrh	r2, [r7, #16]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	f080 8094 	bcs.w	8007f3a <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	8a3a      	ldrh	r2, [r7, #16]
 8007e16:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	d02b      	beq.n	8007e7a <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e30:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	695a      	ldr	r2, [r3, #20]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f022 0201 	bic.w	r2, r2, #1
 8007e40:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	695a      	ldr	r2, [r3, #20]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e50:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2220      	movs	r2, #32
 8007e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68da      	ldr	r2, [r3, #12]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f022 0210 	bic.w	r2, r2, #16
 8007e6e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7fb f827 	bl	8002ec8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007e86:	b292      	uxth	r2, r2
 8007e88:	1a8a      	subs	r2, r1, r2
 8007e8a:	b292      	uxth	r2, r2
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007e92:	e052      	b.n	8007f3a <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d048      	beq.n	8007f3e <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007eac:	8a7b      	ldrh	r3, [r7, #18]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d045      	beq.n	8007f3e <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ec0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0210 	bic.w	r2, r2, #16
 8007eee:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef4:	8a7a      	ldrh	r2, [r7, #18]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007efc:	e01f      	b.n	8007f3e <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <HAL_UART_IRQHandler+0x32e>
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d003      	beq.n	8007f1a <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f95e 	bl	80081d4 <UART_Transmit_IT>
    return;
 8007f18:	e012      	b.n	8007f40 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00d      	beq.n	8007f40 <HAL_UART_IRQHandler+0x354>
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d008      	beq.n	8007f40 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f99f 	bl	8008272 <UART_EndTransmit_IT>
    return;
 8007f34:	e004      	b.n	8007f40 <HAL_UART_IRQHandler+0x354>
    return;
 8007f36:	bf00      	nop
 8007f38:	e002      	b.n	8007f40 <HAL_UART_IRQHandler+0x354>
      return;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <HAL_UART_IRQHandler+0x354>
      return;
 8007f3e:	bf00      	nop
  }
}
 8007f40:	3728      	adds	r7, #40	; 0x28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	080081ab 	.word	0x080081ab

08007f4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bc80      	pop	{r7}
 8007f6e:	4770      	bx	lr

08007f70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bc80      	pop	{r7}
 8007f80:	4770      	bx	lr

08007f82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bc80      	pop	{r7}
 8007f92:	4770      	bx	lr

08007f94 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bc80      	pop	{r7}
 8007fa4:	4770      	bx	lr

08007fa6 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007fae:	bf00      	nop
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr

08007fe0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a0f      	ldr	r2, [pc, #60]	; (8008028 <UART_InitCallbacksToDefault+0x48>)
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a0e      	ldr	r2, [pc, #56]	; (800802c <UART_InitCallbacksToDefault+0x4c>)
 8007ff2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a0e      	ldr	r2, [pc, #56]	; (8008030 <UART_InitCallbacksToDefault+0x50>)
 8007ff8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a0d      	ldr	r2, [pc, #52]	; (8008034 <UART_InitCallbacksToDefault+0x54>)
 8007ffe:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a0d      	ldr	r2, [pc, #52]	; (8008038 <UART_InitCallbacksToDefault+0x58>)
 8008004:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a0c      	ldr	r2, [pc, #48]	; (800803c <UART_InitCallbacksToDefault+0x5c>)
 800800a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a0c      	ldr	r2, [pc, #48]	; (8008040 <UART_InitCallbacksToDefault+0x60>)
 8008010:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a0b      	ldr	r2, [pc, #44]	; (8008044 <UART_InitCallbacksToDefault+0x64>)
 8008016:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a0b      	ldr	r2, [pc, #44]	; (8008048 <UART_InitCallbacksToDefault+0x68>)
 800801c:	669a      	str	r2, [r3, #104]	; 0x68

}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr
 8008028:	08007f5f 	.word	0x08007f5f
 800802c:	08007f4d 	.word	0x08007f4d
 8008030:	08007f71 	.word	0x08007f71
 8008034:	0800165d 	.word	0x0800165d
 8008038:	08007f83 	.word	0x08007f83
 800803c:	08007f95 	.word	0x08007f95
 8008040:	08007fa7 	.word	0x08007fa7
 8008044:	08007fb9 	.word	0x08007fb9
 8008048:	08007fcb 	.word	0x08007fcb

0800804c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	4613      	mov	r3, r2
 800805a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800805c:	e02c      	b.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008064:	d028      	beq.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008066:	69bb      	ldr	r3, [r7, #24]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d007      	beq.n	800807c <UART_WaitOnFlagUntilTimeout+0x30>
 800806c:	f7f9 ffcc 	bl	8002008 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	69ba      	ldr	r2, [r7, #24]
 8008078:	429a      	cmp	r2, r3
 800807a:	d21d      	bcs.n	80080b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68da      	ldr	r2, [r3, #12]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800808a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	695a      	ldr	r2, [r3, #20]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2220      	movs	r2, #32
 80080a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2220      	movs	r2, #32
 80080a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080b4:	2303      	movs	r3, #3
 80080b6:	e00f      	b.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4013      	ands	r3, r2
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bf0c      	ite	eq
 80080c8:	2301      	moveq	r3, #1
 80080ca:	2300      	movne	r3, #0
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	79fb      	ldrb	r3, [r7, #7]
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d0c3      	beq.n	800805e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080d6:	2300      	movs	r3, #0
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	4613      	mov	r3, r2
 80080ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	88fa      	ldrh	r2, [r7, #6]
 80080f8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	88fa      	ldrh	r2, [r7, #6]
 80080fe:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2222      	movs	r2, #34	; 0x22
 800810a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008124:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 0220 	orr.w	r2, r2, #32
 8008144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	bc80      	pop	{r7}
 8008150:	4770      	bx	lr

08008152 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008152:	b480      	push	{r7}
 8008154:	b083      	sub	sp, #12
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008168:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695a      	ldr	r2, [r3, #20]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f022 0201 	bic.w	r2, r2, #1
 8008178:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817e:	2b01      	cmp	r3, #1
 8008180:	d107      	bne.n	8008192 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0210 	bic.w	r2, r2, #16
 8008190:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2220      	movs	r2, #32
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bc80      	pop	{r7}
 80081a8:	4770      	bx	lr

080081aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b084      	sub	sp, #16
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081cc:	bf00      	nop
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	2b21      	cmp	r3, #33	; 0x21
 80081e6:	d13e      	bne.n	8008266 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081f0:	d114      	bne.n	800821c <UART_Transmit_IT+0x48>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	691b      	ldr	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d110      	bne.n	800821c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	881b      	ldrh	r3, [r3, #0]
 8008204:	461a      	mov	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800820e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a1b      	ldr	r3, [r3, #32]
 8008214:	1c9a      	adds	r2, r3, #2
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	621a      	str	r2, [r3, #32]
 800821a:	e008      	b.n	800822e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	1c59      	adds	r1, r3, #1
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6211      	str	r1, [r2, #32]
 8008226:	781a      	ldrb	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29b      	uxth	r3, r3
 8008238:	687a      	ldr	r2, [r7, #4]
 800823a:	4619      	mov	r1, r3
 800823c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800823e:	2b00      	cmp	r3, #0
 8008240:	d10f      	bne.n	8008262 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68da      	ldr	r2, [r3, #12]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008250:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68da      	ldr	r2, [r3, #12]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008260:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	e000      	b.n	8008268 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008266:	2302      	movs	r3, #2
  }
}
 8008268:	4618      	mov	r0, r3
 800826a:	3714      	adds	r7, #20
 800826c:	46bd      	mov	sp, r7
 800826e:	bc80      	pop	{r7}
 8008270:	4770      	bx	lr

08008272 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008288:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2220      	movs	r2, #32
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b22      	cmp	r3, #34	; 0x22
 80082b6:	f040 809b 	bne.w	80083f0 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082c2:	d117      	bne.n	80082f4 <UART_Receive_IT+0x50>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d113      	bne.n	80082f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	b29b      	uxth	r3, r3
 80082de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e2:	b29a      	uxth	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ec:	1c9a      	adds	r2, r3, #2
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	629a      	str	r2, [r3, #40]	; 0x28
 80082f2:	e026      	b.n	8008342 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008306:	d007      	beq.n	8008318 <UART_Receive_IT+0x74>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	689b      	ldr	r3, [r3, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10a      	bne.n	8008326 <UART_Receive_IT+0x82>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	b2da      	uxtb	r2, r3
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	701a      	strb	r2, [r3, #0]
 8008324:	e008      	b.n	8008338 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008332:	b2da      	uxtb	r2, r3
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800833c:	1c5a      	adds	r2, r3, #1
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	4619      	mov	r1, r3
 8008350:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008352:	2b00      	cmp	r3, #0
 8008354:	d14a      	bne.n	80083ec <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0220 	bic.w	r2, r2, #32
 8008364:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008374:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	695a      	ldr	r2, [r3, #20]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0201 	bic.w	r2, r2, #1
 8008384:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008392:	2b01      	cmp	r3, #1
 8008394:	d124      	bne.n	80083e0 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0210 	bic.w	r2, r2, #16
 80083aa:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0310 	and.w	r3, r3, #16
 80083b6:	2b10      	cmp	r3, #16
 80083b8:	d10a      	bne.n	80083d0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80083d8:	4611      	mov	r1, r2
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
 80083de:	e003      	b.n	80083e8 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80083e8:	2300      	movs	r3, #0
 80083ea:	e002      	b.n	80083f2 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	e000      	b.n	80083f2 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80083f0:	2302      	movs	r3, #2
  }
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	4a5f      	ldr	r2, [pc, #380]	; (8008588 <UART_SetConfig+0x18c>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d904      	bls.n	8008418 <UART_SetConfig+0x1c>
 800840e:	f640 6153 	movw	r1, #3667	; 0xe53
 8008412:	485e      	ldr	r0, [pc, #376]	; (800858c <UART_SetConfig+0x190>)
 8008414:	f7f9 f948 	bl	80016a8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d009      	beq.n	8008434 <UART_SetConfig+0x38>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008428:	d004      	beq.n	8008434 <UART_SetConfig+0x38>
 800842a:	f640 6154 	movw	r1, #3668	; 0xe54
 800842e:	4857      	ldr	r0, [pc, #348]	; (800858c <UART_SetConfig+0x190>)
 8008430:	f7f9 f93a 	bl	80016a8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00e      	beq.n	800845a <UART_SetConfig+0x5e>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008444:	d009      	beq.n	800845a <UART_SetConfig+0x5e>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800844e:	d004      	beq.n	800845a <UART_SetConfig+0x5e>
 8008450:	f640 6155 	movw	r1, #3669	; 0xe55
 8008454:	484d      	ldr	r0, [pc, #308]	; (800858c <UART_SetConfig+0x190>)
 8008456:	f7f9 f927 	bl	80016a8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	695a      	ldr	r2, [r3, #20]
 800845e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008462:	4013      	ands	r3, r2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d103      	bne.n	8008470 <UART_SetConfig+0x74>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	695b      	ldr	r3, [r3, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <UART_SetConfig+0x7e>
 8008470:	f640 6156 	movw	r1, #3670	; 0xe56
 8008474:	4845      	ldr	r0, [pc, #276]	; (800858c <UART_SetConfig+0x190>)
 8008476:	f7f9 f917 	bl	80016a8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68da      	ldr	r2, [r3, #12]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	430a      	orrs	r2, r1
 800848e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689a      	ldr	r2, [r3, #8]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	431a      	orrs	r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80084ac:	f023 030c 	bic.w	r3, r3, #12
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	6812      	ldr	r2, [r2, #0]
 80084b4:	68b9      	ldr	r1, [r7, #8]
 80084b6:	430b      	orrs	r3, r1
 80084b8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	699a      	ldr	r2, [r3, #24]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2e      	ldr	r2, [pc, #184]	; (8008590 <UART_SetConfig+0x194>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d103      	bne.n	80084e2 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80084da:	f7fb feaf 	bl	800423c <HAL_RCC_GetPCLK2Freq>
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	e002      	b.n	80084e8 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80084e2:	f7fb fe97 	bl	8004214 <HAL_RCC_GetPCLK1Freq>
 80084e6:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4613      	mov	r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	4413      	add	r3, r2
 80084f0:	009a      	lsls	r2, r3, #2
 80084f2:	441a      	add	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	4a25      	ldr	r2, [pc, #148]	; (8008594 <UART_SetConfig+0x198>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	0119      	lsls	r1, r3, #4
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	4613      	mov	r3, r2
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	009a      	lsls	r2, r3, #2
 8008512:	441a      	add	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	fbb2 f2f3 	udiv	r2, r2, r3
 800851e:	4b1d      	ldr	r3, [pc, #116]	; (8008594 <UART_SetConfig+0x198>)
 8008520:	fba3 0302 	umull	r0, r3, r3, r2
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	2064      	movs	r0, #100	; 0x64
 8008528:	fb00 f303 	mul.w	r3, r0, r3
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	011b      	lsls	r3, r3, #4
 8008530:	3332      	adds	r3, #50	; 0x32
 8008532:	4a18      	ldr	r2, [pc, #96]	; (8008594 <UART_SetConfig+0x198>)
 8008534:	fba2 2303 	umull	r2, r3, r2, r3
 8008538:	095b      	lsrs	r3, r3, #5
 800853a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800853e:	4419      	add	r1, r3
 8008540:	68fa      	ldr	r2, [r7, #12]
 8008542:	4613      	mov	r3, r2
 8008544:	009b      	lsls	r3, r3, #2
 8008546:	4413      	add	r3, r2
 8008548:	009a      	lsls	r2, r3, #2
 800854a:	441a      	add	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	fbb2 f2f3 	udiv	r2, r2, r3
 8008556:	4b0f      	ldr	r3, [pc, #60]	; (8008594 <UART_SetConfig+0x198>)
 8008558:	fba3 0302 	umull	r0, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	2064      	movs	r0, #100	; 0x64
 8008560:	fb00 f303 	mul.w	r3, r0, r3
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	011b      	lsls	r3, r3, #4
 8008568:	3332      	adds	r3, #50	; 0x32
 800856a:	4a0a      	ldr	r2, [pc, #40]	; (8008594 <UART_SetConfig+0x198>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	f003 020f 	and.w	r2, r3, #15
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	440a      	add	r2, r1
 800857c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	0044aa20 	.word	0x0044aa20
 800858c:	0800be24 	.word	0x0800be24
 8008590:	40013800 	.word	0x40013800
 8008594:	51eb851f 	.word	0x51eb851f

08008598 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 80085a2:	491e      	ldr	r1, [pc, #120]	; (800861c <BAT_init+0x84>)
 80085a4:	2001      	movs	r0, #1
 80085a6:	f001 faff 	bl	8009ba8 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 80085aa:	4a1d      	ldr	r2, [pc, #116]	; (8008620 <BAT_init+0x88>)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 80085b0:	4a1c      	ldr	r2, [pc, #112]	; (8008624 <BAT_init+0x8c>)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80085b6:	4b1b      	ldr	r3, [pc, #108]	; (8008624 <BAT_init+0x8c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f107 010c 	add.w	r1, r7, #12
 80085be:	2201      	movs	r2, #1
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fc fa39 	bl	8004a38 <HAL_RTC_GetTime>
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d005      	beq.n	80085dc <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	461a      	mov	r2, r3
 80085d4:	4914      	ldr	r1, [pc, #80]	; (8008628 <BAT_init+0x90>)
 80085d6:	2003      	movs	r0, #3
 80085d8:	f001 fae6 	bl	8009ba8 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80085dc:	4b11      	ldr	r3, [pc, #68]	; (8008624 <BAT_init+0x8c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f107 0108 	add.w	r1, r7, #8
 80085e4:	2201      	movs	r2, #1
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fc fc2a 	bl	8004e40 <HAL_RTC_GetDate>
 80085ec:	4603      	mov	r3, r0
 80085ee:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 80085f0:	7bfb      	ldrb	r3, [r7, #15]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d005      	beq.n	8008602 <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	461a      	mov	r2, r3
 80085fa:	490c      	ldr	r1, [pc, #48]	; (800862c <BAT_init+0x94>)
 80085fc:	2003      	movs	r0, #3
 80085fe:	f001 fad3 	bl	8009ba8 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 8008602:	4b0b      	ldr	r3, [pc, #44]	; (8008630 <BAT_init+0x98>)
 8008604:	f107 020c 	add.w	r2, r7, #12
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	4611      	mov	r1, r2
 800860c:	8019      	strh	r1, [r3, #0]
 800860e:	3302      	adds	r3, #2
 8008610:	0c12      	lsrs	r2, r2, #16
 8008612:	701a      	strb	r2, [r3, #0]

  return;
 8008614:	bf00      	nop
}
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	0800be60 	.word	0x0800be60
 8008620:	200000a8 	.word	0x200000a8
 8008624:	200000ac 	.word	0x200000ac
 8008628:	0800be7c 	.word	0x0800be7c
 800862c:	0800beac 	.word	0x0800beac
 8008630:	200000b0 	.word	0x200000b0

08008634 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008634:	b590      	push	{r4, r7, lr}
 8008636:	b089      	sub	sp, #36	; 0x24
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800863c:	4b48      	ldr	r3, [pc, #288]	; (8008760 <BAT_update+0x12c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f107 0110 	add.w	r1, r7, #16
 8008644:	2201      	movs	r2, #1
 8008646:	4618      	mov	r0, r3
 8008648:	f7fc f9f6 	bl	8004a38 <HAL_RTC_GetTime>
 800864c:	4603      	mov	r3, r0
 800864e:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 8008650:	7ffb      	ldrb	r3, [r7, #31]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 8008656:	7ffb      	ldrb	r3, [r7, #31]
 8008658:	461a      	mov	r2, r3
 800865a:	4942      	ldr	r1, [pc, #264]	; (8008764 <BAT_update+0x130>)
 800865c:	2003      	movs	r0, #3
 800865e:	f001 faa3 	bl	8009ba8 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8008662:	4b3f      	ldr	r3, [pc, #252]	; (8008760 <BAT_update+0x12c>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f107 010c 	add.w	r1, r7, #12
 800866a:	2201      	movs	r2, #1
 800866c:	4618      	mov	r0, r3
 800866e:	f7fc fbe7 	bl	8004e40 <HAL_RTC_GetDate>
 8008672:	4603      	mov	r3, r0
 8008674:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 8008676:	7ffb      	ldrb	r3, [r7, #31]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 800867c:	7ffb      	ldrb	r3, [r7, #31]
 800867e:	461a      	mov	r2, r3
 8008680:	4939      	ldr	r1, [pc, #228]	; (8008768 <BAT_update+0x134>)
 8008682:	2003      	movs	r0, #3
 8008684:	f001 fa90 	bl	8009ba8 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 8008688:	f107 0310 	add.w	r3, r7, #16
 800868c:	4618      	mov	r0, r3
 800868e:	f001 fe94 	bl	800a3ba <UTI_turnRtcTimeToSeconds>
 8008692:	4604      	mov	r4, r0
 8008694:	4835      	ldr	r0, [pc, #212]	; (800876c <BAT_update+0x138>)
 8008696:	f001 fe90 	bl	800a3ba <UTI_turnRtcTimeToSeconds>
 800869a:	4603      	mov	r3, r0
 800869c:	1ae3      	subs	r3, r4, r3
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d959      	bls.n	8008756 <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 80086a2:	4b32      	ldr	r3, [pc, #200]	; (800876c <BAT_update+0x138>)
 80086a4:	f107 0210 	add.w	r2, r7, #16
 80086a8:	6812      	ldr	r2, [r2, #0]
 80086aa:	4611      	mov	r1, r2
 80086ac:	8019      	strh	r1, [r3, #0]
 80086ae:	3302      	adds	r3, #2
 80086b0:	0c12      	lsrs	r2, r2, #16
 80086b2:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 80086b4:	4b2e      	ldr	r3, [pc, #184]	; (8008770 <BAT_update+0x13c>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7f9 fe51 	bl	8002360 <HAL_ADC_Start>
 80086be:	4603      	mov	r3, r0
 80086c0:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80086c2:	7ffb      	ldrb	r3, [r7, #31]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d005      	beq.n	80086d4 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 80086c8:	7ffb      	ldrb	r3, [r7, #31]
 80086ca:	461a      	mov	r2, r3
 80086cc:	4929      	ldr	r1, [pc, #164]	; (8008774 <BAT_update+0x140>)
 80086ce:	2003      	movs	r0, #3
 80086d0:	f001 fa6a 	bl	8009ba8 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 80086d4:	4b26      	ldr	r3, [pc, #152]	; (8008770 <BAT_update+0x13c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f04f 31ff 	mov.w	r1, #4294967295
 80086dc:	4618      	mov	r0, r3
 80086de:	f7f9 ff05 	bl	80024ec <HAL_ADC_PollForConversion>
 80086e2:	4603      	mov	r3, r0
 80086e4:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 80086e6:	7ffb      	ldrb	r3, [r7, #31]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 80086ec:	7ffb      	ldrb	r3, [r7, #31]
 80086ee:	461a      	mov	r2, r3
 80086f0:	4921      	ldr	r1, [pc, #132]	; (8008778 <BAT_update+0x144>)
 80086f2:	2003      	movs	r0, #3
 80086f4:	f001 fa58 	bl	8009ba8 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <BAT_update+0x13c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fa f817 	bl	8002730 <HAL_ADC_GetValue>
 8008702:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008704:	69b8      	ldr	r0, [r7, #24]
 8008706:	f7f7 fe43 	bl	8000390 <__aeabi_ui2f>
 800870a:	4603      	mov	r3, r0
 800870c:	491b      	ldr	r1, [pc, #108]	; (800877c <BAT_update+0x148>)
 800870e:	4618      	mov	r0, r3
 8008710:	f7f7 fe96 	bl	8000440 <__aeabi_fmul>
 8008714:	4603      	mov	r3, r0
 8008716:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800871a:	4618      	mov	r0, r3
 800871c:	f7f7 ff44 	bl	80005a8 <__aeabi_fdiv>
 8008720:	4603      	mov	r3, r0
 8008722:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008724:	4916      	ldr	r1, [pc, #88]	; (8008780 <BAT_update+0x14c>)
 8008726:	6978      	ldr	r0, [r7, #20]
 8008728:	f7f7 fe8a 	bl	8000440 <__aeabi_fmul>
 800872c:	4603      	mov	r3, r0
 800872e:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008730:	4914      	ldr	r1, [pc, #80]	; (8008784 <BAT_update+0x150>)
 8008732:	6978      	ldr	r0, [r7, #20]
 8008734:	f7f7 fe84 	bl	8000440 <__aeabi_fmul>
 8008738:	4603      	mov	r3, r0
 800873a:	4618      	mov	r0, r3
 800873c:	f7f7 fff6 	bl	800072c <__aeabi_f2uiz>
 8008740:	4602      	mov	r2, r0
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	490e      	ldr	r1, [pc, #56]	; (8008788 <BAT_update+0x154>)
 800874e:	2000      	movs	r0, #0
 8008750:	f001 fa2a 	bl	8009ba8 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008754:	bf00      	nop
 8008756:	bf00      	nop
}
 8008758:	3724      	adds	r7, #36	; 0x24
 800875a:	46bd      	mov	sp, r7
 800875c:	bd90      	pop	{r4, r7, pc}
 800875e:	bf00      	nop
 8008760:	200000ac 	.word	0x200000ac
 8008764:	0800be7c 	.word	0x0800be7c
 8008768:	0800beac 	.word	0x0800beac
 800876c:	200000b0 	.word	0x200000b0
 8008770:	200000a8 	.word	0x200000a8
 8008774:	0800bedc 	.word	0x0800bedc
 8008778:	0800bf08 	.word	0x0800bf08
 800877c:	40533333 	.word	0x40533333
 8008780:	41300000 	.word	0x41300000
 8008784:	447a0000 	.word	0x447a0000
 8008788:	0800bf40 	.word	0x0800bf40

0800878c <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	4603      	mov	r3, r0
 8008794:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008796:	2301      	movs	r3, #1
 8008798:	81fb      	strh	r3, [r7, #14]
 800879a:	e030      	b.n	80087fe <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 800879c:	89fb      	ldrh	r3, [r7, #14]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	4013      	ands	r3, r2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d006      	beq.n	80087b8 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80087aa:	4b1a      	ldr	r3, [pc, #104]	; (8008814 <BLU_sendCommand+0x88>)
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	4a19      	ldr	r2, [pc, #100]	; (8008814 <BLU_sendCommand+0x88>)
 80087b0:	f043 0302 	orr.w	r3, r3, #2
 80087b4:	60d3      	str	r3, [r2, #12]
 80087b6:	e005      	b.n	80087c4 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80087b8:	4b16      	ldr	r3, [pc, #88]	; (8008814 <BLU_sendCommand+0x88>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a15      	ldr	r2, [pc, #84]	; (8008814 <BLU_sendCommand+0x88>)
 80087be:	f023 0302 	bic.w	r3, r3, #2
 80087c2:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80087c4:	4b14      	ldr	r3, [pc, #80]	; (8008818 <BLU_sendCommand+0x8c>)
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	4a13      	ldr	r2, [pc, #76]	; (8008818 <BLU_sendCommand+0x8c>)
 80087ca:	f043 0310 	orr.w	r3, r3, #16
 80087ce:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80087d0:	2005      	movs	r0, #5
 80087d2:	f001 fdb1 	bl	800a338 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80087d6:	4b10      	ldr	r3, [pc, #64]	; (8008818 <BLU_sendCommand+0x8c>)
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	4a0f      	ldr	r2, [pc, #60]	; (8008818 <BLU_sendCommand+0x8c>)
 80087dc:	f023 0310 	bic.w	r3, r3, #16
 80087e0:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80087e2:	2005      	movs	r0, #5
 80087e4:	f001 fda8 	bl	800a338 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80087e8:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <BLU_sendCommand+0x8c>)
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	4a0a      	ldr	r2, [pc, #40]	; (8008818 <BLU_sendCommand+0x8c>)
 80087ee:	f043 0310 	orr.w	r3, r3, #16
 80087f2:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80087f4:	89fb      	ldrh	r3, [r7, #14]
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	81fb      	strh	r3, [r7, #14]
 80087fe:	89fb      	ldrh	r3, [r7, #14]
 8008800:	b29b      	uxth	r3, r3
 8008802:	2bff      	cmp	r3, #255	; 0xff
 8008804:	d9ca      	bls.n	800879c <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008806:	2010      	movs	r0, #16
 8008808:	f001 fd96 	bl	800a338 <UTI_delayUs>

  return;
 800880c:	bf00      	nop
}
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	40011000 	.word	0x40011000
 8008818:	40010800 	.word	0x40010800

0800881c <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	e00b      	b.n	8008842 <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	b2db      	uxtb	r3, r3
 800882e:	461a      	mov	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4413      	add	r3, r2
 8008834:	2200      	movs	r2, #0
 8008836:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	b2db      	uxtb	r3, r3
 800883c:	3301      	adds	r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	73fb      	strb	r3, [r7, #15]
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b06      	cmp	r3, #6
 8008848:	d9ef      	bls.n	800882a <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 800884a:	4b2e      	ldr	r3, [pc, #184]	; (8008904 <BLU_readData+0xe8>)
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	4a2d      	ldr	r2, [pc, #180]	; (8008904 <BLU_readData+0xe8>)
 8008850:	f023 0308 	bic.w	r3, r3, #8
 8008854:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008856:	2001      	movs	r0, #1
 8008858:	f7ff ff98 	bl	800878c <BLU_sendCommand>
  BLU_sendCommand(0x42);
 800885c:	2042      	movs	r0, #66	; 0x42
 800885e:	f7ff ff95 	bl	800878c <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008862:	2300      	movs	r3, #0
 8008864:	73fb      	strb	r3, [r7, #15]
 8008866:	e03f      	b.n	80088e8 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008868:	2301      	movs	r3, #1
 800886a:	81bb      	strh	r3, [r7, #12]
 800886c:	e030      	b.n	80088d0 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800886e:	4b26      	ldr	r3, [pc, #152]	; (8008908 <BLU_readData+0xec>)
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	4a25      	ldr	r2, [pc, #148]	; (8008908 <BLU_readData+0xec>)
 8008874:	f043 0310 	orr.w	r3, r3, #16
 8008878:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800887a:	2005      	movs	r0, #5
 800887c:	f001 fd5c 	bl	800a338 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008880:	4b21      	ldr	r3, [pc, #132]	; (8008908 <BLU_readData+0xec>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	4a20      	ldr	r2, [pc, #128]	; (8008908 <BLU_readData+0xec>)
 8008886:	f023 0310 	bic.w	r3, r3, #16
 800888a:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800888c:	2005      	movs	r0, #5
 800888e:	f001 fd53 	bl	800a338 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008892:	4b1d      	ldr	r3, [pc, #116]	; (8008908 <BLU_readData+0xec>)
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	4a1c      	ldr	r2, [pc, #112]	; (8008908 <BLU_readData+0xec>)
 8008898:	f043 0310 	orr.w	r3, r3, #16
 800889c:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800889e:	4b19      	ldr	r3, [pc, #100]	; (8008904 <BLU_readData+0xe8>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	f003 0304 	and.w	r3, r3, #4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 80088aa:	89bb      	ldrh	r3, [r7, #12]
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	b2d8      	uxtb	r0, r3
 80088b2:	4601      	mov	r1, r0
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	440b      	add	r3, r1
 80088b8:	7819      	ldrb	r1, [r3, #0]
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4403      	add	r3, r0
 80088c0:	430a      	orrs	r2, r1
 80088c2:	b2d2      	uxtb	r2, r2
 80088c4:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80088c6:	89bb      	ldrh	r3, [r7, #12]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	81bb      	strh	r3, [r7, #12]
 80088d0:	89bb      	ldrh	r3, [r7, #12]
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2bff      	cmp	r3, #255	; 0xff
 80088d6:	d9ca      	bls.n	800886e <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 80088d8:	2010      	movs	r0, #16
 80088da:	f001 fd2d 	bl	800a338 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	3301      	adds	r3, #1
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b06      	cmp	r3, #6
 80088ee:	d9bb      	bls.n	8008868 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80088f0:	4b04      	ldr	r3, [pc, #16]	; (8008904 <BLU_readData+0xe8>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	4a03      	ldr	r2, [pc, #12]	; (8008904 <BLU_readData+0xe8>)
 80088f6:	f043 0308 	orr.w	r3, r3, #8
 80088fa:	60d3      	str	r3, [r2, #12]

  return;
 80088fc:	bf00      	nop
}
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	40011000 	.word	0x40011000
 8008908:	40010800 	.word	0x40010800

0800890c <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	3302      	adds	r3, #2
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	b21a      	sxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3301      	adds	r3, #1
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	b21b      	sxth	r3, r3
 8008926:	4313      	orrs	r3, r2
 8008928:	b21b      	sxth	r3, r3
 800892a:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 800892c:	2301      	movs	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
 8008930:	e00d      	b.n	800894e <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008932:	89ba      	ldrh	r2, [r7, #12]
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	3b01      	subs	r3, #1
 8008938:	fa42 f303 	asr.w	r3, r2, r3
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <BLU_getButton+0x3c>
    {
      return l_index;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	e006      	b.n	8008956 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	3301      	adds	r3, #1
 800894c:	73fb      	strb	r3, [r7, #15]
 800894e:	7bfb      	ldrb	r3, [r7, #15]
 8008950:	2b10      	cmp	r3, #16
 8008952:	d9ee      	bls.n	8008932 <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	bc80      	pop	{r7}
 800895e:	4770      	bx	lr

08008960 <BLU_init>:

void BLU_init(void)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8008964:	4904      	ldr	r1, [pc, #16]	; (8008978 <BLU_init+0x18>)
 8008966:	2001      	movs	r0, #1
 8008968:	f001 f91e 	bl	8009ba8 <LOG_log>

  BLU_initData(&g_BLU_lastData);
 800896c:	4803      	ldr	r0, [pc, #12]	; (800897c <BLU_init+0x1c>)
 800896e:	f000 f807 	bl	8008980 <BLU_initData>

  return;
 8008972:	bf00      	nop
}
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	0800bf58 	.word	0x0800bf58
 800897c:	200000b4 	.word	0x200000b4

08008980 <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2280      	movs	r2, #128	; 0x80
 800898c:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2280      	movs	r2, #128	; 0x80
 8008992:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2280      	movs	r2, #128	; 0x80
 8008998:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2280      	movs	r2, #128	; 0x80
 800899e:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	741a      	strb	r2, [r3, #16]

  return;
 80089a6:	bf00      	nop
}
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr

080089b0 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b08c      	sub	sp, #48	; 0x30
 80089b4:	af02      	add	r7, sp, #8
 80089b6:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 80089b8:	f107 0320 	add.w	r3, r7, #32
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff ff2d 	bl	800881c <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 80089c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80089c6:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 80089c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80089cc:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 80089ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80089d2:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 80089d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089d8:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 80089da:	f107 0320 	add.w	r3, r7, #32
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ff94 	bl	800890c <BLU_getButton>
 80089e4:	4603      	mov	r3, r0
 80089e6:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2bff      	cmp	r3, #255	; 0xff
 80089ec:	d108      	bne.n	8008a00 <BLU_receiveData+0x50>
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2bff      	cmp	r3, #255	; 0xff
 80089f2:	d105      	bne.n	8008a00 <BLU_receiveData+0x50>
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	2bff      	cmp	r3, #255	; 0xff
 80089f8:	d102      	bne.n	8008a00 <BLU_receiveData+0x50>
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2bff      	cmp	r3, #255	; 0xff
 80089fe:	d00b      	beq.n	8008a18 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d10e      	bne.n	8008a24 <BLU_receiveData+0x74>
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10b      	bne.n	8008a24 <BLU_receiveData+0x74>
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d108      	bne.n	8008a24 <BLU_receiveData+0x74>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d105      	bne.n	8008a24 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8008a18:	f107 030c 	add.w	r3, r7, #12
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff ffaf 	bl	8008980 <BLU_initData>
 8008a22:	e053      	b.n	8008acc <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8008a24:	68fa      	ldr	r2, [r7, #12]
 8008a26:	4b33      	ldr	r3, [pc, #204]	; (8008af4 <BLU_receiveData+0x144>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d14e      	bne.n	8008acc <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4b30      	ldr	r3, [pc, #192]	; (8008af4 <BLU_receiveData+0x144>)
 8008a32:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d149      	bne.n	8008acc <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	4b2e      	ldr	r3, [pc, #184]	; (8008af4 <BLU_receiveData+0x144>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d144      	bne.n	8008acc <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	4b2b      	ldr	r3, [pc, #172]	; (8008af4 <BLU_receiveData+0x144>)
 8008a46:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d13f      	bne.n	8008acc <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 8008a4c:	7f3a      	ldrb	r2, [r7, #28]
 8008a4e:	4b29      	ldr	r3, [pc, #164]	; (8008af4 <BLU_receiveData+0x144>)
 8008a50:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d13a      	bne.n	8008acc <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008a56:	68f8      	ldr	r0, [r7, #12]
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9301      	str	r3, [sp, #4]
 8008a5c:	2328      	movs	r3, #40	; 0x28
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008a64:	22ff      	movs	r2, #255	; 0xff
 8008a66:	2100      	movs	r1, #0
 8008a68:	f001 fceb 	bl	800a442 <UTI_normalizeIntValue>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008a72:	6938      	ldr	r0, [r7, #16]
 8008a74:	2301      	movs	r3, #1
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	2328      	movs	r3, #40	; 0x28
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008a80:	22ff      	movs	r2, #255	; 0xff
 8008a82:	2100      	movs	r1, #0
 8008a84:	f001 fcdd 	bl	800a442 <UTI_normalizeIntValue>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008a8e:	6978      	ldr	r0, [r7, #20]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	2328      	movs	r3, #40	; 0x28
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008a9c:	22ff      	movs	r2, #255	; 0xff
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	f001 fccf 	bl	800a442 <UTI_normalizeIntValue>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008aaa:	69b8      	ldr	r0, [r7, #24]
 8008aac:	2301      	movs	r3, #1
 8008aae:	9301      	str	r3, [sp, #4]
 8008ab0:	2328      	movs	r3, #40	; 0x28
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008ab8:	22ff      	movs	r2, #255	; 0xff
 8008aba:	2100      	movs	r1, #0
 8008abc:	f001 fcc1 	bl	800a442 <UTI_normalizeIntValue>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8008ac6:	7f3a      	ldrb	r2, [r7, #28]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4a09      	ldr	r2, [pc, #36]	; (8008af4 <BLU_receiveData+0x144>)
 8008ad0:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	4a07      	ldr	r2, [pc, #28]	; (8008af4 <BLU_receiveData+0x144>)
 8008ad6:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <BLU_receiveData+0x144>)
 8008adc:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	4a04      	ldr	r2, [pc, #16]	; (8008af4 <BLU_receiveData+0x144>)
 8008ae2:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 8008ae4:	7f3a      	ldrb	r2, [r7, #28]
 8008ae6:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <BLU_receiveData+0x144>)
 8008ae8:	741a      	strb	r2, [r3, #16]

  return;
 8008aea:	bf00      	nop
}
 8008aec:	3728      	adds	r7, #40	; 0x28
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	200000b4 	.word	0x200000b4

08008af8 <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b082      	sub	sp, #8
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008b00:	490d      	ldr	r1, [pc, #52]	; (8008b38 <CON_init+0x40>)
 8008b02:	2001      	movs	r0, #1
 8008b04:	f001 f850 	bl	8009ba8 <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 8008b08:	4a0c      	ldr	r2, [pc, #48]	; (8008b3c <CON_init+0x44>)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 8008b0e:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <CON_init+0x48>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8008b14:	4b0b      	ldr	r3, [pc, #44]	; (8008b44 <CON_init+0x4c>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]

  SFO_dataInit(&g_CON_data);
 8008b1a:	480b      	ldr	r0, [pc, #44]	; (8008b48 <CON_init+0x50>)
 8008b1c:	f001 faea 	bl	800a0f4 <SFO_dataInit>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008b20:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <CON_init+0x44>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2201      	movs	r2, #1
 8008b26:	4909      	ldr	r1, [pc, #36]	; (8008b4c <CON_init+0x54>)
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff f82f 	bl	8007b8c <HAL_UART_Receive_IT>

  return;
 8008b2e:	bf00      	nop
}
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	0800bf78 	.word	0x0800bf78
 8008b3c:	200000c8 	.word	0x200000c8
 8008b40:	200000e0 	.word	0x200000e0
 8008b44:	200000e4 	.word	0x200000e4
 8008b48:	200000d0 	.word	0x200000d0
 8008b4c:	200000cc 	.word	0x200000cc

08008b50 <CON_receiveData>:

void CON_receiveData(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 8008b54:	4b0f      	ldr	r3, [pc, #60]	; (8008b94 <CON_receiveData+0x44>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d112      	bne.n	8008b82 <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8008b5c:	4b0e      	ldr	r3, [pc, #56]	; (8008b98 <CON_receiveData+0x48>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	2b0d      	cmp	r3, #13
 8008b62:	d103      	bne.n	8008b6c <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 8008b64:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <CON_receiveData+0x44>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	701a      	strb	r2, [r3, #0]
 8008b6a:	e00a      	b.n	8008b82 <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8008b6c:	4b0b      	ldr	r3, [pc, #44]	; (8008b9c <CON_receiveData+0x4c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a09      	ldr	r2, [pc, #36]	; (8008b98 <CON_receiveData+0x48>)
 8008b72:	7811      	ldrb	r1, [r2, #0]
 8008b74:	4a0a      	ldr	r2, [pc, #40]	; (8008ba0 <CON_receiveData+0x50>)
 8008b76:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 8008b78:	4b08      	ldr	r3, [pc, #32]	; (8008b9c <CON_receiveData+0x4c>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	4a07      	ldr	r2, [pc, #28]	; (8008b9c <CON_receiveData+0x4c>)
 8008b80:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008b82:	4b08      	ldr	r3, [pc, #32]	; (8008ba4 <CON_receiveData+0x54>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2201      	movs	r2, #1
 8008b88:	4903      	ldr	r1, [pc, #12]	; (8008b98 <CON_receiveData+0x48>)
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fffe 	bl	8007b8c <HAL_UART_Receive_IT>

  return;
 8008b90:	bf00      	nop
}
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	200000e4 	.word	0x200000e4
 8008b98:	200000cc 	.word	0x200000cc
 8008b9c:	200000e0 	.word	0x200000e0
 8008ba0:	200000d0 	.word	0x200000d0
 8008ba4:	200000c8 	.word	0x200000c8

08008ba8 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8008bb0:	4b0c      	ldr	r3, [pc, #48]	; (8008be4 <CON_updateFifo+0x3c>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f083 0301 	eor.w	r3, r3, #1
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10d      	bne.n	8008bda <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8008bbe:	490a      	ldr	r1, [pc, #40]	; (8008be8 <CON_updateFifo+0x40>)
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 fabd 	bl	800a140 <SFO_push>
    SFO_dataInit(&g_CON_data);
 8008bc6:	4808      	ldr	r0, [pc, #32]	; (8008be8 <CON_updateFifo+0x40>)
 8008bc8:	f001 fa94 	bl	800a0f4 <SFO_dataInit>

    g_CON_dataSize       = 0;
 8008bcc:	4b07      	ldr	r3, [pc, #28]	; (8008bec <CON_updateFifo+0x44>)
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8008bd2:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <CON_updateFifo+0x3c>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	701a      	strb	r2, [r3, #0]
  }

  return;
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
}
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	200000e4 	.word	0x200000e4
 8008be8:	200000d0 	.word	0x200000d0
 8008bec:	200000e0 	.word	0x200000e0

08008bf0 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b088      	sub	sp, #32
 8008bf4:	af04      	add	r7, sp, #16
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008bfe:	494f      	ldr	r1, [pc, #316]	; (8008d3c <DRV_init+0x14c>)
 8008c00:	2001      	movs	r0, #1
 8008c02:	f000 ffd1 	bl	8009ba8 <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008c06:	2300      	movs	r3, #0
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	2364      	movs	r3, #100	; 0x64
 8008c0c:	9302      	str	r3, [sp, #8]
 8008c0e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c12:	9301      	str	r3, [sp, #4]
 8008c14:	2300      	movs	r3, #0
 8008c16:	9300      	str	r3, [sp, #0]
 8008c18:	2301      	movs	r3, #1
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	4848      	ldr	r0, [pc, #288]	; (8008d40 <DRV_init+0x150>)
 8008c20:	f001 f978 	bl	8009f14 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008c24:	2300      	movs	r3, #0
 8008c26:	9303      	str	r3, [sp, #12]
 8008c28:	2364      	movs	r3, #100	; 0x64
 8008c2a:	9302      	str	r3, [sp, #8]
 8008c2c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	2300      	movs	r3, #0
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	2301      	movs	r3, #1
 8008c38:	2201      	movs	r2, #1
 8008c3a:	2101      	movs	r1, #1
 8008c3c:	4841      	ldr	r0, [pc, #260]	; (8008d44 <DRV_init+0x154>)
 8008c3e:	f001 f969 	bl	8009f14 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008c42:	2300      	movs	r3, #0
 8008c44:	9303      	str	r3, [sp, #12]
 8008c46:	2364      	movs	r3, #100	; 0x64
 8008c48:	9302      	str	r3, [sp, #8]
 8008c4a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c4e:	9301      	str	r3, [sp, #4]
 8008c50:	2300      	movs	r3, #0
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	2301      	movs	r3, #1
 8008c56:	2201      	movs	r2, #1
 8008c58:	2101      	movs	r1, #1
 8008c5a:	483b      	ldr	r0, [pc, #236]	; (8008d48 <DRV_init+0x158>)
 8008c5c:	f001 f95a 	bl	8009f14 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008c60:	2300      	movs	r3, #0
 8008c62:	9303      	str	r3, [sp, #12]
 8008c64:	2364      	movs	r3, #100	; 0x64
 8008c66:	9302      	str	r3, [sp, #8]
 8008c68:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	2300      	movs	r3, #0
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	2301      	movs	r3, #1
 8008c74:	2201      	movs	r2, #1
 8008c76:	2101      	movs	r1, #1
 8008c78:	4834      	ldr	r0, [pc, #208]	; (8008d4c <DRV_init+0x15c>)
 8008c7a:	f001 f94b 	bl	8009f14 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8008c7e:	2304      	movs	r3, #4
 8008c80:	9303      	str	r3, [sp, #12]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	9302      	str	r3, [sp, #8]
 8008c86:	2320      	movs	r3, #32
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <DRV_init+0x160>)
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	2310      	movs	r3, #16
 8008c90:	4a2f      	ldr	r2, [pc, #188]	; (8008d50 <DRV_init+0x160>)
 8008c92:	4930      	ldr	r1, [pc, #192]	; (8008d54 <DRV_init+0x164>)
 8008c94:	4830      	ldr	r0, [pc, #192]	; (8008d58 <DRV_init+0x168>)
 8008c96:	f001 f863 	bl	8009d60 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9303      	str	r3, [sp, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	9302      	str	r3, [sp, #8]
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	4b2d      	ldr	r3, [pc, #180]	; (8008d5c <DRV_init+0x16c>)
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	2301      	movs	r3, #1
 8008cac:	4a2b      	ldr	r2, [pc, #172]	; (8008d5c <DRV_init+0x16c>)
 8008cae:	492c      	ldr	r1, [pc, #176]	; (8008d60 <DRV_init+0x170>)
 8008cb0:	482c      	ldr	r0, [pc, #176]	; (8008d64 <DRV_init+0x174>)
 8008cb2:	f001 f855 	bl	8009d60 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	9303      	str	r3, [sp, #12]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	9302      	str	r3, [sp, #8]
 8008cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <DRV_init+0x160>)
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2304      	movs	r3, #4
 8008cca:	4a27      	ldr	r2, [pc, #156]	; (8008d68 <DRV_init+0x178>)
 8008ccc:	4927      	ldr	r1, [pc, #156]	; (8008d6c <DRV_init+0x17c>)
 8008cce:	4828      	ldr	r0, [pc, #160]	; (8008d70 <DRV_init+0x180>)
 8008cd0:	f001 f846 	bl	8009d60 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	9303      	str	r3, [sp, #12]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	9302      	str	r3, [sp, #8]
 8008cdc:	2310      	movs	r3, #16
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	4b1e      	ldr	r3, [pc, #120]	; (8008d5c <DRV_init+0x16c>)
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <DRV_init+0x16c>)
 8008ce8:	4922      	ldr	r1, [pc, #136]	; (8008d74 <DRV_init+0x184>)
 8008cea:	4823      	ldr	r0, [pc, #140]	; (8008d78 <DRV_init+0x188>)
 8008cec:	f001 f838 	bl	8009d60 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	4917      	ldr	r1, [pc, #92]	; (8008d54 <DRV_init+0x164>)
 8008cf6:	4821      	ldr	r0, [pc, #132]	; (8008d7c <DRV_init+0x18c>)
 8008cf8:	f000 fde0 	bl	80098bc <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	4917      	ldr	r1, [pc, #92]	; (8008d60 <DRV_init+0x170>)
 8008d02:	481f      	ldr	r0, [pc, #124]	; (8008d80 <DRV_init+0x190>)
 8008d04:	f000 fdda 	bl	80098bc <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4917      	ldr	r1, [pc, #92]	; (8008d6c <DRV_init+0x17c>)
 8008d0e:	481d      	ldr	r0, [pc, #116]	; (8008d84 <DRV_init+0x194>)
 8008d10:	f000 fdd4 	bl	80098bc <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	4916      	ldr	r1, [pc, #88]	; (8008d74 <DRV_init+0x184>)
 8008d1a:	481b      	ldr	r0, [pc, #108]	; (8008d88 <DRV_init+0x198>)
 8008d1c:	f000 fdce 	bl	80098bc <ENC_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 8008d20:	4b1a      	ldr	r3, [pc, #104]	; (8008d8c <DRV_init+0x19c>)
 8008d22:	2201      	movs	r2, #1
 8008d24:	701a      	strb	r2, [r3, #0]

  /* Assume that drive is not ON by default */
  g_DRV_isDriveOn = false;
 8008d26:	4b1a      	ldr	r3, [pc, #104]	; (8008d90 <DRV_init+0x1a0>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008d2c:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <DRV_init+0x1a4>)
 8008d2e:	2202      	movs	r2, #2
 8008d30:	701a      	strb	r2, [r3, #0]

  return;
 8008d32:	bf00      	nop
}
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	0800bf90 	.word	0x0800bf90
 8008d40:	200000e8 	.word	0x200000e8
 8008d44:	20000118 	.word	0x20000118
 8008d48:	20000148 	.word	0x20000148
 8008d4c:	20000178 	.word	0x20000178
 8008d50:	40011000 	.word	0x40011000
 8008d54:	0800bfac 	.word	0x0800bfac
 8008d58:	200001a8 	.word	0x200001a8
 8008d5c:	40010c00 	.word	0x40010c00
 8008d60:	0800bfb8 	.word	0x0800bfb8
 8008d64:	200001cc 	.word	0x200001cc
 8008d68:	40011400 	.word	0x40011400
 8008d6c:	0800bfc4 	.word	0x0800bfc4
 8008d70:	200001f0 	.word	0x200001f0
 8008d74:	0800bfd0 	.word	0x0800bfd0
 8008d78:	20000214 	.word	0x20000214
 8008d7c:	20000238 	.word	0x20000238
 8008d80:	20000244 	.word	0x20000244
 8008d84:	20000250 	.word	0x20000250
 8008d88:	2000025c 	.word	0x2000025c
 8008d8c:	200000e5 	.word	0x200000e5
 8008d90:	200000e6 	.word	0x200000e6
 8008d94:	200000e7 	.word	0x200000e7

08008d98 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008da8:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <DRV_updateEncoder+0x78>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d106      	bne.n	8008dc0 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008db6:	4619      	mov	r1, r3
 8008db8:	4815      	ldr	r0, [pc, #84]	; (8008e10 <DRV_updateEncoder+0x78>)
 8008dba:	f000 fdab 	bl	8009914 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008dbe:	e023      	b.n	8008e08 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008dc0:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <DRV_updateEncoder+0x7c>)
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d106      	bne.n	8008dd8 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008dca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	4810      	ldr	r0, [pc, #64]	; (8008e14 <DRV_updateEncoder+0x7c>)
 8008dd2:	f000 fd9f 	bl	8009914 <ENC_update>
  return;
 8008dd6:	e017      	b.n	8008e08 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008dd8:	4b0f      	ldr	r3, [pc, #60]	; (8008e18 <DRV_updateEncoder+0x80>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d106      	bne.n	8008df0 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008de6:	4619      	mov	r1, r3
 8008de8:	480b      	ldr	r0, [pc, #44]	; (8008e18 <DRV_updateEncoder+0x80>)
 8008dea:	f000 fd93 	bl	8009914 <ENC_update>
  return;
 8008dee:	e00b      	b.n	8008e08 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008df0:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <DRV_updateEncoder+0x84>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d106      	bne.n	8008e08 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4806      	ldr	r0, [pc, #24]	; (8008e1c <DRV_updateEncoder+0x84>)
 8008e02:	f000 fd87 	bl	8009914 <ENC_update>
  return;
 8008e06:	bf00      	nop
 8008e08:	bf00      	nop
}
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000250 	.word	0x20000250
 8008e14:	2000025c 	.word	0x2000025c
 8008e18:	20000238 	.word	0x20000238
 8008e1c:	20000244 	.word	0x20000244

08008e20 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	7c1b      	ldrb	r3, [r3, #16]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	2b0f      	cmp	r3, #15
 8008e30:	d861      	bhi.n	8008ef6 <DRV_updateFromBluetooth+0xd6>
 8008e32:	a201      	add	r2, pc, #4	; (adr r2, 8008e38 <DRV_updateFromBluetooth+0x18>)
 8008e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e38:	08008ec1 	.word	0x08008ec1
 8008e3c:	08008ef7 	.word	0x08008ef7
 8008e40:	08008ef7 	.word	0x08008ef7
 8008e44:	08008ed9 	.word	0x08008ed9
 8008e48:	08008ef7 	.word	0x08008ef7
 8008e4c:	08008ef7 	.word	0x08008ef7
 8008e50:	08008ef7 	.word	0x08008ef7
 8008e54:	08008ef7 	.word	0x08008ef7
 8008e58:	08008ef7 	.word	0x08008ef7
 8008e5c:	08008ef7 	.word	0x08008ef7
 8008e60:	08008ef7 	.word	0x08008ef7
 8008e64:	08008ef7 	.word	0x08008ef7
 8008e68:	08008ef7 	.word	0x08008ef7
 8008e6c:	08008ea9 	.word	0x08008ea9
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e79 	.word	0x08008e79
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008e78:	4b82      	ldr	r3, [pc, #520]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d03c      	beq.n	8008efa <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008e80:	4981      	ldr	r1, [pc, #516]	; (8009088 <DRV_updateFromBluetooth+0x268>)
 8008e82:	2001      	movs	r0, #1
 8008e84:	f000 fe90 	bl	8009ba8 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008e88:	4b7e      	ldr	r3, [pc, #504]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008e8e:	e034      	b.n	8008efa <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008e90:	4b7c      	ldr	r3, [pc, #496]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d032      	beq.n	8008efe <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008e98:	497c      	ldr	r1, [pc, #496]	; (800908c <DRV_updateFromBluetooth+0x26c>)
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	f000 fe84 	bl	8009ba8 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008ea0:	4b78      	ldr	r3, [pc, #480]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ea6:	e02a      	b.n	8008efe <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008ea8:	4b76      	ldr	r3, [pc, #472]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b02      	cmp	r3, #2
 8008eae:	d028      	beq.n	8008f02 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8008eb0:	4977      	ldr	r1, [pc, #476]	; (8009090 <DRV_updateFromBluetooth+0x270>)
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	f000 fe78 	bl	8009ba8 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008eb8:	4b72      	ldr	r3, [pc, #456]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008eba:	2202      	movs	r2, #2
 8008ebc:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ebe:	e020      	b.n	8008f02 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008ec0:	4b74      	ldr	r3, [pc, #464]	; (8009094 <DRV_updateFromBluetooth+0x274>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d01e      	beq.n	8008f06 <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008ec8:	4973      	ldr	r1, [pc, #460]	; (8009098 <DRV_updateFromBluetooth+0x278>)
 8008eca:	2001      	movs	r0, #1
 8008ecc:	f000 fe6c 	bl	8009ba8 <LOG_log>
        g_DRV_areMotorsOn = false;
 8008ed0:	4b70      	ldr	r3, [pc, #448]	; (8009094 <DRV_updateFromBluetooth+0x274>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ed6:	e016      	b.n	8008f06 <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008ed8:	4b6e      	ldr	r3, [pc, #440]	; (8009094 <DRV_updateFromBluetooth+0x274>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	f083 0301 	eor.w	r3, r3, #1
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008ee6:	496d      	ldr	r1, [pc, #436]	; (800909c <DRV_updateFromBluetooth+0x27c>)
 8008ee8:	2001      	movs	r0, #1
 8008eea:	f000 fe5d 	bl	8009ba8 <LOG_log>
        g_DRV_areMotorsOn = true;
 8008eee:	4b69      	ldr	r3, [pc, #420]	; (8009094 <DRV_updateFromBluetooth+0x274>)
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ef4:	e009      	b.n	8008f0a <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 8008ef6:	bf00      	nop
 8008ef8:	e008      	b.n	8008f0c <DRV_updateFromBluetooth+0xec>
      break;
 8008efa:	bf00      	nop
 8008efc:	e006      	b.n	8008f0c <DRV_updateFromBluetooth+0xec>
      break;
 8008efe:	bf00      	nop
 8008f00:	e004      	b.n	8008f0c <DRV_updateFromBluetooth+0xec>
      break;
 8008f02:	bf00      	nop
 8008f04:	e002      	b.n	8008f0c <DRV_updateFromBluetooth+0xec>
      break;
 8008f06:	bf00      	nop
 8008f08:	e000      	b.n	8008f0c <DRV_updateFromBluetooth+0xec>
      break;
 8008f0a:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8008f0c:	4b5d      	ldr	r3, [pc, #372]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	f000 80b3 	beq.w	800907c <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2b0a      	cmp	r3, #10
 8008f1c:	dd0c      	ble.n	8008f38 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8008f1e:	4b59      	ldr	r3, [pc, #356]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d002      	beq.n	8008f2c <DRV_updateFromBluetooth+0x10c>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	e000      	b.n	8008f2e <DRV_updateFromBluetooth+0x10e>
 8008f2c:	2314      	movs	r3, #20
 8008f2e:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 fa13 	bl	800935c <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8008f36:	e0a1      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b0a      	cmp	r3, #10
 8008f3e:	dd0c      	ble.n	8008f5a <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8008f40:	4b50      	ldr	r3, [pc, #320]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d002      	beq.n	8008f4e <DRV_updateFromBluetooth+0x12e>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	e000      	b.n	8008f50 <DRV_updateFromBluetooth+0x130>
 8008f4e:	2314      	movs	r3, #20
 8008f50:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fa02 	bl	800935c <DRV_moveForward>
  return;
 8008f58:	e090      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f113 0f0a 	cmn.w	r3, #10
 8008f62:	da0d      	bge.n	8008f80 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8008f64:	4b47      	ldr	r3, [pc, #284]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d003      	beq.n	8008f74 <DRV_updateFromBluetooth+0x154>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	425b      	negs	r3, r3
 8008f72:	e000      	b.n	8008f76 <DRV_updateFromBluetooth+0x156>
 8008f74:	2314      	movs	r3, #20
 8008f76:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fa37 	bl	80093ec <DRV_moveBackward>
  return;
 8008f7e:	e07d      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f113 0f0a 	cmn.w	r3, #10
 8008f88:	da0d      	bge.n	8008fa6 <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8008f8a:	4b3e      	ldr	r3, [pc, #248]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <DRV_updateFromBluetooth+0x17a>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	425b      	negs	r3, r3
 8008f98:	e000      	b.n	8008f9c <DRV_updateFromBluetooth+0x17c>
 8008f9a:	2314      	movs	r3, #20
 8008f9c:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fa24 	bl	80093ec <DRV_moveBackward>
  return;
 8008fa4:	e06a      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f113 0f0a 	cmn.w	r3, #10
 8008fae:	da0d      	bge.n	8008fcc <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8008fb0:	4b34      	ldr	r3, [pc, #208]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d003      	beq.n	8008fc0 <DRV_updateFromBluetooth+0x1a0>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	425b      	negs	r3, r3
 8008fbe:	e000      	b.n	8008fc2 <DRV_updateFromBluetooth+0x1a2>
 8008fc0:	2314      	movs	r3, #20
 8008fc2:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fb59 	bl	800967c <DRV_turnLeft>
  return;
 8008fca:	e057      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b0a      	cmp	r3, #10
 8008fd2:	dd0c      	ble.n	8008fee <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8008fd4:	4b2b      	ldr	r3, [pc, #172]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <DRV_updateFromBluetooth+0x1c2>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	e000      	b.n	8008fe4 <DRV_updateFromBluetooth+0x1c4>
 8008fe2:	2314      	movs	r3, #20
 8008fe4:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 fb90 	bl	800970c <DRV_turnRight>
  return;
 8008fec:	e046      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f113 0f0a 	cmn.w	r3, #10
 8008ff6:	da0d      	bge.n	8009014 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8008ff8:	4b22      	ldr	r3, [pc, #136]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <DRV_updateFromBluetooth+0x1e8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	425b      	negs	r3, r3
 8009006:	e000      	b.n	800900a <DRV_updateFromBluetooth+0x1ea>
 8009008:	2314      	movs	r3, #20
 800900a:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fbc5 	bl	800979c <DRV_translateLeft>
  return;
 8009012:	e033      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	2b0a      	cmp	r3, #10
 800901a:	dd0c      	ble.n	8009036 <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 800901c:	4b19      	ldr	r3, [pc, #100]	; (8009084 <DRV_updateFromBluetooth+0x264>)
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <DRV_updateFromBluetooth+0x20a>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	e000      	b.n	800902c <DRV_updateFromBluetooth+0x20c>
 800902a:	2314      	movs	r3, #20
 800902c:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 fbfc 	bl	800982c <DRV_translateRight>
  return;
 8009034:	e022      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	7c1b      	ldrb	r3, [r3, #16]
 800903a:	2b0b      	cmp	r3, #11
 800903c:	d103      	bne.n	8009046 <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 800903e:	2028      	movs	r0, #40	; 0x28
 8009040:	f000 fa5c 	bl	80094fc <DRV_moveForwardLeft>
  return;
 8009044:	e01a      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7c1b      	ldrb	r3, [r3, #16]
 800904a:	2b09      	cmp	r3, #9
 800904c:	d103      	bne.n	8009056 <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 800904e:	2028      	movs	r0, #40	; 0x28
 8009050:	f000 fa94 	bl	800957c <DRV_moveBackwardRight>
  return;
 8009054:	e012      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	7c1b      	ldrb	r3, [r3, #16]
 800905a:	2b0c      	cmp	r3, #12
 800905c:	d103      	bne.n	8009066 <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 800905e:	2028      	movs	r0, #40	; 0x28
 8009060:	f000 fa0c 	bl	800947c <DRV_moveForwardRight>
  return;
 8009064:	e00a      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7c1b      	ldrb	r3, [r3, #16]
 800906a:	2b0a      	cmp	r3, #10
 800906c:	d103      	bne.n	8009076 <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 800906e:	2028      	movs	r0, #40	; 0x28
 8009070:	f000 fac4 	bl	80095fc <DRV_moveBackwardLeft>
  return;
 8009074:	e002      	b.n	800907c <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 8009076:	f000 f945 	bl	8009304 <DRV_sleep>
  return;
 800907a:	bf00      	nop
 800907c:	bf00      	nop
}
 800907e:	3710      	adds	r7, #16
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200000e7 	.word	0x200000e7
 8009088:	0800bfdc 	.word	0x0800bfdc
 800908c:	0800c008 	.word	0x0800c008
 8009090:	0800c038 	.word	0x0800c038
 8009094:	200000e5 	.word	0x200000e5
 8009098:	0800c068 	.word	0x0800c068
 800909c:	0800c080 	.word	0x0800c080

080090a0 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b092      	sub	sp, #72	; 0x48
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	460b      	mov	r3, r1
 80090aa:	807b      	strh	r3, [r7, #2]
  int32_t    l_pidSpeedRearLeft;
  T_SFO_data l_command;
  int32_t    l_speed;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 80090ac:	4b80      	ldr	r3, [pc, #512]	; (80092b0 <DRV_updateFromMaster+0x210>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	f040 80f8 	bne.w	80092a6 <DRV_updateFromMaster+0x206>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f001 f8c0 	bl	800a23c <SFO_getCount>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80ac 	beq.w	800921c <DRV_updateFromMaster+0x17c>
    {
      SFO_logInfo(p_commandsFifo);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f001 f8c5 	bl	800a254 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 80090ca:	f107 030c 	add.w	r3, r7, #12
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f873 	bl	800a1bc <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 80090d6:	f107 030c 	add.w	r3, r7, #12
 80090da:	461a      	mov	r2, r3
 80090dc:	4975      	ldr	r1, [pc, #468]	; (80092b4 <DRV_updateFromMaster+0x214>)
 80090de:	2001      	movs	r0, #1
 80090e0:	f000 fd62 	bl	8009ba8 <LOG_log>

      l_speed = atoi(&l_command[2]);
 80090e4:	f107 030c 	add.w	r3, r7, #12
 80090e8:	3302      	adds	r3, #2
 80090ea:	4618      	mov	r0, r3
 80090ec:	f001 f9f8 	bl	800a4e0 <atoi>
 80090f0:	63f8      	str	r0, [r7, #60]	; 0x3c

      /* Check that speed is in allowed range */
      if ((l_speed < STP_CONSOLE_MIN_SPEED) || (l_speed > STP_CONSOLE_MAX_SPEED))
 80090f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	db02      	blt.n	80090fe <DRV_updateFromMaster+0x5e>
 80090f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090fa:	2b64      	cmp	r3, #100	; 0x64
 80090fc:	dd05      	ble.n	800910a <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 80090fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009100:	496d      	ldr	r1, [pc, #436]	; (80092b8 <DRV_updateFromMaster+0x218>)
 8009102:	2003      	movs	r0, #3
 8009104:	f000 fd50 	bl	8009ba8 <LOG_log>
 8009108:	e088      	b.n	800921c <DRV_updateFromMaster+0x17c>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 800910a:	2300      	movs	r3, #0
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	2328      	movs	r3, #40	; 0x28
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	2264      	movs	r2, #100	; 0x64
 8009116:	2100      	movs	r1, #0
 8009118:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800911a:	f001 f992 	bl	800a442 <UTI_normalizeIntValue>
 800911e:	63f8      	str	r0, [r7, #60]	; 0x3c
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Forward Straight */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009120:	7b3b      	ldrb	r3, [r7, #12]
 8009122:	2b53      	cmp	r3, #83	; 0x53
 8009124:	d105      	bne.n	8009132 <DRV_updateFromMaster+0x92>
 8009126:	7b7b      	ldrb	r3, [r7, #13]
 8009128:	2b54      	cmp	r3, #84	; 0x54
 800912a:	d102      	bne.n	8009132 <DRV_updateFromMaster+0x92>
        {
          DRV_sleep();
 800912c:	f000 f8ea 	bl	8009304 <DRV_sleep>
 8009130:	e074      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009132:	7b3b      	ldrb	r3, [r7, #12]
 8009134:	2b46      	cmp	r3, #70	; 0x46
 8009136:	d107      	bne.n	8009148 <DRV_updateFromMaster+0xa8>
 8009138:	7b7b      	ldrb	r3, [r7, #13]
 800913a:	2b53      	cmp	r3, #83	; 0x53
 800913c:	d104      	bne.n	8009148 <DRV_updateFromMaster+0xa8>
        {
          DRV_moveForward(l_speed);
 800913e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f90b 	bl	800935c <DRV_moveForward>
 8009146:	e069      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 8009148:	7b3b      	ldrb	r3, [r7, #12]
 800914a:	2b42      	cmp	r3, #66	; 0x42
 800914c:	d107      	bne.n	800915e <DRV_updateFromMaster+0xbe>
 800914e:	7b7b      	ldrb	r3, [r7, #13]
 8009150:	2b53      	cmp	r3, #83	; 0x53
 8009152:	d104      	bne.n	800915e <DRV_updateFromMaster+0xbe>
        {
          DRV_moveBackward(l_speed);
 8009154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009156:	4618      	mov	r0, r3
 8009158:	f000 f948 	bl	80093ec <DRV_moveBackward>
 800915c:	e05e      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 800915e:	7b3b      	ldrb	r3, [r7, #12]
 8009160:	2b52      	cmp	r3, #82	; 0x52
 8009162:	d107      	bne.n	8009174 <DRV_updateFromMaster+0xd4>
 8009164:	7b7b      	ldrb	r3, [r7, #13]
 8009166:	2b4c      	cmp	r3, #76	; 0x4c
 8009168:	d104      	bne.n	8009174 <DRV_updateFromMaster+0xd4>
        {
          DRV_turnLeft(l_speed);
 800916a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800916c:	4618      	mov	r0, r3
 800916e:	f000 fa85 	bl	800967c <DRV_turnLeft>
 8009172:	e053      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009174:	7b3b      	ldrb	r3, [r7, #12]
 8009176:	2b52      	cmp	r3, #82	; 0x52
 8009178:	d107      	bne.n	800918a <DRV_updateFromMaster+0xea>
 800917a:	7b7b      	ldrb	r3, [r7, #13]
 800917c:	2b52      	cmp	r3, #82	; 0x52
 800917e:	d104      	bne.n	800918a <DRV_updateFromMaster+0xea>
        {
          DRV_turnRight(l_speed);
 8009180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fac2 	bl	800970c <DRV_turnRight>
 8009188:	e048      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 800918a:	7b3b      	ldrb	r3, [r7, #12]
 800918c:	2b54      	cmp	r3, #84	; 0x54
 800918e:	d107      	bne.n	80091a0 <DRV_updateFromMaster+0x100>
 8009190:	7b7b      	ldrb	r3, [r7, #13]
 8009192:	2b4c      	cmp	r3, #76	; 0x4c
 8009194:	d104      	bne.n	80091a0 <DRV_updateFromMaster+0x100>
        {
          DRV_translateLeft(l_speed);
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	4618      	mov	r0, r3
 800919a:	f000 faff 	bl	800979c <DRV_translateLeft>
 800919e:	e03d      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 80091a0:	7b3b      	ldrb	r3, [r7, #12]
 80091a2:	2b54      	cmp	r3, #84	; 0x54
 80091a4:	d107      	bne.n	80091b6 <DRV_updateFromMaster+0x116>
 80091a6:	7b7b      	ldrb	r3, [r7, #13]
 80091a8:	2b52      	cmp	r3, #82	; 0x52
 80091aa:	d104      	bne.n	80091b6 <DRV_updateFromMaster+0x116>
        {
          DRV_translateRight(l_speed);
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fb3c 	bl	800982c <DRV_translateRight>
 80091b4:	e032      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 80091b6:	7b3b      	ldrb	r3, [r7, #12]
 80091b8:	2b46      	cmp	r3, #70	; 0x46
 80091ba:	d107      	bne.n	80091cc <DRV_updateFromMaster+0x12c>
 80091bc:	7b7b      	ldrb	r3, [r7, #13]
 80091be:	2b4c      	cmp	r3, #76	; 0x4c
 80091c0:	d104      	bne.n	80091cc <DRV_updateFromMaster+0x12c>
        {
          DRV_moveForwardLeft(l_speed);
 80091c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c4:	4618      	mov	r0, r3
 80091c6:	f000 f999 	bl	80094fc <DRV_moveForwardLeft>
 80091ca:	e027      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 80091cc:	7b3b      	ldrb	r3, [r7, #12]
 80091ce:	2b46      	cmp	r3, #70	; 0x46
 80091d0:	d107      	bne.n	80091e2 <DRV_updateFromMaster+0x142>
 80091d2:	7b7b      	ldrb	r3, [r7, #13]
 80091d4:	2b52      	cmp	r3, #82	; 0x52
 80091d6:	d104      	bne.n	80091e2 <DRV_updateFromMaster+0x142>
        {
          DRV_moveForwardRight(l_speed);
 80091d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 f94e 	bl	800947c <DRV_moveForwardRight>
 80091e0:	e01c      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 80091e2:	7b3b      	ldrb	r3, [r7, #12]
 80091e4:	2b42      	cmp	r3, #66	; 0x42
 80091e6:	d107      	bne.n	80091f8 <DRV_updateFromMaster+0x158>
 80091e8:	7b7b      	ldrb	r3, [r7, #13]
 80091ea:	2b4c      	cmp	r3, #76	; 0x4c
 80091ec:	d104      	bne.n	80091f8 <DRV_updateFromMaster+0x158>
        {
          DRV_moveBackwardLeft(l_speed);
 80091ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091f0:	4618      	mov	r0, r3
 80091f2:	f000 fa03 	bl	80095fc <DRV_moveBackwardLeft>
 80091f6:	e011      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 80091f8:	7b3b      	ldrb	r3, [r7, #12]
 80091fa:	2b42      	cmp	r3, #66	; 0x42
 80091fc:	d107      	bne.n	800920e <DRV_updateFromMaster+0x16e>
 80091fe:	7b7b      	ldrb	r3, [r7, #13]
 8009200:	2b52      	cmp	r3, #82	; 0x52
 8009202:	d104      	bne.n	800920e <DRV_updateFromMaster+0x16e>
        {
          DRV_moveBackwardRight(l_speed);
 8009204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f9b8 	bl	800957c <DRV_moveBackwardRight>
 800920c:	e006      	b.n	800921c <DRV_updateFromMaster+0x17c>
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 800920e:	f107 030c 	add.w	r3, r7, #12
 8009212:	461a      	mov	r2, r3
 8009214:	4929      	ldr	r1, [pc, #164]	; (80092bc <DRV_updateFromMaster+0x21c>)
 8009216:	2003      	movs	r0, #3
 8009218:	f000 fcc6 	bl	8009ba8 <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 800921c:	4828      	ldr	r0, [pc, #160]	; (80092c0 <DRV_updateFromMaster+0x220>)
 800921e:	f000 fb95 	bl	800994c <ENC_getCount>
 8009222:	4603      	mov	r3, r0
 8009224:	63bb      	str	r3, [r7, #56]	; 0x38
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 8009226:	4827      	ldr	r0, [pc, #156]	; (80092c4 <DRV_updateFromMaster+0x224>)
 8009228:	f000 fb90 	bl	800994c <ENC_getCount>
 800922c:	4603      	mov	r3, r0
 800922e:	637b      	str	r3, [r7, #52]	; 0x34
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 8009230:	4825      	ldr	r0, [pc, #148]	; (80092c8 <DRV_updateFromMaster+0x228>)
 8009232:	f000 fb8b 	bl	800994c <ENC_getCount>
 8009236:	4603      	mov	r3, r0
 8009238:	633b      	str	r3, [r7, #48]	; 0x30
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 800923a:	4824      	ldr	r0, [pc, #144]	; (80092cc <DRV_updateFromMaster+0x22c>)
 800923c:	f000 fb86 	bl	800994c <ENC_getCount>
 8009240:	4603      	mov	r3, r0
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 8009244:	887b      	ldrh	r3, [r7, #2]
 8009246:	461a      	mov	r2, r3
 8009248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800924a:	4821      	ldr	r0, [pc, #132]	; (80092d0 <DRV_updateFromMaster+0x230>)
 800924c:	f000 feb6 	bl	8009fbc <PID_update>
 8009250:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 8009252:	887b      	ldrh	r3, [r7, #2]
 8009254:	461a      	mov	r2, r3
 8009256:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009258:	481e      	ldr	r0, [pc, #120]	; (80092d4 <DRV_updateFromMaster+0x234>)
 800925a:	f000 feaf 	bl	8009fbc <PID_update>
 800925e:	6278      	str	r0, [r7, #36]	; 0x24
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 8009260:	887b      	ldrh	r3, [r7, #2]
 8009262:	461a      	mov	r2, r3
 8009264:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009266:	481c      	ldr	r0, [pc, #112]	; (80092d8 <DRV_updateFromMaster+0x238>)
 8009268:	f000 fea8 	bl	8009fbc <PID_update>
 800926c:	6238      	str	r0, [r7, #32]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 800926e:	887b      	ldrh	r3, [r7, #2]
 8009270:	461a      	mov	r2, r3
 8009272:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009274:	4819      	ldr	r0, [pc, #100]	; (80092dc <DRV_updateFromMaster+0x23c>)
 8009276:	f000 fea1 	bl	8009fbc <PID_update>
 800927a:	61f8      	str	r0, [r7, #28]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 800927c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927e:	4619      	mov	r1, r3
 8009280:	4817      	ldr	r0, [pc, #92]	; (80092e0 <DRV_updateFromMaster+0x240>)
 8009282:	f000 fe09 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8009286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009288:	4619      	mov	r1, r3
 800928a:	4816      	ldr	r0, [pc, #88]	; (80092e4 <DRV_updateFromMaster+0x244>)
 800928c:	f000 fe04 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8009290:	6a3b      	ldr	r3, [r7, #32]
 8009292:	4619      	mov	r1, r3
 8009294:	4814      	ldr	r0, [pc, #80]	; (80092e8 <DRV_updateFromMaster+0x248>)
 8009296:	f000 fdff 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	4619      	mov	r1, r3
 800929e:	4813      	ldr	r0, [pc, #76]	; (80092ec <DRV_updateFromMaster+0x24c>)
 80092a0:	f000 fdfa 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 80092a4:	bf00      	nop
 80092a6:	bf00      	nop
}
 80092a8:	3740      	adds	r7, #64	; 0x40
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	200000e7 	.word	0x200000e7
 80092b4:	0800c098 	.word	0x0800c098
 80092b8:	0800c0b0 	.word	0x0800c0b0
 80092bc:	0800c0d4 	.word	0x0800c0d4
 80092c0:	20000238 	.word	0x20000238
 80092c4:	20000244 	.word	0x20000244
 80092c8:	2000025c 	.word	0x2000025c
 80092cc:	20000250 	.word	0x20000250
 80092d0:	200000e8 	.word	0x200000e8
 80092d4:	20000118 	.word	0x20000118
 80092d8:	20000178 	.word	0x20000178
 80092dc:	20000148 	.word	0x20000148
 80092e0:	200001a8 	.word	0x200001a8
 80092e4:	200001cc 	.word	0x200001cc
 80092e8:	20000214 	.word	0x20000214
 80092ec:	200001f0 	.word	0x200001f0

080092f0 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 80092f0:	b480      	push	{r7}
 80092f2:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 80092f4:	4b02      	ldr	r3, [pc, #8]	; (8009300 <DRV_getMode+0x10>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bc80      	pop	{r7}
 80092fe:	4770      	bx	lr
 8009300:	200000e7 	.word	0x200000e7

08009304 <DRV_sleep>:

static void DRV_sleep(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
  if (g_DRV_isDriveOn == true)
 8009308:	4b0e      	ldr	r3, [pc, #56]	; (8009344 <DRV_sleep+0x40>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d017      	beq.n	8009340 <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 8009310:	490d      	ldr	r1, [pc, #52]	; (8009348 <DRV_sleep+0x44>)
 8009312:	2000      	movs	r0, #0
 8009314:	f000 fc48 	bl	8009ba8 <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 8009318:	2100      	movs	r1, #0
 800931a:	480c      	ldr	r0, [pc, #48]	; (800934c <DRV_sleep+0x48>)
 800931c:	f000 fdbc 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 8009320:	2100      	movs	r1, #0
 8009322:	480b      	ldr	r0, [pc, #44]	; (8009350 <DRV_sleep+0x4c>)
 8009324:	f000 fdb8 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 8009328:	2100      	movs	r1, #0
 800932a:	480a      	ldr	r0, [pc, #40]	; (8009354 <DRV_sleep+0x50>)
 800932c:	f000 fdb4 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 8009330:	2100      	movs	r1, #0
 8009332:	4809      	ldr	r0, [pc, #36]	; (8009358 <DRV_sleep+0x54>)
 8009334:	f000 fdb0 	bl	8009e98 <MTR_setSpeed>

    g_DRV_isDriveOn = false;
 8009338:	4b02      	ldr	r3, [pc, #8]	; (8009344 <DRV_sleep+0x40>)
 800933a:	2200      	movs	r2, #0
 800933c:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800933e:	bf00      	nop
 8009340:	bf00      	nop
}
 8009342:	bd80      	pop	{r7, pc}
 8009344:	200000e6 	.word	0x200000e6
 8009348:	0800c0f8 	.word	0x0800c0f8
 800934c:	200001a8 	.word	0x200001a8
 8009350:	200001cc 	.word	0x200001cc
 8009354:	20000214 	.word	0x20000214
 8009358:	200001f0 	.word	0x200001f0

0800935c <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	4919      	ldr	r1, [pc, #100]	; (80093d0 <DRV_moveForward+0x74>)
 800936c:	2000      	movs	r0, #0
 800936e:	f000 fc1b 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009372:	4b18      	ldr	r3, [pc, #96]	; (80093d4 <DRV_moveForward+0x78>)
 8009374:	2201      	movs	r2, #1
 8009376:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009378:	2101      	movs	r1, #1
 800937a:	4817      	ldr	r0, [pc, #92]	; (80093d8 <DRV_moveForward+0x7c>)
 800937c:	f000 fd20 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 8009380:	2101      	movs	r1, #1
 8009382:	4816      	ldr	r0, [pc, #88]	; (80093dc <DRV_moveForward+0x80>)
 8009384:	f000 fd1c 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 8009388:	2101      	movs	r1, #1
 800938a:	4815      	ldr	r0, [pc, #84]	; (80093e0 <DRV_moveForward+0x84>)
 800938c:	f000 fd18 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009390:	2101      	movs	r1, #1
 8009392:	4814      	ldr	r0, [pc, #80]	; (80093e4 <DRV_moveForward+0x88>)
 8009394:	f000 fd14 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009398:	4b13      	ldr	r3, [pc, #76]	; (80093e8 <DRV_moveForward+0x8c>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f083 0301 	eor.w	r3, r3, #1
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d110      	bne.n	80093c8 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80093a6:	68f9      	ldr	r1, [r7, #12]
 80093a8:	480b      	ldr	r0, [pc, #44]	; (80093d8 <DRV_moveForward+0x7c>)
 80093aa:	f000 fd75 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80093ae:	68f9      	ldr	r1, [r7, #12]
 80093b0:	480a      	ldr	r0, [pc, #40]	; (80093dc <DRV_moveForward+0x80>)
 80093b2:	f000 fd71 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80093b6:	68f9      	ldr	r1, [r7, #12]
 80093b8:	4809      	ldr	r0, [pc, #36]	; (80093e0 <DRV_moveForward+0x84>)
 80093ba:	f000 fd6d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	4808      	ldr	r0, [pc, #32]	; (80093e4 <DRV_moveForward+0x88>)
 80093c2:	f000 fd69 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 80093c6:	bf00      	nop
 80093c8:	bf00      	nop
}
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	0800c110 	.word	0x0800c110
 80093d4:	200000e6 	.word	0x200000e6
 80093d8:	200001a8 	.word	0x200001a8
 80093dc:	200001cc 	.word	0x200001cc
 80093e0:	20000214 	.word	0x20000214
 80093e4:	200001f0 	.word	0x200001f0
 80093e8:	200000e5 	.word	0x200000e5

080093ec <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4919      	ldr	r1, [pc, #100]	; (8009460 <DRV_moveBackward+0x74>)
 80093fc:	2000      	movs	r0, #0
 80093fe:	f000 fbd3 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <DRV_moveBackward+0x78>)
 8009404:	2201      	movs	r2, #1
 8009406:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009408:	2102      	movs	r1, #2
 800940a:	4817      	ldr	r0, [pc, #92]	; (8009468 <DRV_moveBackward+0x7c>)
 800940c:	f000 fcd8 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009410:	2102      	movs	r1, #2
 8009412:	4816      	ldr	r0, [pc, #88]	; (800946c <DRV_moveBackward+0x80>)
 8009414:	f000 fcd4 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009418:	2102      	movs	r1, #2
 800941a:	4815      	ldr	r0, [pc, #84]	; (8009470 <DRV_moveBackward+0x84>)
 800941c:	f000 fcd0 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009420:	2102      	movs	r1, #2
 8009422:	4814      	ldr	r0, [pc, #80]	; (8009474 <DRV_moveBackward+0x88>)
 8009424:	f000 fccc 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009428:	4b13      	ldr	r3, [pc, #76]	; (8009478 <DRV_moveBackward+0x8c>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	f083 0301 	eor.w	r3, r3, #1
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b00      	cmp	r3, #0
 8009434:	d110      	bne.n	8009458 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	480b      	ldr	r0, [pc, #44]	; (8009468 <DRV_moveBackward+0x7c>)
 800943a:	f000 fd2d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800943e:	68f9      	ldr	r1, [r7, #12]
 8009440:	480a      	ldr	r0, [pc, #40]	; (800946c <DRV_moveBackward+0x80>)
 8009442:	f000 fd29 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009446:	68f9      	ldr	r1, [r7, #12]
 8009448:	4809      	ldr	r0, [pc, #36]	; (8009470 <DRV_moveBackward+0x84>)
 800944a:	f000 fd25 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800944e:	68f9      	ldr	r1, [r7, #12]
 8009450:	4808      	ldr	r0, [pc, #32]	; (8009474 <DRV_moveBackward+0x88>)
 8009452:	f000 fd21 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 8009456:	bf00      	nop
 8009458:	bf00      	nop
}
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	0800c124 	.word	0x0800c124
 8009464:	200000e6 	.word	0x200000e6
 8009468:	200001a8 	.word	0x200001a8
 800946c:	200001cc 	.word	0x200001cc
 8009470:	20000214 	.word	0x20000214
 8009474:	200001f0 	.word	0x200001f0
 8009478:	200000e5 	.word	0x200000e5

0800947c <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	4915      	ldr	r1, [pc, #84]	; (80094e0 <DRV_moveForwardRight+0x64>)
 800948c:	2000      	movs	r0, #0
 800948e:	f000 fb8b 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009492:	4b14      	ldr	r3, [pc, #80]	; (80094e4 <DRV_moveForwardRight+0x68>)
 8009494:	2201      	movs	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 8009498:	2101      	movs	r1, #1
 800949a:	4813      	ldr	r0, [pc, #76]	; (80094e8 <DRV_moveForwardRight+0x6c>)
 800949c:	f000 fc90 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 80094a0:	2101      	movs	r1, #1
 80094a2:	4812      	ldr	r0, [pc, #72]	; (80094ec <DRV_moveForwardRight+0x70>)
 80094a4:	f000 fc8c 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80094a8:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <DRV_moveForwardRight+0x74>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	f083 0301 	eor.w	r3, r3, #1
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d110      	bne.n	80094d8 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80094b6:	2100      	movs	r1, #0
 80094b8:	480e      	ldr	r0, [pc, #56]	; (80094f4 <DRV_moveForwardRight+0x78>)
 80094ba:	f000 fced 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80094be:	68f9      	ldr	r1, [r7, #12]
 80094c0:	4809      	ldr	r0, [pc, #36]	; (80094e8 <DRV_moveForwardRight+0x6c>)
 80094c2:	f000 fce9 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80094c6:	68f9      	ldr	r1, [r7, #12]
 80094c8:	4808      	ldr	r0, [pc, #32]	; (80094ec <DRV_moveForwardRight+0x70>)
 80094ca:	f000 fce5 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 80094ce:	2100      	movs	r1, #0
 80094d0:	4809      	ldr	r0, [pc, #36]	; (80094f8 <DRV_moveForwardRight+0x7c>)
 80094d2:	f000 fce1 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
}
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	0800c138 	.word	0x0800c138
 80094e4:	200000e6 	.word	0x200000e6
 80094e8:	200001cc 	.word	0x200001cc
 80094ec:	20000214 	.word	0x20000214
 80094f0:	200000e5 	.word	0x200000e5
 80094f4:	200001a8 	.word	0x200001a8
 80094f8:	200001f0 	.word	0x200001f0

080094fc <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4915      	ldr	r1, [pc, #84]	; (8009560 <DRV_moveForwardLeft+0x64>)
 800950c:	2000      	movs	r0, #0
 800950e:	f000 fb4b 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009512:	4b14      	ldr	r3, [pc, #80]	; (8009564 <DRV_moveForwardLeft+0x68>)
 8009514:	2201      	movs	r2, #1
 8009516:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009518:	2101      	movs	r1, #1
 800951a:	4813      	ldr	r0, [pc, #76]	; (8009568 <DRV_moveForwardLeft+0x6c>)
 800951c:	f000 fc50 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009520:	2101      	movs	r1, #1
 8009522:	4812      	ldr	r0, [pc, #72]	; (800956c <DRV_moveForwardLeft+0x70>)
 8009524:	f000 fc4c 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009528:	4b11      	ldr	r3, [pc, #68]	; (8009570 <DRV_moveForwardLeft+0x74>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	f083 0301 	eor.w	r3, r3, #1
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	d110      	bne.n	8009558 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	480b      	ldr	r0, [pc, #44]	; (8009568 <DRV_moveForwardLeft+0x6c>)
 800953a:	f000 fcad 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800953e:	2100      	movs	r1, #0
 8009540:	480c      	ldr	r0, [pc, #48]	; (8009574 <DRV_moveForwardLeft+0x78>)
 8009542:	f000 fca9 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 8009546:	2100      	movs	r1, #0
 8009548:	480b      	ldr	r0, [pc, #44]	; (8009578 <DRV_moveForwardLeft+0x7c>)
 800954a:	f000 fca5 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800954e:	68f9      	ldr	r1, [r7, #12]
 8009550:	4806      	ldr	r0, [pc, #24]	; (800956c <DRV_moveForwardLeft+0x70>)
 8009552:	f000 fca1 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 8009556:	bf00      	nop
 8009558:	bf00      	nop
}
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}
 8009560:	0800c154 	.word	0x0800c154
 8009564:	200000e6 	.word	0x200000e6
 8009568:	200001a8 	.word	0x200001a8
 800956c:	200001f0 	.word	0x200001f0
 8009570:	200000e5 	.word	0x200000e5
 8009574:	200001cc 	.word	0x200001cc
 8009578:	20000214 	.word	0x20000214

0800957c <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4915      	ldr	r1, [pc, #84]	; (80095e0 <DRV_moveBackwardRight+0x64>)
 800958c:	2000      	movs	r0, #0
 800958e:	f000 fb0b 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009592:	4b14      	ldr	r3, [pc, #80]	; (80095e4 <DRV_moveBackwardRight+0x68>)
 8009594:	2201      	movs	r2, #1
 8009596:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009598:	2102      	movs	r1, #2
 800959a:	4813      	ldr	r0, [pc, #76]	; (80095e8 <DRV_moveBackwardRight+0x6c>)
 800959c:	f000 fc10 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80095a0:	2102      	movs	r1, #2
 80095a2:	4812      	ldr	r0, [pc, #72]	; (80095ec <DRV_moveBackwardRight+0x70>)
 80095a4:	f000 fc0c 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80095a8:	4b11      	ldr	r3, [pc, #68]	; (80095f0 <DRV_moveBackwardRight+0x74>)
 80095aa:	781b      	ldrb	r3, [r3, #0]
 80095ac:	f083 0301 	eor.w	r3, r3, #1
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d110      	bne.n	80095d8 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80095b6:	68f9      	ldr	r1, [r7, #12]
 80095b8:	480b      	ldr	r0, [pc, #44]	; (80095e8 <DRV_moveBackwardRight+0x6c>)
 80095ba:	f000 fc6d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80095be:	2100      	movs	r1, #0
 80095c0:	480c      	ldr	r0, [pc, #48]	; (80095f4 <DRV_moveBackwardRight+0x78>)
 80095c2:	f000 fc69 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80095c6:	2100      	movs	r1, #0
 80095c8:	480b      	ldr	r0, [pc, #44]	; (80095f8 <DRV_moveBackwardRight+0x7c>)
 80095ca:	f000 fc65 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80095ce:	68f9      	ldr	r1, [r7, #12]
 80095d0:	4806      	ldr	r0, [pc, #24]	; (80095ec <DRV_moveBackwardRight+0x70>)
 80095d2:	f000 fc61 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 80095d6:	bf00      	nop
 80095d8:	bf00      	nop
}
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	0800c16c 	.word	0x0800c16c
 80095e4:	200000e6 	.word	0x200000e6
 80095e8:	200001a8 	.word	0x200001a8
 80095ec:	200001f0 	.word	0x200001f0
 80095f0:	200000e5 	.word	0x200000e5
 80095f4:	200001cc 	.word	0x200001cc
 80095f8:	20000214 	.word	0x20000214

080095fc <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 8009608:	68fa      	ldr	r2, [r7, #12]
 800960a:	4915      	ldr	r1, [pc, #84]	; (8009660 <DRV_moveBackwardLeft+0x64>)
 800960c:	2000      	movs	r0, #0
 800960e:	f000 facb 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009612:	4b14      	ldr	r3, [pc, #80]	; (8009664 <DRV_moveBackwardLeft+0x68>)
 8009614:	2201      	movs	r2, #1
 8009616:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 8009618:	2102      	movs	r1, #2
 800961a:	4813      	ldr	r0, [pc, #76]	; (8009668 <DRV_moveBackwardLeft+0x6c>)
 800961c:	f000 fbd0 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 8009620:	2102      	movs	r1, #2
 8009622:	4812      	ldr	r0, [pc, #72]	; (800966c <DRV_moveBackwardLeft+0x70>)
 8009624:	f000 fbcc 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009628:	4b11      	ldr	r3, [pc, #68]	; (8009670 <DRV_moveBackwardLeft+0x74>)
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f083 0301 	eor.w	r3, r3, #1
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b00      	cmp	r3, #0
 8009634:	d110      	bne.n	8009658 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 8009636:	2100      	movs	r1, #0
 8009638:	480e      	ldr	r0, [pc, #56]	; (8009674 <DRV_moveBackwardLeft+0x78>)
 800963a:	f000 fc2d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800963e:	68f9      	ldr	r1, [r7, #12]
 8009640:	4809      	ldr	r0, [pc, #36]	; (8009668 <DRV_moveBackwardLeft+0x6c>)
 8009642:	f000 fc29 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	4808      	ldr	r0, [pc, #32]	; (800966c <DRV_moveBackwardLeft+0x70>)
 800964a:	f000 fc25 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800964e:	2100      	movs	r1, #0
 8009650:	4809      	ldr	r0, [pc, #36]	; (8009678 <DRV_moveBackwardLeft+0x7c>)
 8009652:	f000 fc21 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 8009656:	bf00      	nop
 8009658:	bf00      	nop
}
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	0800c188 	.word	0x0800c188
 8009664:	200000e6 	.word	0x200000e6
 8009668:	200001cc 	.word	0x200001cc
 800966c:	20000214 	.word	0x20000214
 8009670:	200000e5 	.word	0x200000e5
 8009674:	200001a8 	.word	0x200001a8
 8009678:	200001f0 	.word	0x200001f0

0800967c <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4919      	ldr	r1, [pc, #100]	; (80096f0 <DRV_turnLeft+0x74>)
 800968c:	2000      	movs	r0, #0
 800968e:	f000 fa8b 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009692:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <DRV_turnLeft+0x78>)
 8009694:	2201      	movs	r2, #1
 8009696:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009698:	2101      	movs	r1, #1
 800969a:	4817      	ldr	r0, [pc, #92]	; (80096f8 <DRV_turnLeft+0x7c>)
 800969c:	f000 fb90 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80096a0:	2102      	movs	r1, #2
 80096a2:	4816      	ldr	r0, [pc, #88]	; (80096fc <DRV_turnLeft+0x80>)
 80096a4:	f000 fb8c 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 80096a8:	2101      	movs	r1, #1
 80096aa:	4815      	ldr	r0, [pc, #84]	; (8009700 <DRV_turnLeft+0x84>)
 80096ac:	f000 fb88 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80096b0:	2102      	movs	r1, #2
 80096b2:	4814      	ldr	r0, [pc, #80]	; (8009704 <DRV_turnLeft+0x88>)
 80096b4:	f000 fb84 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80096b8:	4b13      	ldr	r3, [pc, #76]	; (8009708 <DRV_turnLeft+0x8c>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f083 0301 	eor.w	r3, r3, #1
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d110      	bne.n	80096e8 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80096c6:	68f9      	ldr	r1, [r7, #12]
 80096c8:	480b      	ldr	r0, [pc, #44]	; (80096f8 <DRV_turnLeft+0x7c>)
 80096ca:	f000 fbe5 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80096ce:	68f9      	ldr	r1, [r7, #12]
 80096d0:	480a      	ldr	r0, [pc, #40]	; (80096fc <DRV_turnLeft+0x80>)
 80096d2:	f000 fbe1 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80096d6:	68f9      	ldr	r1, [r7, #12]
 80096d8:	4809      	ldr	r0, [pc, #36]	; (8009700 <DRV_turnLeft+0x84>)
 80096da:	f000 fbdd 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80096de:	68f9      	ldr	r1, [r7, #12]
 80096e0:	4808      	ldr	r0, [pc, #32]	; (8009704 <DRV_turnLeft+0x88>)
 80096e2:	f000 fbd9 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
}
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	0800c1a4 	.word	0x0800c1a4
 80096f4:	200000e6 	.word	0x200000e6
 80096f8:	200001a8 	.word	0x200001a8
 80096fc:	200001cc 	.word	0x200001cc
 8009700:	20000214 	.word	0x20000214
 8009704:	200001f0 	.word	0x200001f0
 8009708:	200000e5 	.word	0x200000e5

0800970c <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4919      	ldr	r1, [pc, #100]	; (8009780 <DRV_turnRight+0x74>)
 800971c:	2000      	movs	r0, #0
 800971e:	f000 fa43 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009722:	4b18      	ldr	r3, [pc, #96]	; (8009784 <DRV_turnRight+0x78>)
 8009724:	2201      	movs	r2, #1
 8009726:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009728:	2102      	movs	r1, #2
 800972a:	4817      	ldr	r0, [pc, #92]	; (8009788 <DRV_turnRight+0x7c>)
 800972c:	f000 fb48 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009730:	2101      	movs	r1, #1
 8009732:	4816      	ldr	r0, [pc, #88]	; (800978c <DRV_turnRight+0x80>)
 8009734:	f000 fb44 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009738:	2102      	movs	r1, #2
 800973a:	4815      	ldr	r0, [pc, #84]	; (8009790 <DRV_turnRight+0x84>)
 800973c:	f000 fb40 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009740:	2101      	movs	r1, #1
 8009742:	4814      	ldr	r0, [pc, #80]	; (8009794 <DRV_turnRight+0x88>)
 8009744:	f000 fb3c 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009748:	4b13      	ldr	r3, [pc, #76]	; (8009798 <DRV_turnRight+0x8c>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f083 0301 	eor.w	r3, r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d110      	bne.n	8009778 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009756:	68f9      	ldr	r1, [r7, #12]
 8009758:	480b      	ldr	r0, [pc, #44]	; (8009788 <DRV_turnRight+0x7c>)
 800975a:	f000 fb9d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	480a      	ldr	r0, [pc, #40]	; (800978c <DRV_turnRight+0x80>)
 8009762:	f000 fb99 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	4809      	ldr	r0, [pc, #36]	; (8009790 <DRV_turnRight+0x84>)
 800976a:	f000 fb95 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	4808      	ldr	r0, [pc, #32]	; (8009794 <DRV_turnRight+0x88>)
 8009772:	f000 fb91 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 8009776:	bf00      	nop
 8009778:	bf00      	nop
}
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	0800c1b8 	.word	0x0800c1b8
 8009784:	200000e6 	.word	0x200000e6
 8009788:	200001a8 	.word	0x200001a8
 800978c:	200001cc 	.word	0x200001cc
 8009790:	20000214 	.word	0x20000214
 8009794:	200001f0 	.word	0x200001f0
 8009798:	200000e5 	.word	0x200000e5

0800979c <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4919      	ldr	r1, [pc, #100]	; (8009810 <DRV_translateLeft+0x74>)
 80097ac:	2000      	movs	r0, #0
 80097ae:	f000 f9fb 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 80097b2:	4b18      	ldr	r3, [pc, #96]	; (8009814 <DRV_translateLeft+0x78>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 80097b8:	2101      	movs	r1, #1
 80097ba:	4817      	ldr	r0, [pc, #92]	; (8009818 <DRV_translateLeft+0x7c>)
 80097bc:	f000 fb00 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80097c0:	2102      	movs	r1, #2
 80097c2:	4816      	ldr	r0, [pc, #88]	; (800981c <DRV_translateLeft+0x80>)
 80097c4:	f000 fafc 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80097c8:	2102      	movs	r1, #2
 80097ca:	4815      	ldr	r0, [pc, #84]	; (8009820 <DRV_translateLeft+0x84>)
 80097cc:	f000 faf8 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80097d0:	2101      	movs	r1, #1
 80097d2:	4814      	ldr	r0, [pc, #80]	; (8009824 <DRV_translateLeft+0x88>)
 80097d4:	f000 faf4 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80097d8:	4b13      	ldr	r3, [pc, #76]	; (8009828 <DRV_translateLeft+0x8c>)
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	f083 0301 	eor.w	r3, r3, #1
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d110      	bne.n	8009808 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	480b      	ldr	r0, [pc, #44]	; (8009818 <DRV_translateLeft+0x7c>)
 80097ea:	f000 fb55 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	480a      	ldr	r0, [pc, #40]	; (800981c <DRV_translateLeft+0x80>)
 80097f2:	f000 fb51 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	4809      	ldr	r0, [pc, #36]	; (8009820 <DRV_translateLeft+0x84>)
 80097fa:	f000 fb4d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80097fe:	68f9      	ldr	r1, [r7, #12]
 8009800:	4808      	ldr	r0, [pc, #32]	; (8009824 <DRV_translateLeft+0x88>)
 8009802:	f000 fb49 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 8009806:	bf00      	nop
 8009808:	bf00      	nop
}
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	0800c1cc 	.word	0x0800c1cc
 8009814:	200000e6 	.word	0x200000e6
 8009818:	200001a8 	.word	0x200001a8
 800981c:	200001cc 	.word	0x200001cc
 8009820:	20000214 	.word	0x20000214
 8009824:	200001f0 	.word	0x200001f0
 8009828:	200000e5 	.word	0x200000e5

0800982c <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	4919      	ldr	r1, [pc, #100]	; (80098a0 <DRV_translateRight+0x74>)
 800983c:	2000      	movs	r0, #0
 800983e:	f000 f9b3 	bl	8009ba8 <LOG_log>

  g_DRV_isDriveOn = true;
 8009842:	4b18      	ldr	r3, [pc, #96]	; (80098a4 <DRV_translateRight+0x78>)
 8009844:	2201      	movs	r2, #1
 8009846:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009848:	2102      	movs	r1, #2
 800984a:	4817      	ldr	r0, [pc, #92]	; (80098a8 <DRV_translateRight+0x7c>)
 800984c:	f000 fab8 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009850:	2101      	movs	r1, #1
 8009852:	4816      	ldr	r0, [pc, #88]	; (80098ac <DRV_translateRight+0x80>)
 8009854:	f000 fab4 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009858:	2101      	movs	r1, #1
 800985a:	4815      	ldr	r0, [pc, #84]	; (80098b0 <DRV_translateRight+0x84>)
 800985c:	f000 fab0 	bl	8009dc0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009860:	2102      	movs	r1, #2
 8009862:	4814      	ldr	r0, [pc, #80]	; (80098b4 <DRV_translateRight+0x88>)
 8009864:	f000 faac 	bl	8009dc0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009868:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <DRV_translateRight+0x8c>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	f083 0301 	eor.w	r3, r3, #1
 8009870:	b2db      	uxtb	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d110      	bne.n	8009898 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009876:	68f9      	ldr	r1, [r7, #12]
 8009878:	480b      	ldr	r0, [pc, #44]	; (80098a8 <DRV_translateRight+0x7c>)
 800987a:	f000 fb0d 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800987e:	68f9      	ldr	r1, [r7, #12]
 8009880:	480a      	ldr	r0, [pc, #40]	; (80098ac <DRV_translateRight+0x80>)
 8009882:	f000 fb09 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009886:	68f9      	ldr	r1, [r7, #12]
 8009888:	4809      	ldr	r0, [pc, #36]	; (80098b0 <DRV_translateRight+0x84>)
 800988a:	f000 fb05 	bl	8009e98 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800988e:	68f9      	ldr	r1, [r7, #12]
 8009890:	4808      	ldr	r0, [pc, #32]	; (80098b4 <DRV_translateRight+0x88>)
 8009892:	f000 fb01 	bl	8009e98 <MTR_setSpeed>
  }

  return;
 8009896:	bf00      	nop
 8009898:	bf00      	nop
}
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	0800c1e4 	.word	0x0800c1e4
 80098a4:	200000e6 	.word	0x200000e6
 80098a8:	200001a8 	.word	0x200001a8
 80098ac:	200001cc 	.word	0x200001cc
 80098b0:	20000214 	.word	0x20000214
 80098b4:	200001f0 	.word	0x200001f0
 80098b8:	200000e5 	.word	0x200000e5

080098bc <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	603b      	str	r3, [r7, #0]
 80098c8:	4613      	mov	r3, r2
 80098ca:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	490a      	ldr	r1, [pc, #40]	; (80098f8 <ENC_init+0x3c>)
 80098d0:	2001      	movs	r0, #1
 80098d2:	f000 f969 	bl	8009ba8 <LOG_log>

  p_handle->name           = p_name;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	79fa      	ldrb	r2, [r7, #7]
 80098e0:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f807 	bl	80098fc <ENC_reset>

  return;
 80098ee:	bf00      	nop
}
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	0800c1fc 	.word	0x0800c1fc

080098fc <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	809a      	strh	r2, [r3, #4]

  return;
 800990a:	bf00      	nop
}
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr

08009914 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	799b      	ldrb	r3, [r3, #6]
 8009924:	f083 0301 	eor.w	r3, r3, #1
 8009928:	b2db      	uxtb	r3, r3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	887a      	ldrh	r2, [r7, #2]
 8009932:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 8009934:	e006      	b.n	8009944 <ENC_update+0x30>
    p_handle->value = -p_value;
 8009936:	887b      	ldrh	r3, [r7, #2]
 8009938:	425b      	negs	r3, r3
 800993a:	b29b      	uxth	r3, r3
 800993c:	b21a      	sxth	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	809a      	strh	r2, [r3, #4]
  return;
 8009942:	bf00      	nop
}
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	bc80      	pop	{r7}
 800994a:	4770      	bx	lr

0800994c <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800994c:	b480      	push	{r7}
 800994e:	b083      	sub	sp, #12
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	bc80      	pop	{r7}
 8009962:	4770      	bx	lr

08009964 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	4603      	mov	r3, r0
 800996c:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800996e:	4b1b      	ldr	r3, [pc, #108]	; (80099dc <LED_setMode+0x78>)
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	79fa      	ldrb	r2, [r7, #7]
 8009974:	429a      	cmp	r2, r3
 8009976:	d02d      	beq.n	80099d4 <LED_setMode+0x70>
  {
    switch (p_mode)
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b04      	cmp	r3, #4
 800997c:	d825      	bhi.n	80099ca <LED_setMode+0x66>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <LED_setMode+0x20>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	08009999 	.word	0x08009999
 8009988:	080099a3 	.word	0x080099a3
 800998c:	080099ad 	.word	0x080099ad
 8009990:	080099b7 	.word	0x080099b7
 8009994:	080099c1 	.word	0x080099c1
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 8009998:	4911      	ldr	r1, [pc, #68]	; (80099e0 <LED_setMode+0x7c>)
 800999a:	2001      	movs	r0, #1
 800999c:	f000 f904 	bl	8009ba8 <LOG_log>
        break;
 80099a0:	e014      	b.n	80099cc <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 80099a2:	4910      	ldr	r1, [pc, #64]	; (80099e4 <LED_setMode+0x80>)
 80099a4:	2001      	movs	r0, #1
 80099a6:	f000 f8ff 	bl	8009ba8 <LOG_log>
        break;
 80099aa:	e00f      	b.n	80099cc <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 80099ac:	490e      	ldr	r1, [pc, #56]	; (80099e8 <LED_setMode+0x84>)
 80099ae:	2001      	movs	r0, #1
 80099b0:	f000 f8fa 	bl	8009ba8 <LOG_log>
        break;
 80099b4:	e00a      	b.n	80099cc <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 80099b6:	490d      	ldr	r1, [pc, #52]	; (80099ec <LED_setMode+0x88>)
 80099b8:	2001      	movs	r0, #1
 80099ba:	f000 f8f5 	bl	8009ba8 <LOG_log>
        break;
 80099be:	e005      	b.n	80099cc <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 80099c0:	490b      	ldr	r1, [pc, #44]	; (80099f0 <LED_setMode+0x8c>)
 80099c2:	2001      	movs	r0, #1
 80099c4:	f000 f8f0 	bl	8009ba8 <LOG_log>
        break;
 80099c8:	e000      	b.n	80099cc <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 80099ca:	bf00      	nop
    }

    g_LED_mode = p_mode;
 80099cc:	4a03      	ldr	r2, [pc, #12]	; (80099dc <LED_setMode+0x78>)
 80099ce:	79fb      	ldrb	r3, [r7, #7]
 80099d0:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
}
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000009 	.word	0x20000009
 80099e0:	0800c220 	.word	0x0800c220
 80099e4:	0800c230 	.word	0x0800c230
 80099e8:	0800c240 	.word	0x0800c240
 80099ec:	0800c25c 	.word	0x0800c25c
 80099f0:	0800c278 	.word	0x0800c278

080099f4 <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 80099f8:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <LED_update+0xb0>)
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d849      	bhi.n	8009a94 <LED_update+0xa0>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <LED_update+0x14>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a1d 	.word	0x08009a1d
 8009a0c:	08009a2b 	.word	0x08009a2b
 8009a10:	08009a39 	.word	0x08009a39
 8009a14:	08009a67 	.word	0x08009a67
 8009a18:	08009a89 	.word	0x08009a89
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a22:	4821      	ldr	r0, [pc, #132]	; (8009aa8 <LED_update+0xb4>)
 8009a24:	f7f9 fe26 	bl	8003674 <HAL_GPIO_WritePin>
      break;
 8009a28:	e039      	b.n	8009a9e <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a30:	481d      	ldr	r0, [pc, #116]	; (8009aa8 <LED_update+0xb4>)
 8009a32:	f7f9 fe1f 	bl	8003674 <HAL_GPIO_WritePin>
      break;
 8009a36:	e032      	b.n	8009a9e <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 8009a38:	4b1c      	ldr	r3, [pc, #112]	; (8009aac <LED_update+0xb8>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	4a1b      	ldr	r2, [pc, #108]	; (8009aac <LED_update+0xb8>)
 8009a40:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 8009a42:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <LED_update+0xb8>)
 8009a44:	6819      	ldr	r1, [r3, #0]
 8009a46:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <LED_update+0xbc>)
 8009a48:	fba3 2301 	umull	r2, r3, r3, r1
 8009a4c:	089a      	lsrs	r2, r3, #2
 8009a4e:	4613      	mov	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	1aca      	subs	r2, r1, r3
 8009a56:	2a00      	cmp	r2, #0
 8009a58:	d11e      	bne.n	8009a98 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a5e:	4812      	ldr	r0, [pc, #72]	; (8009aa8 <LED_update+0xb4>)
 8009a60:	f7f9 fe3a 	bl	80036d8 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a64:	e018      	b.n	8009a98 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 8009a66:	4b11      	ldr	r3, [pc, #68]	; (8009aac <LED_update+0xb8>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	4a0f      	ldr	r2, [pc, #60]	; (8009aac <LED_update+0xb8>)
 8009a6e:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 8009a70:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <LED_update+0xb8>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10f      	bne.n	8009a9c <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <LED_update+0xb4>)
 8009a82:	f7f9 fe29 	bl	80036d8 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a86:	e009      	b.n	8009a9c <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009a8c:	4806      	ldr	r0, [pc, #24]	; (8009aa8 <LED_update+0xb4>)
 8009a8e:	f7f9 fe23 	bl	80036d8 <HAL_GPIO_TogglePin>
      break;
 8009a92:	e004      	b.n	8009a9e <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 8009a94:	bf00      	nop
 8009a96:	e002      	b.n	8009a9e <LED_update+0xaa>
      break;
 8009a98:	bf00      	nop
 8009a9a:	e000      	b.n	8009a9e <LED_update+0xaa>
      break;
 8009a9c:	bf00      	nop
  }

  return;
 8009a9e:	bf00      	nop
}
 8009aa0:	bd80      	pop	{r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000009 	.word	0x20000009
 8009aa8:	40011000 	.word	0x40011000
 8009aac:	20000268 	.word	0x20000268
 8009ab0:	cccccccd 	.word	0xcccccccd

08009ab4 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 8009abc:	4a03      	ldr	r2, [pc, #12]	; (8009acc <LOG_init+0x18>)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6013      	str	r3, [r2, #0]

  return;
 8009ac2:	bf00      	nop
}
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bc80      	pop	{r7}
 8009aca:	4770      	bx	lr
 8009acc:	20000270 	.word	0x20000270

08009ad0 <LOG_turnOn>:

void LOG_turnOn(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == false)
 8009ad4:	4b08      	ldr	r3, [pc, #32]	; (8009af8 <LOG_turnOn+0x28>)
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	f083 0301 	eor.w	r3, r3, #1
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d007      	beq.n	8009af2 <LOG_turnOn+0x22>
  {
    g_LOG_isOn = true;
 8009ae2:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <LOG_turnOn+0x28>)
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	701a      	strb	r2, [r3, #0]

    LOG_info("Turning LOG ON");
 8009ae8:	4904      	ldr	r1, [pc, #16]	; (8009afc <LOG_turnOn+0x2c>)
 8009aea:	2001      	movs	r0, #1
 8009aec:	f000 f85c 	bl	8009ba8 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
}
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	2000026c 	.word	0x2000026c
 8009afc:	0800c2b4 	.word	0x0800c2b4

08009b00 <LOG_turnOff>:

void LOG_turnOff(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 8009b04:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <LOG_turnOff+0x20>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <LOG_turnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 8009b0c:	4905      	ldr	r1, [pc, #20]	; (8009b24 <LOG_turnOff+0x24>)
 8009b0e:	2001      	movs	r0, #1
 8009b10:	f000 f84a 	bl	8009ba8 <LOG_log>

    g_LOG_isOn = false;
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <LOG_turnOff+0x20>)
 8009b16:	2200      	movs	r2, #0
 8009b18:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009b1a:	bf00      	nop
 8009b1c:	bf00      	nop
}
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	2000026c 	.word	0x2000026c
 8009b24:	0800c2c4 	.word	0x0800c2c4

08009b28 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 8009b32:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <LOG_setLevel+0x1c>)
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	7013      	strb	r3, [r2, #0]

  return;
 8009b38:	bf00      	nop
}
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	2000026d 	.word	0x2000026d

08009b48 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 8009b4c:	4b08      	ldr	r3, [pc, #32]	; (8009b70 <LOG_increaseLevel+0x28>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00a      	beq.n	8009b6a <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 8009b54:	4907      	ldr	r1, [pc, #28]	; (8009b74 <LOG_increaseLevel+0x2c>)
 8009b56:	2001      	movs	r0, #1
 8009b58:	f000 f826 	bl	8009ba8 <LOG_log>

    g_LOG_level--;
 8009b5c:	4b04      	ldr	r3, [pc, #16]	; (8009b70 <LOG_increaseLevel+0x28>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	3b01      	subs	r3, #1
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <LOG_increaseLevel+0x28>)
 8009b66:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009b68:	bf00      	nop
 8009b6a:	bf00      	nop
}
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	2000026d 	.word	0x2000026d
 8009b74:	0800c2d4 	.word	0x0800c2d4

08009b78 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 8009b7c:	4b08      	ldr	r3, [pc, #32]	; (8009ba0 <LOG_decreaseLevel+0x28>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d80a      	bhi.n	8009b9a <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 8009b84:	4907      	ldr	r1, [pc, #28]	; (8009ba4 <LOG_decreaseLevel+0x2c>)
 8009b86:	2001      	movs	r0, #1
 8009b88:	f000 f80e 	bl	8009ba8 <LOG_log>

    g_LOG_level++;
 8009b8c:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <LOG_decreaseLevel+0x28>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	3301      	adds	r3, #1
 8009b92:	b2da      	uxtb	r2, r3
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <LOG_decreaseLevel+0x28>)
 8009b96:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009b98:	bf00      	nop
 8009b9a:	bf00      	nop
}
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2000026d 	.word	0x2000026d
 8009ba4:	0800c2ec 	.word	0x0800c2ec

08009ba8 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8009ba8:	b40e      	push	{r1, r2, r3}
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b089      	sub	sp, #36	; 0x24
 8009bae:	af02      	add	r7, sp, #8
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 8009bb4:	4b26      	ldr	r3, [pc, #152]	; (8009c50 <LOG_log+0xa8>)
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d041      	beq.n	8009c40 <LOG_log+0x98>
 8009bbc:	4b25      	ldr	r3, [pc, #148]	; (8009c54 <LOG_log+0xac>)
 8009bbe:	781b      	ldrb	r3, [r3, #0]
 8009bc0:	79fa      	ldrb	r2, [r7, #7]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d33c      	bcc.n	8009c40 <LOG_log+0x98>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009bc6:	4b24      	ldr	r3, [pc, #144]	; (8009c58 <LOG_log+0xb0>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f107 010c 	add.w	r1, r7, #12
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7fa ff31 	bl	8004a38 <HAL_RTC_GetTime>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	75fb      	strb	r3, [r7, #23]

    if (l_halReturnCode != HAL_OK)
 8009bda:	7dfb      	ldrb	r3, [r7, #23]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <LOG_log+0x42>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 8009be0:	f107 030c 	add.w	r3, r7, #12
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fbd6 	bl	800a396 <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <LOG_log+0xb0>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f107 0108 	add.w	r1, r7, #8
 8009bf2:	2201      	movs	r2, #1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fb f923 	bl	8004e40 <HAL_RTC_GetDate>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	75fb      	strb	r3, [r7, #23]

    if (l_halReturnCode != HAL_OK)
 8009bfe:	7dfb      	ldrb	r3, [r7, #23]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d004      	beq.n	8009c0e <LOG_log+0x66>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f000 fbaf 	bl	800a36c <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 8009c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009c12:	613b      	str	r3, [r7, #16]

    (void)printf("%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009c14:	79fb      	ldrb	r3, [r7, #7]
 8009c16:	4a11      	ldr	r2, [pc, #68]	; (8009c5c <LOG_log+0xb4>)
 8009c18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009c1c:	7b3b      	ldrb	r3, [r7, #12]
 8009c1e:	461a      	mov	r2, r3
 8009c20:	7b7b      	ldrb	r3, [r7, #13]
 8009c22:	4618      	mov	r0, r3
 8009c24:	7bbb      	ldrb	r3, [r7, #14]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	4603      	mov	r3, r0
 8009c2a:	480d      	ldr	r0, [pc, #52]	; (8009c60 <LOG_log+0xb8>)
 8009c2c:	f000 fd44 	bl	800a6b8 <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 8009c30:	6939      	ldr	r1, [r7, #16]
 8009c32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c34:	f000 fe82 	bl	800a93c <viprintf>
    (void)printf("\r\n");
 8009c38:	480a      	ldr	r0, [pc, #40]	; (8009c64 <LOG_log+0xbc>)
 8009c3a:	f000 fdc3 	bl	800a7c4 <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009c3e:	bf00      	nop
 8009c40:	bf00      	nop
}
 8009c42:	371c      	adds	r7, #28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c4a:	b003      	add	sp, #12
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	2000026c 	.word	0x2000026c
 8009c54:	2000026d 	.word	0x2000026d
 8009c58:	20000270 	.word	0x20000270
 8009c5c:	2000000c 	.word	0x2000000c
 8009c60:	0800c304 	.word	0x0800c304
 8009c64:	0800c320 	.word	0x0800c320

08009c68 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 8009c70:	490d      	ldr	r1, [pc, #52]	; (8009ca8 <MAS_init+0x40>)
 8009c72:	2001      	movs	r0, #1
 8009c74:	f7ff ff98 	bl	8009ba8 <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 8009c78:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <MAS_init+0x44>)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <MAS_init+0x48>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 8009c84:	4b0b      	ldr	r3, [pc, #44]	; (8009cb4 <MAS_init+0x4c>)
 8009c86:	2200      	movs	r2, #0
 8009c88:	701a      	strb	r2, [r3, #0]

  SFO_dataInit(&g_MAS_data);
 8009c8a:	480b      	ldr	r0, [pc, #44]	; (8009cb8 <MAS_init+0x50>)
 8009c8c:	f000 fa32 	bl	800a0f4 <SFO_dataInit>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009c90:	4b06      	ldr	r3, [pc, #24]	; (8009cac <MAS_init+0x44>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2201      	movs	r2, #1
 8009c96:	4909      	ldr	r1, [pc, #36]	; (8009cbc <MAS_init+0x54>)
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fd ff77 	bl	8007b8c <HAL_UART_Receive_IT>

  return;
 8009c9e:	bf00      	nop
}
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	0800c324 	.word	0x0800c324
 8009cac:	20000274 	.word	0x20000274
 8009cb0:	2000028c 	.word	0x2000028c
 8009cb4:	20000290 	.word	0x20000290
 8009cb8:	2000027c 	.word	0x2000027c
 8009cbc:	20000278 	.word	0x20000278

08009cc0 <MAS_receiveData>:

void MAS_receiveData(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 8009cc4:	4b0f      	ldr	r3, [pc, #60]	; (8009d04 <MAS_receiveData+0x44>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d112      	bne.n	8009cf2 <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 8009ccc:	4b0e      	ldr	r3, [pc, #56]	; (8009d08 <MAS_receiveData+0x48>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b0d      	cmp	r3, #13
 8009cd2:	d103      	bne.n	8009cdc <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 8009cd4:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <MAS_receiveData+0x44>)
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	701a      	strb	r2, [r3, #0]
 8009cda:	e00a      	b.n	8009cf2 <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 8009cdc:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <MAS_receiveData+0x4c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a09      	ldr	r2, [pc, #36]	; (8009d08 <MAS_receiveData+0x48>)
 8009ce2:	7811      	ldrb	r1, [r2, #0]
 8009ce4:	4a0a      	ldr	r2, [pc, #40]	; (8009d10 <MAS_receiveData+0x50>)
 8009ce6:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 8009ce8:	4b08      	ldr	r3, [pc, #32]	; (8009d0c <MAS_receiveData+0x4c>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3301      	adds	r3, #1
 8009cee:	4a07      	ldr	r2, [pc, #28]	; (8009d0c <MAS_receiveData+0x4c>)
 8009cf0:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009cf2:	4b08      	ldr	r3, [pc, #32]	; (8009d14 <MAS_receiveData+0x54>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	4903      	ldr	r1, [pc, #12]	; (8009d08 <MAS_receiveData+0x48>)
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f7fd ff46 	bl	8007b8c <HAL_UART_Receive_IT>

  return;
 8009d00:	bf00      	nop
}
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000290 	.word	0x20000290
 8009d08:	20000278 	.word	0x20000278
 8009d0c:	2000028c 	.word	0x2000028c
 8009d10:	2000027c 	.word	0x2000027c
 8009d14:	20000274 	.word	0x20000274

08009d18 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 8009d20:	4b0c      	ldr	r3, [pc, #48]	; (8009d54 <MAS_updateFifo+0x3c>)
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	f083 0301 	eor.w	r3, r3, #1
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10d      	bne.n	8009d4a <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 8009d2e:	490a      	ldr	r1, [pc, #40]	; (8009d58 <MAS_updateFifo+0x40>)
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fa05 	bl	800a140 <SFO_push>
    SFO_dataInit(&g_MAS_data);
 8009d36:	4808      	ldr	r0, [pc, #32]	; (8009d58 <MAS_updateFifo+0x40>)
 8009d38:	f000 f9dc 	bl	800a0f4 <SFO_dataInit>

    g_MAS_dataSize       = 0;
 8009d3c:	4b07      	ldr	r3, [pc, #28]	; (8009d5c <MAS_updateFifo+0x44>)
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 8009d42:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <MAS_updateFifo+0x3c>)
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
  }

  return;
 8009d48:	bf00      	nop
 8009d4a:	bf00      	nop
}
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	20000290 	.word	0x20000290
 8009d58:	2000027c 	.word	0x2000027c
 8009d5c:	2000028c 	.word	0x2000028c

08009d60 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	4912      	ldr	r1, [pc, #72]	; (8009dbc <MTR_init+0x5c>)
 8009d72:	2001      	movs	r0, #1
 8009d74:	f7ff ff18 	bl	8009ba8 <LOG_log>

  p_handle->name           = p_name;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6a3a      	ldr	r2, [r7, #32]
 8009d9a:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da0:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 8009da2:	2100      	movs	r1, #0
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 f80b 	bl	8009dc0 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 8009daa:	2100      	movs	r1, #0
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f000 f873 	bl	8009e98 <MTR_setSpeed>

  return;
 8009db2:	bf00      	nop
}
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	0800c374 	.word	0x0800c374

08009dc0 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b082      	sub	sp, #8
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	7d1b      	ldrb	r3, [r3, #20]
 8009dd0:	78fa      	ldrb	r2, [r7, #3]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d056      	beq.n	8009e84 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d119      	bne.n	8009e10 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	461a      	mov	r2, r3
 8009de2:	492a      	ldr	r1, [pc, #168]	; (8009e8c <MTR_setDirection+0xcc>)
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7ff fedf 	bl	8009ba8 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6858      	ldr	r0, [r3, #4]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2200      	movs	r2, #0
 8009df6:	4619      	mov	r1, r3
 8009df8:	f7f9 fc3c 	bl	8003674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68d8      	ldr	r0, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	691b      	ldr	r3, [r3, #16]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	2200      	movs	r2, #0
 8009e08:	4619      	mov	r1, r3
 8009e0a:	f7f9 fc33 	bl	8003674 <HAL_GPIO_WritePin>
 8009e0e:	e035      	b.n	8009e7c <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d119      	bne.n	8009e4a <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	491c      	ldr	r1, [pc, #112]	; (8009e90 <MTR_setDirection+0xd0>)
 8009e1e:	2000      	movs	r0, #0
 8009e20:	f7ff fec2 	bl	8009ba8 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6858      	ldr	r0, [r3, #4]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	2200      	movs	r2, #0
 8009e30:	4619      	mov	r1, r3
 8009e32:	f7f9 fc1f 	bl	8003674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68d8      	ldr	r0, [r3, #12]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2201      	movs	r2, #1
 8009e42:	4619      	mov	r1, r3
 8009e44:	f7f9 fc16 	bl	8003674 <HAL_GPIO_WritePin>
 8009e48:	e018      	b.n	8009e7c <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	4910      	ldr	r1, [pc, #64]	; (8009e94 <MTR_setDirection+0xd4>)
 8009e52:	2000      	movs	r0, #0
 8009e54:	f7ff fea8 	bl	8009ba8 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6858      	ldr	r0, [r3, #4]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	2201      	movs	r2, #1
 8009e64:	4619      	mov	r1, r3
 8009e66:	f7f9 fc05 	bl	8003674 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68d8      	ldr	r0, [r3, #12]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	2200      	movs	r2, #0
 8009e76:	4619      	mov	r1, r3
 8009e78:	f7f9 fbfc 	bl	8003674 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	751a      	strb	r2, [r3, #20]
  }

  return;
 8009e82:	bf00      	nop
 8009e84:	bf00      	nop
}
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	0800c398 	.word	0x0800c398
 8009e90:	0800c3a8 	.word	0x0800c3a8
 8009e94:	0800c3bc 	.word	0x0800c3bc

08009e98 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	683a      	ldr	r2, [r7, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d02d      	beq.n	8009f08 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	4917      	ldr	r1, [pc, #92]	; (8009f10 <MTR_setSpeed+0x78>)
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f7ff fe77 	bl	8009ba8 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6a1b      	ldr	r3, [r3, #32]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d105      	bne.n	8009ece <MTR_setSpeed+0x36>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	635a      	str	r2, [r3, #52]	; 0x34
 8009ecc:	e018      	b.n	8009f00 <MTR_setSpeed+0x68>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d105      	bne.n	8009ee2 <MTR_setSpeed+0x4a>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	69db      	ldr	r3, [r3, #28]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	6393      	str	r3, [r2, #56]	; 0x38
 8009ee0:	e00e      	b.n	8009f00 <MTR_setSpeed+0x68>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6a1b      	ldr	r3, [r3, #32]
 8009ee6:	2b08      	cmp	r3, #8
 8009ee8:	d105      	bne.n	8009ef6 <MTR_setSpeed+0x5e>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	69db      	ldr	r3, [r3, #28]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009ef4:	e004      	b.n	8009f00 <MTR_setSpeed+0x68>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	69db      	ldr	r3, [r3, #28]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	619a      	str	r2, [r3, #24]
  }

  return;
 8009f06:	bf00      	nop
 8009f08:	bf00      	nop
}
 8009f0a:	3708      	adds	r7, #8
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	0800c3d4 	.word	0x0800c3d4

08009f14 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b084      	sub	sp, #16
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 8009f22:	4919      	ldr	r1, [pc, #100]	; (8009f88 <PID_init+0x74>)
 8009f24:	2001      	movs	r0, #1
 8009f26:	f7ff fe3f 	bl	8009ba8 <LOG_log>

  p_handle->kp              = p_kp;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	68ba      	ldr	r2, [r7, #8]
 8009f2e:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	69fa      	ldr	r2, [r7, #28]
 8009f46:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a3a      	ldr	r2, [r7, #32]
 8009f4c:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	695b      	ldr	r3, [r3, #20]
 8009f52:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009f56:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfb8      	it	lt
 8009f62:	425b      	neglt	r3, r3
 8009f64:	4293      	cmp	r3, r2
 8009f66:	bfb8      	it	lt
 8009f68:	4613      	movlt	r3, r2
 8009f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6c:	fb02 f203 	mul.w	r2, r2, r3
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 f809 	bl	8009f8c <PID_reset>
  PID_logInfo(p_handle);
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 f87e 	bl	800a07c <PID_logInfo>

  return;
 8009f80:	bf00      	nop
}
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	0800c3f4 	.word	0x0800c3f4

08009f8c <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 8009fb2:	bf00      	nop
}
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bc80      	pop	{r7}
 8009fba:	4770      	bx	lr

08009fbc <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af02      	add	r7, sp, #8
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	68da      	ldr	r2, [r3, #12]
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	fb02 f303 	mul.w	r3, r2, r3
 8009fe6:	440b      	add	r3, r1
 8009fe8:	461a      	mov	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a18      	ldr	r0, [r3, #32]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	4259      	negs	r1, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	699a      	ldr	r2, [r3, #24]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	f000 f9f5 	bl	800a3f0 <UTI_clampIntValue>
 800a006:	4602      	mov	r2, r0
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a010:	697a      	ldr	r2, [r7, #20]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	461a      	mov	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	fbb2 f3f3 	udiv	r3, r2, r3
 800a01c:	461a      	mov	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68fa      	ldr	r2, [r7, #12]
 800a02e:	69d2      	ldr	r2, [r2, #28]
 800a030:	fb02 f203 	mul.w	r2, r2, r3
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	68f9      	ldr	r1, [r7, #12]
 800a03a:	6a09      	ldr	r1, [r1, #32]
 800a03c:	fb01 f303 	mul.w	r3, r1, r3
 800a040:	441a      	add	r2, r3
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	68f9      	ldr	r1, [r7, #12]
 800a048:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a04a:	fb01 f303 	mul.w	r3, r1, r3
 800a04e:	441a      	add	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6919      	ldr	r1, [r3, #16]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	695a      	ldr	r2, [r3, #20]
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	f000 f9c3 	bl	800a3f0 <UTI_clampIntValue>
 800a06a:	4602      	mov	r2, r0
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 800a070:	68bb      	ldr	r3, [r7, #8]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3718      	adds	r7, #24
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af02      	add	r7, sp, #8
 800a082:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6859      	ldr	r1, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	460b      	mov	r3, r1
 800a094:	4913      	ldr	r1, [pc, #76]	; (800a0e4 <PID_logInfo+0x68>)
 800a096:	2001      	movs	r0, #1
 800a098:	f7ff fd86 	bl	8009ba8 <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	69da      	ldr	r2, [r3, #28]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a19      	ldr	r1, [r3, #32]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	490e      	ldr	r1, [pc, #56]	; (800a0e8 <PID_logInfo+0x6c>)
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f7ff fd7a 	bl	8009ba8 <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691a      	ldr	r2, [r3, #16]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6959      	ldr	r1, [r3, #20]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	9300      	str	r3, [sp, #0]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	4909      	ldr	r1, [pc, #36]	; (800a0ec <PID_logInfo+0x70>)
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	f7ff fd6e 	bl	8009ba8 <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68da      	ldr	r2, [r3, #12]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d4:	4906      	ldr	r1, [pc, #24]	; (800a0f0 <PID_logInfo+0x74>)
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	f7ff fd66 	bl	8009ba8 <LOG_log>

  return;
 800a0dc:	bf00      	nop
}
 800a0de:	3708      	adds	r7, #8
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	0800c408 	.word	0x0800c408
 800a0e8:	0800c430 	.word	0x0800c430
 800a0ec:	0800c458 	.word	0x0800c458
 800a0f0:	0800c480 	.word	0x0800c480

0800a0f4 <SFO_dataInit>:

#include "log.h"


void SFO_dataInit(T_SFO_data *p_data)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a0fc:	2210      	movs	r2, #16
 800a0fe:	2100      	movs	r1, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fa2b 	bl	800a55c <memset>

  return;
 800a106:	bf00      	nop
}
 800a108:	3708      	adds	r7, #8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800a118:	4908      	ldr	r1, [pc, #32]	; (800a13c <SFO_init+0x2c>)
 800a11a:	2000      	movs	r0, #0
 800a11c:	f7ff fd44 	bl	8009ba8 <LOG_log>

  p_fifo->head  = NULL;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	609a      	str	r2, [r3, #8]

  return;
 800a132:	bf00      	nop
}
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	0800c4a8 	.word	0x0800c4a8

0800a140 <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	2b0a      	cmp	r3, #10
 800a150:	d105      	bne.n	800a15e <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800a152:	220a      	movs	r2, #10
 800a154:	4917      	ldr	r1, [pc, #92]	; (800a1b4 <SFO_push+0x74>)
 800a156:	2003      	movs	r0, #3
 800a158:	f7ff fd26 	bl	8009ba8 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800a15c:	e027      	b.n	800a1ae <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800a15e:	2014      	movs	r0, #20
 800a160:	f000 f9ec 	bl	800a53c <malloc>
 800a164:	4603      	mov	r3, r0
 800a166:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d104      	bne.n	800a178 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800a16e:	4912      	ldr	r1, [pc, #72]	; (800a1b8 <SFO_push+0x78>)
 800a170:	2003      	movs	r0, #3
 800a172:	f7ff fd19 	bl	8009ba8 <LOG_log>
  return;
 800a176:	e01a      	b.n	800a1ae <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2210      	movs	r2, #16
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	4618      	mov	r0, r3
 800a180:	f000 fb38 	bl	800a7f4 <strncpy>
      l_element->nextElement = p_fifo->head;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	1c5a      	adds	r2, r3, #1
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	609a      	str	r2, [r3, #8]
  return;
 800a1ac:	bf00      	nop
}
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	0800c4c0 	.word	0x0800c4c0
 800a1b8:	0800c4f8 	.word	0x0800c4f8

0800a1bc <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d104      	bne.n	800a1d8 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800a1ce:	491a      	ldr	r1, [pc, #104]	; (800a238 <SFO_pop+0x7c>)
 800a1d0:	2003      	movs	r0, #3
 800a1d2:	f7ff fce9 	bl	8009ba8 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800a1d6:	e02c      	b.n	800a232 <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	2210      	movs	r2, #16
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6838      	ldr	r0, [r7, #0]
 800a1e2:	f000 fb07 	bl	800a7f4 <strncpy>
    free(p_fifo->tail);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f9ae 	bl	800a54c <free>
    if (p_fifo->count > 1)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d918      	bls.n	800a22a <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a1fe:	e002      	b.n	800a206 <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d1f6      	bne.n	800a200 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	1e5a      	subs	r2, r3, #1
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	609a      	str	r2, [r3, #8]
  return;
 800a228:	e003      	b.n	800a232 <SFO_pop+0x76>
      SFO_init(p_fifo);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff ff70 	bl	800a110 <SFO_init>
  return;
 800a230:	bf00      	nop
}
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	0800c52c 	.word	0x0800c52c

0800a23c <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b083      	sub	sp, #12
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	689b      	ldr	r3, [r3, #8]
}
 800a248:	4618      	mov	r0, r3
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bc80      	pop	{r7}
 800a250:	4770      	bx	lr
	...

0800a254 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	689b      	ldr	r3, [r3, #8]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d104      	bne.n	800a26e <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800a264:	4924      	ldr	r1, [pc, #144]	; (800a2f8 <SFO_logInfo+0xa4>)
 800a266:	2001      	movs	r0, #1
 800a268:	f7ff fc9e 	bl	8009ba8 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800a26c:	e040      	b.n	800a2f0 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	461a      	mov	r2, r3
 800a274:	4921      	ldr	r1, [pc, #132]	; (800a2fc <SFO_logInfo+0xa8>)
 800a276:	2001      	movs	r0, #1
 800a278:	f7ff fc96 	bl	8009ba8 <LOG_log>
    l_element = p_fifo->head;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a282:	e031      	b.n	800a2e8 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d10b      	bne.n	800a2a6 <SFO_logInfo+0x52>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	429a      	cmp	r2, r3
 800a296:	d106      	bne.n	800a2a6 <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	461a      	mov	r2, r3
 800a29c:	4918      	ldr	r1, [pc, #96]	; (800a300 <SFO_logInfo+0xac>)
 800a29e:	2001      	movs	r0, #1
 800a2a0:	f7ff fc82 	bl	8009ba8 <LOG_log>
 800a2a4:	e01d      	b.n	800a2e2 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d106      	bne.n	800a2be <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	4913      	ldr	r1, [pc, #76]	; (800a304 <SFO_logInfo+0xb0>)
 800a2b6:	2001      	movs	r0, #1
 800a2b8:	f7ff fc76 	bl	8009ba8 <LOG_log>
 800a2bc:	e011      	b.n	800a2e2 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d106      	bne.n	800a2d6 <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	490e      	ldr	r1, [pc, #56]	; (800a308 <SFO_logInfo+0xb4>)
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f7ff fc6a 	bl	8009ba8 <LOG_log>
 800a2d4:	e005      	b.n	800a2e2 <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	490c      	ldr	r1, [pc, #48]	; (800a30c <SFO_logInfo+0xb8>)
 800a2dc:	2001      	movs	r0, #1
 800a2de:	f7ff fc63 	bl	8009ba8 <LOG_log>
      l_element = l_element->nextElement;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d1ca      	bne.n	800a284 <SFO_logInfo+0x30>
  return;
 800a2ee:	bf00      	nop
}
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	0800c558 	.word	0x0800c558
 800a2fc:	0800c570 	.word	0x0800c570
 800a300:	0800c58c 	.word	0x0800c58c
 800a304:	0800c5a4 	.word	0x0800c5a4
 800a308:	0800c5b4 	.word	0x0800c5b4
 800a30c:	0800c5c4 	.word	0x0800c5c4

0800a310 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800a318:	4905      	ldr	r1, [pc, #20]	; (800a330 <UTI_init+0x20>)
 800a31a:	2001      	movs	r0, #1
 800a31c:	f7ff fc44 	bl	8009ba8 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800a320:	4a04      	ldr	r2, [pc, #16]	; (800a334 <UTI_init+0x24>)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6013      	str	r3, [r2, #0]

  return;
 800a326:	bf00      	nop
}
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	0800c5d4 	.word	0x0800c5d4
 800a334:	20000294 	.word	0x20000294

0800a338 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800a342:	4b09      	ldr	r3, [pc, #36]	; (800a368 <UTI_delayUs+0x30>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2200      	movs	r2, #0
 800a34a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800a34c:	bf00      	nop
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <UTI_delayUs+0x30>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a356:	88fb      	ldrh	r3, [r7, #6]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d3f8      	bcc.n	800a34e <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800a35c:	bf00      	nop
}
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	20000294 	.word	0x20000294

0800a36c <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2200      	movs	r2, #0
 800a378:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	70da      	strb	r2, [r3, #3]

  return;
 800a38c:	bf00      	nop
}
 800a38e:	370c      	adds	r7, #12
 800a390:	46bd      	mov	sp, r7
 800a392:	bc80      	pop	{r7}
 800a394:	4770      	bx	lr

0800a396 <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	709a      	strb	r2, [r3, #2]

  return;
 800a3b0:	bf00      	nop
}
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bc80      	pop	{r7}
 800a3b8:	4770      	bx	lr

0800a3ba <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a3cc:	fb03 f202 	mul.w	r2, r3, r2
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	011b      	lsls	r3, r3, #4
 800a3da:	1a5b      	subs	r3, r3, r1
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	7892      	ldrb	r2, [r2, #2]
 800a3e4:	4413      	add	r3, r2
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60f8      	str	r0, [r7, #12]
 800a3f8:	60b9      	str	r1, [r7, #8]
 800a3fa:	607a      	str	r2, [r7, #4]
 800a3fc:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	429a      	cmp	r2, r3
 800a404:	da08      	bge.n	800a418 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800a406:	78fb      	ldrb	r3, [r7, #3]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d002      	beq.n	800a412 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	e011      	b.n	800a436 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a412:	6a3b      	ldr	r3, [r7, #32]
 800a414:	617b      	str	r3, [r7, #20]
 800a416:	e00e      	b.n	800a436 <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800a418:	68fa      	ldr	r2, [r7, #12]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	dd08      	ble.n	800a432 <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e004      	b.n	800a436 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a42c:	6a3b      	ldr	r3, [r7, #32]
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	e001      	b.n	800a436 <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800a436:	697b      	ldr	r3, [r7, #20]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	371c      	adds	r7, #28
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bc80      	pop	{r7}
 800a440:	4770      	bx	lr

0800a442 <UTI_normalizeIntValue>:

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800a442:	b5b0      	push	{r4, r5, r7, lr}
 800a444:	b086      	sub	sp, #24
 800a446:	af00      	add	r7, sp, #0
 800a448:	60f8      	str	r0, [r7, #12]
 800a44a:	60b9      	str	r1, [r7, #8]
 800a44c:	607a      	str	r2, [r7, #4]
 800a44e:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800a450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a452:	f7f5 ffa1 	bl	8000398 <__aeabi_i2f>
 800a456:	4604      	mov	r4, r0
 800a458:	6838      	ldr	r0, [r7, #0]
 800a45a:	f7f5 ff9d 	bl	8000398 <__aeabi_i2f>
 800a45e:	4603      	mov	r3, r0
 800a460:	4619      	mov	r1, r3
 800a462:	4620      	mov	r0, r4
 800a464:	f7f5 fee2 	bl	800022c <__aeabi_fsub>
 800a468:	4603      	mov	r3, r0
 800a46a:	461d      	mov	r5, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f7f5 ff93 	bl	8000398 <__aeabi_i2f>
 800a472:	4604      	mov	r4, r0
 800a474:	68b8      	ldr	r0, [r7, #8]
 800a476:	f7f5 ff8f 	bl	8000398 <__aeabi_i2f>
 800a47a:	4603      	mov	r3, r0
 800a47c:	4619      	mov	r1, r3
 800a47e:	4620      	mov	r0, r4
 800a480:	f7f5 fed4 	bl	800022c <__aeabi_fsub>
 800a484:	4603      	mov	r3, r0
 800a486:	4619      	mov	r1, r3
 800a488:	4628      	mov	r0, r5
 800a48a:	f7f6 f88d 	bl	80005a8 <__aeabi_fdiv>
 800a48e:	4603      	mov	r3, r0
 800a490:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	1ad3      	subs	r3, r2, r3
 800a498:	4618      	mov	r0, r3
 800a49a:	f7f5 ff7d 	bl	8000398 <__aeabi_i2f>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	6939      	ldr	r1, [r7, #16]
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7f5 ffcc 	bl	8000440 <__aeabi_fmul>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	461c      	mov	r4, r3
 800a4ac:	6838      	ldr	r0, [r7, #0]
 800a4ae:	f7f5 ff73 	bl	8000398 <__aeabi_i2f>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f7f5 feba 	bl	8000230 <__addsf3>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800a4c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a4ce:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800a4d0:	6978      	ldr	r0, [r7, #20]
 800a4d2:	f7f6 f905 	bl	80006e0 <__aeabi_f2iz>
 800a4d6:	4603      	mov	r3, r0
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3718      	adds	r7, #24
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bdb0      	pop	{r4, r5, r7, pc}

0800a4e0 <atoi>:
 800a4e0:	220a      	movs	r2, #10
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	f000 ba20 	b.w	800a928 <strtol>

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	2000001c 	.word	0x2000001c

0800a4f4 <__libc_init_array>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	4d0c      	ldr	r5, [pc, #48]	; (800a52c <__libc_init_array+0x38>)
 800a4fa:	4c0d      	ldr	r4, [pc, #52]	; (800a530 <__libc_init_array+0x3c>)
 800a4fc:	1b64      	subs	r4, r4, r5
 800a4fe:	10a4      	asrs	r4, r4, #2
 800a500:	42a6      	cmp	r6, r4
 800a502:	d109      	bne.n	800a518 <__libc_init_array+0x24>
 800a504:	f001 f8c2 	bl	800b68c <_init>
 800a508:	2600      	movs	r6, #0
 800a50a:	4d0a      	ldr	r5, [pc, #40]	; (800a534 <__libc_init_array+0x40>)
 800a50c:	4c0a      	ldr	r4, [pc, #40]	; (800a538 <__libc_init_array+0x44>)
 800a50e:	1b64      	subs	r4, r4, r5
 800a510:	10a4      	asrs	r4, r4, #2
 800a512:	42a6      	cmp	r6, r4
 800a514:	d105      	bne.n	800a522 <__libc_init_array+0x2e>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51c:	4798      	blx	r3
 800a51e:	3601      	adds	r6, #1
 800a520:	e7ee      	b.n	800a500 <__libc_init_array+0xc>
 800a522:	f855 3b04 	ldr.w	r3, [r5], #4
 800a526:	4798      	blx	r3
 800a528:	3601      	adds	r6, #1
 800a52a:	e7f2      	b.n	800a512 <__libc_init_array+0x1e>
 800a52c:	0800c7a0 	.word	0x0800c7a0
 800a530:	0800c7a0 	.word	0x0800c7a0
 800a534:	0800c7a0 	.word	0x0800c7a0
 800a538:	0800c7a4 	.word	0x0800c7a4

0800a53c <malloc>:
 800a53c:	4b02      	ldr	r3, [pc, #8]	; (800a548 <malloc+0xc>)
 800a53e:	4601      	mov	r1, r0
 800a540:	6818      	ldr	r0, [r3, #0]
 800a542:	f000 b85f 	b.w	800a604 <_malloc_r>
 800a546:	bf00      	nop
 800a548:	2000001c 	.word	0x2000001c

0800a54c <free>:
 800a54c:	4b02      	ldr	r3, [pc, #8]	; (800a558 <free+0xc>)
 800a54e:	4601      	mov	r1, r0
 800a550:	6818      	ldr	r0, [r3, #0]
 800a552:	f000 b80b 	b.w	800a56c <_free_r>
 800a556:	bf00      	nop
 800a558:	2000001c 	.word	0x2000001c

0800a55c <memset>:
 800a55c:	4603      	mov	r3, r0
 800a55e:	4402      	add	r2, r0
 800a560:	4293      	cmp	r3, r2
 800a562:	d100      	bne.n	800a566 <memset+0xa>
 800a564:	4770      	bx	lr
 800a566:	f803 1b01 	strb.w	r1, [r3], #1
 800a56a:	e7f9      	b.n	800a560 <memset+0x4>

0800a56c <_free_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4605      	mov	r5, r0
 800a570:	2900      	cmp	r1, #0
 800a572:	d043      	beq.n	800a5fc <_free_r+0x90>
 800a574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a578:	1f0c      	subs	r4, r1, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	bfb8      	it	lt
 800a57e:	18e4      	addlt	r4, r4, r3
 800a580:	f000 fcd0 	bl	800af24 <__malloc_lock>
 800a584:	4a1e      	ldr	r2, [pc, #120]	; (800a600 <_free_r+0x94>)
 800a586:	6813      	ldr	r3, [r2, #0]
 800a588:	4610      	mov	r0, r2
 800a58a:	b933      	cbnz	r3, 800a59a <_free_r+0x2e>
 800a58c:	6063      	str	r3, [r4, #4]
 800a58e:	6014      	str	r4, [r2, #0]
 800a590:	4628      	mov	r0, r5
 800a592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a596:	f000 bccb 	b.w	800af30 <__malloc_unlock>
 800a59a:	42a3      	cmp	r3, r4
 800a59c:	d90a      	bls.n	800a5b4 <_free_r+0x48>
 800a59e:	6821      	ldr	r1, [r4, #0]
 800a5a0:	1862      	adds	r2, r4, r1
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	bf01      	itttt	eq
 800a5a6:	681a      	ldreq	r2, [r3, #0]
 800a5a8:	685b      	ldreq	r3, [r3, #4]
 800a5aa:	1852      	addeq	r2, r2, r1
 800a5ac:	6022      	streq	r2, [r4, #0]
 800a5ae:	6063      	str	r3, [r4, #4]
 800a5b0:	6004      	str	r4, [r0, #0]
 800a5b2:	e7ed      	b.n	800a590 <_free_r+0x24>
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	b10b      	cbz	r3, 800a5be <_free_r+0x52>
 800a5ba:	42a3      	cmp	r3, r4
 800a5bc:	d9fa      	bls.n	800a5b4 <_free_r+0x48>
 800a5be:	6811      	ldr	r1, [r2, #0]
 800a5c0:	1850      	adds	r0, r2, r1
 800a5c2:	42a0      	cmp	r0, r4
 800a5c4:	d10b      	bne.n	800a5de <_free_r+0x72>
 800a5c6:	6820      	ldr	r0, [r4, #0]
 800a5c8:	4401      	add	r1, r0
 800a5ca:	1850      	adds	r0, r2, r1
 800a5cc:	4283      	cmp	r3, r0
 800a5ce:	6011      	str	r1, [r2, #0]
 800a5d0:	d1de      	bne.n	800a590 <_free_r+0x24>
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	6053      	str	r3, [r2, #4]
 800a5dc:	e7d8      	b.n	800a590 <_free_r+0x24>
 800a5de:	d902      	bls.n	800a5e6 <_free_r+0x7a>
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	e7d4      	b.n	800a590 <_free_r+0x24>
 800a5e6:	6820      	ldr	r0, [r4, #0]
 800a5e8:	1821      	adds	r1, r4, r0
 800a5ea:	428b      	cmp	r3, r1
 800a5ec:	bf01      	itttt	eq
 800a5ee:	6819      	ldreq	r1, [r3, #0]
 800a5f0:	685b      	ldreq	r3, [r3, #4]
 800a5f2:	1809      	addeq	r1, r1, r0
 800a5f4:	6021      	streq	r1, [r4, #0]
 800a5f6:	6063      	str	r3, [r4, #4]
 800a5f8:	6054      	str	r4, [r2, #4]
 800a5fa:	e7c9      	b.n	800a590 <_free_r+0x24>
 800a5fc:	bd38      	pop	{r3, r4, r5, pc}
 800a5fe:	bf00      	nop
 800a600:	20000298 	.word	0x20000298

0800a604 <_malloc_r>:
 800a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a606:	1ccd      	adds	r5, r1, #3
 800a608:	f025 0503 	bic.w	r5, r5, #3
 800a60c:	3508      	adds	r5, #8
 800a60e:	2d0c      	cmp	r5, #12
 800a610:	bf38      	it	cc
 800a612:	250c      	movcc	r5, #12
 800a614:	2d00      	cmp	r5, #0
 800a616:	4606      	mov	r6, r0
 800a618:	db01      	blt.n	800a61e <_malloc_r+0x1a>
 800a61a:	42a9      	cmp	r1, r5
 800a61c:	d903      	bls.n	800a626 <_malloc_r+0x22>
 800a61e:	230c      	movs	r3, #12
 800a620:	6033      	str	r3, [r6, #0]
 800a622:	2000      	movs	r0, #0
 800a624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a626:	f000 fc7d 	bl	800af24 <__malloc_lock>
 800a62a:	4921      	ldr	r1, [pc, #132]	; (800a6b0 <_malloc_r+0xac>)
 800a62c:	680a      	ldr	r2, [r1, #0]
 800a62e:	4614      	mov	r4, r2
 800a630:	b99c      	cbnz	r4, 800a65a <_malloc_r+0x56>
 800a632:	4f20      	ldr	r7, [pc, #128]	; (800a6b4 <_malloc_r+0xb0>)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	b923      	cbnz	r3, 800a642 <_malloc_r+0x3e>
 800a638:	4621      	mov	r1, r4
 800a63a:	4630      	mov	r0, r6
 800a63c:	f000 f8ca 	bl	800a7d4 <_sbrk_r>
 800a640:	6038      	str	r0, [r7, #0]
 800a642:	4629      	mov	r1, r5
 800a644:	4630      	mov	r0, r6
 800a646:	f000 f8c5 	bl	800a7d4 <_sbrk_r>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d123      	bne.n	800a696 <_malloc_r+0x92>
 800a64e:	230c      	movs	r3, #12
 800a650:	4630      	mov	r0, r6
 800a652:	6033      	str	r3, [r6, #0]
 800a654:	f000 fc6c 	bl	800af30 <__malloc_unlock>
 800a658:	e7e3      	b.n	800a622 <_malloc_r+0x1e>
 800a65a:	6823      	ldr	r3, [r4, #0]
 800a65c:	1b5b      	subs	r3, r3, r5
 800a65e:	d417      	bmi.n	800a690 <_malloc_r+0x8c>
 800a660:	2b0b      	cmp	r3, #11
 800a662:	d903      	bls.n	800a66c <_malloc_r+0x68>
 800a664:	6023      	str	r3, [r4, #0]
 800a666:	441c      	add	r4, r3
 800a668:	6025      	str	r5, [r4, #0]
 800a66a:	e004      	b.n	800a676 <_malloc_r+0x72>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	42a2      	cmp	r2, r4
 800a670:	bf0c      	ite	eq
 800a672:	600b      	streq	r3, [r1, #0]
 800a674:	6053      	strne	r3, [r2, #4]
 800a676:	4630      	mov	r0, r6
 800a678:	f000 fc5a 	bl	800af30 <__malloc_unlock>
 800a67c:	f104 000b 	add.w	r0, r4, #11
 800a680:	1d23      	adds	r3, r4, #4
 800a682:	f020 0007 	bic.w	r0, r0, #7
 800a686:	1ac2      	subs	r2, r0, r3
 800a688:	d0cc      	beq.n	800a624 <_malloc_r+0x20>
 800a68a:	1a1b      	subs	r3, r3, r0
 800a68c:	50a3      	str	r3, [r4, r2]
 800a68e:	e7c9      	b.n	800a624 <_malloc_r+0x20>
 800a690:	4622      	mov	r2, r4
 800a692:	6864      	ldr	r4, [r4, #4]
 800a694:	e7cc      	b.n	800a630 <_malloc_r+0x2c>
 800a696:	1cc4      	adds	r4, r0, #3
 800a698:	f024 0403 	bic.w	r4, r4, #3
 800a69c:	42a0      	cmp	r0, r4
 800a69e:	d0e3      	beq.n	800a668 <_malloc_r+0x64>
 800a6a0:	1a21      	subs	r1, r4, r0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	f000 f896 	bl	800a7d4 <_sbrk_r>
 800a6a8:	3001      	adds	r0, #1
 800a6aa:	d1dd      	bne.n	800a668 <_malloc_r+0x64>
 800a6ac:	e7cf      	b.n	800a64e <_malloc_r+0x4a>
 800a6ae:	bf00      	nop
 800a6b0:	20000298 	.word	0x20000298
 800a6b4:	2000029c 	.word	0x2000029c

0800a6b8 <iprintf>:
 800a6b8:	b40f      	push	{r0, r1, r2, r3}
 800a6ba:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <iprintf+0x2c>)
 800a6bc:	b513      	push	{r0, r1, r4, lr}
 800a6be:	681c      	ldr	r4, [r3, #0]
 800a6c0:	b124      	cbz	r4, 800a6cc <iprintf+0x14>
 800a6c2:	69a3      	ldr	r3, [r4, #24]
 800a6c4:	b913      	cbnz	r3, 800a6cc <iprintf+0x14>
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f000 fb28 	bl	800ad1c <__sinit>
 800a6cc:	ab05      	add	r3, sp, #20
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	9a04      	ldr	r2, [sp, #16]
 800a6d2:	68a1      	ldr	r1, [r4, #8]
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f000 fc59 	bl	800af8c <_vfiprintf_r>
 800a6da:	b002      	add	sp, #8
 800a6dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e0:	b004      	add	sp, #16
 800a6e2:	4770      	bx	lr
 800a6e4:	2000001c 	.word	0x2000001c

0800a6e8 <_puts_r>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	460e      	mov	r6, r1
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	b118      	cbz	r0, 800a6f8 <_puts_r+0x10>
 800a6f0:	6983      	ldr	r3, [r0, #24]
 800a6f2:	b90b      	cbnz	r3, 800a6f8 <_puts_r+0x10>
 800a6f4:	f000 fb12 	bl	800ad1c <__sinit>
 800a6f8:	69ab      	ldr	r3, [r5, #24]
 800a6fa:	68ac      	ldr	r4, [r5, #8]
 800a6fc:	b913      	cbnz	r3, 800a704 <_puts_r+0x1c>
 800a6fe:	4628      	mov	r0, r5
 800a700:	f000 fb0c 	bl	800ad1c <__sinit>
 800a704:	4b2c      	ldr	r3, [pc, #176]	; (800a7b8 <_puts_r+0xd0>)
 800a706:	429c      	cmp	r4, r3
 800a708:	d120      	bne.n	800a74c <_puts_r+0x64>
 800a70a:	686c      	ldr	r4, [r5, #4]
 800a70c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a70e:	07db      	lsls	r3, r3, #31
 800a710:	d405      	bmi.n	800a71e <_puts_r+0x36>
 800a712:	89a3      	ldrh	r3, [r4, #12]
 800a714:	0598      	lsls	r0, r3, #22
 800a716:	d402      	bmi.n	800a71e <_puts_r+0x36>
 800a718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a71a:	f000 fb9d 	bl	800ae58 <__retarget_lock_acquire_recursive>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	0719      	lsls	r1, r3, #28
 800a722:	d51d      	bpl.n	800a760 <_puts_r+0x78>
 800a724:	6923      	ldr	r3, [r4, #16]
 800a726:	b1db      	cbz	r3, 800a760 <_puts_r+0x78>
 800a728:	3e01      	subs	r6, #1
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a730:	3b01      	subs	r3, #1
 800a732:	60a3      	str	r3, [r4, #8]
 800a734:	bb39      	cbnz	r1, 800a786 <_puts_r+0x9e>
 800a736:	2b00      	cmp	r3, #0
 800a738:	da38      	bge.n	800a7ac <_puts_r+0xc4>
 800a73a:	4622      	mov	r2, r4
 800a73c:	210a      	movs	r1, #10
 800a73e:	4628      	mov	r0, r5
 800a740:	f000 f912 	bl	800a968 <__swbuf_r>
 800a744:	3001      	adds	r0, #1
 800a746:	d011      	beq.n	800a76c <_puts_r+0x84>
 800a748:	250a      	movs	r5, #10
 800a74a:	e011      	b.n	800a770 <_puts_r+0x88>
 800a74c:	4b1b      	ldr	r3, [pc, #108]	; (800a7bc <_puts_r+0xd4>)
 800a74e:	429c      	cmp	r4, r3
 800a750:	d101      	bne.n	800a756 <_puts_r+0x6e>
 800a752:	68ac      	ldr	r4, [r5, #8]
 800a754:	e7da      	b.n	800a70c <_puts_r+0x24>
 800a756:	4b1a      	ldr	r3, [pc, #104]	; (800a7c0 <_puts_r+0xd8>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	bf08      	it	eq
 800a75c:	68ec      	ldreq	r4, [r5, #12]
 800a75e:	e7d5      	b.n	800a70c <_puts_r+0x24>
 800a760:	4621      	mov	r1, r4
 800a762:	4628      	mov	r0, r5
 800a764:	f000 f952 	bl	800aa0c <__swsetup_r>
 800a768:	2800      	cmp	r0, #0
 800a76a:	d0dd      	beq.n	800a728 <_puts_r+0x40>
 800a76c:	f04f 35ff 	mov.w	r5, #4294967295
 800a770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a772:	07da      	lsls	r2, r3, #31
 800a774:	d405      	bmi.n	800a782 <_puts_r+0x9a>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	059b      	lsls	r3, r3, #22
 800a77a:	d402      	bmi.n	800a782 <_puts_r+0x9a>
 800a77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a77e:	f000 fb6c 	bl	800ae5a <__retarget_lock_release_recursive>
 800a782:	4628      	mov	r0, r5
 800a784:	bd70      	pop	{r4, r5, r6, pc}
 800a786:	2b00      	cmp	r3, #0
 800a788:	da04      	bge.n	800a794 <_puts_r+0xac>
 800a78a:	69a2      	ldr	r2, [r4, #24]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	dc06      	bgt.n	800a79e <_puts_r+0xb6>
 800a790:	290a      	cmp	r1, #10
 800a792:	d004      	beq.n	800a79e <_puts_r+0xb6>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	1c5a      	adds	r2, r3, #1
 800a798:	6022      	str	r2, [r4, #0]
 800a79a:	7019      	strb	r1, [r3, #0]
 800a79c:	e7c5      	b.n	800a72a <_puts_r+0x42>
 800a79e:	4622      	mov	r2, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 f8e1 	bl	800a968 <__swbuf_r>
 800a7a6:	3001      	adds	r0, #1
 800a7a8:	d1bf      	bne.n	800a72a <_puts_r+0x42>
 800a7aa:	e7df      	b.n	800a76c <_puts_r+0x84>
 800a7ac:	250a      	movs	r5, #10
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	1c5a      	adds	r2, r3, #1
 800a7b2:	6022      	str	r2, [r4, #0]
 800a7b4:	701d      	strb	r5, [r3, #0]
 800a7b6:	e7db      	b.n	800a770 <_puts_r+0x88>
 800a7b8:	0800c72c 	.word	0x0800c72c
 800a7bc:	0800c74c 	.word	0x0800c74c
 800a7c0:	0800c70c 	.word	0x0800c70c

0800a7c4 <puts>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <puts+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f7ff bf8d 	b.w	800a6e8 <_puts_r>
 800a7ce:	bf00      	nop
 800a7d0:	2000001c 	.word	0x2000001c

0800a7d4 <_sbrk_r>:
 800a7d4:	b538      	push	{r3, r4, r5, lr}
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4d05      	ldr	r5, [pc, #20]	; (800a7f0 <_sbrk_r+0x1c>)
 800a7da:	4604      	mov	r4, r0
 800a7dc:	4608      	mov	r0, r1
 800a7de:	602b      	str	r3, [r5, #0]
 800a7e0:	f7f7 fb58 	bl	8001e94 <_sbrk>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	d102      	bne.n	800a7ee <_sbrk_r+0x1a>
 800a7e8:	682b      	ldr	r3, [r5, #0]
 800a7ea:	b103      	cbz	r3, 800a7ee <_sbrk_r+0x1a>
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	bd38      	pop	{r3, r4, r5, pc}
 800a7f0:	2000097c 	.word	0x2000097c

0800a7f4 <strncpy>:
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	b510      	push	{r4, lr}
 800a7f8:	3901      	subs	r1, #1
 800a7fa:	b132      	cbz	r2, 800a80a <strncpy+0x16>
 800a7fc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a800:	3a01      	subs	r2, #1
 800a802:	f803 4b01 	strb.w	r4, [r3], #1
 800a806:	2c00      	cmp	r4, #0
 800a808:	d1f7      	bne.n	800a7fa <strncpy+0x6>
 800a80a:	2100      	movs	r1, #0
 800a80c:	441a      	add	r2, r3
 800a80e:	4293      	cmp	r3, r2
 800a810:	d100      	bne.n	800a814 <strncpy+0x20>
 800a812:	bd10      	pop	{r4, pc}
 800a814:	f803 1b01 	strb.w	r1, [r3], #1
 800a818:	e7f9      	b.n	800a80e <strncpy+0x1a>
	...

0800a81c <_strtol_l.isra.0>:
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a822:	4686      	mov	lr, r0
 800a824:	d001      	beq.n	800a82a <_strtol_l.isra.0+0xe>
 800a826:	2b24      	cmp	r3, #36	; 0x24
 800a828:	d906      	bls.n	800a838 <_strtol_l.isra.0+0x1c>
 800a82a:	f7ff fe5d 	bl	800a4e8 <__errno>
 800a82e:	2316      	movs	r3, #22
 800a830:	6003      	str	r3, [r0, #0]
 800a832:	2000      	movs	r0, #0
 800a834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a838:	468c      	mov	ip, r1
 800a83a:	4e3a      	ldr	r6, [pc, #232]	; (800a924 <_strtol_l.isra.0+0x108>)
 800a83c:	4660      	mov	r0, ip
 800a83e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a842:	5da5      	ldrb	r5, [r4, r6]
 800a844:	f015 0508 	ands.w	r5, r5, #8
 800a848:	d1f8      	bne.n	800a83c <_strtol_l.isra.0+0x20>
 800a84a:	2c2d      	cmp	r4, #45	; 0x2d
 800a84c:	d133      	bne.n	800a8b6 <_strtol_l.isra.0+0x9a>
 800a84e:	f04f 0801 	mov.w	r8, #1
 800a852:	f89c 4000 	ldrb.w	r4, [ip]
 800a856:	f100 0c02 	add.w	ip, r0, #2
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d05d      	beq.n	800a91a <_strtol_l.isra.0+0xfe>
 800a85e:	2b10      	cmp	r3, #16
 800a860:	d10c      	bne.n	800a87c <_strtol_l.isra.0+0x60>
 800a862:	2c30      	cmp	r4, #48	; 0x30
 800a864:	d10a      	bne.n	800a87c <_strtol_l.isra.0+0x60>
 800a866:	f89c 0000 	ldrb.w	r0, [ip]
 800a86a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a86e:	2858      	cmp	r0, #88	; 0x58
 800a870:	d14e      	bne.n	800a910 <_strtol_l.isra.0+0xf4>
 800a872:	2310      	movs	r3, #16
 800a874:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a878:	f10c 0c02 	add.w	ip, ip, #2
 800a87c:	2500      	movs	r5, #0
 800a87e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a882:	3f01      	subs	r7, #1
 800a884:	fbb7 f9f3 	udiv	r9, r7, r3
 800a888:	4628      	mov	r0, r5
 800a88a:	fb03 7a19 	mls	sl, r3, r9, r7
 800a88e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a892:	2e09      	cmp	r6, #9
 800a894:	d818      	bhi.n	800a8c8 <_strtol_l.isra.0+0xac>
 800a896:	4634      	mov	r4, r6
 800a898:	42a3      	cmp	r3, r4
 800a89a:	dd24      	ble.n	800a8e6 <_strtol_l.isra.0+0xca>
 800a89c:	2d00      	cmp	r5, #0
 800a89e:	db1f      	blt.n	800a8e0 <_strtol_l.isra.0+0xc4>
 800a8a0:	4581      	cmp	r9, r0
 800a8a2:	d31d      	bcc.n	800a8e0 <_strtol_l.isra.0+0xc4>
 800a8a4:	d101      	bne.n	800a8aa <_strtol_l.isra.0+0x8e>
 800a8a6:	45a2      	cmp	sl, r4
 800a8a8:	db1a      	blt.n	800a8e0 <_strtol_l.isra.0+0xc4>
 800a8aa:	2501      	movs	r5, #1
 800a8ac:	fb00 4003 	mla	r0, r0, r3, r4
 800a8b0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a8b4:	e7eb      	b.n	800a88e <_strtol_l.isra.0+0x72>
 800a8b6:	2c2b      	cmp	r4, #43	; 0x2b
 800a8b8:	bf08      	it	eq
 800a8ba:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a8be:	46a8      	mov	r8, r5
 800a8c0:	bf08      	it	eq
 800a8c2:	f100 0c02 	addeq.w	ip, r0, #2
 800a8c6:	e7c8      	b.n	800a85a <_strtol_l.isra.0+0x3e>
 800a8c8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a8cc:	2e19      	cmp	r6, #25
 800a8ce:	d801      	bhi.n	800a8d4 <_strtol_l.isra.0+0xb8>
 800a8d0:	3c37      	subs	r4, #55	; 0x37
 800a8d2:	e7e1      	b.n	800a898 <_strtol_l.isra.0+0x7c>
 800a8d4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a8d8:	2e19      	cmp	r6, #25
 800a8da:	d804      	bhi.n	800a8e6 <_strtol_l.isra.0+0xca>
 800a8dc:	3c57      	subs	r4, #87	; 0x57
 800a8de:	e7db      	b.n	800a898 <_strtol_l.isra.0+0x7c>
 800a8e0:	f04f 35ff 	mov.w	r5, #4294967295
 800a8e4:	e7e4      	b.n	800a8b0 <_strtol_l.isra.0+0x94>
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	da08      	bge.n	800a8fc <_strtol_l.isra.0+0xe0>
 800a8ea:	2322      	movs	r3, #34	; 0x22
 800a8ec:	4638      	mov	r0, r7
 800a8ee:	f8ce 3000 	str.w	r3, [lr]
 800a8f2:	2a00      	cmp	r2, #0
 800a8f4:	d09e      	beq.n	800a834 <_strtol_l.isra.0+0x18>
 800a8f6:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a8fa:	e007      	b.n	800a90c <_strtol_l.isra.0+0xf0>
 800a8fc:	f1b8 0f00 	cmp.w	r8, #0
 800a900:	d000      	beq.n	800a904 <_strtol_l.isra.0+0xe8>
 800a902:	4240      	negs	r0, r0
 800a904:	2a00      	cmp	r2, #0
 800a906:	d095      	beq.n	800a834 <_strtol_l.isra.0+0x18>
 800a908:	2d00      	cmp	r5, #0
 800a90a:	d1f4      	bne.n	800a8f6 <_strtol_l.isra.0+0xda>
 800a90c:	6011      	str	r1, [r2, #0]
 800a90e:	e791      	b.n	800a834 <_strtol_l.isra.0+0x18>
 800a910:	2430      	movs	r4, #48	; 0x30
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1b2      	bne.n	800a87c <_strtol_l.isra.0+0x60>
 800a916:	2308      	movs	r3, #8
 800a918:	e7b0      	b.n	800a87c <_strtol_l.isra.0+0x60>
 800a91a:	2c30      	cmp	r4, #48	; 0x30
 800a91c:	d0a3      	beq.n	800a866 <_strtol_l.isra.0+0x4a>
 800a91e:	230a      	movs	r3, #10
 800a920:	e7ac      	b.n	800a87c <_strtol_l.isra.0+0x60>
 800a922:	bf00      	nop
 800a924:	0800c609 	.word	0x0800c609

0800a928 <strtol>:
 800a928:	4613      	mov	r3, r2
 800a92a:	460a      	mov	r2, r1
 800a92c:	4601      	mov	r1, r0
 800a92e:	4802      	ldr	r0, [pc, #8]	; (800a938 <strtol+0x10>)
 800a930:	6800      	ldr	r0, [r0, #0]
 800a932:	f7ff bf73 	b.w	800a81c <_strtol_l.isra.0>
 800a936:	bf00      	nop
 800a938:	2000001c 	.word	0x2000001c

0800a93c <viprintf>:
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <viprintf+0x28>)
 800a93e:	b570      	push	{r4, r5, r6, lr}
 800a940:	681c      	ldr	r4, [r3, #0]
 800a942:	4605      	mov	r5, r0
 800a944:	460e      	mov	r6, r1
 800a946:	b124      	cbz	r4, 800a952 <viprintf+0x16>
 800a948:	69a3      	ldr	r3, [r4, #24]
 800a94a:	b913      	cbnz	r3, 800a952 <viprintf+0x16>
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 f9e5 	bl	800ad1c <__sinit>
 800a952:	4633      	mov	r3, r6
 800a954:	462a      	mov	r2, r5
 800a956:	4620      	mov	r0, r4
 800a958:	68a1      	ldr	r1, [r4, #8]
 800a95a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a95e:	f000 bb15 	b.w	800af8c <_vfiprintf_r>
 800a962:	bf00      	nop
 800a964:	2000001c 	.word	0x2000001c

0800a968 <__swbuf_r>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	460e      	mov	r6, r1
 800a96c:	4614      	mov	r4, r2
 800a96e:	4605      	mov	r5, r0
 800a970:	b118      	cbz	r0, 800a97a <__swbuf_r+0x12>
 800a972:	6983      	ldr	r3, [r0, #24]
 800a974:	b90b      	cbnz	r3, 800a97a <__swbuf_r+0x12>
 800a976:	f000 f9d1 	bl	800ad1c <__sinit>
 800a97a:	4b21      	ldr	r3, [pc, #132]	; (800aa00 <__swbuf_r+0x98>)
 800a97c:	429c      	cmp	r4, r3
 800a97e:	d12b      	bne.n	800a9d8 <__swbuf_r+0x70>
 800a980:	686c      	ldr	r4, [r5, #4]
 800a982:	69a3      	ldr	r3, [r4, #24]
 800a984:	60a3      	str	r3, [r4, #8]
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	071a      	lsls	r2, r3, #28
 800a98a:	d52f      	bpl.n	800a9ec <__swbuf_r+0x84>
 800a98c:	6923      	ldr	r3, [r4, #16]
 800a98e:	b36b      	cbz	r3, 800a9ec <__swbuf_r+0x84>
 800a990:	6923      	ldr	r3, [r4, #16]
 800a992:	6820      	ldr	r0, [r4, #0]
 800a994:	b2f6      	uxtb	r6, r6
 800a996:	1ac0      	subs	r0, r0, r3
 800a998:	6963      	ldr	r3, [r4, #20]
 800a99a:	4637      	mov	r7, r6
 800a99c:	4283      	cmp	r3, r0
 800a99e:	dc04      	bgt.n	800a9aa <__swbuf_r+0x42>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f000 f926 	bl	800abf4 <_fflush_r>
 800a9a8:	bb30      	cbnz	r0, 800a9f8 <__swbuf_r+0x90>
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	3001      	adds	r0, #1
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	60a3      	str	r3, [r4, #8]
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	6022      	str	r2, [r4, #0]
 800a9b8:	701e      	strb	r6, [r3, #0]
 800a9ba:	6963      	ldr	r3, [r4, #20]
 800a9bc:	4283      	cmp	r3, r0
 800a9be:	d004      	beq.n	800a9ca <__swbuf_r+0x62>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	07db      	lsls	r3, r3, #31
 800a9c4:	d506      	bpl.n	800a9d4 <__swbuf_r+0x6c>
 800a9c6:	2e0a      	cmp	r6, #10
 800a9c8:	d104      	bne.n	800a9d4 <__swbuf_r+0x6c>
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	f000 f911 	bl	800abf4 <_fflush_r>
 800a9d2:	b988      	cbnz	r0, 800a9f8 <__swbuf_r+0x90>
 800a9d4:	4638      	mov	r0, r7
 800a9d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9d8:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <__swbuf_r+0x9c>)
 800a9da:	429c      	cmp	r4, r3
 800a9dc:	d101      	bne.n	800a9e2 <__swbuf_r+0x7a>
 800a9de:	68ac      	ldr	r4, [r5, #8]
 800a9e0:	e7cf      	b.n	800a982 <__swbuf_r+0x1a>
 800a9e2:	4b09      	ldr	r3, [pc, #36]	; (800aa08 <__swbuf_r+0xa0>)
 800a9e4:	429c      	cmp	r4, r3
 800a9e6:	bf08      	it	eq
 800a9e8:	68ec      	ldreq	r4, [r5, #12]
 800a9ea:	e7ca      	b.n	800a982 <__swbuf_r+0x1a>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	4628      	mov	r0, r5
 800a9f0:	f000 f80c 	bl	800aa0c <__swsetup_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d0cb      	beq.n	800a990 <__swbuf_r+0x28>
 800a9f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a9fc:	e7ea      	b.n	800a9d4 <__swbuf_r+0x6c>
 800a9fe:	bf00      	nop
 800aa00:	0800c72c 	.word	0x0800c72c
 800aa04:	0800c74c 	.word	0x0800c74c
 800aa08:	0800c70c 	.word	0x0800c70c

0800aa0c <__swsetup_r>:
 800aa0c:	4b32      	ldr	r3, [pc, #200]	; (800aad8 <__swsetup_r+0xcc>)
 800aa0e:	b570      	push	{r4, r5, r6, lr}
 800aa10:	681d      	ldr	r5, [r3, #0]
 800aa12:	4606      	mov	r6, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	b125      	cbz	r5, 800aa22 <__swsetup_r+0x16>
 800aa18:	69ab      	ldr	r3, [r5, #24]
 800aa1a:	b913      	cbnz	r3, 800aa22 <__swsetup_r+0x16>
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f000 f97d 	bl	800ad1c <__sinit>
 800aa22:	4b2e      	ldr	r3, [pc, #184]	; (800aadc <__swsetup_r+0xd0>)
 800aa24:	429c      	cmp	r4, r3
 800aa26:	d10f      	bne.n	800aa48 <__swsetup_r+0x3c>
 800aa28:	686c      	ldr	r4, [r5, #4]
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa30:	0719      	lsls	r1, r3, #28
 800aa32:	d42c      	bmi.n	800aa8e <__swsetup_r+0x82>
 800aa34:	06dd      	lsls	r5, r3, #27
 800aa36:	d411      	bmi.n	800aa5c <__swsetup_r+0x50>
 800aa38:	2309      	movs	r3, #9
 800aa3a:	6033      	str	r3, [r6, #0]
 800aa3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa40:	f04f 30ff 	mov.w	r0, #4294967295
 800aa44:	81a3      	strh	r3, [r4, #12]
 800aa46:	e03e      	b.n	800aac6 <__swsetup_r+0xba>
 800aa48:	4b25      	ldr	r3, [pc, #148]	; (800aae0 <__swsetup_r+0xd4>)
 800aa4a:	429c      	cmp	r4, r3
 800aa4c:	d101      	bne.n	800aa52 <__swsetup_r+0x46>
 800aa4e:	68ac      	ldr	r4, [r5, #8]
 800aa50:	e7eb      	b.n	800aa2a <__swsetup_r+0x1e>
 800aa52:	4b24      	ldr	r3, [pc, #144]	; (800aae4 <__swsetup_r+0xd8>)
 800aa54:	429c      	cmp	r4, r3
 800aa56:	bf08      	it	eq
 800aa58:	68ec      	ldreq	r4, [r5, #12]
 800aa5a:	e7e6      	b.n	800aa2a <__swsetup_r+0x1e>
 800aa5c:	0758      	lsls	r0, r3, #29
 800aa5e:	d512      	bpl.n	800aa86 <__swsetup_r+0x7a>
 800aa60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa62:	b141      	cbz	r1, 800aa76 <__swsetup_r+0x6a>
 800aa64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa68:	4299      	cmp	r1, r3
 800aa6a:	d002      	beq.n	800aa72 <__swsetup_r+0x66>
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f7ff fd7d 	bl	800a56c <_free_r>
 800aa72:	2300      	movs	r3, #0
 800aa74:	6363      	str	r3, [r4, #52]	; 0x34
 800aa76:	89a3      	ldrh	r3, [r4, #12]
 800aa78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa7c:	81a3      	strh	r3, [r4, #12]
 800aa7e:	2300      	movs	r3, #0
 800aa80:	6063      	str	r3, [r4, #4]
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	6023      	str	r3, [r4, #0]
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	f043 0308 	orr.w	r3, r3, #8
 800aa8c:	81a3      	strh	r3, [r4, #12]
 800aa8e:	6923      	ldr	r3, [r4, #16]
 800aa90:	b94b      	cbnz	r3, 800aaa6 <__swsetup_r+0x9a>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa9c:	d003      	beq.n	800aaa6 <__swsetup_r+0x9a>
 800aa9e:	4621      	mov	r1, r4
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f000 f9ff 	bl	800aea4 <__smakebuf_r>
 800aaa6:	89a0      	ldrh	r0, [r4, #12]
 800aaa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aaac:	f010 0301 	ands.w	r3, r0, #1
 800aab0:	d00a      	beq.n	800aac8 <__swsetup_r+0xbc>
 800aab2:	2300      	movs	r3, #0
 800aab4:	60a3      	str	r3, [r4, #8]
 800aab6:	6963      	ldr	r3, [r4, #20]
 800aab8:	425b      	negs	r3, r3
 800aaba:	61a3      	str	r3, [r4, #24]
 800aabc:	6923      	ldr	r3, [r4, #16]
 800aabe:	b943      	cbnz	r3, 800aad2 <__swsetup_r+0xc6>
 800aac0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aac4:	d1ba      	bne.n	800aa3c <__swsetup_r+0x30>
 800aac6:	bd70      	pop	{r4, r5, r6, pc}
 800aac8:	0781      	lsls	r1, r0, #30
 800aaca:	bf58      	it	pl
 800aacc:	6963      	ldrpl	r3, [r4, #20]
 800aace:	60a3      	str	r3, [r4, #8]
 800aad0:	e7f4      	b.n	800aabc <__swsetup_r+0xb0>
 800aad2:	2000      	movs	r0, #0
 800aad4:	e7f7      	b.n	800aac6 <__swsetup_r+0xba>
 800aad6:	bf00      	nop
 800aad8:	2000001c 	.word	0x2000001c
 800aadc:	0800c72c 	.word	0x0800c72c
 800aae0:	0800c74c 	.word	0x0800c74c
 800aae4:	0800c70c 	.word	0x0800c70c

0800aae8 <__sflush_r>:
 800aae8:	898a      	ldrh	r2, [r1, #12]
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	4605      	mov	r5, r0
 800aaf0:	0710      	lsls	r0, r2, #28
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	d458      	bmi.n	800aba8 <__sflush_r+0xc0>
 800aaf6:	684b      	ldr	r3, [r1, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	dc05      	bgt.n	800ab08 <__sflush_r+0x20>
 800aafc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dc02      	bgt.n	800ab08 <__sflush_r+0x20>
 800ab02:	2000      	movs	r0, #0
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab0a:	2e00      	cmp	r6, #0
 800ab0c:	d0f9      	beq.n	800ab02 <__sflush_r+0x1a>
 800ab0e:	2300      	movs	r3, #0
 800ab10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ab14:	682f      	ldr	r7, [r5, #0]
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	d032      	beq.n	800ab80 <__sflush_r+0x98>
 800ab1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	075a      	lsls	r2, r3, #29
 800ab20:	d505      	bpl.n	800ab2e <__sflush_r+0x46>
 800ab22:	6863      	ldr	r3, [r4, #4]
 800ab24:	1ac0      	subs	r0, r0, r3
 800ab26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab28:	b10b      	cbz	r3, 800ab2e <__sflush_r+0x46>
 800ab2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab2c:	1ac0      	subs	r0, r0, r3
 800ab2e:	2300      	movs	r3, #0
 800ab30:	4602      	mov	r2, r0
 800ab32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab34:	4628      	mov	r0, r5
 800ab36:	6a21      	ldr	r1, [r4, #32]
 800ab38:	47b0      	blx	r6
 800ab3a:	1c43      	adds	r3, r0, #1
 800ab3c:	89a3      	ldrh	r3, [r4, #12]
 800ab3e:	d106      	bne.n	800ab4e <__sflush_r+0x66>
 800ab40:	6829      	ldr	r1, [r5, #0]
 800ab42:	291d      	cmp	r1, #29
 800ab44:	d82c      	bhi.n	800aba0 <__sflush_r+0xb8>
 800ab46:	4a2a      	ldr	r2, [pc, #168]	; (800abf0 <__sflush_r+0x108>)
 800ab48:	40ca      	lsrs	r2, r1
 800ab4a:	07d6      	lsls	r6, r2, #31
 800ab4c:	d528      	bpl.n	800aba0 <__sflush_r+0xb8>
 800ab4e:	2200      	movs	r2, #0
 800ab50:	6062      	str	r2, [r4, #4]
 800ab52:	6922      	ldr	r2, [r4, #16]
 800ab54:	04d9      	lsls	r1, r3, #19
 800ab56:	6022      	str	r2, [r4, #0]
 800ab58:	d504      	bpl.n	800ab64 <__sflush_r+0x7c>
 800ab5a:	1c42      	adds	r2, r0, #1
 800ab5c:	d101      	bne.n	800ab62 <__sflush_r+0x7a>
 800ab5e:	682b      	ldr	r3, [r5, #0]
 800ab60:	b903      	cbnz	r3, 800ab64 <__sflush_r+0x7c>
 800ab62:	6560      	str	r0, [r4, #84]	; 0x54
 800ab64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab66:	602f      	str	r7, [r5, #0]
 800ab68:	2900      	cmp	r1, #0
 800ab6a:	d0ca      	beq.n	800ab02 <__sflush_r+0x1a>
 800ab6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab70:	4299      	cmp	r1, r3
 800ab72:	d002      	beq.n	800ab7a <__sflush_r+0x92>
 800ab74:	4628      	mov	r0, r5
 800ab76:	f7ff fcf9 	bl	800a56c <_free_r>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab7e:	e7c1      	b.n	800ab04 <__sflush_r+0x1c>
 800ab80:	6a21      	ldr	r1, [r4, #32]
 800ab82:	2301      	movs	r3, #1
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b0      	blx	r6
 800ab88:	1c41      	adds	r1, r0, #1
 800ab8a:	d1c7      	bne.n	800ab1c <__sflush_r+0x34>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0c4      	beq.n	800ab1c <__sflush_r+0x34>
 800ab92:	2b1d      	cmp	r3, #29
 800ab94:	d001      	beq.n	800ab9a <__sflush_r+0xb2>
 800ab96:	2b16      	cmp	r3, #22
 800ab98:	d101      	bne.n	800ab9e <__sflush_r+0xb6>
 800ab9a:	602f      	str	r7, [r5, #0]
 800ab9c:	e7b1      	b.n	800ab02 <__sflush_r+0x1a>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aba4:	81a3      	strh	r3, [r4, #12]
 800aba6:	e7ad      	b.n	800ab04 <__sflush_r+0x1c>
 800aba8:	690f      	ldr	r7, [r1, #16]
 800abaa:	2f00      	cmp	r7, #0
 800abac:	d0a9      	beq.n	800ab02 <__sflush_r+0x1a>
 800abae:	0793      	lsls	r3, r2, #30
 800abb0:	bf18      	it	ne
 800abb2:	2300      	movne	r3, #0
 800abb4:	680e      	ldr	r6, [r1, #0]
 800abb6:	bf08      	it	eq
 800abb8:	694b      	ldreq	r3, [r1, #20]
 800abba:	eba6 0807 	sub.w	r8, r6, r7
 800abbe:	600f      	str	r7, [r1, #0]
 800abc0:	608b      	str	r3, [r1, #8]
 800abc2:	f1b8 0f00 	cmp.w	r8, #0
 800abc6:	dd9c      	ble.n	800ab02 <__sflush_r+0x1a>
 800abc8:	4643      	mov	r3, r8
 800abca:	463a      	mov	r2, r7
 800abcc:	4628      	mov	r0, r5
 800abce:	6a21      	ldr	r1, [r4, #32]
 800abd0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abd2:	47b0      	blx	r6
 800abd4:	2800      	cmp	r0, #0
 800abd6:	dc06      	bgt.n	800abe6 <__sflush_r+0xfe>
 800abd8:	89a3      	ldrh	r3, [r4, #12]
 800abda:	f04f 30ff 	mov.w	r0, #4294967295
 800abde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abe2:	81a3      	strh	r3, [r4, #12]
 800abe4:	e78e      	b.n	800ab04 <__sflush_r+0x1c>
 800abe6:	4407      	add	r7, r0
 800abe8:	eba8 0800 	sub.w	r8, r8, r0
 800abec:	e7e9      	b.n	800abc2 <__sflush_r+0xda>
 800abee:	bf00      	nop
 800abf0:	20400001 	.word	0x20400001

0800abf4 <_fflush_r>:
 800abf4:	b538      	push	{r3, r4, r5, lr}
 800abf6:	690b      	ldr	r3, [r1, #16]
 800abf8:	4605      	mov	r5, r0
 800abfa:	460c      	mov	r4, r1
 800abfc:	b913      	cbnz	r3, 800ac04 <_fflush_r+0x10>
 800abfe:	2500      	movs	r5, #0
 800ac00:	4628      	mov	r0, r5
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	b118      	cbz	r0, 800ac0e <_fflush_r+0x1a>
 800ac06:	6983      	ldr	r3, [r0, #24]
 800ac08:	b90b      	cbnz	r3, 800ac0e <_fflush_r+0x1a>
 800ac0a:	f000 f887 	bl	800ad1c <__sinit>
 800ac0e:	4b14      	ldr	r3, [pc, #80]	; (800ac60 <_fflush_r+0x6c>)
 800ac10:	429c      	cmp	r4, r3
 800ac12:	d11b      	bne.n	800ac4c <_fflush_r+0x58>
 800ac14:	686c      	ldr	r4, [r5, #4]
 800ac16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d0ef      	beq.n	800abfe <_fflush_r+0xa>
 800ac1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac20:	07d0      	lsls	r0, r2, #31
 800ac22:	d404      	bmi.n	800ac2e <_fflush_r+0x3a>
 800ac24:	0599      	lsls	r1, r3, #22
 800ac26:	d402      	bmi.n	800ac2e <_fflush_r+0x3a>
 800ac28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac2a:	f000 f915 	bl	800ae58 <__retarget_lock_acquire_recursive>
 800ac2e:	4628      	mov	r0, r5
 800ac30:	4621      	mov	r1, r4
 800ac32:	f7ff ff59 	bl	800aae8 <__sflush_r>
 800ac36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac38:	4605      	mov	r5, r0
 800ac3a:	07da      	lsls	r2, r3, #31
 800ac3c:	d4e0      	bmi.n	800ac00 <_fflush_r+0xc>
 800ac3e:	89a3      	ldrh	r3, [r4, #12]
 800ac40:	059b      	lsls	r3, r3, #22
 800ac42:	d4dd      	bmi.n	800ac00 <_fflush_r+0xc>
 800ac44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac46:	f000 f908 	bl	800ae5a <__retarget_lock_release_recursive>
 800ac4a:	e7d9      	b.n	800ac00 <_fflush_r+0xc>
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <_fflush_r+0x70>)
 800ac4e:	429c      	cmp	r4, r3
 800ac50:	d101      	bne.n	800ac56 <_fflush_r+0x62>
 800ac52:	68ac      	ldr	r4, [r5, #8]
 800ac54:	e7df      	b.n	800ac16 <_fflush_r+0x22>
 800ac56:	4b04      	ldr	r3, [pc, #16]	; (800ac68 <_fflush_r+0x74>)
 800ac58:	429c      	cmp	r4, r3
 800ac5a:	bf08      	it	eq
 800ac5c:	68ec      	ldreq	r4, [r5, #12]
 800ac5e:	e7da      	b.n	800ac16 <_fflush_r+0x22>
 800ac60:	0800c72c 	.word	0x0800c72c
 800ac64:	0800c74c 	.word	0x0800c74c
 800ac68:	0800c70c 	.word	0x0800c70c

0800ac6c <std>:
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	b510      	push	{r4, lr}
 800ac70:	4604      	mov	r4, r0
 800ac72:	e9c0 3300 	strd	r3, r3, [r0]
 800ac76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac7a:	6083      	str	r3, [r0, #8]
 800ac7c:	8181      	strh	r1, [r0, #12]
 800ac7e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac80:	81c2      	strh	r2, [r0, #14]
 800ac82:	6183      	str	r3, [r0, #24]
 800ac84:	4619      	mov	r1, r3
 800ac86:	2208      	movs	r2, #8
 800ac88:	305c      	adds	r0, #92	; 0x5c
 800ac8a:	f7ff fc67 	bl	800a55c <memset>
 800ac8e:	4b05      	ldr	r3, [pc, #20]	; (800aca4 <std+0x38>)
 800ac90:	6224      	str	r4, [r4, #32]
 800ac92:	6263      	str	r3, [r4, #36]	; 0x24
 800ac94:	4b04      	ldr	r3, [pc, #16]	; (800aca8 <std+0x3c>)
 800ac96:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac98:	4b04      	ldr	r3, [pc, #16]	; (800acac <std+0x40>)
 800ac9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac9c:	4b04      	ldr	r3, [pc, #16]	; (800acb0 <std+0x44>)
 800ac9e:	6323      	str	r3, [r4, #48]	; 0x30
 800aca0:	bd10      	pop	{r4, pc}
 800aca2:	bf00      	nop
 800aca4:	0800b519 	.word	0x0800b519
 800aca8:	0800b53b 	.word	0x0800b53b
 800acac:	0800b573 	.word	0x0800b573
 800acb0:	0800b597 	.word	0x0800b597

0800acb4 <_cleanup_r>:
 800acb4:	4901      	ldr	r1, [pc, #4]	; (800acbc <_cleanup_r+0x8>)
 800acb6:	f000 b8af 	b.w	800ae18 <_fwalk_reent>
 800acba:	bf00      	nop
 800acbc:	0800abf5 	.word	0x0800abf5

0800acc0 <__sfmoreglue>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	2568      	movs	r5, #104	; 0x68
 800acc4:	1e4a      	subs	r2, r1, #1
 800acc6:	4355      	muls	r5, r2
 800acc8:	460e      	mov	r6, r1
 800acca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acce:	f7ff fc99 	bl	800a604 <_malloc_r>
 800acd2:	4604      	mov	r4, r0
 800acd4:	b140      	cbz	r0, 800ace8 <__sfmoreglue+0x28>
 800acd6:	2100      	movs	r1, #0
 800acd8:	e9c0 1600 	strd	r1, r6, [r0]
 800acdc:	300c      	adds	r0, #12
 800acde:	60a0      	str	r0, [r4, #8]
 800ace0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ace4:	f7ff fc3a 	bl	800a55c <memset>
 800ace8:	4620      	mov	r0, r4
 800acea:	bd70      	pop	{r4, r5, r6, pc}

0800acec <__sfp_lock_acquire>:
 800acec:	4801      	ldr	r0, [pc, #4]	; (800acf4 <__sfp_lock_acquire+0x8>)
 800acee:	f000 b8b3 	b.w	800ae58 <__retarget_lock_acquire_recursive>
 800acf2:	bf00      	nop
 800acf4:	20000978 	.word	0x20000978

0800acf8 <__sfp_lock_release>:
 800acf8:	4801      	ldr	r0, [pc, #4]	; (800ad00 <__sfp_lock_release+0x8>)
 800acfa:	f000 b8ae 	b.w	800ae5a <__retarget_lock_release_recursive>
 800acfe:	bf00      	nop
 800ad00:	20000978 	.word	0x20000978

0800ad04 <__sinit_lock_acquire>:
 800ad04:	4801      	ldr	r0, [pc, #4]	; (800ad0c <__sinit_lock_acquire+0x8>)
 800ad06:	f000 b8a7 	b.w	800ae58 <__retarget_lock_acquire_recursive>
 800ad0a:	bf00      	nop
 800ad0c:	20000973 	.word	0x20000973

0800ad10 <__sinit_lock_release>:
 800ad10:	4801      	ldr	r0, [pc, #4]	; (800ad18 <__sinit_lock_release+0x8>)
 800ad12:	f000 b8a2 	b.w	800ae5a <__retarget_lock_release_recursive>
 800ad16:	bf00      	nop
 800ad18:	20000973 	.word	0x20000973

0800ad1c <__sinit>:
 800ad1c:	b510      	push	{r4, lr}
 800ad1e:	4604      	mov	r4, r0
 800ad20:	f7ff fff0 	bl	800ad04 <__sinit_lock_acquire>
 800ad24:	69a3      	ldr	r3, [r4, #24]
 800ad26:	b11b      	cbz	r3, 800ad30 <__sinit+0x14>
 800ad28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2c:	f7ff bff0 	b.w	800ad10 <__sinit_lock_release>
 800ad30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad34:	6523      	str	r3, [r4, #80]	; 0x50
 800ad36:	4b13      	ldr	r3, [pc, #76]	; (800ad84 <__sinit+0x68>)
 800ad38:	4a13      	ldr	r2, [pc, #76]	; (800ad88 <__sinit+0x6c>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad3e:	42a3      	cmp	r3, r4
 800ad40:	bf08      	it	eq
 800ad42:	2301      	moveq	r3, #1
 800ad44:	4620      	mov	r0, r4
 800ad46:	bf08      	it	eq
 800ad48:	61a3      	streq	r3, [r4, #24]
 800ad4a:	f000 f81f 	bl	800ad8c <__sfp>
 800ad4e:	6060      	str	r0, [r4, #4]
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 f81b 	bl	800ad8c <__sfp>
 800ad56:	60a0      	str	r0, [r4, #8]
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 f817 	bl	800ad8c <__sfp>
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2104      	movs	r1, #4
 800ad62:	60e0      	str	r0, [r4, #12]
 800ad64:	6860      	ldr	r0, [r4, #4]
 800ad66:	f7ff ff81 	bl	800ac6c <std>
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	2109      	movs	r1, #9
 800ad6e:	68a0      	ldr	r0, [r4, #8]
 800ad70:	f7ff ff7c 	bl	800ac6c <std>
 800ad74:	2202      	movs	r2, #2
 800ad76:	2112      	movs	r1, #18
 800ad78:	68e0      	ldr	r0, [r4, #12]
 800ad7a:	f7ff ff77 	bl	800ac6c <std>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	61a3      	str	r3, [r4, #24]
 800ad82:	e7d1      	b.n	800ad28 <__sinit+0xc>
 800ad84:	0800c604 	.word	0x0800c604
 800ad88:	0800acb5 	.word	0x0800acb5

0800ad8c <__sfp>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	4607      	mov	r7, r0
 800ad90:	f7ff ffac 	bl	800acec <__sfp_lock_acquire>
 800ad94:	4b1e      	ldr	r3, [pc, #120]	; (800ae10 <__sfp+0x84>)
 800ad96:	681e      	ldr	r6, [r3, #0]
 800ad98:	69b3      	ldr	r3, [r6, #24]
 800ad9a:	b913      	cbnz	r3, 800ada2 <__sfp+0x16>
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f7ff ffbd 	bl	800ad1c <__sinit>
 800ada2:	3648      	adds	r6, #72	; 0x48
 800ada4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	d503      	bpl.n	800adb4 <__sfp+0x28>
 800adac:	6833      	ldr	r3, [r6, #0]
 800adae:	b30b      	cbz	r3, 800adf4 <__sfp+0x68>
 800adb0:	6836      	ldr	r6, [r6, #0]
 800adb2:	e7f7      	b.n	800ada4 <__sfp+0x18>
 800adb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800adb8:	b9d5      	cbnz	r5, 800adf0 <__sfp+0x64>
 800adba:	4b16      	ldr	r3, [pc, #88]	; (800ae14 <__sfp+0x88>)
 800adbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800adc0:	60e3      	str	r3, [r4, #12]
 800adc2:	6665      	str	r5, [r4, #100]	; 0x64
 800adc4:	f000 f847 	bl	800ae56 <__retarget_lock_init_recursive>
 800adc8:	f7ff ff96 	bl	800acf8 <__sfp_lock_release>
 800adcc:	2208      	movs	r2, #8
 800adce:	4629      	mov	r1, r5
 800add0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800add4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800add8:	6025      	str	r5, [r4, #0]
 800adda:	61a5      	str	r5, [r4, #24]
 800addc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ade0:	f7ff fbbc 	bl	800a55c <memset>
 800ade4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ade8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adec:	4620      	mov	r0, r4
 800adee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adf0:	3468      	adds	r4, #104	; 0x68
 800adf2:	e7d9      	b.n	800ada8 <__sfp+0x1c>
 800adf4:	2104      	movs	r1, #4
 800adf6:	4638      	mov	r0, r7
 800adf8:	f7ff ff62 	bl	800acc0 <__sfmoreglue>
 800adfc:	4604      	mov	r4, r0
 800adfe:	6030      	str	r0, [r6, #0]
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d1d5      	bne.n	800adb0 <__sfp+0x24>
 800ae04:	f7ff ff78 	bl	800acf8 <__sfp_lock_release>
 800ae08:	230c      	movs	r3, #12
 800ae0a:	603b      	str	r3, [r7, #0]
 800ae0c:	e7ee      	b.n	800adec <__sfp+0x60>
 800ae0e:	bf00      	nop
 800ae10:	0800c604 	.word	0x0800c604
 800ae14:	ffff0001 	.word	0xffff0001

0800ae18 <_fwalk_reent>:
 800ae18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae1c:	4606      	mov	r6, r0
 800ae1e:	4688      	mov	r8, r1
 800ae20:	2700      	movs	r7, #0
 800ae22:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae2e:	d505      	bpl.n	800ae3c <_fwalk_reent+0x24>
 800ae30:	6824      	ldr	r4, [r4, #0]
 800ae32:	2c00      	cmp	r4, #0
 800ae34:	d1f7      	bne.n	800ae26 <_fwalk_reent+0xe>
 800ae36:	4638      	mov	r0, r7
 800ae38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae3c:	89ab      	ldrh	r3, [r5, #12]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d907      	bls.n	800ae52 <_fwalk_reent+0x3a>
 800ae42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae46:	3301      	adds	r3, #1
 800ae48:	d003      	beq.n	800ae52 <_fwalk_reent+0x3a>
 800ae4a:	4629      	mov	r1, r5
 800ae4c:	4630      	mov	r0, r6
 800ae4e:	47c0      	blx	r8
 800ae50:	4307      	orrs	r7, r0
 800ae52:	3568      	adds	r5, #104	; 0x68
 800ae54:	e7e9      	b.n	800ae2a <_fwalk_reent+0x12>

0800ae56 <__retarget_lock_init_recursive>:
 800ae56:	4770      	bx	lr

0800ae58 <__retarget_lock_acquire_recursive>:
 800ae58:	4770      	bx	lr

0800ae5a <__retarget_lock_release_recursive>:
 800ae5a:	4770      	bx	lr

0800ae5c <__swhatbuf_r>:
 800ae5c:	b570      	push	{r4, r5, r6, lr}
 800ae5e:	460e      	mov	r6, r1
 800ae60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae64:	4614      	mov	r4, r2
 800ae66:	2900      	cmp	r1, #0
 800ae68:	461d      	mov	r5, r3
 800ae6a:	b096      	sub	sp, #88	; 0x58
 800ae6c:	da07      	bge.n	800ae7e <__swhatbuf_r+0x22>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	602b      	str	r3, [r5, #0]
 800ae72:	89b3      	ldrh	r3, [r6, #12]
 800ae74:	061a      	lsls	r2, r3, #24
 800ae76:	d410      	bmi.n	800ae9a <__swhatbuf_r+0x3e>
 800ae78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae7c:	e00e      	b.n	800ae9c <__swhatbuf_r+0x40>
 800ae7e:	466a      	mov	r2, sp
 800ae80:	f000 fbb0 	bl	800b5e4 <_fstat_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	dbf2      	blt.n	800ae6e <__swhatbuf_r+0x12>
 800ae88:	9a01      	ldr	r2, [sp, #4]
 800ae8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae92:	425a      	negs	r2, r3
 800ae94:	415a      	adcs	r2, r3
 800ae96:	602a      	str	r2, [r5, #0]
 800ae98:	e7ee      	b.n	800ae78 <__swhatbuf_r+0x1c>
 800ae9a:	2340      	movs	r3, #64	; 0x40
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	6023      	str	r3, [r4, #0]
 800aea0:	b016      	add	sp, #88	; 0x58
 800aea2:	bd70      	pop	{r4, r5, r6, pc}

0800aea4 <__smakebuf_r>:
 800aea4:	898b      	ldrh	r3, [r1, #12]
 800aea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aea8:	079d      	lsls	r5, r3, #30
 800aeaa:	4606      	mov	r6, r0
 800aeac:	460c      	mov	r4, r1
 800aeae:	d507      	bpl.n	800aec0 <__smakebuf_r+0x1c>
 800aeb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aeb4:	6023      	str	r3, [r4, #0]
 800aeb6:	6123      	str	r3, [r4, #16]
 800aeb8:	2301      	movs	r3, #1
 800aeba:	6163      	str	r3, [r4, #20]
 800aebc:	b002      	add	sp, #8
 800aebe:	bd70      	pop	{r4, r5, r6, pc}
 800aec0:	466a      	mov	r2, sp
 800aec2:	ab01      	add	r3, sp, #4
 800aec4:	f7ff ffca 	bl	800ae5c <__swhatbuf_r>
 800aec8:	9900      	ldr	r1, [sp, #0]
 800aeca:	4605      	mov	r5, r0
 800aecc:	4630      	mov	r0, r6
 800aece:	f7ff fb99 	bl	800a604 <_malloc_r>
 800aed2:	b948      	cbnz	r0, 800aee8 <__smakebuf_r+0x44>
 800aed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed8:	059a      	lsls	r2, r3, #22
 800aeda:	d4ef      	bmi.n	800aebc <__smakebuf_r+0x18>
 800aedc:	f023 0303 	bic.w	r3, r3, #3
 800aee0:	f043 0302 	orr.w	r3, r3, #2
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	e7e3      	b.n	800aeb0 <__smakebuf_r+0xc>
 800aee8:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <__smakebuf_r+0x7c>)
 800aeea:	62b3      	str	r3, [r6, #40]	; 0x28
 800aeec:	89a3      	ldrh	r3, [r4, #12]
 800aeee:	6020      	str	r0, [r4, #0]
 800aef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	9b00      	ldr	r3, [sp, #0]
 800aef8:	6120      	str	r0, [r4, #16]
 800aefa:	6163      	str	r3, [r4, #20]
 800aefc:	9b01      	ldr	r3, [sp, #4]
 800aefe:	b15b      	cbz	r3, 800af18 <__smakebuf_r+0x74>
 800af00:	4630      	mov	r0, r6
 800af02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af06:	f000 fb7f 	bl	800b608 <_isatty_r>
 800af0a:	b128      	cbz	r0, 800af18 <__smakebuf_r+0x74>
 800af0c:	89a3      	ldrh	r3, [r4, #12]
 800af0e:	f023 0303 	bic.w	r3, r3, #3
 800af12:	f043 0301 	orr.w	r3, r3, #1
 800af16:	81a3      	strh	r3, [r4, #12]
 800af18:	89a0      	ldrh	r0, [r4, #12]
 800af1a:	4305      	orrs	r5, r0
 800af1c:	81a5      	strh	r5, [r4, #12]
 800af1e:	e7cd      	b.n	800aebc <__smakebuf_r+0x18>
 800af20:	0800acb5 	.word	0x0800acb5

0800af24 <__malloc_lock>:
 800af24:	4801      	ldr	r0, [pc, #4]	; (800af2c <__malloc_lock+0x8>)
 800af26:	f7ff bf97 	b.w	800ae58 <__retarget_lock_acquire_recursive>
 800af2a:	bf00      	nop
 800af2c:	20000974 	.word	0x20000974

0800af30 <__malloc_unlock>:
 800af30:	4801      	ldr	r0, [pc, #4]	; (800af38 <__malloc_unlock+0x8>)
 800af32:	f7ff bf92 	b.w	800ae5a <__retarget_lock_release_recursive>
 800af36:	bf00      	nop
 800af38:	20000974 	.word	0x20000974

0800af3c <__sfputc_r>:
 800af3c:	6893      	ldr	r3, [r2, #8]
 800af3e:	b410      	push	{r4}
 800af40:	3b01      	subs	r3, #1
 800af42:	2b00      	cmp	r3, #0
 800af44:	6093      	str	r3, [r2, #8]
 800af46:	da07      	bge.n	800af58 <__sfputc_r+0x1c>
 800af48:	6994      	ldr	r4, [r2, #24]
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	db01      	blt.n	800af52 <__sfputc_r+0x16>
 800af4e:	290a      	cmp	r1, #10
 800af50:	d102      	bne.n	800af58 <__sfputc_r+0x1c>
 800af52:	bc10      	pop	{r4}
 800af54:	f7ff bd08 	b.w	800a968 <__swbuf_r>
 800af58:	6813      	ldr	r3, [r2, #0]
 800af5a:	1c58      	adds	r0, r3, #1
 800af5c:	6010      	str	r0, [r2, #0]
 800af5e:	7019      	strb	r1, [r3, #0]
 800af60:	4608      	mov	r0, r1
 800af62:	bc10      	pop	{r4}
 800af64:	4770      	bx	lr

0800af66 <__sfputs_r>:
 800af66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af68:	4606      	mov	r6, r0
 800af6a:	460f      	mov	r7, r1
 800af6c:	4614      	mov	r4, r2
 800af6e:	18d5      	adds	r5, r2, r3
 800af70:	42ac      	cmp	r4, r5
 800af72:	d101      	bne.n	800af78 <__sfputs_r+0x12>
 800af74:	2000      	movs	r0, #0
 800af76:	e007      	b.n	800af88 <__sfputs_r+0x22>
 800af78:	463a      	mov	r2, r7
 800af7a:	4630      	mov	r0, r6
 800af7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af80:	f7ff ffdc 	bl	800af3c <__sfputc_r>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d1f3      	bne.n	800af70 <__sfputs_r+0xa>
 800af88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af8c <_vfiprintf_r>:
 800af8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af90:	460d      	mov	r5, r1
 800af92:	4614      	mov	r4, r2
 800af94:	4698      	mov	r8, r3
 800af96:	4606      	mov	r6, r0
 800af98:	b09d      	sub	sp, #116	; 0x74
 800af9a:	b118      	cbz	r0, 800afa4 <_vfiprintf_r+0x18>
 800af9c:	6983      	ldr	r3, [r0, #24]
 800af9e:	b90b      	cbnz	r3, 800afa4 <_vfiprintf_r+0x18>
 800afa0:	f7ff febc 	bl	800ad1c <__sinit>
 800afa4:	4b89      	ldr	r3, [pc, #548]	; (800b1cc <_vfiprintf_r+0x240>)
 800afa6:	429d      	cmp	r5, r3
 800afa8:	d11b      	bne.n	800afe2 <_vfiprintf_r+0x56>
 800afaa:	6875      	ldr	r5, [r6, #4]
 800afac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afae:	07d9      	lsls	r1, r3, #31
 800afb0:	d405      	bmi.n	800afbe <_vfiprintf_r+0x32>
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	059a      	lsls	r2, r3, #22
 800afb6:	d402      	bmi.n	800afbe <_vfiprintf_r+0x32>
 800afb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afba:	f7ff ff4d 	bl	800ae58 <__retarget_lock_acquire_recursive>
 800afbe:	89ab      	ldrh	r3, [r5, #12]
 800afc0:	071b      	lsls	r3, r3, #28
 800afc2:	d501      	bpl.n	800afc8 <_vfiprintf_r+0x3c>
 800afc4:	692b      	ldr	r3, [r5, #16]
 800afc6:	b9eb      	cbnz	r3, 800b004 <_vfiprintf_r+0x78>
 800afc8:	4629      	mov	r1, r5
 800afca:	4630      	mov	r0, r6
 800afcc:	f7ff fd1e 	bl	800aa0c <__swsetup_r>
 800afd0:	b1c0      	cbz	r0, 800b004 <_vfiprintf_r+0x78>
 800afd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afd4:	07dc      	lsls	r4, r3, #31
 800afd6:	d50e      	bpl.n	800aff6 <_vfiprintf_r+0x6a>
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295
 800afdc:	b01d      	add	sp, #116	; 0x74
 800afde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe2:	4b7b      	ldr	r3, [pc, #492]	; (800b1d0 <_vfiprintf_r+0x244>)
 800afe4:	429d      	cmp	r5, r3
 800afe6:	d101      	bne.n	800afec <_vfiprintf_r+0x60>
 800afe8:	68b5      	ldr	r5, [r6, #8]
 800afea:	e7df      	b.n	800afac <_vfiprintf_r+0x20>
 800afec:	4b79      	ldr	r3, [pc, #484]	; (800b1d4 <_vfiprintf_r+0x248>)
 800afee:	429d      	cmp	r5, r3
 800aff0:	bf08      	it	eq
 800aff2:	68f5      	ldreq	r5, [r6, #12]
 800aff4:	e7da      	b.n	800afac <_vfiprintf_r+0x20>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	0598      	lsls	r0, r3, #22
 800affa:	d4ed      	bmi.n	800afd8 <_vfiprintf_r+0x4c>
 800affc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800affe:	f7ff ff2c 	bl	800ae5a <__retarget_lock_release_recursive>
 800b002:	e7e9      	b.n	800afd8 <_vfiprintf_r+0x4c>
 800b004:	2300      	movs	r3, #0
 800b006:	9309      	str	r3, [sp, #36]	; 0x24
 800b008:	2320      	movs	r3, #32
 800b00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b00e:	2330      	movs	r3, #48	; 0x30
 800b010:	f04f 0901 	mov.w	r9, #1
 800b014:	f8cd 800c 	str.w	r8, [sp, #12]
 800b018:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b1d8 <_vfiprintf_r+0x24c>
 800b01c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b020:	4623      	mov	r3, r4
 800b022:	469a      	mov	sl, r3
 800b024:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b028:	b10a      	cbz	r2, 800b02e <_vfiprintf_r+0xa2>
 800b02a:	2a25      	cmp	r2, #37	; 0x25
 800b02c:	d1f9      	bne.n	800b022 <_vfiprintf_r+0x96>
 800b02e:	ebba 0b04 	subs.w	fp, sl, r4
 800b032:	d00b      	beq.n	800b04c <_vfiprintf_r+0xc0>
 800b034:	465b      	mov	r3, fp
 800b036:	4622      	mov	r2, r4
 800b038:	4629      	mov	r1, r5
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7ff ff93 	bl	800af66 <__sfputs_r>
 800b040:	3001      	adds	r0, #1
 800b042:	f000 80aa 	beq.w	800b19a <_vfiprintf_r+0x20e>
 800b046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b048:	445a      	add	r2, fp
 800b04a:	9209      	str	r2, [sp, #36]	; 0x24
 800b04c:	f89a 3000 	ldrb.w	r3, [sl]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 80a2 	beq.w	800b19a <_vfiprintf_r+0x20e>
 800b056:	2300      	movs	r3, #0
 800b058:	f04f 32ff 	mov.w	r2, #4294967295
 800b05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b060:	f10a 0a01 	add.w	sl, sl, #1
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b06c:	931a      	str	r3, [sp, #104]	; 0x68
 800b06e:	4654      	mov	r4, sl
 800b070:	2205      	movs	r2, #5
 800b072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b076:	4858      	ldr	r0, [pc, #352]	; (800b1d8 <_vfiprintf_r+0x24c>)
 800b078:	f000 fae8 	bl	800b64c <memchr>
 800b07c:	9a04      	ldr	r2, [sp, #16]
 800b07e:	b9d8      	cbnz	r0, 800b0b8 <_vfiprintf_r+0x12c>
 800b080:	06d1      	lsls	r1, r2, #27
 800b082:	bf44      	itt	mi
 800b084:	2320      	movmi	r3, #32
 800b086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b08a:	0713      	lsls	r3, r2, #28
 800b08c:	bf44      	itt	mi
 800b08e:	232b      	movmi	r3, #43	; 0x2b
 800b090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b094:	f89a 3000 	ldrb.w	r3, [sl]
 800b098:	2b2a      	cmp	r3, #42	; 0x2a
 800b09a:	d015      	beq.n	800b0c8 <_vfiprintf_r+0x13c>
 800b09c:	4654      	mov	r4, sl
 800b09e:	2000      	movs	r0, #0
 800b0a0:	f04f 0c0a 	mov.w	ip, #10
 800b0a4:	9a07      	ldr	r2, [sp, #28]
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ac:	3b30      	subs	r3, #48	; 0x30
 800b0ae:	2b09      	cmp	r3, #9
 800b0b0:	d94e      	bls.n	800b150 <_vfiprintf_r+0x1c4>
 800b0b2:	b1b0      	cbz	r0, 800b0e2 <_vfiprintf_r+0x156>
 800b0b4:	9207      	str	r2, [sp, #28]
 800b0b6:	e014      	b.n	800b0e2 <_vfiprintf_r+0x156>
 800b0b8:	eba0 0308 	sub.w	r3, r0, r8
 800b0bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	46a2      	mov	sl, r4
 800b0c4:	9304      	str	r3, [sp, #16]
 800b0c6:	e7d2      	b.n	800b06e <_vfiprintf_r+0xe2>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	1d19      	adds	r1, r3, #4
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	9103      	str	r1, [sp, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	bfbb      	ittet	lt
 800b0d4:	425b      	neglt	r3, r3
 800b0d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b0da:	9307      	strge	r3, [sp, #28]
 800b0dc:	9307      	strlt	r3, [sp, #28]
 800b0de:	bfb8      	it	lt
 800b0e0:	9204      	strlt	r2, [sp, #16]
 800b0e2:	7823      	ldrb	r3, [r4, #0]
 800b0e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0e6:	d10c      	bne.n	800b102 <_vfiprintf_r+0x176>
 800b0e8:	7863      	ldrb	r3, [r4, #1]
 800b0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ec:	d135      	bne.n	800b15a <_vfiprintf_r+0x1ce>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	3402      	adds	r4, #2
 800b0f2:	1d1a      	adds	r2, r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	9203      	str	r2, [sp, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bfb8      	it	lt
 800b0fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b100:	9305      	str	r3, [sp, #20]
 800b102:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b1e8 <_vfiprintf_r+0x25c>
 800b106:	2203      	movs	r2, #3
 800b108:	4650      	mov	r0, sl
 800b10a:	7821      	ldrb	r1, [r4, #0]
 800b10c:	f000 fa9e 	bl	800b64c <memchr>
 800b110:	b140      	cbz	r0, 800b124 <_vfiprintf_r+0x198>
 800b112:	2340      	movs	r3, #64	; 0x40
 800b114:	eba0 000a 	sub.w	r0, r0, sl
 800b118:	fa03 f000 	lsl.w	r0, r3, r0
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	3401      	adds	r4, #1
 800b120:	4303      	orrs	r3, r0
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b128:	2206      	movs	r2, #6
 800b12a:	482c      	ldr	r0, [pc, #176]	; (800b1dc <_vfiprintf_r+0x250>)
 800b12c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b130:	f000 fa8c 	bl	800b64c <memchr>
 800b134:	2800      	cmp	r0, #0
 800b136:	d03f      	beq.n	800b1b8 <_vfiprintf_r+0x22c>
 800b138:	4b29      	ldr	r3, [pc, #164]	; (800b1e0 <_vfiprintf_r+0x254>)
 800b13a:	bb1b      	cbnz	r3, 800b184 <_vfiprintf_r+0x1f8>
 800b13c:	9b03      	ldr	r3, [sp, #12]
 800b13e:	3307      	adds	r3, #7
 800b140:	f023 0307 	bic.w	r3, r3, #7
 800b144:	3308      	adds	r3, #8
 800b146:	9303      	str	r3, [sp, #12]
 800b148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14a:	443b      	add	r3, r7
 800b14c:	9309      	str	r3, [sp, #36]	; 0x24
 800b14e:	e767      	b.n	800b020 <_vfiprintf_r+0x94>
 800b150:	460c      	mov	r4, r1
 800b152:	2001      	movs	r0, #1
 800b154:	fb0c 3202 	mla	r2, ip, r2, r3
 800b158:	e7a5      	b.n	800b0a6 <_vfiprintf_r+0x11a>
 800b15a:	2300      	movs	r3, #0
 800b15c:	f04f 0c0a 	mov.w	ip, #10
 800b160:	4619      	mov	r1, r3
 800b162:	3401      	adds	r4, #1
 800b164:	9305      	str	r3, [sp, #20]
 800b166:	4620      	mov	r0, r4
 800b168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16c:	3a30      	subs	r2, #48	; 0x30
 800b16e:	2a09      	cmp	r2, #9
 800b170:	d903      	bls.n	800b17a <_vfiprintf_r+0x1ee>
 800b172:	2b00      	cmp	r3, #0
 800b174:	d0c5      	beq.n	800b102 <_vfiprintf_r+0x176>
 800b176:	9105      	str	r1, [sp, #20]
 800b178:	e7c3      	b.n	800b102 <_vfiprintf_r+0x176>
 800b17a:	4604      	mov	r4, r0
 800b17c:	2301      	movs	r3, #1
 800b17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b182:	e7f0      	b.n	800b166 <_vfiprintf_r+0x1da>
 800b184:	ab03      	add	r3, sp, #12
 800b186:	9300      	str	r3, [sp, #0]
 800b188:	462a      	mov	r2, r5
 800b18a:	4630      	mov	r0, r6
 800b18c:	4b15      	ldr	r3, [pc, #84]	; (800b1e4 <_vfiprintf_r+0x258>)
 800b18e:	a904      	add	r1, sp, #16
 800b190:	f3af 8000 	nop.w
 800b194:	4607      	mov	r7, r0
 800b196:	1c78      	adds	r0, r7, #1
 800b198:	d1d6      	bne.n	800b148 <_vfiprintf_r+0x1bc>
 800b19a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b19c:	07d9      	lsls	r1, r3, #31
 800b19e:	d405      	bmi.n	800b1ac <_vfiprintf_r+0x220>
 800b1a0:	89ab      	ldrh	r3, [r5, #12]
 800b1a2:	059a      	lsls	r2, r3, #22
 800b1a4:	d402      	bmi.n	800b1ac <_vfiprintf_r+0x220>
 800b1a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a8:	f7ff fe57 	bl	800ae5a <__retarget_lock_release_recursive>
 800b1ac:	89ab      	ldrh	r3, [r5, #12]
 800b1ae:	065b      	lsls	r3, r3, #25
 800b1b0:	f53f af12 	bmi.w	800afd8 <_vfiprintf_r+0x4c>
 800b1b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b6:	e711      	b.n	800afdc <_vfiprintf_r+0x50>
 800b1b8:	ab03      	add	r3, sp, #12
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	462a      	mov	r2, r5
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4b08      	ldr	r3, [pc, #32]	; (800b1e4 <_vfiprintf_r+0x258>)
 800b1c2:	a904      	add	r1, sp, #16
 800b1c4:	f000 f882 	bl	800b2cc <_printf_i>
 800b1c8:	e7e4      	b.n	800b194 <_vfiprintf_r+0x208>
 800b1ca:	bf00      	nop
 800b1cc:	0800c72c 	.word	0x0800c72c
 800b1d0:	0800c74c 	.word	0x0800c74c
 800b1d4:	0800c70c 	.word	0x0800c70c
 800b1d8:	0800c76c 	.word	0x0800c76c
 800b1dc:	0800c776 	.word	0x0800c776
 800b1e0:	00000000 	.word	0x00000000
 800b1e4:	0800af67 	.word	0x0800af67
 800b1e8:	0800c772 	.word	0x0800c772

0800b1ec <_printf_common>:
 800b1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1f0:	4616      	mov	r6, r2
 800b1f2:	4699      	mov	r9, r3
 800b1f4:	688a      	ldr	r2, [r1, #8]
 800b1f6:	690b      	ldr	r3, [r1, #16]
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	bfb8      	it	lt
 800b1fe:	4613      	movlt	r3, r2
 800b200:	6033      	str	r3, [r6, #0]
 800b202:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b206:	460c      	mov	r4, r1
 800b208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b20c:	b10a      	cbz	r2, 800b212 <_printf_common+0x26>
 800b20e:	3301      	adds	r3, #1
 800b210:	6033      	str	r3, [r6, #0]
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	0699      	lsls	r1, r3, #26
 800b216:	bf42      	ittt	mi
 800b218:	6833      	ldrmi	r3, [r6, #0]
 800b21a:	3302      	addmi	r3, #2
 800b21c:	6033      	strmi	r3, [r6, #0]
 800b21e:	6825      	ldr	r5, [r4, #0]
 800b220:	f015 0506 	ands.w	r5, r5, #6
 800b224:	d106      	bne.n	800b234 <_printf_common+0x48>
 800b226:	f104 0a19 	add.w	sl, r4, #25
 800b22a:	68e3      	ldr	r3, [r4, #12]
 800b22c:	6832      	ldr	r2, [r6, #0]
 800b22e:	1a9b      	subs	r3, r3, r2
 800b230:	42ab      	cmp	r3, r5
 800b232:	dc28      	bgt.n	800b286 <_printf_common+0x9a>
 800b234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b238:	1e13      	subs	r3, r2, #0
 800b23a:	6822      	ldr	r2, [r4, #0]
 800b23c:	bf18      	it	ne
 800b23e:	2301      	movne	r3, #1
 800b240:	0692      	lsls	r2, r2, #26
 800b242:	d42d      	bmi.n	800b2a0 <_printf_common+0xb4>
 800b244:	4649      	mov	r1, r9
 800b246:	4638      	mov	r0, r7
 800b248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b24c:	47c0      	blx	r8
 800b24e:	3001      	adds	r0, #1
 800b250:	d020      	beq.n	800b294 <_printf_common+0xa8>
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	68e5      	ldr	r5, [r4, #12]
 800b256:	f003 0306 	and.w	r3, r3, #6
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	bf18      	it	ne
 800b25e:	2500      	movne	r5, #0
 800b260:	6832      	ldr	r2, [r6, #0]
 800b262:	f04f 0600 	mov.w	r6, #0
 800b266:	68a3      	ldr	r3, [r4, #8]
 800b268:	bf08      	it	eq
 800b26a:	1aad      	subeq	r5, r5, r2
 800b26c:	6922      	ldr	r2, [r4, #16]
 800b26e:	bf08      	it	eq
 800b270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b274:	4293      	cmp	r3, r2
 800b276:	bfc4      	itt	gt
 800b278:	1a9b      	subgt	r3, r3, r2
 800b27a:	18ed      	addgt	r5, r5, r3
 800b27c:	341a      	adds	r4, #26
 800b27e:	42b5      	cmp	r5, r6
 800b280:	d11a      	bne.n	800b2b8 <_printf_common+0xcc>
 800b282:	2000      	movs	r0, #0
 800b284:	e008      	b.n	800b298 <_printf_common+0xac>
 800b286:	2301      	movs	r3, #1
 800b288:	4652      	mov	r2, sl
 800b28a:	4649      	mov	r1, r9
 800b28c:	4638      	mov	r0, r7
 800b28e:	47c0      	blx	r8
 800b290:	3001      	adds	r0, #1
 800b292:	d103      	bne.n	800b29c <_printf_common+0xb0>
 800b294:	f04f 30ff 	mov.w	r0, #4294967295
 800b298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29c:	3501      	adds	r5, #1
 800b29e:	e7c4      	b.n	800b22a <_printf_common+0x3e>
 800b2a0:	2030      	movs	r0, #48	; 0x30
 800b2a2:	18e1      	adds	r1, r4, r3
 800b2a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b2ae:	4422      	add	r2, r4
 800b2b0:	3302      	adds	r3, #2
 800b2b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b2b6:	e7c5      	b.n	800b244 <_printf_common+0x58>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	4622      	mov	r2, r4
 800b2bc:	4649      	mov	r1, r9
 800b2be:	4638      	mov	r0, r7
 800b2c0:	47c0      	blx	r8
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	d0e6      	beq.n	800b294 <_printf_common+0xa8>
 800b2c6:	3601      	adds	r6, #1
 800b2c8:	e7d9      	b.n	800b27e <_printf_common+0x92>
	...

0800b2cc <_printf_i>:
 800b2cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d0:	460c      	mov	r4, r1
 800b2d2:	7e27      	ldrb	r7, [r4, #24]
 800b2d4:	4691      	mov	r9, r2
 800b2d6:	2f78      	cmp	r7, #120	; 0x78
 800b2d8:	4680      	mov	r8, r0
 800b2da:	469a      	mov	sl, r3
 800b2dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b2de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2e2:	d807      	bhi.n	800b2f4 <_printf_i+0x28>
 800b2e4:	2f62      	cmp	r7, #98	; 0x62
 800b2e6:	d80a      	bhi.n	800b2fe <_printf_i+0x32>
 800b2e8:	2f00      	cmp	r7, #0
 800b2ea:	f000 80d9 	beq.w	800b4a0 <_printf_i+0x1d4>
 800b2ee:	2f58      	cmp	r7, #88	; 0x58
 800b2f0:	f000 80a4 	beq.w	800b43c <_printf_i+0x170>
 800b2f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b2f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2fc:	e03a      	b.n	800b374 <_printf_i+0xa8>
 800b2fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b302:	2b15      	cmp	r3, #21
 800b304:	d8f6      	bhi.n	800b2f4 <_printf_i+0x28>
 800b306:	a001      	add	r0, pc, #4	; (adr r0, 800b30c <_printf_i+0x40>)
 800b308:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b30c:	0800b365 	.word	0x0800b365
 800b310:	0800b379 	.word	0x0800b379
 800b314:	0800b2f5 	.word	0x0800b2f5
 800b318:	0800b2f5 	.word	0x0800b2f5
 800b31c:	0800b2f5 	.word	0x0800b2f5
 800b320:	0800b2f5 	.word	0x0800b2f5
 800b324:	0800b379 	.word	0x0800b379
 800b328:	0800b2f5 	.word	0x0800b2f5
 800b32c:	0800b2f5 	.word	0x0800b2f5
 800b330:	0800b2f5 	.word	0x0800b2f5
 800b334:	0800b2f5 	.word	0x0800b2f5
 800b338:	0800b487 	.word	0x0800b487
 800b33c:	0800b3a9 	.word	0x0800b3a9
 800b340:	0800b469 	.word	0x0800b469
 800b344:	0800b2f5 	.word	0x0800b2f5
 800b348:	0800b2f5 	.word	0x0800b2f5
 800b34c:	0800b4a9 	.word	0x0800b4a9
 800b350:	0800b2f5 	.word	0x0800b2f5
 800b354:	0800b3a9 	.word	0x0800b3a9
 800b358:	0800b2f5 	.word	0x0800b2f5
 800b35c:	0800b2f5 	.word	0x0800b2f5
 800b360:	0800b471 	.word	0x0800b471
 800b364:	680b      	ldr	r3, [r1, #0]
 800b366:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b36a:	1d1a      	adds	r2, r3, #4
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	600a      	str	r2, [r1, #0]
 800b370:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b374:	2301      	movs	r3, #1
 800b376:	e0a4      	b.n	800b4c2 <_printf_i+0x1f6>
 800b378:	6825      	ldr	r5, [r4, #0]
 800b37a:	6808      	ldr	r0, [r1, #0]
 800b37c:	062e      	lsls	r6, r5, #24
 800b37e:	f100 0304 	add.w	r3, r0, #4
 800b382:	d50a      	bpl.n	800b39a <_printf_i+0xce>
 800b384:	6805      	ldr	r5, [r0, #0]
 800b386:	600b      	str	r3, [r1, #0]
 800b388:	2d00      	cmp	r5, #0
 800b38a:	da03      	bge.n	800b394 <_printf_i+0xc8>
 800b38c:	232d      	movs	r3, #45	; 0x2d
 800b38e:	426d      	negs	r5, r5
 800b390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b394:	230a      	movs	r3, #10
 800b396:	485e      	ldr	r0, [pc, #376]	; (800b510 <_printf_i+0x244>)
 800b398:	e019      	b.n	800b3ce <_printf_i+0x102>
 800b39a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b39e:	6805      	ldr	r5, [r0, #0]
 800b3a0:	600b      	str	r3, [r1, #0]
 800b3a2:	bf18      	it	ne
 800b3a4:	b22d      	sxthne	r5, r5
 800b3a6:	e7ef      	b.n	800b388 <_printf_i+0xbc>
 800b3a8:	680b      	ldr	r3, [r1, #0]
 800b3aa:	6825      	ldr	r5, [r4, #0]
 800b3ac:	1d18      	adds	r0, r3, #4
 800b3ae:	6008      	str	r0, [r1, #0]
 800b3b0:	0628      	lsls	r0, r5, #24
 800b3b2:	d501      	bpl.n	800b3b8 <_printf_i+0xec>
 800b3b4:	681d      	ldr	r5, [r3, #0]
 800b3b6:	e002      	b.n	800b3be <_printf_i+0xf2>
 800b3b8:	0669      	lsls	r1, r5, #25
 800b3ba:	d5fb      	bpl.n	800b3b4 <_printf_i+0xe8>
 800b3bc:	881d      	ldrh	r5, [r3, #0]
 800b3be:	2f6f      	cmp	r7, #111	; 0x6f
 800b3c0:	bf0c      	ite	eq
 800b3c2:	2308      	moveq	r3, #8
 800b3c4:	230a      	movne	r3, #10
 800b3c6:	4852      	ldr	r0, [pc, #328]	; (800b510 <_printf_i+0x244>)
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b3ce:	6866      	ldr	r6, [r4, #4]
 800b3d0:	2e00      	cmp	r6, #0
 800b3d2:	bfa8      	it	ge
 800b3d4:	6821      	ldrge	r1, [r4, #0]
 800b3d6:	60a6      	str	r6, [r4, #8]
 800b3d8:	bfa4      	itt	ge
 800b3da:	f021 0104 	bicge.w	r1, r1, #4
 800b3de:	6021      	strge	r1, [r4, #0]
 800b3e0:	b90d      	cbnz	r5, 800b3e6 <_printf_i+0x11a>
 800b3e2:	2e00      	cmp	r6, #0
 800b3e4:	d04d      	beq.n	800b482 <_printf_i+0x1b6>
 800b3e6:	4616      	mov	r6, r2
 800b3e8:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3ec:	fb03 5711 	mls	r7, r3, r1, r5
 800b3f0:	5dc7      	ldrb	r7, [r0, r7]
 800b3f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3f6:	462f      	mov	r7, r5
 800b3f8:	42bb      	cmp	r3, r7
 800b3fa:	460d      	mov	r5, r1
 800b3fc:	d9f4      	bls.n	800b3e8 <_printf_i+0x11c>
 800b3fe:	2b08      	cmp	r3, #8
 800b400:	d10b      	bne.n	800b41a <_printf_i+0x14e>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	07df      	lsls	r7, r3, #31
 800b406:	d508      	bpl.n	800b41a <_printf_i+0x14e>
 800b408:	6923      	ldr	r3, [r4, #16]
 800b40a:	6861      	ldr	r1, [r4, #4]
 800b40c:	4299      	cmp	r1, r3
 800b40e:	bfde      	ittt	le
 800b410:	2330      	movle	r3, #48	; 0x30
 800b412:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b416:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b41a:	1b92      	subs	r2, r2, r6
 800b41c:	6122      	str	r2, [r4, #16]
 800b41e:	464b      	mov	r3, r9
 800b420:	4621      	mov	r1, r4
 800b422:	4640      	mov	r0, r8
 800b424:	f8cd a000 	str.w	sl, [sp]
 800b428:	aa03      	add	r2, sp, #12
 800b42a:	f7ff fedf 	bl	800b1ec <_printf_common>
 800b42e:	3001      	adds	r0, #1
 800b430:	d14c      	bne.n	800b4cc <_printf_i+0x200>
 800b432:	f04f 30ff 	mov.w	r0, #4294967295
 800b436:	b004      	add	sp, #16
 800b438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b43c:	4834      	ldr	r0, [pc, #208]	; (800b510 <_printf_i+0x244>)
 800b43e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b442:	680e      	ldr	r6, [r1, #0]
 800b444:	6823      	ldr	r3, [r4, #0]
 800b446:	f856 5b04 	ldr.w	r5, [r6], #4
 800b44a:	061f      	lsls	r7, r3, #24
 800b44c:	600e      	str	r6, [r1, #0]
 800b44e:	d514      	bpl.n	800b47a <_printf_i+0x1ae>
 800b450:	07d9      	lsls	r1, r3, #31
 800b452:	bf44      	itt	mi
 800b454:	f043 0320 	orrmi.w	r3, r3, #32
 800b458:	6023      	strmi	r3, [r4, #0]
 800b45a:	b91d      	cbnz	r5, 800b464 <_printf_i+0x198>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	f023 0320 	bic.w	r3, r3, #32
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	2310      	movs	r3, #16
 800b466:	e7af      	b.n	800b3c8 <_printf_i+0xfc>
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	f043 0320 	orr.w	r3, r3, #32
 800b46e:	6023      	str	r3, [r4, #0]
 800b470:	2378      	movs	r3, #120	; 0x78
 800b472:	4828      	ldr	r0, [pc, #160]	; (800b514 <_printf_i+0x248>)
 800b474:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b478:	e7e3      	b.n	800b442 <_printf_i+0x176>
 800b47a:	065e      	lsls	r6, r3, #25
 800b47c:	bf48      	it	mi
 800b47e:	b2ad      	uxthmi	r5, r5
 800b480:	e7e6      	b.n	800b450 <_printf_i+0x184>
 800b482:	4616      	mov	r6, r2
 800b484:	e7bb      	b.n	800b3fe <_printf_i+0x132>
 800b486:	680b      	ldr	r3, [r1, #0]
 800b488:	6826      	ldr	r6, [r4, #0]
 800b48a:	1d1d      	adds	r5, r3, #4
 800b48c:	6960      	ldr	r0, [r4, #20]
 800b48e:	600d      	str	r5, [r1, #0]
 800b490:	0635      	lsls	r5, r6, #24
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	d501      	bpl.n	800b49a <_printf_i+0x1ce>
 800b496:	6018      	str	r0, [r3, #0]
 800b498:	e002      	b.n	800b4a0 <_printf_i+0x1d4>
 800b49a:	0671      	lsls	r1, r6, #25
 800b49c:	d5fb      	bpl.n	800b496 <_printf_i+0x1ca>
 800b49e:	8018      	strh	r0, [r3, #0]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	4616      	mov	r6, r2
 800b4a4:	6123      	str	r3, [r4, #16]
 800b4a6:	e7ba      	b.n	800b41e <_printf_i+0x152>
 800b4a8:	680b      	ldr	r3, [r1, #0]
 800b4aa:	1d1a      	adds	r2, r3, #4
 800b4ac:	600a      	str	r2, [r1, #0]
 800b4ae:	681e      	ldr	r6, [r3, #0]
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	6862      	ldr	r2, [r4, #4]
 800b4b6:	f000 f8c9 	bl	800b64c <memchr>
 800b4ba:	b108      	cbz	r0, 800b4c0 <_printf_i+0x1f4>
 800b4bc:	1b80      	subs	r0, r0, r6
 800b4be:	6060      	str	r0, [r4, #4]
 800b4c0:	6863      	ldr	r3, [r4, #4]
 800b4c2:	6123      	str	r3, [r4, #16]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ca:	e7a8      	b.n	800b41e <_printf_i+0x152>
 800b4cc:	4632      	mov	r2, r6
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	6923      	ldr	r3, [r4, #16]
 800b4d4:	47d0      	blx	sl
 800b4d6:	3001      	adds	r0, #1
 800b4d8:	d0ab      	beq.n	800b432 <_printf_i+0x166>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	079b      	lsls	r3, r3, #30
 800b4de:	d413      	bmi.n	800b508 <_printf_i+0x23c>
 800b4e0:	68e0      	ldr	r0, [r4, #12]
 800b4e2:	9b03      	ldr	r3, [sp, #12]
 800b4e4:	4298      	cmp	r0, r3
 800b4e6:	bfb8      	it	lt
 800b4e8:	4618      	movlt	r0, r3
 800b4ea:	e7a4      	b.n	800b436 <_printf_i+0x16a>
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	4632      	mov	r2, r6
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	4640      	mov	r0, r8
 800b4f4:	47d0      	blx	sl
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	d09b      	beq.n	800b432 <_printf_i+0x166>
 800b4fa:	3501      	adds	r5, #1
 800b4fc:	68e3      	ldr	r3, [r4, #12]
 800b4fe:	9903      	ldr	r1, [sp, #12]
 800b500:	1a5b      	subs	r3, r3, r1
 800b502:	42ab      	cmp	r3, r5
 800b504:	dcf2      	bgt.n	800b4ec <_printf_i+0x220>
 800b506:	e7eb      	b.n	800b4e0 <_printf_i+0x214>
 800b508:	2500      	movs	r5, #0
 800b50a:	f104 0619 	add.w	r6, r4, #25
 800b50e:	e7f5      	b.n	800b4fc <_printf_i+0x230>
 800b510:	0800c77d 	.word	0x0800c77d
 800b514:	0800c78e 	.word	0x0800c78e

0800b518 <__sread>:
 800b518:	b510      	push	{r4, lr}
 800b51a:	460c      	mov	r4, r1
 800b51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b520:	f000 f8a2 	bl	800b668 <_read_r>
 800b524:	2800      	cmp	r0, #0
 800b526:	bfab      	itete	ge
 800b528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b52a:	89a3      	ldrhlt	r3, [r4, #12]
 800b52c:	181b      	addge	r3, r3, r0
 800b52e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b532:	bfac      	ite	ge
 800b534:	6563      	strge	r3, [r4, #84]	; 0x54
 800b536:	81a3      	strhlt	r3, [r4, #12]
 800b538:	bd10      	pop	{r4, pc}

0800b53a <__swrite>:
 800b53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b53e:	461f      	mov	r7, r3
 800b540:	898b      	ldrh	r3, [r1, #12]
 800b542:	4605      	mov	r5, r0
 800b544:	05db      	lsls	r3, r3, #23
 800b546:	460c      	mov	r4, r1
 800b548:	4616      	mov	r6, r2
 800b54a:	d505      	bpl.n	800b558 <__swrite+0x1e>
 800b54c:	2302      	movs	r3, #2
 800b54e:	2200      	movs	r2, #0
 800b550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b554:	f000 f868 	bl	800b628 <_lseek_r>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	4632      	mov	r2, r6
 800b55c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b560:	81a3      	strh	r3, [r4, #12]
 800b562:	4628      	mov	r0, r5
 800b564:	463b      	mov	r3, r7
 800b566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b56e:	f000 b817 	b.w	800b5a0 <_write_r>

0800b572 <__sseek>:
 800b572:	b510      	push	{r4, lr}
 800b574:	460c      	mov	r4, r1
 800b576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b57a:	f000 f855 	bl	800b628 <_lseek_r>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	bf15      	itete	ne
 800b584:	6560      	strne	r0, [r4, #84]	; 0x54
 800b586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b58a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b58e:	81a3      	strheq	r3, [r4, #12]
 800b590:	bf18      	it	ne
 800b592:	81a3      	strhne	r3, [r4, #12]
 800b594:	bd10      	pop	{r4, pc}

0800b596 <__sclose>:
 800b596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59a:	f000 b813 	b.w	800b5c4 <_close_r>
	...

0800b5a0 <_write_r>:
 800b5a0:	b538      	push	{r3, r4, r5, lr}
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	4611      	mov	r1, r2
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	4d05      	ldr	r5, [pc, #20]	; (800b5c0 <_write_r+0x20>)
 800b5ac:	602a      	str	r2, [r5, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	f7f6 fc16 	bl	8001de0 <_write>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_write_r+0x1e>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_write_r+0x1e>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	2000097c 	.word	0x2000097c

0800b5c4 <_close_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	4d05      	ldr	r5, [pc, #20]	; (800b5e0 <_close_r+0x1c>)
 800b5ca:	4604      	mov	r4, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	602b      	str	r3, [r5, #0]
 800b5d0:	f7f6 fc30 	bl	8001e34 <_close>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_close_r+0x1a>
 800b5d8:	682b      	ldr	r3, [r5, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_close_r+0x1a>
 800b5dc:	6023      	str	r3, [r4, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	2000097c 	.word	0x2000097c

0800b5e4 <_fstat_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	4d06      	ldr	r5, [pc, #24]	; (800b604 <_fstat_r+0x20>)
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	602b      	str	r3, [r5, #0]
 800b5f2:	f7f6 fc2a 	bl	8001e4a <_fstat>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d102      	bne.n	800b600 <_fstat_r+0x1c>
 800b5fa:	682b      	ldr	r3, [r5, #0]
 800b5fc:	b103      	cbz	r3, 800b600 <_fstat_r+0x1c>
 800b5fe:	6023      	str	r3, [r4, #0]
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	bf00      	nop
 800b604:	2000097c 	.word	0x2000097c

0800b608 <_isatty_r>:
 800b608:	b538      	push	{r3, r4, r5, lr}
 800b60a:	2300      	movs	r3, #0
 800b60c:	4d05      	ldr	r5, [pc, #20]	; (800b624 <_isatty_r+0x1c>)
 800b60e:	4604      	mov	r4, r0
 800b610:	4608      	mov	r0, r1
 800b612:	602b      	str	r3, [r5, #0]
 800b614:	f7f6 fc28 	bl	8001e68 <_isatty>
 800b618:	1c43      	adds	r3, r0, #1
 800b61a:	d102      	bne.n	800b622 <_isatty_r+0x1a>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	b103      	cbz	r3, 800b622 <_isatty_r+0x1a>
 800b620:	6023      	str	r3, [r4, #0]
 800b622:	bd38      	pop	{r3, r4, r5, pc}
 800b624:	2000097c 	.word	0x2000097c

0800b628 <_lseek_r>:
 800b628:	b538      	push	{r3, r4, r5, lr}
 800b62a:	4604      	mov	r4, r0
 800b62c:	4608      	mov	r0, r1
 800b62e:	4611      	mov	r1, r2
 800b630:	2200      	movs	r2, #0
 800b632:	4d05      	ldr	r5, [pc, #20]	; (800b648 <_lseek_r+0x20>)
 800b634:	602a      	str	r2, [r5, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	f7f6 fc20 	bl	8001e7c <_lseek>
 800b63c:	1c43      	adds	r3, r0, #1
 800b63e:	d102      	bne.n	800b646 <_lseek_r+0x1e>
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	b103      	cbz	r3, 800b646 <_lseek_r+0x1e>
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	bd38      	pop	{r3, r4, r5, pc}
 800b648:	2000097c 	.word	0x2000097c

0800b64c <memchr>:
 800b64c:	4603      	mov	r3, r0
 800b64e:	b510      	push	{r4, lr}
 800b650:	b2c9      	uxtb	r1, r1
 800b652:	4402      	add	r2, r0
 800b654:	4293      	cmp	r3, r2
 800b656:	4618      	mov	r0, r3
 800b658:	d101      	bne.n	800b65e <memchr+0x12>
 800b65a:	2000      	movs	r0, #0
 800b65c:	e003      	b.n	800b666 <memchr+0x1a>
 800b65e:	7804      	ldrb	r4, [r0, #0]
 800b660:	3301      	adds	r3, #1
 800b662:	428c      	cmp	r4, r1
 800b664:	d1f6      	bne.n	800b654 <memchr+0x8>
 800b666:	bd10      	pop	{r4, pc}

0800b668 <_read_r>:
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	4611      	mov	r1, r2
 800b670:	2200      	movs	r2, #0
 800b672:	4d05      	ldr	r5, [pc, #20]	; (800b688 <_read_r+0x20>)
 800b674:	602a      	str	r2, [r5, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	f7f6 fb94 	bl	8001da4 <_read>
 800b67c:	1c43      	adds	r3, r0, #1
 800b67e:	d102      	bne.n	800b686 <_read_r+0x1e>
 800b680:	682b      	ldr	r3, [r5, #0]
 800b682:	b103      	cbz	r3, 800b686 <_read_r+0x1e>
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	bd38      	pop	{r3, r4, r5, pc}
 800b688:	2000097c 	.word	0x2000097c

0800b68c <_init>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr

0800b698 <_fini>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	bf00      	nop
 800b69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b69e:	bc08      	pop	{r3}
 800b6a0:	469e      	mov	lr, r3
 800b6a2:	4770      	bx	lr
